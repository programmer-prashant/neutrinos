{"version":3,"file":"n-HTTP.service.d.ts","sources":["n-HTTP.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Injector } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { NHTTPLoaderService } from './n-HTTPLoader.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { NTokenService } from './n-token.service';\nexport declare class NHttpService {\n    private nHTTPLoader;\n    private inj;\n    private nLocalStorageService;\n    private nTokenService;\n    timeout: number;\n    systemService: any;\n    nSessionStorage: any;\n    appProperties: any;\n    isRefreshingToken: boolean;\n    nPubSubService: any;\n    tokenSubject: BehaviorSubject<string>;\n    constructor(nHTTPLoader: NHTTPLoaderService, inj: Injector, nLocalStorageService: NLocalStorageService, nTokenService: NTokenService);\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n    updateToken(error: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler): any;\n    refreshToken(): Observable<Object>;\n    /**\n     * Request options.\n     * @param options\n     * @returns HttpRequest\n     */\n    private requestOptions;\n    /**\n    * Default options.\n    * @param options\n    * @returns HttpHeadedrs\n    */\n    private addDefaultHeaders;\n    /**\n     * Build API url.\n     * @param url\n     * @returns string\n     */\n    private getFullUrl;\n    /**\n     * Request interceptor.\n     */\n    private requestInterceptor;\n    /**\n     * Response interceptor.\n     */\n    private responseInterceptor;\n    /**\n      * Error handler.\n      * @param error\n      * @param caught\n      * @returns ErrorObservable\n      */\n    private onCatch;\n    /**\n     * onSubscribeError\n     * @param error\n     */\n    private onSubscribeError;\n    /**\n     * onFinally\n     */\n    private onFinally;\n    private onCatchError;\n}\n"]}