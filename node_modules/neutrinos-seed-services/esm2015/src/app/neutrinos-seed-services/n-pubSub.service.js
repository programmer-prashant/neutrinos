import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
const ServiceName = "PubSub Service";
export class NPubSubService {
    constructor() {
        this.events = {};
    }
    $sub(event, callback, error, complete) {
        if (!event) {
            throw new Error(`[${ServiceName}] => Subscription method must get event name.`);
        }
        if (this.events[event] === undefined) {
            this.events[event] = new Subject();
        }
        if (typeof callback !== 'function') {
            return this.events[event].asObservable();
        }
        else {
            return this.events[event].asObservable().subscribe(callback, error, complete);
        }
    }
    $pub(event, eventObject) {
        if (!event) {
            throw new Error(`[${ServiceName}] => Publish method must get event name.`);
        }
        else if (!this.events[event]) {
            return;
        }
        this.events[event].next(eventObject);
    }
}
NPubSubService.decorators = [
    { type: Injectable }
];
NPubSubService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1wdWJTdWIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9uZXV0cmlub3MvRG9jdW1lbnRzL25ldXRyaW5vcy1tb2R1bGVzLWFuZ3VsYXIvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tcHViU3ViLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUE0QixNQUFNLE1BQU0sQ0FBQztBQUV6RCxNQUFNLFdBQVcsR0FBVyxnQkFBZ0IsQ0FBQztBQUc3QyxNQUFNLE9BQU8sY0FBYztJQUd6QjtRQUZRLFdBQU0sR0FBRyxFQUFFLENBQUM7SUFFSixDQUFDO0lBTVYsSUFBSSxDQUFDLEtBQWEsRUFBRSxRQUErQixFQUFFLEtBQTRCLEVBQUUsUUFBcUI7UUFDM0csSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxXQUFXLCtDQUErQyxDQUFDLENBQUM7U0FDbkY7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztTQUMzQztRQUVELElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFO1lBQ2hDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUM1QzthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ2pGO0lBQ0wsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFhLEVBQUUsV0FBaUI7UUFDeEMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxXQUFXLDBDQUEwQyxDQUFDLENBQUM7U0FDOUU7YUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM1QixPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7WUFqQ0YsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5jb25zdCBTZXJ2aWNlTmFtZTogc3RyaW5nID0gXCJQdWJTdWIgU2VydmljZVwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTlB1YlN1YlNlcnZpY2Uge1xuICBwcml2YXRlIGV2ZW50cyA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PjtcbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xuICBwdWJsaWMgJHN1YihldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQsIGVycm9yOiAoZXJyb3I6IGFueSkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBlcnJvcjogKGVycm9yOiBhbnkpID0+IHZvaWQsIGNvbXBsZXRlOiAoKSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xuICBwdWJsaWMgJHN1YihldmVudDogc3RyaW5nLCBjYWxsYmFjaz86ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBlcnJvcj86IChlcnJvcjogYW55KSA9PiB2b2lkLCBjb21wbGV0ZT86ICgpID0+IHZvaWQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske1NlcnZpY2VOYW1lfV0gPT4gU3Vic2NyaXB0aW9uIG1ldGhvZCBtdXN0IGdldCBldmVudCBuYW1lLmApO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHNbZXZlbnRdLmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHNbZXZlbnRdLmFzT2JzZXJ2YWJsZSgpLnN1YnNjcmliZShjYWxsYmFjaywgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgIH1cbiAgfVxuXG4gIHB1YmxpYyAkcHViKGV2ZW50OiBzdHJpbmcsIGV2ZW50T2JqZWN0PzogYW55KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbJHtTZXJ2aWNlTmFtZX1dID0+IFB1Ymxpc2ggbWV0aG9kIG11c3QgZ2V0IGV2ZW50IG5hbWUuYCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLmV2ZW50c1tldmVudF0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmV2ZW50c1tldmVudF0ubmV4dChldmVudE9iamVjdCk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHViU3ViU2VydmljZSB7XG4gICRwdWIoZXZlbnQ6IHN0cmluZywgZXZlbnRPYmplY3Q/OiBhbnkpO1xuICAkc3ViKGV2ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT47XG4gICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xuICAkc3ViKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCwgZXJyb3I6IChlcnJvcjogYW55KSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xuICAkc3ViKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCwgZXJyb3I6IChlcnJvcjogYW55KSA9PiB2b2lkLCBjb21wbGV0ZTogKCkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbn1cblxuaW50ZXJmYWNlIEkkc3ViIHtcbiAgKGV2ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT47XG4gIChldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XG4gIChldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQsIGVycm9yOiAoZXJyb3I6IGFueSkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbiAgKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCwgZXJyb3I6IChlcnJvcjogYW55KSA9PiB2b2lkLCBjb21wbGV0ZTogKCkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbn1cbiJdfQ==