import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
// import { NSnackbarService } from './n-snackbar.service';
import { NLogoutService } from './n-logout.service';
import { NPubSubService } from './n-pubSub.service';
// import { NSnackbarService } from './snackbar/service/snackbar.service';
export class NHTTPLoaderService {
    constructor(nLogoutService, nPubSubService) {
        this.nLogoutService = nLogoutService;
        this.nPubSubService = nPubSubService;
        this.pendingRequests = 0;
        this.showLoading = false;
        this._isHTTPRequestInProgress = new Subject();
        this._isHTTPRequestInProgress$ = this._isHTTPRequestInProgress.asObservable();
    }
    isHTTPRequestInProgress(bool) {
        if (bool) {
            this.pendingRequests++;
            if (!this.showLoading) {
                this._isHTTPRequestInProgress.next(bool);
            }
            this.showLoading = true;
        }
        else {
            this.pendingRequests--;
            if (this.pendingRequests <= 0) {
                if (this.showLoading) {
                    this._isHTTPRequestInProgress.next(bool);
                }
                this.showLoading = false;
            }
        }
    }
    alertError(error) {
        if (error.status < 200 || error.status > 500) {
            if (error.status === 0) {
                this.nPubSubService.$pub('openSnackBar', 'Connectivity issue');
            }
            else {
                this.nPubSubService.$pub('openSnackBar', 'Response failure');
            }
        }
        else if (error.status === 401) {
            this.nLogoutService.logout();
            if (error.error) {
                this.nPubSubService.$pub('openSnackBar', error.error);
            }
            else {
                this.nPubSubService.$pub('openSnackBar', error);
            }
        }
        else if (error.error) {
            if (error.error instanceof Object) {
                this.nPubSubService.$pub('openSnackBar', error.error.message);
            }
            else {
                this.nPubSubService.$pub('openSnackBar', error.error);
            }
        }
        else {
            this.nPubSubService.$pub('openSnackBar', 'Response failure');
        }
    }
}
NHTTPLoaderService.decorators = [
    { type: Injectable }
];
NHTTPLoaderService.ctorParameters = () => [
    { type: NLogoutService },
    { type: NPubSubService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1IVFRQTG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvbmV1dHJpbm9zL0RvY3VtZW50cy9uZXV0cmlub3MtbW9kdWxlcy1hbmd1bGFyL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLUhUVFBMb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQzdDLDJEQUEyRDtBQUMzRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELDBFQUEwRTtBQUcxRSxNQUFNLE9BQU8sa0JBQWtCO0lBTTdCLFlBQW9CLGNBQThCLEVBQVUsY0FBOEI7UUFBdEUsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQVUsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBTG5GLG9CQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ25CLDZCQUF3QixHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFDMUQsOEJBQXlCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFlBQVksRUFBRSxDQUFDO0lBSXpFLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxJQUFJO1FBQzFCLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNyQixJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFDO1lBQ0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDekI7YUFBTTtZQUNMLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN2QixJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxFQUFFO2dCQUM3QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ3BCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzFDO2dCQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO2FBQzFCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQUs7UUFDZCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQzVDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO2FBQ2hFO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO2FBQzdEO1NBQ0Y7YUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO1lBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDN0IsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNmLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDdEQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFBO2FBQ2hEO1NBQ0Y7YUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDdEIsSUFBSSxLQUFLLENBQUMsS0FBSyxZQUFZLE1BQU0sRUFBRTtnQkFDakMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7YUFDOUQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTthQUN0RDtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtTQUM3RDtJQUNILENBQUM7OztZQXBERixVQUFVOzs7WUFMRixjQUFjO1lBRWQsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgLCAgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuLy8gaW1wb3J0IHsgTlNuYWNrYmFyU2VydmljZSB9IGZyb20gJy4vbi1zbmFja2Jhci5zZXJ2aWNlJztcbmltcG9ydCB7IE5Mb2dvdXRTZXJ2aWNlIH0gZnJvbSAnLi9uLWxvZ291dC5zZXJ2aWNlJztcbmltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IE5QdWJTdWJTZXJ2aWNlIH0gZnJvbSAnLi9uLXB1YlN1Yi5zZXJ2aWNlJztcbi8vIGltcG9ydCB7IE5TbmFja2JhclNlcnZpY2UgfSBmcm9tICcuL3NuYWNrYmFyL3NlcnZpY2Uvc25hY2tiYXIuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOSFRUUExvYWRlclNlcnZpY2Uge1xuICBwdWJsaWMgcGVuZGluZ1JlcXVlc3RzID0gMDtcbiAgcHVibGljIHNob3dMb2FkaW5nID0gZmFsc2U7XG4gIHByaXZhdGUgX2lzSFRUUFJlcXVlc3RJblByb2dyZXNzID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcbiAgX2lzSFRUUFJlcXVlc3RJblByb2dyZXNzJCA9IHRoaXMuX2lzSFRUUFJlcXVlc3RJblByb2dyZXNzLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbkxvZ291dFNlcnZpY2U6IE5Mb2dvdXRTZXJ2aWNlLCBwcml2YXRlIG5QdWJTdWJTZXJ2aWNlOiBOUHViU3ViU2VydmljZSkge1xuXG4gIH1cblxuICBpc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcyhib29sKSB7XG4gICAgaWYgKGJvb2wpIHtcbiAgICAgIHRoaXMucGVuZGluZ1JlcXVlc3RzKys7XG4gICAgICBpZiAoIXRoaXMuc2hvd0xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5faXNIVFRQUmVxdWVzdEluUHJvZ3Jlc3MubmV4dChib29sKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2hvd0xvYWRpbmcgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0cy0tO1xuICAgICAgaWYgKHRoaXMucGVuZGluZ1JlcXVlc3RzIDw9IDApIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvd0xvYWRpbmcpIHtcbiAgICAgICAgICB0aGlzLl9pc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcy5uZXh0KGJvb2wpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2hvd0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhbGVydEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLnN0YXR1cyA8IDIwMCB8fCBlcnJvci5zdGF0dXMgPiA1MDApIHtcbiAgICAgIGlmIChlcnJvci5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgdGhpcy5uUHViU3ViU2VydmljZS4kcHViKCdvcGVuU25hY2tCYXInLCAnQ29ubmVjdGl2aXR5IGlzc3VlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsICdSZXNwb25zZSBmYWlsdXJlJylcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICB0aGlzLm5Mb2dvdXRTZXJ2aWNlLmxvZ291dCgpO1xuICAgICAgaWYgKGVycm9yLmVycm9yKSB7XG4gICAgICAgIHRoaXMublB1YlN1YlNlcnZpY2UuJHB1Yignb3BlblNuYWNrQmFyJywgZXJyb3IuZXJyb3IpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsIGVycm9yKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXJyb3IuZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvci5lcnJvciBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsIGVycm9yLmVycm9yLm1lc3NhZ2UpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsIGVycm9yLmVycm9yKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsICdSZXNwb25zZSBmYWlsdXJlJylcbiAgICB9XG4gIH1cblxufVxuXG5cbiJdfQ==