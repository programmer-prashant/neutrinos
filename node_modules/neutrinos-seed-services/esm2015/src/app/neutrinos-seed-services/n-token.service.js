import { NSessionStorageService } from './n-sessionStorage.service';
import { NLocalStorageService } from './n-localStorage.service';
import { Injectable } from '@angular/core';
export class NTokenService {
    // nLocalStorageService: NLocalStorageService;
    constructor(nLocalStorageService) {
        this.nLocalStorageService = nLocalStorageService;
        this.nSessionStorage = new NSessionStorageService();
        // this.nLocalStorageService = new NLocalStorageService();
    }
    updateTokens(tokensObj, isRemember) {
        let userObj = this.decodeToken(tokensObj['accessToken']);
        this.nSessionStorage.setValue('accessToken', tokensObj['accessToken']);
        this.nSessionStorage.setValue('refreshToken', tokensObj['refreshToken']);
        this.nSessionStorage.setValue('userObj', JSON.stringify(userObj));
        if ((isRemember || this.nLocalStorageService.getValue('accessToken'))) {
            this.nLocalStorageService.setValue('accessToken', tokensObj['accessToken']);
            this.nLocalStorageService.setValue('refreshToken', tokensObj['refreshToken']);
            this.nLocalStorageService.setValue('userObj', JSON.stringify(userObj));
        }
    }
    updateSessionStorage() {
        this.updateTokens(this.nLocalStorageService.getStorage(), true);
    }
    urlBase64Decode(str) {
        let output = str.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0: {
                break;
            }
            case 2: {
                output += '==';
                break;
            }
            case 3: {
                output += '=';
                break;
            }
            default: {
                throw 'Illegal base64url string!';
            }
        }
        return this.b64DecodeUnicode(output);
    }
    // credits for decoder goes to https://github.com/atk
    b64decode(str) {
        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        let output = '';
        str = String(str).replace(/=+$/, '');
        if (str.length % 4 == 1) {
            throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
        }
        for (
        // initialize result and counters
        let bc = 0, bs, buffer, idx = 0; 
        // get next character
        buffer = str.charAt(idx++); 
        // character found in table? initialize bit storage and add its ascii value;
        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
            // and if not first of each 4 characters,
            // convert the first 8 bits to one ascii character
            bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
            // try to find character in table (0-63, not found => -1)
            buffer = chars.indexOf(buffer);
        }
        return output;
    }
    // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem
    b64DecodeUnicode(str) {
        return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), (c) => {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
    }
    decodeToken(token) {
        let parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        let decoded = this.urlBase64Decode(parts[1]);
        if (!decoded) {
            throw new Error('Cannot decode the token');
        }
        return JSON.parse(decoded);
    }
    getTokenExpirationDate(token) {
        let decoded;
        decoded = this.decodeToken(token);
        if (!decoded.hasOwnProperty('exp')) {
            return null;
        }
        let date = new Date(0); // The 0 here is the key, which sets the date to the epoch
        date.setUTCSeconds(decoded.exp);
        return date;
    }
    isTokenExpired(token, offsetSeconds) {
        let date = this.getTokenExpirationDate(token);
        offsetSeconds = offsetSeconds || 0;
        if (date == null) {
            return false;
        }
        // Token expired?
        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));
    }
}
NTokenService.decorators = [
    { type: Injectable }
];
NTokenService.ctorParameters = () => [
    { type: NLocalStorageService }
];
//# sourceMappingURL=data:application/json;base64,