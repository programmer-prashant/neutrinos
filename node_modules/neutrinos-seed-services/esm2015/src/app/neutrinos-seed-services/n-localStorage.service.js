import { NSystemService } from './n-system.service';
import { Injectable } from '@angular/core';
import { NgForage, NgForageCache, NgForageConfig, Driver } from 'ngforage';
import { NUtility } from './n-util.service';
export class NLocalStorageService {
    constructor(ngfConfig, ngf, ngfCache) {
        this.ngfConfig = ngfConfig;
        this.ngf = ngf;
        this.ngfCache = ngfCache;
        this.storageCache = {};
    }
    initStorage() {
        return new Promise((resolve, reject) => {
            if (window['cordova']) {
                this.initNgForage();
            }
            this.ngf.iterate((value, key, iteratonNumber) => {
                this.storageCache[key] = value;
            }).then(result => {
                this.checkDeviceId();
                return resolve('iteration is completed');
            }).catch(error => {
                return reject(error);
            });
        });
    }
    getStorage() {
        return this.storageCache;
    }
    setValue(key, value) {
        if (window['cordova']) {
            this.initNgForage();
        }
        this.storageCache[key] = value;
        return this.ngf.setItem(key, value).then(result => {
            return result;
        }, error => {
            console.log(error);
        });
    }
    getValue(key) {
        if (!this.storageCache[key]) {
            return null;
        }
        try {
            const obj = this.storageCache[key];
            return JSON.parse(obj);
        }
        catch (error) {
            return this.storageCache[key];
        }
    }
    remove(key) {
        delete this.storageCache[key];
        if (window['cordova']) {
            this.initNgForage();
        }
        this.ngf.removeItem(key).then(fulfilled => {
            delete this.ngf[key];
        }).catch(error => {
            console.error('Could not remove', key);
        });
    }
    clear() {
        this.storageCache = {};
        this.ngf.clear();
    }
    pluginCheck() {
        if (window['cordova'] && window['NativeStorage']) {
            this.nativeStorageI = window['NativeStorage'];
            // return true;
        }
        // this.initStorage();
    }
    getItemNs(key) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.getItem(key, result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    setItemNs(key, value) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.setItem(key, value, result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    removeItemNs(key) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.remove(key, (result) => {
                    resolve(result);
                }, (error) => {
                    reject(error);
                });
            }
        });
    }
    clearNs() {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.clear(result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    initNgForage() {
        let driverType = window['neutrinos']['environments']['properties']['NGFORAGE_MOBILE_DRIVER'] ? window['neutrinos']['environments']['properties']['NGFORAGE_MOBILE_DRIVER'] : "INDEXED_DB";
        this.ngfConfig.configure({
            name: 'MyApp',
            driver: [
                Driver[driverType],
            ]
        });
    }
    promiseReflect(promise) {
        return promise.then(resolved => { return { v: resolved, status: 'resolved' }; }, error => { return { e: error, status: 'rejected' }; });
    }
    clearLocalStorage() {
        this.remove('userObj');
        this.remove('accessToken');
        this.remove('refreshToken');
        this.remove('registrationId');
    }
    /**
     * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
    */
    checkDeviceId() {
        if (NSystemService.getInstance().checkDevice() === 'browser') {
            this._deviceUUID = this.getValue('uuid');
            if (!this._deviceUUID) {
                this._deviceUUID = new NUtility().generateUUID();
                this.setValue('uuid', this._deviceUUID);
            }
        }
        else {
            window['plugins'].uniqueDeviceID.get((uuid) => {
                this._deviceUUID = uuid;
                this.setValue('uuid', this._deviceUUID);
            });
        }
        return this._deviceUUID;
    }
    get deviceUUID() {
        return this._deviceUUID;
    }
}
NLocalStorageService.decorators = [
    { type: Injectable }
];
NLocalStorageService.ctorParameters = () => [
    { type: NgForageConfig },
    { type: NgForage },
    { type: NgForageCache }
];
//# sourceMappingURL=data:application/json;base64,