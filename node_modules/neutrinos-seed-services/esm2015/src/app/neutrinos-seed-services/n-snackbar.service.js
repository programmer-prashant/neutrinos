import { Injectable } from '@angular/core';
// import { MatSnackBar } from '@angular/material';
import { Subject } from 'rxjs';
import { NSystemService } from './n-system.service';
import { NPubSubService } from './n-pubSub.service';
export class NSnackbarService {
    constructor(nPubSubService) {
        this.nPubSubService = nPubSubService;
        this.snackService = new Subject();
        if (NSystemService.getInstance().getVal('useDefaultExceptionUI')) {
            this.snackBarListner = this.nPubSubService.$sub('openSnackBar', (msg) => {
                this.openSnackBar(msg);
            });
        }
    }
    get() {
        return this.snackService.asObservable();
    }
    add(data) {
        this.snackService.next({
            action: 'add',
            data: data
        });
    }
    remove(id) {
        this.snackService.next({ action: 'remove', id: id });
    }
    clear() {
        this.snackService.next({ action: 'clear' });
    }
    openSnackBar(message, timeout) {
        this.add({
            msg: message,
            timeout: timeout || 5000,
            action: {
                text: 'Close',
                onClick: (snack) => {
                },
            },
            onAdd: (snack) => {
            },
            onRemove: (snack) => {
            }
        });
    }
}
NSnackbarService.decorators = [
    { type: Injectable }
];
NSnackbarService.ctorParameters = () => [
    { type: NPubSubService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zbmFja2Jhci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL25ldXRyaW5vcy9Eb2N1bWVudHMvbmV1dHJpbm9zLW1vZHVsZXMtYW5ndWxhci9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvbi1zbmFja2Jhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsbURBQW1EO0FBQ25ELE9BQU8sRUFBRSxPQUFPLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUlwRCxNQUFNLE9BQU8sZ0JBQWdCO0lBRzNCLFlBQW9CLGNBQThCO1FBQTlCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUQxQyxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFFeEMsSUFBSSxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEVBQUU7WUFDaEUsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDdEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQTtTQUNIO0lBQ0gsQ0FBQztJQUVELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUMsQ0FBQztJQUlELEdBQUcsQ0FBQyxJQUdIO1FBQ0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7WUFDckIsTUFBTSxFQUFFLEtBQUs7WUFDYixJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsRUFBVTtRQUNmLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBUTtRQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ1AsR0FBRyxFQUFFLE9BQU87WUFDWixPQUFPLEVBQUUsT0FBTyxJQUFJLElBQUk7WUFDeEIsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxPQUFPO2dCQUNiLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNuQixDQUFDO2FBQ0Y7WUFDRCxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNqQixDQUFDO1lBQ0QsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDcEIsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQWxERixVQUFVOzs7WUFIRixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLy8gaW1wb3J0IHsgTWF0U25hY2tCYXIgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOU3lzdGVtU2VydmljZSB9IGZyb20gJy4vbi1zeXN0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBOUHViU3ViU2VydmljZSB9IGZyb20gJy4vbi1wdWJTdWIuc2VydmljZSc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5TbmFja2JhclNlcnZpY2Uge1xuICBzbmFja0Jhckxpc3RuZXI7XG4gIHByaXZhdGUgc25hY2tTZXJ2aWNlID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5QdWJTdWJTZXJ2aWNlOiBOUHViU3ViU2VydmljZSkge1xuICAgIGlmIChOU3lzdGVtU2VydmljZS5nZXRJbnN0YW5jZSgpLmdldFZhbCgndXNlRGVmYXVsdEV4Y2VwdGlvblVJJykpIHtcbiAgICAgIHRoaXMuc25hY2tCYXJMaXN0bmVyID0gdGhpcy5uUHViU3ViU2VydmljZS4kc3ViKCdvcGVuU25hY2tCYXInLCAobXNnKSA9PiB7XG4gICAgICAgIHRoaXMub3BlblNuYWNrQmFyKG1zZyk7XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5zbmFja1NlcnZpY2UuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuXG5cbiAgYWRkKGRhdGE6IHtcbiAgICBtc2c6IHN0cmluZywgdGltZW91dD86IG51bWJlciwgYmFja2dyb3VuZD86IHN0cmluZywgY29sb3I/OiBzdHJpbmcsIGN1c3RvbUNsYXNzPzogYW55LFxuICAgIGFjdGlvbj86IHsgdGV4dDogc3RyaW5nLCBvbkNsaWNrPzogRnVuY3Rpb24sIGNvbG9yPzogc3RyaW5nIH0sIG9uQWRkPzogRnVuY3Rpb24sIG9uUmVtb3ZlPzogRnVuY3Rpb25cbiAgfSkge1xuICAgIHRoaXMuc25hY2tTZXJ2aWNlLm5leHQoe1xuICAgICAgYWN0aW9uOiAnYWRkJyxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZShpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5zbmFja1NlcnZpY2UubmV4dCh7IGFjdGlvbjogJ3JlbW92ZScsIGlkOiBpZCB9KTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc25hY2tTZXJ2aWNlLm5leHQoeyBhY3Rpb246ICdjbGVhcicgfSk7XG4gIH1cblxuICBvcGVuU25hY2tCYXIobWVzc2FnZSwgdGltZW91dD8sICkge1xuICAgIHRoaXMuYWRkKHtcbiAgICAgIG1zZzogbWVzc2FnZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXQgfHwgNTAwMCxcbiAgICAgIGFjdGlvbjoge1xuICAgICAgICB0ZXh0OiAnQ2xvc2UnLFxuICAgICAgICBvbkNsaWNrOiAoc25hY2spID0+IHtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBvbkFkZDogKHNuYWNrKSA9PiB7XG4gICAgICB9LFxuICAgICAgb25SZW1vdmU6IChzbmFjaykgPT4ge1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==