import { NgModule, APP_INITIALIZER } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NAuthGuardService } from './n-authGaurd.service';
import { NDataModelService } from './n-dataModel.service';
import { NHttpService } from './n-HTTP.service';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
import { NLocalStorageService } from './n-localStorage.service';
import { NLoginService } from './n-login.service';
import { NLogoutService } from './n-logout.service';
import { NNotificationService } from './n-notification.service';
import { NSnackbarService } from './n-snackbar.service';
import { NPubSubService } from './n-pubSub.service';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NTokenService } from './n-token.service';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { RouterModule } from '@angular/router';
import { InstanceFactory, NgForage, NgForageConfig } from 'ngforage';
import { SnackComponent } from './snackbar/snack/snack.component';
import { SnackbarComponent } from './snackbar/snackbar/snackbar.component';
export function startupServiceFactory(startupService) {
    const res = () => {
        // console.log('module before initstorage call');
        return startupService.initStorage();
    };
    return res;
}
export function NgForageFactory(ngForageConfig) {
    // @ts-ignore
    return new NgForage({}, new InstanceFactory(ngForageConfig));
}
export class NeutrinosSeedServicesModule {
}
NeutrinosSeedServicesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule,
                    RouterModule
                ],
                providers: [
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: NHttpService,
                        multi: true
                    },
                    {
                        // Provider for APP_INITIALIZER
                        provide: APP_INITIALIZER,
                        useFactory: startupServiceFactory,
                        deps: [NLocalStorageService],
                        multi: true
                    },
                    {
                        provide: NgForage,
                        useFactory: NgForageFactory,
                        deps: [
                            NgForageConfig
                        ]
                    },
                    NAuthGuardService,
                    NDataModelService,
                    NHttpService,
                    NHTTPLoaderService,
                    NLocalStorageService,
                    NLoginService,
                    NLogoutService,
                    NNotificationService,
                    NSnackbarService,
                    NPubSubService,
                    NSessionStorageService,
                    NTokenService
                ],
                declarations: [
                    SnackComponent,
                    SnackbarComponent
                ],
                exports: [
                    SnackComponent,
                    SnackbarComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV1dHJpbm9zLXNlZWQtc2VydmljZXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL25ldXRyaW5vcy9Eb2N1bWVudHMvbmV1dHJpbm9zLW1vZHVsZXMtYW5ndWxhci9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFeEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBQ25FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsWUFBWSxFQUFVLE1BQU0saUJBQWlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXJFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUczRSxNQUFNLFVBQVUscUJBQXFCLENBQUMsY0FBb0M7SUFDeEUsTUFBTSxHQUFHLEdBQUcsR0FBRyxFQUFFO1FBQ2YsaURBQWlEO1FBQ2pELE9BQU8sY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRXRDLENBQUMsQ0FBQTtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsY0FBOEI7SUFDN0QsYUFBYTtJQUNiLE9BQU8sSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFFLElBQUksZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFDOUQsQ0FBQztBQW1ERCxNQUFNLE9BQU8sMkJBQTJCOzs7WUFqRHZDLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixnQkFBZ0I7b0JBQ2hCLFlBQVk7aUJBQ2I7Z0JBQ0QsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFFBQVEsRUFBRSxZQUFZO3dCQUN0QixLQUFLLEVBQUUsSUFBSTtxQkFDWjtvQkFDRDt3QkFDRSwrQkFBK0I7d0JBQy9CLE9BQU8sRUFBRSxlQUFlO3dCQUN4QixVQUFVLEVBQUUscUJBQXFCO3dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzt3QkFDNUIsS0FBSyxFQUFFLElBQUk7cUJBQ2Y7b0JBQ0Q7d0JBQ0MsT0FBTyxFQUFFLFFBQVE7d0JBQ2pCLFVBQVUsRUFBRSxlQUFlO3dCQUMzQixJQUFJLEVBQUU7NEJBQ0wsY0FBYzt5QkFDZDtxQkFDRDtvQkFDRSxpQkFBaUI7b0JBQ2pCLGlCQUFpQjtvQkFDakIsWUFBWTtvQkFDWixrQkFBa0I7b0JBQ2xCLG9CQUFvQjtvQkFDcEIsYUFBYTtvQkFDYixjQUFjO29CQUNkLG9CQUFvQjtvQkFDcEIsZ0JBQWdCO29CQUNoQixjQUFjO29CQUNkLHNCQUFzQjtvQkFDdEIsYUFBYTtpQkFDZDtnQkFDRCxZQUFZLEVBQUU7b0JBQ1osY0FBYztvQkFDZCxpQkFBaUI7aUJBQ2xCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxjQUFjO29CQUNkLGlCQUFpQjtpQkFDbEI7YUFFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBBUFBfSU5JVElBTElaRVIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOQXV0aEd1YXJkU2VydmljZSB9IGZyb20gJy4vbi1hdXRoR2F1cmQuc2VydmljZSc7XG5pbXBvcnQgeyBORGF0YU1vZGVsU2VydmljZSB9IGZyb20gJy4vbi1kYXRhTW9kZWwuc2VydmljZSc7XG5pbXBvcnQgeyBOSHR0cFNlcnZpY2UgfSBmcm9tICcuL24tSFRUUC5zZXJ2aWNlJztcbmltcG9ydCB7IE5IVFRQTG9hZGVyU2VydmljZSB9IGZyb20gJy4vbi1IVFRQTG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkxvY2FsU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL24tbG9jYWxTdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkxvZ2luU2VydmljZSB9IGZyb20gJy4vbi1sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5Mb2dvdXRTZXJ2aWNlIH0gZnJvbSAnLi9uLWxvZ291dC5zZXJ2aWNlJztcbmltcG9ydCB7IE5Ob3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9uLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5TbmFja2JhclNlcnZpY2UgfSBmcm9tICcuL24tc25hY2tiYXIuc2VydmljZSc7XG5pbXBvcnQgeyBOU3lzdGVtU2VydmljZSB9IGZyb20gJy4vbi1zeXN0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBOUHViU3ViU2VydmljZSB9IGZyb20gJy4vbi1wdWJTdWIuc2VydmljZSc7XG5pbXBvcnQgeyBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uLXNlc3Npb25TdG9yYWdlLnNlcnZpY2UnXG5pbXBvcnQgeyBOVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi9uLXRva2VuLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSwgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUsIFJvdXRlcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJbnN0YW5jZUZhY3RvcnksIE5nRm9yYWdlLCBOZ0ZvcmFnZUNvbmZpZyB9IGZyb20gJ25nZm9yYWdlJztcblxuaW1wb3J0IHsgU25hY2tDb21wb25lbnQgfSBmcm9tICcuL3NuYWNrYmFyL3NuYWNrL3NuYWNrLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTbmFja2JhckNvbXBvbmVudCB9IGZyb20gJy4vc25hY2tiYXIvc25hY2tiYXIvc25hY2tiYXIuY29tcG9uZW50JztcblxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnR1cFNlcnZpY2VGYWN0b3J5KHN0YXJ0dXBTZXJ2aWNlOiBOTG9jYWxTdG9yYWdlU2VydmljZSkge1xuICBjb25zdCByZXMgPSAoKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coJ21vZHVsZSBiZWZvcmUgaW5pdHN0b3JhZ2UgY2FsbCcpO1xuICAgIHJldHVybiBzdGFydHVwU2VydmljZS5pbml0U3RvcmFnZSgpO1xuXG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5nRm9yYWdlRmFjdG9yeShuZ0ZvcmFnZUNvbmZpZzogTmdGb3JhZ2VDb25maWcpIHtcblx0Ly8gQHRzLWlnbm9yZVxuXHRyZXR1cm4gbmV3IE5nRm9yYWdlKHt9LCBuZXcgSW5zdGFuY2VGYWN0b3J5KG5nRm9yYWdlQ29uZmlnKSk7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgSHR0cENsaWVudE1vZHVsZSxcbiAgICBSb3V0ZXJNb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICB1c2VDbGFzczogTkh0dHBTZXJ2aWNlLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIFByb3ZpZGVyIGZvciBBUFBfSU5JVElBTElaRVJcbiAgICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgICAgIHVzZUZhY3Rvcnk6IHN0YXJ0dXBTZXJ2aWNlRmFjdG9yeSxcbiAgICAgIGRlcHM6IFtOTG9jYWxTdG9yYWdlU2VydmljZV0sXG4gICAgICBtdWx0aTogdHJ1ZVxuXHR9LFxuXHR7XG5cdFx0cHJvdmlkZTogTmdGb3JhZ2UsXG5cdFx0dXNlRmFjdG9yeTogTmdGb3JhZ2VGYWN0b3J5LFxuXHRcdGRlcHM6IFtcblx0XHRcdE5nRm9yYWdlQ29uZmlnXG5cdFx0XVxuXHR9LFxuICAgIE5BdXRoR3VhcmRTZXJ2aWNlLFxuICAgIE5EYXRhTW9kZWxTZXJ2aWNlLFxuICAgIE5IdHRwU2VydmljZSxcbiAgICBOSFRUUExvYWRlclNlcnZpY2UsXG4gICAgTkxvY2FsU3RvcmFnZVNlcnZpY2UsXG4gICAgTkxvZ2luU2VydmljZSxcbiAgICBOTG9nb3V0U2VydmljZSxcbiAgICBOTm90aWZpY2F0aW9uU2VydmljZSxcbiAgICBOU25hY2tiYXJTZXJ2aWNlLFxuICAgIE5QdWJTdWJTZXJ2aWNlLFxuICAgIE5TZXNzaW9uU3RvcmFnZVNlcnZpY2UsXG4gICAgTlRva2VuU2VydmljZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTbmFja0NvbXBvbmVudCxcbiAgICBTbmFja2JhckNvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgU25hY2tDb21wb25lbnQsXG4gICAgU25hY2tiYXJDb21wb25lbnRcbiAgXVxuXG59KVxuZXhwb3J0IGNsYXNzIE5ldXRyaW5vc1NlZWRTZXJ2aWNlc01vZHVsZSB7XG5cbn1cbiJdfQ==