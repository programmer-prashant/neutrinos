{"version":3,"sources":["../../src/app/neutrinos-seed-services/n-system.service.ts","../../src/app/neutrinos-seed-services/n-sessionStorage.service.ts","../../src/app/neutrinos-seed-services/n-util.service.ts","../../src/app/neutrinos-seed-services/n-localStorage.service.ts","../../src/app/neutrinos-seed-services/n-token.service.ts","../../src/app/neutrinos-seed-services/n-pubSub.service.ts","../../src/app/neutrinos-seed-services/n-logout.service.ts","../../src/app/neutrinos-seed-services/n-HTTPLoader.service.ts","../../src/app/neutrinos-seed-services/n-notification.service.ts","../../src/app/neutrinos-seed-services/n-login.service.ts","../../src/app/neutrinos-seed-services/n-authGaurd.service.ts","../../src/app/neutrinos-seed-services/n-dataModel.service.ts","../../src/app/neutrinos-seed-services/n-HTTP.service.ts","../../src/app/neutrinos-seed-services/n-snackbar.service.ts","../../src/app/neutrinos-seed-services/snackbar/snack/snack.component.ts","../../src/app/neutrinos-seed-services/snackbar/snackbar/snackbar.component.ts","../../src/app/neutrinos-seed-services/neutrinos-seed-services.module.ts"],"names":["NSystemService","this","_deviceType","checkDevice","getInstance","instance","prototype","window","Object","defineProperty","getVal","key","envProperties","properties","isAndroid","isIOS","getAndroidVersion","getAuthUrl","baseUrl","tenantName","getTenantUrl","getAppUrl","appName","getProxyUrl","getDataModelUrl","appDataSource","getFileIOUrl","getPlatformDetails","type","pDetails","platform","platform.os","family","platformVersion","version","assign","browser","platform.name","browserVersion","platform.version","model","manufacturer","isVirtual","NSessionStorageService","sessionStorageCache","sessionStorage","getSessionStorage","setValue","value","setItem","getValue","obj","JSON","parse","error","remove","hasOwnProperty","removeItem","clearSessionStorage","clear","Injectable","NUtility","generateUUID","__s4","Math","floor","random","toString","substring","NLocalStorageService","ngfConfig","ngf","ngfCache","storageCache","initStorage","_this","Promise","resolve","reject","initNgForage","iterate","iteratonNumber","then","result","checkDeviceId","catch","getStorage","console","log","fulfilled","pluginCheck","nativeStorageI","getItemNs","getItem","setItemNs","removeItemNs","clearNs","driverType","configure","name","driver","Driver","promiseReflect","promise","resolved","v","status","e","clearLocalStorage","_deviceUUID","uniqueDeviceID","get","uuid","NgForageConfig","NgForage","NgForageCache","NTokenService","nLocalStorageService","nSessionStorage","updateTokens","tokensObj","isRemember","userObj","decodeToken","stringify","updateSessionStorage","urlBase64Decode","str","output","replace","length","b64DecodeUnicode","b64decode","String","Error","bc","bs","buffer","idx","charAt","fromCharCode","indexOf","decodeURIComponent","Array","map","call","c","charCodeAt","slice","join","token","parts","split","decoded","getTokenExpirationDate","date","Date","setUTCSeconds","exp","isTokenExpired","offsetSeconds","valueOf","NPubSubService","events","$sub","event","callback","complete","undefined","Subject","asObservable","subscribe","$pub","eventObject","next","NLogoutService","logout","NHTTPLoaderService","nLogoutService","nPubSubService","pendingRequests","showLoading","_isHTTPRequestInProgress","_isHTTPRequestInProgress$","isHTTPRequestInProgress","bool","alertError","message","NNotificationService","localStorageService","pubSubService","http","bHttpLoader","systemService","possiblePushTypes","firebaseSenderId","isNotificationEnabled","deviceType","loginSubscribe","enableNotification","ngOnInit","pushType","getPushType","document","addEventListener","checkPermission","res","initializeNotifications","initialiseWebPush","__this","messaging","firebase","Notification","requestPermission","getToken","sendRegDetails","err","onMessage","payload","notificationObj","options","body","icon","title","onclick","focus","APNSPushNotification","hasPermission","data","isEnabled","PushNotification","push","init","android","senderID","ios","alert","badge","sound","on","registrationId","plugins","notification","local","schedule","text","at","getTime","url","post","fbregid","currPushType","includes","toUpperCase","ngOnDestroy","unSubscribe","HttpClient","NLoginService","notificationService","nTokenService","loginCompleted","EventEmitter","login","userName","password","appProperties","loginUrl","details","username","platformDetails","pipe","isLoggedIn","Output","NAuthGuardService","nLoginService","router","canActivate","navigate","Router","NDataModelService","invalidDataModelName","invalidDataModelId","invalidDataModelObj","dataModelName","filter","keys","sort","pagenumber","pagesize","modelNameUrl","getDataSourceURL","checkIfValid","queryString","toQueryString","concat","index","catchError","throwError","put","dataModelObj","delete","update","updateObject","patch","getById","dataModelId","deleteById","updateById","dmObj","i","dmDs","dsDm","NHttpService","nHTTPLoader","inj","timeout","isRefreshingToken","tokenSubject","BehaviorSubject","intercept","req","requestInterceptor","handle","requestOptions","onCatch","finalize","onFinally","updateToken","appAuthenticationStrategy","take","switchMap","refreshToken","newToken","onCatchError","refreshUrl","userKey","headers","HttpHeaders","clone","getFullUrl","addDefaultHeaders","has","set","basicAuthUser","basicAuthPassword","warn","btoa","responseInterceptor","HttpErrorResponse","onSubscribeError","Injector","NSnackbarService","snackService","snackBarListner","msg","openSnackBar","add","action","id","onClick","snack","onAdd","onRemove","Component","args","selector","template","Input","SnackbarComponent","snackbarService","max","onClear","snacks","setTimeout","timeoutObj","that_1","fcn_1","Function","emit","find","clearTimeout","r","calcTextColor","background","rgb","hex","m","g","b","exec","parseInt","hexToRgb","color","pow","startupServiceFactory","startupService","NgForageFactory","ngForageConfig","InstanceFactory","NgModule","imports","CommonModule","HttpClientModule","RouterModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","APP_INITIALIZER","useFactory","deps","declarations","SnackComponent","exports"],"mappings":"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","sourcesContent":["// import { environment } from '../../environments/environment';\nimport { NUtility } from './n-util.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { Injectable } from '@angular/core';\nimport * as platform from 'platform';\n\n// @dynamic\nexport class NSystemService {\n  private static instance: NSystemService;\n\n  private _deviceType: string;\n  // private _deviceUUID;\n  uuid;\n  properties;\n  static envProperties;\n  static getInstance() {\n    if (!this.instance) {\n      this.instance = new NSystemService();\n    }\n    return this.instance;\n  }\n\n  private constructor() {\n    this._deviceType = this.checkDevice();\n  }\n\n  /**\n   * Seter and getter for the environments\n   */\n\n  // set environments(properties) {\n  //   console.log(properties);\n  //   NSystemService.envProperties = properties;\n  //   this.properties = this.getVal('properties');\n  // }\n\n  // get environments() {\n  //   return NSystemService.envProperties;\n  // }\n\n  /**\n   * Returna 'mobile' or 'browser' based on the platform\n   */\n  checkDevice(): string {\n    if (window['device'] && (window['device']['platform'] != 'browser' || window['device']['platform'] != 'Browser')) {\n      return 'mobile';\n    } else if (window['device'] && (window['device']['platform'] == 'browser' || window['device']['platform'] == 'Browser')) {\n      return 'cordova_browser';\n    } else {\n      return 'browser';\n    }\n  }\n\n\n  public get deviceType() {\n    return this._deviceType;\n  }\n\n\n\n  public getVal(key) {\n    if (!NSystemService.envProperties) {\n      NSystemService.envProperties = window['neutrinos']['environments'];\n      this.properties = NSystemService.envProperties.properties;\n    }\n\n    if (key == 'properties') {\n      if (NSystemService.envProperties) {\n        return NSystemService.envProperties.properties;\n      } else {\n        return undefined;\n      }\n    } else {\n      if (NSystemService.envProperties && NSystemService.envProperties.properties) {\n        return NSystemService.envProperties.properties[key];\n      } else {\n        return undefined;\n      }\n\n    }\n\n  }\n\n  public isAndroid() {\n    if (window['device'] && window['device']['platform'] == 'Android') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public isIOS() {\n    if (window['device'] && window['device']['platform'] == 'iOS') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public getAndroidVersion() {\n    if (this.isAndroid()) {\n      return window['device']['version'];\n    } else {\n      return '';\n    }\n  }\n\n  public getAuthUrl() {\n    // this.properties = this.getVal('properties');\n    return this.properties.baseUrl + this.properties.tenantName + '/auth/';\n  }\n  public getTenantUrl() {\n    return this.properties.baseUrl + this.properties.tenantName + '/';\n  }\n\n  public getAppUrl() {\n    return this.properties.baseUrl + this.properties.tenantName + '/proxy/' + this.properties.appName + '/';\n  }\n\n  public getProxyUrl() {\n    return this.properties.baseUrl + this.properties.tenantName + '/proxy/';\n  }\n\n  public getDataModelUrl() {\n    return this.properties.baseUrl + this.properties.tenantName + '/datamodel/' + this.properties.appDataSource + '/' + this.properties.appName + '/';\n  }\n\n  public getFileIOUrl() {\n    return this.properties.baseUrl + this.properties.tenantName + '/fileio/' +\n      this.properties.appDataSource + '/' + this.properties.appName + '/';\n  }\n\n  public getPlatformDetails(type) {\n    const pDetails = {\n      platform: platform.os.family,\n      platformVersion: platform.os.version,\n    };\n    if (type === 'browser') {\n      return Object.assign(pDetails, {\n        type: 'browser',\n        browser: platform.name,\n        browserVersion: platform.version,\n      });\n    } else if (type === 'mobile' || type === 'cordova_browser') {\n      return Object.assign(pDetails, {\n        type: 'mobile',\n        model: window['device'].model,\n        manufacturer: window['device'].manufacturer,\n        isVirtual: window['device'].isVirtual\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NSessionStorageService {\n  static sessionStorageCache: any = {};\n  constructor() {\n    NSessionStorageService.sessionStorageCache = sessionStorage;\n  }\n\n  getSessionStorage() {\n    return NSessionStorageService.sessionStorageCache;\n  }\n\n  setValue(key, value) {\n    NSessionStorageService.sessionStorageCache[key] = value;\n    sessionStorage.setItem(key, value);\n  }\n\n  getValue(key) {\n    if (!NSessionStorageService.sessionStorageCache[key]) {\n      return null;\n    }\n    try {\n      const obj = NSessionStorageService.sessionStorageCache[key];\n      return JSON.parse(obj);\n    } catch (error) {\n      return NSessionStorageService.sessionStorageCache[key];\n    }\n  }\n\n  remove(key) {\n    if (NSessionStorageService.sessionStorageCache.hasOwnProperty(key)) {\n      delete NSessionStorageService.sessionStorageCache[key];\n      sessionStorage.removeItem(key);\n    }\n  }\n\n  clearSessionStorage() {\n    NSessionStorageService.sessionStorageCache = {};\n    sessionStorage.clear();\n  }\n\n}\n","export class NUtility {\n  \n    constructor() { }\n  \n    generateUUID() {\n      return this.__s4() + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + this.__s4() + this.__s4();\n    }\n  \n    __s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n  }","import { NSystemService } from './n-system.service';\nimport { Injectable } from '@angular/core';\nimport {NgForage, NgForageCache, NgForageConfig, Driver} from 'ngforage';\nimport { NUtility } from './n-util.service';\n\n@Injectable()\nexport class NLocalStorageService {\n\n  storageCache: any = {};\n  private _deviceUUID;\n  private nativeStorageI;\n  constructor(private ngfConfig?: NgForageConfig, private readonly ngf?: NgForage, private readonly ngfCache?: NgForageCache) {\n  }\n\n\n\n  initStorage() {\n    return new Promise((resolve, reject) => {\n      if (window['cordova']) {\n        this.initNgForage();\n      }\n      this.ngf.iterate((value, key, iteratonNumber) => {\n        this.storageCache[key] = value;\n      }).then(result => {\n        this.checkDeviceId();\n        return resolve('iteration is completed')\n      }).catch(error => {\n        return reject(error);\n      });\n    });\n  }\n\n  getStorage() {\n    return this.storageCache;\n  }\n\n\n  setValue(key, value) {\n    if (window['cordova']) {\n      this.initNgForage();\n    }\n    this.storageCache[key] = value;\n    return this.ngf.setItem(key, value).then(result => {\n      return result;\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  getValue(key): any | Promise<any> {\n    if (!this.storageCache[key]) {\n      return null;\n    } try {\n      const obj = this.storageCache[key]\n      return JSON.parse(obj);\n    } catch (error) {\n      return this.storageCache[key];\n    }\n  }\n\n  remove(key) {\n    delete this.storageCache[key];\n    if (window['cordova']) {\n      this.initNgForage();\n    }\n    this.ngf.removeItem(key).then(fulfilled => {\n      delete this.ngf[key];\n    }).catch(error => {\n      console.error('Could not remove', key);\n    });\n  }\n\n  clear() {\n    this.storageCache = {};\n    this.ngf.clear();\n  }\n\n  private pluginCheck() {\n    if (window['cordova'] && window['NativeStorage']) {\n      this.nativeStorageI = window['NativeStorage'];\n      // return true;\n    }\n    // this.initStorage();\n  }\n\n  private getItemNs(key) {\n    return new Promise((resolve, reject) => {\n      if (window['cordova'] && window['NativeStorage']) {\n        this.nativeStorageI.getItem(key, result => {\n          resolve(result);\n        }, error => {\n          reject(error);\n        })\n      }\n    })\n  }\n\n  private setItemNs(key, value) {\n    return new Promise((resolve, reject) => {\n      if (window['cordova'] && window['NativeStorage']) {\n        this.nativeStorageI.setItem(key, value, result => {\n          resolve(result);\n        }, error => {\n          reject(error);\n        })\n      }\n    })\n  }\n\n  private removeItemNs(key) {\n    return new Promise((resolve, reject) => {\n      if (window['cordova'] && window['NativeStorage']) {\n        this.nativeStorageI.remove(key, (result) => {\n          resolve(result);\n        }, (error) => {\n          reject(error);\n        });\n      }\n    })\n  }\n\n  private clearNs() {\n    return new Promise((resolve, reject) => {\n      if (window['cordova'] && window['NativeStorage']) {\n        this.nativeStorageI.clear(result => {\n          resolve(result);\n        }, error => {\n          reject(error);\n        })\n      }\n    })\n  }\n\n  private initNgForage() {\n    let driverType = window['neutrinos']['environments']['properties']['NGFORAGE_MOBILE_DRIVER'] ? window['neutrinos']['environments']['properties']['NGFORAGE_MOBILE_DRIVER'] : \"INDEXED_DB\";\n    this.ngfConfig.configure({\n      name: 'MyApp',\n      driver: [\n        Driver[driverType],\n      ]\n    });\n\n  }\n\n  private promiseReflect(promise) {\n    return promise.then(resolved => { return { v: resolved, status: 'resolved' } }, error => { return { e: error, status: 'rejected' } })\n  }\n\n  clearLocalStorage() {\n    this.remove('userObj');\n    this.remove('accessToken');\n    this.remove('refreshToken');\n    this.remove('registrationId');\n  }\n\n  /**\n   * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService\n  */\n\n  checkDeviceId() {\n    if (NSystemService.getInstance().checkDevice() === 'browser') {\n      this._deviceUUID = this.getValue('uuid');\n\n      if (!this._deviceUUID) {\n        this._deviceUUID = new NUtility().generateUUID();\n        this.setValue('uuid', this._deviceUUID);\n      }\n    } else {\n      window['plugins'].uniqueDeviceID.get((uuid) => {\n        this._deviceUUID = uuid;\n        this.setValue('uuid', this._deviceUUID);\n      });\n    }\n    return this._deviceUUID;\n  }\n\n  public get deviceUUID() {\n    return this._deviceUUID;\n  }\n}\n","import { NSessionStorageService } from './n-sessionStorage.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NTokenService {\n\n  nSessionStorage;\n  // nLocalStorageService: NLocalStorageService;\n\n  constructor(private nLocalStorageService: NLocalStorageService) {\n    this.nSessionStorage = new NSessionStorageService();\n    // this.nLocalStorageService = new NLocalStorageService();\n  }\n\n  updateTokens(tokensObj, isRemember?: Boolean) {\n    let userObj = this.decodeToken(tokensObj['accessToken'])\n    this.nSessionStorage.setValue('accessToken', tokensObj['accessToken']);\n    this.nSessionStorage.setValue('refreshToken', tokensObj['refreshToken']);\n    this.nSessionStorage.setValue('userObj', JSON.stringify(userObj));\n\n    if ((isRemember || this.nLocalStorageService.getValue('accessToken'))) {\n      this.nLocalStorageService.setValue('accessToken', tokensObj['accessToken']);\n      this.nLocalStorageService.setValue('refreshToken', tokensObj['refreshToken']);\n      this.nLocalStorageService.setValue('userObj', JSON.stringify(userObj));\n    }\n  }\n\n  updateSessionStorage() {\n    this.updateTokens(this.nLocalStorageService.getStorage(), true);\n  }\n\n  public urlBase64Decode(str: string): string {\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\n    switch (output.length % 4) {\n      case 0: { break; }\n      case 2: { output += '=='; break; }\n      case 3: { output += '='; break; }\n      default: {\n        throw 'Illegal base64url string!';\n      }\n    }\n    return this.b64DecodeUnicode(output);\n  }\n\n  // credits for decoder goes to https://github.com/atk\n  private b64decode(str: string): string {\n    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    let output: string = '';\n\n    str = String(str).replace(/=+$/, '');\n\n    if (str.length % 4 == 1) {\n      throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n\n    for (\n      // initialize result and counters\n      let bc: number = 0, bs: any, buffer: any, idx: number = 0;\n      // get next character\n      buffer = str.charAt(idx++);\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  }\n\n  // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n  private b64DecodeUnicode(str: any) {\n    return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), (c: any) => {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n  }\n\n  public decodeToken(token: string): any {\n    let parts = token.split('.');\n\n    if (parts.length !== 3) {\n      throw new Error('JWT must have 3 parts');\n    }\n\n    let decoded = this.urlBase64Decode(parts[1]);\n    if (!decoded) {\n      throw new Error('Cannot decode the token');\n    }\n\n    return JSON.parse(decoded);\n  }\n\n  public getTokenExpirationDate(token: string): Date {\n    let decoded: any;\n    decoded = this.decodeToken(token);\n\n    if (!decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n\n    let date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    date.setUTCSeconds(decoded.exp);\n\n    return date;\n  }\n\n  public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n    let date = this.getTokenExpirationDate(token);\n    offsetSeconds = offsetSeconds || 0;\n\n    if (date == null) {\n      return false;\n    }\n\n    // Token expired?\n    return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, Observable, Subscription } from 'rxjs';\n\nconst ServiceName: string = \"PubSub Service\";\n\n@Injectable()\nexport class NPubSubService {\n  private events = {};\n\n  constructor() { }\n\n  public $sub(event: string): Observable<any>;\n  public $sub(event: string, callback: (value: any) => void): Subscription;\n  public $sub(event: string, callback: (value: any) => void, error: (error: any) => void): Subscription;\n  public $sub(event: string, callback: (value: any) => void, error: (error: any) => void, complete: () => void): Subscription;\n  public $sub(event: string, callback?: (value: any) => void, error?: (error: any) => void, complete?: () => void) {\n      if (!event) {\n          throw new Error(`[${ServiceName}] => Subscription method must get event name.`);\n      }\n\n      if (this.events[event] === undefined) {\n          this.events[event] = new Subject<any>();\n      }\n\n      if (typeof callback !== 'function') {\n          return this.events[event].asObservable();\n      } else {\n          return this.events[event].asObservable().subscribe(callback, error, complete);\n      }\n  }\n\n  public $pub(event: string, eventObject?: any) {\n      if (!event) {\n          throw new Error(`[${ServiceName}] => Publish method must get event name.`);\n      } else if (!this.events[event]) {\n          return;\n      }\n      this.events[event].next(eventObject);\n  }\n}\n\nexport interface IPubSubService {\n  $pub(event: string, eventObject?: any);\n  $sub(event: string): Observable<any>;\n  $sub(event: string, callback: (value: any) => void): Subscription;\n  $sub(event: string, callback: (value: any) => void, error: (error: any) => void): Subscription;\n  $sub(event: string, callback: (value: any) => void, error: (error: any) => void, complete: () => void): Subscription;\n}\n\ninterface I$sub {\n  (event: string): Observable<any>;\n  (event: string, callback: (value: any) => void): Subscription;\n  (event: string, callback: (value: any) => void, error: (error: any) => void): Subscription;\n  (event: string, callback: (value: any) => void, error: (error: any) => void, complete: () => void): Subscription;\n}\n","import { Injectable } from '@angular/core';\nimport { NSessionStorageService } from './n-sessionStorage.service';\nimport { NLocalStorageService } from './n-localStorage.service';\n\n@Injectable()\nexport class NLogoutService {\n\n  nSessionStorage = new NSessionStorageService();\n  // nLocalStorageService = new NLocalStorageService();\n  constructor(private nLocalStorageService: NLocalStorageService) { }\n\n  logout() {\n    this.nSessionStorage.clearSessionStorage();\n    this.nLocalStorageService.clearLocalStorage();\n    return true;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject ,  Observable } from 'rxjs';\n// import { NSnackbarService } from './n-snackbar.service';\nimport { NLogoutService } from './n-logout.service';\nimport { NSystemService } from './n-system.service';\nimport { NPubSubService } from './n-pubSub.service';\n// import { NSnackbarService } from './snackbar/service/snackbar.service';\n\n@Injectable()\nexport class NHTTPLoaderService {\n  public pendingRequests = 0;\n  public showLoading = false;\n  private _isHTTPRequestInProgress = new Subject<boolean>();\n  _isHTTPRequestInProgress$ = this._isHTTPRequestInProgress.asObservable();\n\n  constructor(private nLogoutService: NLogoutService, private nPubSubService: NPubSubService) {\n\n  }\n\n  isHTTPRequestInProgress(bool) {\n    if (bool) {\n      this.pendingRequests++;\n      if (!this.showLoading) {\n        this._isHTTPRequestInProgress.next(bool);\n      }\n      this.showLoading = true;\n    } else {\n      this.pendingRequests--;\n      if (this.pendingRequests <= 0) {\n        if (this.showLoading) {\n          this._isHTTPRequestInProgress.next(bool);\n        }\n        this.showLoading = false;\n      }\n    }\n  }\n\n  alertError(error) {\n    if (error.status < 200 || error.status > 500) {\n      if (error.status === 0) {\n        this.nPubSubService.$pub('openSnackBar', 'Connectivity issue');\n      } else {\n        this.nPubSubService.$pub('openSnackBar', 'Response failure')\n      }\n    } else if (error.status === 401) {\n      this.nLogoutService.logout();\n      if (error.error) {\n        this.nPubSubService.$pub('openSnackBar', error.error)\n      } else {\n        this.nPubSubService.$pub('openSnackBar', error)\n      }\n    } else if (error.error) {\n      if (error.error instanceof Object) {\n        this.nPubSubService.$pub('openSnackBar', error.error.message)\n      } else {\n        this.nPubSubService.$pub('openSnackBar', error.error)\n      }\n    } else {\n      this.nPubSubService.$pub('openSnackBar', 'Response failure')\n    }\n  }\n\n}\n\n\n","import { Injectable, OnInit, OnDestroy } from '@angular/core';\nimport { NSystemService } from './n-system.service';\nimport { Observable } from 'rxjs';\ndeclare var PushNotification: any;\ndeclare var APNSPushNotification: any;\nimport { NLocalStorageService } from './n-localStorage.service';\nimport firebase from 'firebase';\nimport { NPubSubService } from './n-pubSub.service';\nimport { HttpClient } from '@angular/common/http';\nimport { NSessionStorageService } from './n-sessionStorage.service';\n// import { Router } from '@angular/router';\nimport { NHTTPLoaderService } from './n-HTTPLoader.service';\nimport { environment } from '../../environments/environment.prod';\n\n\n@Injectable()\nexport class NNotificationService {\n  // private static instance: NNotificationService;\n  private systemService: NSystemService = NSystemService.getInstance();\n  private firebaseSenderId: string;\n  private isNotificationEnabled: boolean;\n  private deviceType; string;\n  private resDetails;\n  private deviceUUID: string;\n  private possiblePushTypes: string[] = ['APNS','FCM'];\n  loginSubscribe;\n  sessionStorage: NSessionStorageService;\n  appName;\n  constructor(private localStorageService: NLocalStorageService, private pubSubService: NPubSubService,\n    private http: HttpClient, private bHttpLoader: NHTTPLoaderService) {\n    this.firebaseSenderId = this.systemService.getVal('firebaseSenderId');\n    this.isNotificationEnabled = this.systemService.getVal('isNotificationEnabled');\n    this.appName = this.systemService.getVal('appName');\n    this.deviceType = this.systemService.deviceType;\n    this.sessionStorage = new NSessionStorageService();\n    this.loginSubscribe = this.pubSubService.$sub('firebaseRegister', () => {\n      this.enableNotification();\n    })\n  }\n\n  ngOnInit() {\n  }\n\n\n  enableNotification() {\n    let pushType = this.getPushType(this.systemService.getVal('pushType'));\n    document.addEventListener('deviceready', event => {\n      if (this.isNotificationEnabled) {\n        if (this.deviceType && this.deviceType != 'browser') {\n          this.deviceType = this.systemService.deviceType;\n          this.checkPermission(pushType).then(res => {\n            if (res) {\n              this.initializeNotifications(pushType);\n            }\n          });\n        }\n      }\n    });\n    if (this.isNotificationEnabled && pushType !== 'APNS') {\n      if (this.deviceType && this.deviceType == 'browser' && window['Notification']) {\n        this.initialiseWebPush();\n      }\n    }\n  }\n\n  initialiseWebPush() {\n    const __this = this;\n    const messaging = firebase.messaging();\n\n    Notification.requestPermission()\n      .then(function () {\n        return messaging.getToken();\n      })\n      .then(function (token) {\n        if (token) {\n          __this.sendRegDetails(token);\n        }\n      })\n      .catch(function (err) {\n        __this.bHttpLoader.alertError(err);\n      });\n\n    messaging.onMessage(function (payload) {\n      if (payload['notification']) {\n        let notificationObj = payload['notification'];\n        let options = {\n          body: notificationObj.body,\n          icon: notificationObj.icon\n        }\n        // creating a native browser message\n        let notificationUI = new Notification(notificationObj.title, options);\n        notificationUI.onclick = function () {\n          window.focus(); // window is focused when the user clicks the notification using this\n        }\n      }\n    });\n  }\n\n  checkPermission(pushType?) {\n    // Android & iOS only\n    // Checks whether the push notification permission has been granted.\n    return new Promise((resolve) => {\n      pushType = this.getPushType(pushType);\n      if ((this.deviceType === 'Android' || this.deviceType === 'iOS') && (pushType === 'FCM' )) {\n        PushNotification.hasPermission(function (data) {\n          return resolve(data.isEnabled);\n        });\n      } else if (this.deviceType === 'iOS' && pushType === 'APNS') {\n         APNSPushNotification.hasPermission(function (data) {\n          return resolve(data.isEnabled);\n        });\n      } else {\n        return resolve(true);\n      }\n    });\n  }\n\n  initializeNotifications(pushType?) {\n    //pushType = pushType ? pushType : 'FCM';\n    pushType = this.getPushType(pushType);\n\n    let push;\n    // Default if for FCM\n    if (pushType === 'FCM') {\n      push = window['PushNotification'].init({\n        android: {\n          senderID: this.firebaseSenderId\n        },\n        ios: {\n          alert: \"true\",\n          badge: \"true\",\n          sound: \"true\",\n          senderID: this.firebaseSenderId\n        },\n      });\n    }\n    // New APNS plugin init\n    else if (pushType === 'APNS') {\n      push = window['APNSPushNotification'].init({\n        ios: {\n          alert: \"true\",\n          badge: \"true\",\n          sound: \"true\"\n        }\n      });\n    }\n    push.on('registration', (data) => {\n      // data.registrationId\n      this.sendRegDetails(data.registrationId);\n    });\n\n    // ToDo Christy get call back function from app user to change what happens once a notification arrives\n    push.on('notification', (data) => {\n      window['cordova'].plugins.notification.local.schedule({\n        title: data.title,\n        text: data.message,\n        sound: data.sound,\n        at: new Date().getTime()\n      });\n    });\n\n    push.on('error', (e) => {\n      // e.message\n      console.error(e);\n    });\n  }\n\n  sendRegDetails(registrationId) {\n    this.localStorageService.setValue('registrationId', registrationId);\n    var url = this.systemService.getTenantUrl() + 'notification/' + this.systemService.getVal('appName') + '/register';\n    let pushType = this.getPushType(this.systemService.getVal('pushType'));\n    this.http.post(url, {\n      'key': this.sessionStorage.getValue('userObj')['userKey'],\n      'uuid': this.localStorageService.getValue('uuid'), \n      'fbregid': registrationId,\n      'pushType': pushType\n    }).subscribe(result => {\n      // this.pubSubService.$pub('FBRegComp');\n    }, error => {\n      console.log(error);\n    })\n  }\n\n  getPushType (currPushType) {\n    let isValidPush = typeof currPushType !== 'undefined' && this.possiblePushTypes.includes(currPushType.toUpperCase());\n    let pushType = isValidPush ? currPushType.toUpperCase() : 'FCM';\n    return pushType;\n  }\n\n  ngOnDestroy() {\n    this.loginSubscribe.unSubscribe();\n  }\n}\n","\nimport {map} from 'rxjs/operators';\nimport { Injectable, EventEmitter, Output, Injector } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { NSystemService } from './n-system.service';\nimport { NTokenService } from './n-token.service';\nimport { NPubSubService } from './n-pubSub.service';\nimport { NSessionStorageService } from './n-sessionStorage.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { NNotificationService } from './n-notification.service';\n\nimport { Observable } from 'rxjs';\n\n\n@Injectable()\nexport class NLoginService {\n  loginUrl;\n  appProperties;\n  systemService;\n  nSessionStorage;\n  uuid;\n  details: any;\n\n  @Output() loginCompleted = new EventEmitter();\n  constructor(private http: HttpClient, private pubSubService: NPubSubService, private notificationService: NNotificationService,\n    private nLocalStorageService: NLocalStorageService, private nTokenService: NTokenService) {\n    this.systemService = NSystemService.getInstance();\n    // this.nTokenService = new NTokenService();\n    this.nSessionStorage = new NSessionStorageService();\n    // this.nLocalStorageService = new NLocalStorageService();\n  }\n\n\n  login(userName, password, isRemember?) {\n    this.appProperties = this.systemService.getVal('properties');\n    this.loginUrl = this.systemService.getAuthUrl() + this.appProperties.appName;\n    this.uuid = this.nLocalStorageService.getValue('uuid');\n    if (!this.uuid) {\n      this.uuid = this.nLocalStorageService.checkDeviceId();\n    }\n    this.details = {\n      username: userName,\n      password: password,\n    };\n    this.details.platformDetails = this.systemService.getPlatformDetails(this.systemService.checkDevice());\n    this.details.platformDetails['uuid'] = this.uuid;\n    return this.http.post(this.loginUrl, JSON.stringify(this.details)).pipe(map(result => {\n      const tokensObj = result;\n      if (tokensObj) {\n        this.nTokenService.updateTokens(tokensObj, isRemember);\n      }\n      // TODO chris array of supported pushes currently only support APNS and Firebase\n      if ((this.systemService.getVal('firebaseSenderId') != 'FIREBASE_SENDER_ID' && this.systemService.getVal('firebaseAuthKey') != 'FIREBASE_AUTH_KEY') \n           || (this.systemService.getVal('pushType') === 'APNS' && this.systemService.isIOS())) {\n        this.pubSubService.$pub('firebaseRegister');\n      }\n      this.pubSubService.$pub('loginComplete');\n      return (result);\n    }, error => {\n      return (error);\n    }));\n  }\n\n  isLoggedIn() {\n    return this.nLocalStorageService.initStorage().then(result => {\n      if (this.nSessionStorage.getValue('accessToken') && this.nSessionStorage.getValue('refreshToken') &&\n        this.nSessionStorage.getValue('accessToken') != 'null' && this.nSessionStorage.getValue('refreshToken') != 'null') {\n        return true;\n      }\n      return false;\n    }).catch(error => {\n      return false;\n    });\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { NLoginService } from './n-login.service';\n\n@Injectable()\nexport class NAuthGuardService implements CanActivate {\n\n  constructor(private nLoginService: NLoginService, private router: Router) { }\n\n  canActivate() {\n    return this.nLoginService.isLoggedIn().then(result => {\n      if (result) {\n        return true;\n      } else {\n        this.router.navigate(['unauthorized']);\n        return false;\n      }\n    });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { NSystemService } from './n-system.service';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class NDataModelService {\n  private systemService: NSystemService;\n  private dmUrl: string;\n  private invalidDataModelName: string = 'Invalid data model name.';\n  private invalidDataModelId: string = 'Invalid data model id.';\n  private invalidDataModelObj: string = 'Invalid data model object.';\n  private dmDs;\n  constructor(private http: HttpClient) {\n    this.systemService = NSystemService.getInstance();\n  }\n\n  // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n  /**\n   *\n   * @param dataModelName\n   * @param filter The filter query parameter allows to specify conditions on the documents to return.\n   * The filter qparam value is any mongodb query… Defaults to {}\n   * @param keys Projections to be applited on mongo db.\n   * @param sort sort to be applied on the query results. Defaults to {}\n   * @param pagenumber Page number for paginated queries. Defaults to 1\n   * @param pagesize Size of each page to be returned. Defaults to 100.\n   */\n  get(dataModelName, filter?, keys?, sort?, pagenumber?, pagesize?): Observable<any> {\n    if (dataModelName) {\n      // let modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n      let modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n      if (this.checkIfValid(filter) || this.checkIfValid(keys) || this.checkIfValid(sort) ||\n        this.checkIfValid(pagenumber) || this.checkIfValid(pagesize)) {\n        let queryString = `${this.toQueryString({\n          'filter': filter,\n          'keys': keys,\n          'sort': sort,\n          'pagenumber': pagenumber,\n          'pagesize': pagesize\n        })}`;\n        if (queryString === '') {\n          queryString += '?filter={}';\n        } else {\n          queryString = '?'.concat(queryString);\n        }\n        modelNameUrl += queryString;\n      }\n      return this.http.get(modelNameUrl).pipe(map((value, index) => {\n        return value;\n      }), catchError(error => {\n        return throwError(error);\n      }));\n    } else {\n      return throwError(new Error(`Could not get ${dataModelName}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  // PUT /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n  /**\n   *\n   * @param dataModelName Data model name of the app\n   * @param dataModelObj Data Model object which is to be inserted\n   */\n  put(dataModelName, dataModelObj): Observable<any> {\n    if (dataModelName) {\n      if (dataModelObj) {\n        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n        const modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n        return this.http.put(modelNameUrl, dataModelObj).pipe(map((value, index) => {\n          return value;\n        }), catchError(error => {\n          return throwError(error);\n        }));\n      } else {\n        return throwError(new Error(`Could not put ${dataModelObj} in ${dataModelName}. ${this.invalidDataModelObj}`));\n      }\n    } else {\n      return throwError(new Error(`Could not put ${dataModelObj} in ${dataModelName}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n  /**\n   *\n   * @param dataModelName\n   * @param filter\n   */\n  delete(dataModelName, filter): Observable<any> {\n    let modelNameUrl;\n    if (dataModelName) {\n      // modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n      modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n\n      if (this.checkIfValid(filter) && filter != '') {\n        modelNameUrl += `?filter=${filter}`;\n      } else {\n        modelNameUrl += '?filter={}';\n      }\n      return this.http.delete(modelNameUrl).pipe(map((value, index) => {\n        return value;\n      }), catchError(error => {\n        return throwError(error);\n      }));\n    } else {\n      return throwError(new Error(`Could not delete ${dataModelName}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  // PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n  /**\n   *\n   * @param dataModelName Data model name which is to be updated\n   * @param dataModelObj New data model object\n   */\n  update(dataModelName, updateObject): Observable<any> {\n    if (dataModelName && updateObject) {\n      // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n      const modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n      return this.http.patch(modelNameUrl, updateObject).pipe(map((value, index) => {\n        return value;\n      }), catchError(error => {\n        return throwError(error);\n      }));\n    } else {\n      return throwError(new Error(`Could not update ${dataModelName}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}\n  /**\n   *\n   * @param dataModelName Data model name which is to be updated\n   * @param dataModelId Data model id which is to be updated\n   */\n  getById(dataModelName, dataModelId): Observable<any> {\n    if (dataModelName) {\n      if (dataModelId) {\n        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;\n        const modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + \"/\" + dataModelId;\n        return this.http.get(modelNameUrl).pipe(map((value, index) => {\n          return value;\n        }), catchError(error => {\n          return throwError(error);\n        }));\n      } else {\n       throwError(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelId}`));\n      }\n    } else {\n      throwError(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}\n  /**\n   *\n   * @param dataModelName Data model name which is to be deleted\n   * @param dataModelId Data model id which is to be deleted\n   */\n  deleteById(dataModelName, dataModelId) {\n    if (dataModelName) {\n      if (dataModelId) {\n        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;\n        const modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + \"/\" + dataModelId;\n        return this.http.delete(modelNameUrl).pipe(map((value, index) => {\n          return value;\n        }), catchError(error => {\n          return throwError(error);\n        }));\n      } else {\n      throwError(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelId}`));\n      }\n    } else {\n      return throwError(new Error(`Could not delete ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  //PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}\n  /**\n   *\n   * @param dataModelName Data model name which is to be update\n   * @param dataModelId Data model id which is to be updated\n   * @param dataModelObj Data Model object which is to be inserted\n   */\n  updateById(dataModelName, dataModelId, dataModelObj) {\n    if (dataModelName) {\n      if (dataModelId) {\n        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;\n        const modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + \"/\" + dataModelId;\n        var dmObj = Object.assign({}, dataModelObj);\n        delete dmObj['_id'];\n        return this.http.patch(modelNameUrl, dmObj).pipe(map((value, index) => {\n          return value;\n        }), catchError(error => {\n          return throwError(error);\n        }));\n      } else {\n        throwError(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelId}`));\n      }\n    } else {\n      return throwError(new Error(`Could not delete ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  private toQueryString(obj) {\n    const parts = [];\n    for (const i in obj) {\n      if (obj.hasOwnProperty(i) && this.checkIfValid(obj[i])) {\n        parts.push((i) + '=' + JSON.stringify(obj[i]));\n      }\n    }\n    return parts.join('&');\n  }\n\n  private checkIfValid(value: any) {\n    if (value === undefined || value == null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  private getDataSourceURL(dataModelName) {\n    if (!this.dmDs) {\n      this.dmDs = window['neutrinos']['dataSource'];\n    }\n    const dsDm = this.dmDs[dataModelName];\n    const properties = this.systemService.properties;\n    if (dsDm) {\n      return properties.baseUrl + properties.tenantName + '/datamodel/' + dsDm + '/' + properties.appName + '/';\n    } else {\n      return this.systemService.getDataModelUrl();\n    }\n  }\n\n\n}\n","import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpHeaders,\n  HttpResponse,\n  HttpErrorResponse,\n  HttpClient\n} from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { NHTTPLoaderService } from './n-HTTPLoader.service';\nimport { NSystemService } from './n-system.service';\nimport { NSessionStorageService } from './n-sessionStorage.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { NTokenService } from './n-token.service';\nimport { NPubSubService } from './n-pubSub.service';\nimport { timeout, catchError, finalize, switchMap, filter, take } from 'rxjs/operators';\n\n@Injectable()\nexport class NHttpService {\n  timeout = 90000;\n  systemService;\n  nSessionStorage;\n  appProperties;\n  isRefreshingToken = false;\n  nPubSubService;\n  tokenSubject: BehaviorSubject<string> = new BehaviorSubject<string>(null);\n\n  constructor(private nHTTPLoader: NHTTPLoaderService, private inj: Injector,\n    private nLocalStorageService: NLocalStorageService, private nTokenService: NTokenService) {\n    this.systemService = NSystemService.getInstance();\n    this.nSessionStorage = new NSessionStorageService();\n    this.appProperties = this.systemService.getVal('properties');\n    this.nPubSubService = new NPubSubService();\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.requestInterceptor();\n\n    // Pass on the cloned request instead of the original request.\n    return next.handle(this.requestOptions(req))\n      .pipe(timeout(this.timeout)\n        , catchError(error => this.onCatch(error, req, next))\n        , finalize(() => {\n          this.onFinally();\n        }));\n  }\n\n  updateToken(error: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler): any {\n    if (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||\n      this.appProperties.appAuthenticationStrategy === 'localAuth') {\n      if (!this.isRefreshingToken) {\n        this.isRefreshingToken = true;\n\n        // Reset here so that the following requests wait until the token\n        // comes back from the refreshToken call.\n        this.tokenSubject.next(null);\n\n        return this.refreshToken()\n          .pipe(\n            switchMap((tokensObj: Object) => {\n              if (tokensObj) {\n                this.nTokenService.updateTokens(tokensObj);\n                const newToken = tokensObj['accessToken'];\n                this.tokenSubject.next(newToken);\n                return next.handle(this.requestOptions(req));\n              }\n              return throwError(new Error('Can\\'t refresh the token'));\n            }),\n            catchError(err => this.onCatchError(err)),\n            finalize(() => this.isRefreshingToken = false)\n          );\n      } else {\n        return this.tokenSubject.pipe(\n          filter(token => token != null),\n          take(1),\n          switchMap(token => next.handle(this.requestOptions(req)))\n        );\n      }\n    } else {\n      return this.onCatchError(error);\n    }\n  }\n\n  refreshToken() {\n    const http = this.inj.get(HttpClient);\n    const appProperties = this.systemService.getVal('properties');\n    const refreshUrl = this.systemService.getAuthUrl() + appProperties.appName + '/refresh';\n    const body = {\n      'platformDetails': this.systemService.getPlatformDetails(this.systemService.checkDevice()),\n      'userKey': this.nSessionStorage.getValue('userObj')['userKey'],\n      'refreshToken': this.nSessionStorage.getValue('refreshToken')\n    };\n    body.platformDetails['uuid'] = this.nLocalStorageService.getValue('uuid');\n    return http.post(refreshUrl, body);\n  }\n\n\n  /**\n   * Request options.\n   * @param options\n   * @returns HttpRequest\n   */\n  private requestOptions(req?: HttpRequest<any>) {\n    let headers = req.headers;\n    if (req.headers == null) {\n      headers = new HttpHeaders();\n    }\n    req = req.clone({\n      url: this.getFullUrl(req.url),\n      headers: headers\n    });\n    const baseUrl = NSystemService.getInstance().getVal('baseUrl');\n    const isArt = (baseUrl !== '' && req.url.includes(baseUrl));\n    return isArt ? this.addDefaultHeaders(req) : req;\n  }\n\n\n  /**\n  * Default options.\n  * @param options\n  * @returns HttpHeadedrs\n  */\n  private addDefaultHeaders(req: any) {\n    /**\n     * TODO: Add all default Headers over here\n     */\n    if (!req.headers.has('Access-Control-Allow-Origin')) {\n      req.headers = req.headers.set('Access-Control-Allow-Origin', '*');\n    }\n\n    if (!req.headers.has('Content-Type')) {\n      req.headers = req.headers.set('Content-Type', 'application/json');\n    } else if (req.headers.has('Content-Type') && (req.headers.get('Content-Type') === 'no-content')) {\n      req.headers = req.headers.delete('Content-Type');\n    }\n\n    if (!req.headers.has('Accept')) {\n      req.headers = req.headers.set('Accept', 'application/json');\n    }\n\n    if (!req.headers.has('Authorization')) {\n      this.appProperties = this.systemService.getVal('properties');\n      if (this.appProperties && this.appProperties.appAuthenticationStrategy === 'basicAuth') {\n        let username, password;\n        if (this.appProperties.basicAuthUser && this.appProperties.basicAuthPassword) {\n          username = this.appProperties.basicAuthUser;\n          password = this.appProperties.basicAuthPassword;\n        } else {\n          username = \"bhive-art-proxyuser\";\n          password = \"password\";\n          console.warn(\"Authentication strategy: Basic Auth. basicAuthUser and basicAuthPassword are not configured in environment. Setting default values.\");\n        }\n        req.headers = req.headers.set('Authorization', 'Basic ' + btoa(username + \":\" + password));\n      } else if (this.appProperties && (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||\n        this.appProperties.appAuthenticationStrategy === 'localAuth')) {\n        if (this.nSessionStorage.getValue('accessToken')) {\n          req.headers = req.headers.set('Authorization', 'Bearer ' + this.nSessionStorage.getValue('accessToken'));\n        }\n      }\n    }\n    return req;\n  }\n\n  /**\n   * Build API url.\n   * @param url\n   * @returns string\n   */\n  private getFullUrl(url: string): string {\n    // return full URL to API here\n    return url;\n  }\n\n  /**\n   * Request interceptor.\n   */\n  private requestInterceptor(): void {\n    this.nHTTPLoader.isHTTPRequestInProgress(true);\n  }\n\n  /**\n   * Response interceptor.\n   */\n  private responseInterceptor(): void {\n    this.nHTTPLoader.isHTTPRequestInProgress(false);\n  }\n\n  /**\n    * Error handler.\n    * @param error\n    * @param caught\n    * @returns ErrorObservable\n    */\n  private onCatch(error: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler): Observable<any> {\n    if (error instanceof HttpErrorResponse) {\n      if ((<HttpErrorResponse>error).status === 403 && (<HttpErrorResponse>error).error.message === 'jwt expired') {\n        return this.updateToken(error, req, next);\n      } else {\n        return this.onSubscribeError(error);\n      }\n    } else {\n      return this.onSubscribeError(error);\n    }\n  }\n\n  /**\n   * onSubscribeError\n   * @param error\n   */\n  private onSubscribeError(err: HttpErrorResponse): Observable<any> {\n    this.nHTTPLoader.alertError(err);\n    return this.onCatchError(err);\n  }\n  /**\n   * onFinally\n   */\n  private onFinally(): void {\n    this.responseInterceptor();\n  }\n\n  private onCatchError(error: HttpErrorResponse): Observable<any> {\n    return throwError(error);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n// import { MatSnackBar } from '@angular/material';\nimport { Subject, Observable } from 'rxjs';\nimport { NSystemService } from './n-system.service';\nimport { NPubSubService } from './n-pubSub.service';\n\n\n@Injectable()\nexport class NSnackbarService {\n  snackBarListner;\n  private snackService = new Subject<any>();\n  constructor(private nPubSubService: NPubSubService) {\n    if (NSystemService.getInstance().getVal('useDefaultExceptionUI')) {\n      this.snackBarListner = this.nPubSubService.$sub('openSnackBar', (msg) => {\n        this.openSnackBar(msg);\n      })\n    }\n  }\n\n  get() {\n    return this.snackService.asObservable();\n  }\n\n\n\n  add(data: {\n    msg: string, timeout?: number, background?: string, color?: string, customClass?: any,\n    action?: { text: string, onClick?: Function, color?: string }, onAdd?: Function, onRemove?: Function\n  }) {\n    this.snackService.next({\n      action: 'add',\n      data: data\n    });\n  }\n\n  remove(id: string) {\n    this.snackService.next({ action: 'remove', id: id });\n  }\n\n  clear() {\n    this.snackService.next({ action: 'clear' });\n  }\n\n  openSnackBar(message, timeout?, ) {\n    this.add({\n      msg: message,\n      timeout: timeout || 5000,\n      action: {\n        text: 'Close',\n        onClick: (snack) => {\n        },\n      },\n      onAdd: (snack) => {\n      },\n      onRemove: (snack) => {\n      }\n    });\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'n-snack',\n  template: `\n     <div class=\"snack\" [ngStyle]=\"{background: background ? background : '#323232' , color: color ? color : '#fff'}\" [ngClass]=\" ['snackbar-layout', 'customClass' ]\">\n          <ng-content></ng-content>\n       </div> \n  `,\n  styleUrls: ['../snackbar/snackbar.style.css']\n})\nexport class SnackComponent {\n  @Input() background;\n  @Input() color;\n  @Input() customClass;\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NSnackbarService } from '../../n-snackbar.service';\n\n@Component({\n  selector: 'n-snackbar',\n  template: `\n      <div class=\"snackbars\" [ngClass]=\"position || 'bottom-center'\">\n          <n-snack   *ngFor=\"let snackbar of snacks\" [background]=\"snackbar.background || background\"\n                        [customClass]=\"snackbar.customClass || customClass\"\n                        [color]=\"snackbar.color || color || calcTextColor(snackbar.background || background)\">\n              <div class=\"container\">\n              <div class=\"snack-text child\" >\n                  {{snackbar.msg}}\n              </div>\n              <div *ngIf=\"snackbar.action.text\" class=\"snack-action\" (click)=\"snackbar.action.onClick()\"\n                   [ngStyle]=\"{color: snackbar.action.color || accent}\">\n                  {{snackbar.action.text}}\n              </div>\n              </div>\n          </n-snack>\n      </div>\n  `,\n  styleUrls: ['./snackbar.style.css']\n})\nexport class SnackbarComponent {\n  @Input() position: 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';\n  @Input() max: number = 1;\n  @Input() background: string;\n  @Input() accent: string;\n  @Input() color: string;\n  @Input() customClass: any;\n  @Input() timeout: number;\n\n  @Output() public onAdd: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public onRemove: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public onClear: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  snacks: Array<{\n    id: string, msg: string, timeout?: number, color?: string, background?: string, customClass?: any, action?: {\n      text: string, onClick?: Function, color?: string\n    }, onAdd?: Function, onRemove?: Function, timeoutObj?: any\n  }> = [];\n\n  constructor(private snackbarService: NSnackbarService) {\n    this.snackbarService.get()\n      .subscribe(snack => {\n        if (snack.action === 'add') {\n          this.add(snack.data);\n        } else if (snack.action === 'remove') {\n          this.remove(snack.id);\n        } else if (snack.action === 'clear') {\n          this.clear();\n        }\n      });\n  }\n\n  add(snack) {\n    let timeout;\n    const id = this.uuid();\n\n    if (this.max && this.max > 0 && this.snacks.length === this.max) {\n      this.remove(this.snacks[0].id);\n    }\n\n    if (snack.timeout || this.timeout) {\n      timeout = setTimeout(() => {\n        this.remove(id);\n      }, snack.timeout || this.timeout)\n    }\n\n    const data = Object.assign({ id: id, timeoutObj: timeout }, snack);\n\n    if (snack.action) {\n      const that = this;\n      const fcn = snack.action.onClick || new Function();\n      snack.action.onClick = () => {\n        fcn(data);\n        that.remove(id);\n      };\n    }\n\n    if (snack.onAdd) {\n      snack.onAdd(data);\n    }\n\n    if (this.onAdd) {\n      this.onAdd.emit(data);\n    }\n\n    this.snacks.push(data);\n  }\n\n  remove(id) {\n    const snack = this.snacks.find(obj => obj.id === id);\n\n    if (snack) {\n      if (snack.onRemove) {\n        snack.onRemove(snack);\n      }\n\n      if (this.onRemove) {\n        this.onRemove.emit(snack);\n      }\n\n      if (snack.timeoutObj) {\n        clearTimeout(snack.timeoutObj);\n      }\n    }\n\n    this.snacks = this.snacks.filter(obj => obj.id !== id);\n  }\n\n  clear() {\n    // this.snacks.forEach(snack => {\n    //   this.remove(snack.id);\n    // });\n\n    this.snacks = [];\n\n    if (this.onClear) {\n      this.onClear.emit(true);\n    }\n  }\n\n  uuid() {\n    // tslint:disable:no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n    // tslint:enable:no-bitwise\n  }\n\n  calcTextColor(background) {\n    if (!background) {\n      return null;\n    }\n\n    function hexToRgb(hex) {\n      const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n      hex = hex.replace(shorthandRegex, (m, r, g, b) => {\n        return r + r + g + g + b + b;\n      });\n\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      } : null;\n    }\n\n    const rgb = hexToRgb(background);\n    if (!rgb) {\n      return null;\n    }\n\n    const color = [rgb.r / 255, rgb.g / 255, rgb.b / 255];\n\n    for (let i = 0; i < color.length; ++i) {\n      if (color[i] <= 0.03928) {\n        color[i] = color[i] / 12.92;\n      } else {\n        color[i] = Math.pow((color[i] + 0.055) / 1.055, 2.4);\n      }\n    }\n\n    const l = 0.2126 * color[0] + 0.7152 * color[1] + 0.0722 * color[2];\n\n    if (l > 0.179) {\n      return '#000';\n    } else {\n      return '#fff';\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, APP_INITIALIZER } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NAuthGuardService } from './n-authGaurd.service';\nimport { NDataModelService } from './n-dataModel.service';\nimport { NHttpService } from './n-HTTP.service';\nimport { NHTTPLoaderService } from './n-HTTPLoader.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { NLoginService } from './n-login.service';\nimport { NLogoutService } from './n-logout.service';\nimport { NNotificationService } from './n-notification.service';\nimport { NSnackbarService } from './n-snackbar.service';\nimport { NSystemService } from './n-system.service';\nimport { NPubSubService } from './n-pubSub.service';\nimport { NSessionStorageService } from './n-sessionStorage.service'\nimport { NTokenService } from './n-token.service';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { RouterModule, Routes } from '@angular/router';\nimport { InstanceFactory, NgForage, NgForageConfig } from 'ngforage';\n\nimport { SnackComponent } from './snackbar/snack/snack.component';\nimport { SnackbarComponent } from './snackbar/snackbar/snackbar.component';\n\n\nexport function startupServiceFactory(startupService: NLocalStorageService) {\n  const res = () => {\n    // console.log('module before initstorage call');\n    return startupService.initStorage();\n\n  }\n  return res;\n}\n\nexport function NgForageFactory(ngForageConfig: NgForageConfig) {\n\t// @ts-ignore\n\treturn new NgForage({}, new InstanceFactory(ngForageConfig));\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    RouterModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: NHttpService,\n      multi: true\n    },\n    {\n      // Provider for APP_INITIALIZER\n      provide: APP_INITIALIZER,\n      useFactory: startupServiceFactory,\n      deps: [NLocalStorageService],\n      multi: true\n\t},\n\t{\n\t\tprovide: NgForage,\n\t\tuseFactory: NgForageFactory,\n\t\tdeps: [\n\t\t\tNgForageConfig\n\t\t]\n\t},\n    NAuthGuardService,\n    NDataModelService,\n    NHttpService,\n    NHTTPLoaderService,\n    NLocalStorageService,\n    NLoginService,\n    NLogoutService,\n    NNotificationService,\n    NSnackbarService,\n    NPubSubService,\n    NSessionStorageService,\n    NTokenService\n  ],\n  declarations: [\n    SnackComponent,\n    SnackbarComponent\n  ],\n  exports: [\n    SnackComponent,\n    SnackbarComponent\n  ]\n\n})\nexport class NeutrinosSeedServicesModule {\n\n}\n"]}