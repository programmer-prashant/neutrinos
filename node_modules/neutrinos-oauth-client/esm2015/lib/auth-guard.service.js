/**
 * @fileoverview added by tsickle
 * Generated from: lib/auth-guard.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';
import * as i0 from "@angular/core";
import * as i1 from "./neutrinos-oauth-client.service";
import * as i2 from "@angular/router";
export class NeutrinosAuthGuardService {
    /**
     * @param {?} _neutrinosOAuthClientService
     * @param {?} _router
     * @param {?} _arouter
     */
    constructor(_neutrinosOAuthClientService, _router, _arouter) {
        this._neutrinosOAuthClientService = _neutrinosOAuthClientService;
        this._router = _router;
        this._arouter = _arouter;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.currUrl = state.url;
            if (this._neutrinosOAuthClientService.isLoggedIn) {
                return resolve(true);
            }
            else {
                this._neutrinosOAuthClientService.login().then((/**
                 * @param {?} tokenSet
                 * @return {?}
                 */
                tokenSet => {
                    this._router.navigate([this.currUrl]);
                    return resolve(true);
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                err => {
                    console.error(err);
                    if (err && err.code == 'auth-cancel') {
                        // Added setTimeout for reloading the current route
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            this._router.navigateByUrl(this.currUrl, { skipLocationChange: true }).then((/**
                             * @return {?}
                             */
                            () => {
                                return resolve(false);
                            }));
                        }), 500);
                    }
                    else {
                        return resolve(false);
                    }
                }));
            }
        }));
    }
}
NeutrinosAuthGuardService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NeutrinosAuthGuardService.ctorParameters = () => [
    { type: NeutrinosOAuthClientService },
    { type: Router },
    { type: ActivatedRoute }
];
/** @nocollapse */ NeutrinosAuthGuardService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NeutrinosAuthGuardService_Factory() { return new NeutrinosAuthGuardService(i0.ɵɵinject(i1.NeutrinosOAuthClientService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i2.ActivatedRoute)); }, token: NeutrinosAuthGuardService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NeutrinosAuthGuardService.prototype.currUrl;
    /**
     * @type {?}
     * @private
     */
    NeutrinosAuthGuardService.prototype._neutrinosOAuthClientService;
    /**
     * @type {?}
     * @private
     */
    NeutrinosAuthGuardService.prototype._router;
    /**
     * @type {?}
     * @private
     */
    NeutrinosAuthGuardService.prototype._arouter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL25ldXRyaW5vcy9Eb2N1bWVudHMvbmV1dHJpbm9zLW1vZHVsZXMtYW5ndWxhci9uZXV0cmlub3MtYXV0aC9wcm9qZWN0cy9uZXV0cmlub3Mtb2F1dGgtY2xpZW50L3NyYy8iLCJzb3VyY2VzIjpbImxpYi9hdXRoLWd1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQXVCLE1BQU0sRUFBaUMsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQUsvRSxNQUFNLE9BQU8seUJBQXlCOzs7Ozs7SUFJcEMsWUFBb0IsNEJBQXlELEVBQVUsT0FBZSxFQUFVLFFBQXdCO1FBQXBILGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBNkI7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBZ0I7SUFBSSxDQUFDOzs7Ozs7SUFFN0ksV0FBVyxDQUFDLEtBQTZCLEVBQUUsS0FBMEI7UUFFbkUsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3pCLElBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLFVBQVUsRUFBRTtnQkFDL0MsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDdEI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEtBQUssRUFBRSxDQUFDLElBQUk7Ozs7Z0JBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQ3hELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQ3RDLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN2QixDQUFDLEVBQUM7cUJBQ0QsS0FBSzs7OztnQkFBQyxHQUFHLENBQUMsRUFBRTtvQkFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNuQixJQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLGFBQWEsRUFBRTt3QkFDbkMsbURBQW1EO3dCQUNuRCxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFOzRCQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsRUFBQyxrQkFBa0IsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUk7Ozs0QkFBQyxHQUFHLEVBQUU7Z0NBQzVFLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDOzRCQUN4QixDQUFDLEVBQUMsQ0FBQzt3QkFDTCxDQUFDLEdBQUUsR0FBRyxDQUFDLENBQUM7cUJBQ1Q7eUJBQU07d0JBQ0wsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ3ZCO2dCQUNILENBQUMsRUFBQyxDQUFBO2FBQ0g7UUFDSCxDQUFDLEVBQUMsQ0FBQTtJQUNKLENBQUM7OztZQW5DRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFKUSwyQkFBMkI7WUFEVSxNQUFNO1lBQTNDLGNBQWM7Ozs7Ozs7O0lBUXJCLDRDQUFnQjs7Ozs7SUFFSixpRUFBaUU7Ozs7O0lBQUUsNENBQXVCOzs7OztJQUFFLDZDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXJTdGF0ZVNuYXBzaG90LCBSb3V0ZXIsIFJvdXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE5ldXRyaW5vc09BdXRoQ2xpZW50U2VydmljZSB9IGZyb20gJy4vbmV1dHJpbm9zLW9hdXRoLWNsaWVudC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmV1dHJpbm9zQXV0aEd1YXJkU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBjdXJyVXJsO1xuICBcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfbmV1dHJpbm9zT0F1dGhDbGllbnRTZXJ2aWNlOiBOZXV0cmlub3NPQXV0aENsaWVudFNlcnZpY2UsIHByaXZhdGUgX3JvdXRlcjogUm91dGVyLCBwcml2YXRlIF9hcm91dGVyOiBBY3RpdmF0ZWRSb3V0ZSkgeyB9XG5cbiAgY2FuQWN0aXZhdGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogUHJvbWlzZTxib29sZWFuPiAgIHtcbiAgICBcbiAgICByZXR1cm4gbmV3IFByb21pc2UgKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY3VyclVybCA9IHN0YXRlLnVybDtcbiAgICAgIGlmKHRoaXMuX25ldXRyaW5vc09BdXRoQ2xpZW50U2VydmljZS5pc0xvZ2dlZEluKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fbmV1dHJpbm9zT0F1dGhDbGllbnRTZXJ2aWNlLmxvZ2luKCkudGhlbih0b2tlblNldCA9PiB7XG4gICAgICAgICAgdGhpcy5fcm91dGVyLm5hdmlnYXRlKFt0aGlzLmN1cnJVcmxdKTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIGlmKGVyciAmJiBlcnIuY29kZSA9PSAnYXV0aC1jYW5jZWwnKSB7XG4gICAgICAgICAgICAvLyBBZGRlZCBzZXRUaW1lb3V0IGZvciByZWxvYWRpbmcgdGhlIGN1cnJlbnQgcm91dGVcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLl9yb3V0ZXIubmF2aWdhdGVCeVVybCh0aGlzLmN1cnJVcmwse3NraXBMb2NhdGlvbkNoYW5nZTogdHJ1ZX0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH0gXG5cbn1cbiJdfQ==