/**
 * @fileoverview added by tsickle
 * Generated from: lib/neutrinos-oauth-client.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, APP_INITIALIZER } from '@angular/core';
import { NeutrinosOauthComponent } from './neutrinos-oauth.component';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { CookieInterceptorService } from './cookie-interceptor.service';
import { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';
import { UtilService } from './services/util.service';
/**
 * @param {?} neutrinosOAuthService
 * @param {?} utilService
 * @return {?}
 */
export function getTokens(neutrinosOAuthService, utilService) {
    return (/**
     * @return {?}
     */
    () => {
        /**
         * For ios restore the cookies and get userInfo since iOS webview does not
         * persisit the cookie between app launches
         */
        if (utilService.getEnvValue('isIDSEnabled') === 'true') {
            if (window['device'] && window['device'].platform === 'iOS') {
                return neutrinosOAuthService.restoreCookies().then((/**
                 * @param {?} cookieExist
                 * @return {?}
                 */
                (cookieExist) => {
                    console.log('cookieExist' + cookieExist);
                    cookieExist ? neutrinosOAuthService.getUserInfo()
                        .catch((/**
                     * @param {?} userInfoErr
                     * @return {?}
                     */
                    userInfoErr => {
                        console.log(userInfoErr);
                    })) : null;
                }));
            }
            else {
                // Cannot get cookie for cross domain using JS. hence calling userinfo always
                return neutrinosOAuthService.getUserInfo()
                    .catch((/**
                 * @param {?} userInfoErr
                 * @return {?}
                 */
                userInfoErr => {
                    console.log(userInfoErr);
                }));
            }
        }
    });
}
// @dynamic (https://github.com/ng-packagr/ng-packagr/issues/641)
export class NeutrinosOAuthClientModule {
}
NeutrinosOAuthClientModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NeutrinosOauthComponent],
                imports: [
                    HttpClientModule
                ],
                providers: [
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: CookieInterceptorService,
                        multi: true
                    },
                    {
                        provide: APP_INITIALIZER,
                        useFactory: getTokens,
                        deps: [NeutrinosOAuthClientService, UtilService],
                        multi: true
                    },
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV1dHJpbm9zLW9hdXRoLWNsaWVudC5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvbmV1dHJpbm9zL0RvY3VtZW50cy9uZXV0cmlub3MtbW9kdWxlcy1hbmd1bGFyL25ldXRyaW5vcy1hdXRoL3Byb2plY3RzL25ldXRyaW5vcy1vYXV0aC1jbGllbnQvc3JjLyIsInNvdXJjZXMiOlsibGliL25ldXRyaW5vcy1vYXV0aC1jbGllbnQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7Ozs7QUFFdEQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxxQkFBa0QsRUFBRSxXQUF3QjtJQUNwRzs7O0lBQU8sR0FBRyxFQUFFO1FBQ1Y7OztXQUdHO1FBQ0gsSUFBSSxXQUFXLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxLQUFLLE1BQU0sRUFBRTtZQUN0RCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxLQUFLLEtBQUssRUFBRztnQkFDNUQsT0FBTyxxQkFBcUIsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJOzs7O2dCQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7b0JBQ2pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQyxDQUFDO29CQUN6QyxXQUFXLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLFdBQVcsRUFBRTt5QkFDaEQsS0FBSzs7OztvQkFBQyxXQUFXLENBQUMsRUFBRTt3QkFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDM0IsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDWixDQUFDLEVBQUMsQ0FBQzthQUNKO2lCQUFNO2dCQUNMLDZFQUE2RTtnQkFDN0UsT0FBTyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUU7cUJBQ3pDLEtBQUs7Ozs7Z0JBQUMsV0FBVyxDQUFDLEVBQUU7b0JBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzNCLENBQUMsRUFBQyxDQUFDO2FBQ0o7U0FDRjtJQUNILENBQUMsRUFBQztBQUNKLENBQUM7O0FBc0JELE1BQU0sT0FBTywwQkFBMEI7OztZQW5CdEMsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLHVCQUF1QixDQUFDO2dCQUN2QyxPQUFPLEVBQUU7b0JBQ1AsZ0JBQWdCO2lCQUNqQjtnQkFDRCxTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsUUFBUSxFQUFFLHdCQUF3Qjt3QkFDbEMsS0FBSyxFQUFFLElBQUk7cUJBQ1o7b0JBQ0Q7d0JBQ0UsT0FBTyxFQUFFLGVBQWU7d0JBQ3hCLFVBQVUsRUFBRSxTQUFTO3dCQUNyQixJQUFJLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxXQUFXLENBQUM7d0JBQ2hELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgQVBQX0lOSVRJQUxJWkVSIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZXV0cmlub3NPYXV0aENvbXBvbmVudCB9IGZyb20gJy4vbmV1dHJpbm9zLW9hdXRoLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlLCBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IENvb2tpZUludGVyY2VwdG9yU2VydmljZSB9IGZyb20gJy4vY29va2llLWludGVyY2VwdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmV1dHJpbm9zT0F1dGhDbGllbnRTZXJ2aWNlIH0gZnJvbSAnLi9uZXV0cmlub3Mtb2F1dGgtY2xpZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgVXRpbFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3V0aWwuc2VydmljZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2tlbnMobmV1dHJpbm9zT0F1dGhTZXJ2aWNlOiBOZXV0cmlub3NPQXV0aENsaWVudFNlcnZpY2UsIHV0aWxTZXJ2aWNlOiBVdGlsU2VydmljZSkge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIC8qKlxuICAgICAqIEZvciBpb3MgcmVzdG9yZSB0aGUgY29va2llcyBhbmQgZ2V0IHVzZXJJbmZvIHNpbmNlIGlPUyB3ZWJ2aWV3IGRvZXMgbm90XG4gICAgICogcGVyc2lzaXQgdGhlIGNvb2tpZSBiZXR3ZWVuIGFwcCBsYXVuY2hlc1xuICAgICAqL1xuICAgIGlmICh1dGlsU2VydmljZS5nZXRFbnZWYWx1ZSgnaXNJRFNFbmFibGVkJykgPT09ICd0cnVlJykge1xuICAgICAgaWYgKHdpbmRvd1snZGV2aWNlJ10gJiYgd2luZG93WydkZXZpY2UnXS5wbGF0Zm9ybSA9PT0gJ2lPUycgKSB7XG4gICAgICAgIHJldHVybiBuZXV0cmlub3NPQXV0aFNlcnZpY2UucmVzdG9yZUNvb2tpZXMoKS50aGVuKChjb29raWVFeGlzdCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdjb29raWVFeGlzdCcgKyBjb29raWVFeGlzdCk7XG4gICAgICAgICAgY29va2llRXhpc3QgPyBuZXV0cmlub3NPQXV0aFNlcnZpY2UuZ2V0VXNlckluZm8oKVxuICAgICAgICAgIC5jYXRjaCh1c2VySW5mb0VyciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh1c2VySW5mb0Vycik7XG4gICAgICAgICAgfSkgOiBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENhbm5vdCBnZXQgY29va2llIGZvciBjcm9zcyBkb21haW4gdXNpbmcgSlMuIGhlbmNlIGNhbGxpbmcgdXNlcmluZm8gYWx3YXlzXG4gICAgICAgIHJldHVybiBuZXV0cmlub3NPQXV0aFNlcnZpY2UuZ2V0VXNlckluZm8oKVxuICAgICAgICAuY2F0Y2godXNlckluZm9FcnIgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXJJbmZvRXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vLyBAZHluYW1pYyAoaHR0cHM6Ly9naXRodWIuY29tL25nLXBhY2thZ3IvbmctcGFja2Fnci9pc3N1ZXMvNjQxKVxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTmV1dHJpbm9zT2F1dGhDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbXG4gICAgSHR0cENsaWVudE1vZHVsZVxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICAgIHVzZUNsYXNzOiBDb29raWVJbnRlcmNlcHRvclNlcnZpY2UsXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICAgICAgdXNlRmFjdG9yeTogZ2V0VG9rZW5zLFxuICAgICAgZGVwczogW05ldXRyaW5vc09BdXRoQ2xpZW50U2VydmljZSwgVXRpbFNlcnZpY2VdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE5ldXRyaW5vc09BdXRoQ2xpZW50TW9kdWxlIHsgfVxuIl19