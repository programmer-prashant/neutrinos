/**
 * @fileoverview added by tsickle
 * Generated from: lib/neutrinos-oauth-client.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Subject } from 'rxjs';
import { UtilService } from './services/util.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/util.service";
import * as i2 from "@angular/common/http";
export class NeutrinosOAuthClientService {
    /**
     * @param {?} util
     * @param {?} http
     */
    constructor(util, http) {
        this.util = util;
        this.http = http;
        this.cookieName = 'connect.sid';
        this.authStateSubject = new Subject();
    }
    /**
     * Get user info and tokens of the current logged in user
     * @return {?}
     */
    get userInfo() {
        return this.currentUserInfo;
    }
    /**
     * @return {?}
     */
    get isLoggedIn() {
        return this.currentUserInfo ? true : false;
    }
    /**
     * @private
     * @param {?} userInfo
     * @return {?}
     */
    setUserInfo(userInfo) {
        this.currentUserInfo = userInfo;
    }
    /**
     * Performs authentication based on configuration and returns user info for mobile env and
     * for web app user info is stored in memory. Call userInfo getter method to retrieve userinfo
     * @param {?=} redirectBackUrl - url to redirect back to when authentication is done. Valid only for Web.
     * For mobile use the Promise returned to perform post authentication actions
     * @return {?}
     */
    login(redirectBackUrl) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this.util.getEnvValue('isIDSEnabled') === 'false') {
                return reject({ message: 'IDS is not enabled in environments' });
            }
            if (this.util.getPlatformType() === 'browser') {
                this.loginWithRedirect(redirectBackUrl);
                return;
            }
            this.loginWithInAppBrowser()
                .then((/**
             * @param {?} tokenset
             * @return {?}
             */
            tokenset => {
                return resolve(tokenset);
            }))
                .catch((/**
             * @param {?} authError
             * @return {?}
             */
            authError => {
                return reject(authError);
            }));
        }));
    }
    /**
     *
     * @private
     * @return {?}
     */
    loginWithInAppBrowser() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const scriptURLS = ['/interaction/', '/auth-provider/return'];
            // execute JS only for this urls
            /** @type {?} */
            const script = yield this.getScript();
            // Get JS which stores guid and device details in local storage of webview
            /** @type {?} */
            const inAppBrowserRef = cordova.InAppBrowser.open(this.util.getMobileLoginUrl(), '_blank');
            /** @type {?} */
            const executeScriptCB = (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                if (event && event.hasOwnProperty('type') && event.hasOwnProperty('url') && event.type === 'loadstop'
                    && this.isURLMatch(event.url, scriptURLS)) {
                    inAppBrowserRef.executeScript({ code: script }, (/**
                     * @return {?}
                     */
                    () => { }));
                }
            });
            inAppBrowserRef.addEventListener('loadstop', executeScriptCB);
            /** @type {?} */
            const exitCB = (/**
             * @return {?}
             */
            () => {
                return reject({ code: 'auth-cancel', message: 'Authentication cancelled by user' });
            });
            inAppBrowserRef.addEventListener('message', (/**
             * @param {?} message
             * @return {?}
             */
            (message) => {
                if (message && message.data && message.data.auth && message.data.auth === 'success') {
                    inAppBrowserRef.removeEventListener('exit', exitCB);
                    inAppBrowserRef.close();
                    this.getUserInfo().then((/**
                     * @param {?} tokenset
                     * @return {?}
                     */
                    tokenset => {
                        return resolve(tokenset);
                    })).catch((/**
                     * @param {?} authErr
                     * @return {?}
                     */
                    authErr => {
                        return reject(authErr);
                    }));
                }
            }));
            // settle the promise if user closed the in app browser manually
            inAppBrowserRef.addEventListener('exit', exitCB);
        })));
    }
    /**
     * @private
     * @param {?} url
     * @param {?} compareWith
     * @return {?}
     */
    isURLMatch(url, compareWith) {
        return compareWith.some((/**
         * @param {?} u
         * @return {?}
         */
        u => url.includes(u)));
    }
    /**
     * Returns JS as a string to be executed in inAppBrowser which sets guid and device details in localStorage
     * @private
     * @return {?}
     */
    getScript() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const deviceDetails = JSON.stringify(window['device']) || {};
            /** @type {?} */
            const guid = yield this.getuniqueDeviceID();
            /** @type {?} */
            const guidScript = guid ? `localStorage.setItem('guid', '${guid}')` : '';
            /** @type {?} */
            const script = `${guidScript}
          localStorage.setItem('additionalInfo', '${deviceDetails}')
          window.isScriptExecuted = true;`;
            return script;
        });
    }
    /**
     * @private
     * @return {?}
     */
    getuniqueDeviceID() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            window['plugins'].uniqueDeviceID.get((/**
             * @param {?} guid
             * @return {?}
             */
            (guid) => {
                return resolve(guid);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                return resolve(null);
            }));
        }));
    }
    /**
     * @return {?}
     */
    getUserInfo() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            let headers = new HttpHeaders();
            /*Edge case: Userinfo is retreived from cache when login page is opened and user cancels the login attempt  */
            headers = headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
            headers = headers.set('Pragma', 'no-cache');
            headers = headers.set('Expires', '0');
            this.http.get(this.util.getUserInfoUrl(), { headers }).subscribe((/**
             * @param {?} tokenset
             * @return {?}
             */
            tokenset => {
                this.setUserInfo(tokenset);
                return resolve(tokenset);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                this.destroyClientSession();
                return reject(error);
            }));
        }));
    }
    /*If SSD throws 401 during any http request due to refresh token expiry, cookie expiry or access revoke nullify the userinfo in memory
      and emit authState event  */
    /**
     * @param {?} errorResponse
     * @return {?}
     */
    removeUserInfo(errorResponse) {
        this.destroyClientSession();
        this.authStateSubject.next(errorResponse);
    }
    /**
     * Returns event when Auth state has changed due to session expiry, access revoke or cookie expiry.
     * @return {?}
     */
    authState() {
        return this.authStateSubject.asObservable();
    }
    /**
     * @private
     * @param {?} redirectBackUrl
     * @return {?}
     */
    loginWithRedirect(redirectBackUrl) {
        window.location.href = this.util.getWebLoginUrl(redirectBackUrl);
    }
    /**
     * Restores the connect.sid cookie from session storage during app bootstrap if device is mobile
     * @return {?}
     */
    restoreCookies() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getCookie(this.cookieName, this.util.getSSDBasePath())
                .then((/**
             * @param {?} connectSid
             * @return {?}
             */
            (connectSid) => __awaiter(this, void 0, void 0, function* () {
                return yield this.setCookie(this.util.getSSDBasePath(), this.cookieName, connectSid);
            }))).catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                return false;
            }));
        });
    }
    /**
     *
     * @private
     * @param {?} url - site where the cookie is stored
     * @param {?} cookieName - name of the cookie to restore
     * @param {?} cookieValue - value of the cookie to restore
     * @return {?}
     */
    setCookie(url, cookieName, cookieValue) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            cookieMaster.setCookieValue(url, cookieName, cookieValue, (/**
             * @return {?}
             */
            () => {
                return resolve(true);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                return reject(false);
            }));
        }));
    }
    /**
     *
     * @private
     * @param {?} cookieName          name of the cookie to retrieve
     * @param {?} fullCookieString    String containing all the cookies from an url
     * @return {?}
     */
    readCookieValueFromCookieString(cookieName, fullCookieString) {
        /** @type {?} */
        let cookieNameWithEqualsSign = cookieName + "=";
        /** @type {?} */
        let cookieArray = fullCookieString.split(';');
        for (let i = 0; i < cookieArray.length; i++) {
            /** @type {?} */
            let cookie = cookieArray[i];
            // Remove unnecessary leading spaces from cookie
            while (cookie.charAt(0) == ' ') {
                cookie = cookie.substring(1, cookie.length);
            }
            // Retrieve and return cookie value
            if (cookie.indexOf(cookieNameWithEqualsSign) == 0) {
                return cookie.substring(cookieNameWithEqualsSign.length, cookie.length);
            }
        }
        return null;
    }
    /**
     *
     * @private
     * @param {?} cookieName - name of the cookie to retrieve
     * @param {?} url - site where the cookie is stored
     * @return {?}
     */
    getCookie(cookieName, url) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            window['cordova'].plugins.CookiesPlugin.getCookie(url, (/**
             * @param {?} cookies
             * @return {?}
             */
            (cookies) => {
                /** @type {?} */
                let cookieValue = this.readCookieValueFromCookieString(cookieName, cookies);
                if (cookieValue) {
                    return resolve(cookieValue);
                }
                else {
                    return reject("cookie value null");
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                return reject(error);
            }));
        }));
    }
    /**
     * Logout the current user, destroys session between client and server.
     * @param {?=} redirectBackUrl - URL where the user is navigated post logout. Valid only for Web.
     * For mobile use the Promise returned to perform post authentication actions
     * @return {?}
     */
    logout(redirectBackUrl) {
        /** @type {?} */
        const logoutUrl = (this.util.getPlatformType() === 'browser') ? this.util.getWebLogoutUrl(redirectBackUrl)
            : this.util.getMobileLogoutUrl();
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http.get(logoutUrl).subscribe((/**
             * @param {?} idsLogoutInfo
             * @return {?}
             */
            idsLogoutInfo => {
                this.destroyIDSSession(idsLogoutInfo)
                    .then((/**
                 * @return {?}
                 */
                () => {
                    return resolve();
                }))
                    .catch((/**
                 * @param {?} logoutErr
                 * @return {?}
                 */
                logoutErr => {
                    return reject(logoutErr);
                }));
            }), (/**
             * @param {?} logoutError
             * @return {?}
             */
            logoutError => {
                return reject(logoutError);
            }));
        }));
    }
    /**
     * @private
     * @param {?} idsInfo
     * @return {?}
     */
    destroyIDSSession(idsInfo) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (idsInfo['sessionExists'] === false) {
                // No session present with SSD due to cookie expiry
                this.destroyClientSession();
                this.authStateSubject.next({ code: 'NO_SESSION', message: 'User session has already expired' });
                return resolve();
            }
            if (this.util.getPlatformType() === 'browser') {
                window.location.href = idsInfo['idsURL'];
            }
            else {
                this.logoutWithInappBrowser(idsInfo['idsURL'])
                    .then((/**
                 * @return {?}
                 */
                () => {
                    return resolve();
                }))
                    .catch((/**
                 * @param {?} sessionError
                 * @return {?}
                 */
                sessionError => {
                    return reject(sessionError);
                }));
            }
        }));
    }
    /**
     *
     * @private
     * @param {?} idsLogoutUrl - IDS logout url
     * Opens InApp browser and destroys the session
     * @return {?}
     */
    logoutWithInappBrowser(idsLogoutUrl) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            const exitCB = (/**
             * @return {?}
             */
            () => {
                return reject({ code: 'auth-cancel', message: 'Authentication cancelled by user' });
            });
            /** @type {?} */
            const inAppBrowserRef = cordova.InAppBrowser.open(idsLogoutUrl, '_blank');
            inAppBrowserRef.addEventListener('message', (/**
             * @param {?} message
             * @return {?}
             */
            (message) => {
                // Remove exit listener if script closed the in app browser
                if (message && message.data && message.data.auth && message.data.auth === 'success') {
                    inAppBrowserRef.removeEventListener('exit', exitCB);
                    inAppBrowserRef.close();
                    this.destroyClientSession();
                    return resolve();
                }
            }));
            // settle the promise if user closed the in app browser manually
            inAppBrowserRef.addEventListener('exit', exitCB);
        }));
    }
    /*Remove persisted cookies in local storage and nullify user info */
    /**
     * @private
     * @return {?}
     */
    destroyClientSession() {
        this.setUserInfo(null);
    }
}
NeutrinosOAuthClientService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NeutrinosOAuthClientService.ctorParameters = () => [
    { type: UtilService },
    { type: HttpClient }
];
/** @nocollapse */ NeutrinosOAuthClientService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NeutrinosOAuthClientService_Factory() { return new NeutrinosOAuthClientService(i0.ɵɵinject(i1.UtilService), i0.ɵɵinject(i2.HttpClient)); }, token: NeutrinosOAuthClientService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NeutrinosOAuthClientService.prototype.cookieName;
    /**
     * @type {?}
     * @private
     */
    NeutrinosOAuthClientService.prototype.currentUserInfo;
    /**
     * @type {?}
     * @private
     */
    NeutrinosOAuthClientService.prototype.authStateSubject;
    /**
     * @type {?}
     * @private
     */
    NeutrinosOAuthClientService.prototype.util;
    /**
     * @type {?}
     * @private
     */
    NeutrinosOAuthClientService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,