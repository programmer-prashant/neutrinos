/**
 * @fileoverview added by tsickle
 * Generated from: lib/neutrinos-oauth.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';
import { HttpClient } from '@angular/common/http';
export class NeutrinosOauthComponent {
    /**
     * @param {?} neutrinosOauthService
     * @param {?} http
     */
    constructor(neutrinosOauthService, http) {
        this.neutrinosOauthService = neutrinosOauthService;
        this.http = http;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.neutrinosOauthService.authState().subscribe((/**
         * @param {?} state
         * @return {?}
         */
        state => {
            console.log(state);
        }));
    }
    /**
     * @return {?}
     */
    login() {
        /** @type {?} */
        const a = this.neutrinosOauthService.login('/i-am-loggedin').then((/**
         * @param {?} tokens
         * @return {?}
         */
        tokens => {
            console.log('got tokens in component', tokens);
        })).catch((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            console.error(e);
        }));
        // console.log(a);
    }
    /**
     * @return {?}
     */
    token() {
        this.neutrinosOauthService.getUserInfo().then((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            console.log('t', t);
        })).catch(console.log);
    }
    /**
     * @return {?}
     */
    logout() {
        this.neutrinosOauthService.logout();
    }
    /**
     * @return {?}
     */
    userinfo() {
        alert(JSON.stringify(this.neutrinosOauthService.userInfo));
        console.log(this.neutrinosOauthService.userInfo);
    }
    /**
     * @return {?}
     */
    httpTest() {
        this.http.get('http://localhost:8081/api/ping').subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            console.log(res);
        }), (/**
         * @param {?} e
         * @return {?}
         */
        e => {
            console.error(e);
        }));
    }
}
NeutrinosOauthComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-neutrinos-oauth',
                template: `
   NOTE: use this component only for testing. Not intended for production

      <button (click)="login()" >  Login </button>
      <button (click)="token()" > Get tokenset</button>
      <button (click)="logout()" > Logout </button>
      <button (click)="userinfo()" > In memory user info </button>
      <button (click)="httpTest()" > Http Interceptor test </button>
      `
            }] }
];
/** @nocollapse */
NeutrinosOauthComponent.ctorParameters = () => [
    { type: NeutrinosOAuthClientService },
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    NeutrinosOauthComponent.prototype.neutrinosOauthService;
    /**
     * @type {?}
     * @private
     */
    NeutrinosOauthComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV1dHJpbm9zLW9hdXRoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9uZXV0cmlub3MvRG9jdW1lbnRzL25ldXRyaW5vcy1tb2R1bGVzLWFuZ3VsYXIvbmV1dHJpbm9zLWF1dGgvcHJvamVjdHMvbmV1dHJpbm9zLW9hdXRoLWNsaWVudC9zcmMvIiwic291cmNlcyI6WyJsaWIvbmV1dHJpbm9zLW9hdXRoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBZWxELE1BQU0sT0FBTyx1QkFBdUI7Ozs7O0lBRWxDLFlBQW1CLHFCQUFrRCxFQUFVLElBQWdCO1FBQTVFLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBNkI7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUksQ0FBQzs7OztJQUVwRyxRQUFRO1FBQ04sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVM7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUN2RCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0csQ0FBQyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUU7WUFDekUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqRCxDQUFDLEVBQUMsQ0FBQyxLQUFLOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25CLENBQUMsRUFBQztRQUNGLGtCQUFrQjtJQUNwQixDQUFDOzs7O0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEIsQ0FBQyxFQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDOzs7O0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUNyQyxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO1FBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUU7WUFDOUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQixDQUFDOzs7O1FBQUUsQ0FBQyxDQUFDLEVBQUU7WUFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25CLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBckRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixRQUFRLEVBQUU7Ozs7Ozs7O09BUUw7YUFFTjs7OztZQWZRLDJCQUEyQjtZQUMzQixVQUFVOzs7O0lBaUJMLHdEQUF5RDs7Ozs7SUFBRSx1Q0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmV1dHJpbm9zT0F1dGhDbGllbnRTZXJ2aWNlIH0gZnJvbSAnLi9uZXV0cmlub3Mtb2F1dGgtY2xpZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLW5ldXRyaW5vcy1vYXV0aCcsXG4gIHRlbXBsYXRlOiBgXG4gICBOT1RFOiB1c2UgdGhpcyBjb21wb25lbnQgb25seSBmb3IgdGVzdGluZy4gTm90IGludGVuZGVkIGZvciBwcm9kdWN0aW9uXG5cbiAgICAgIDxidXR0b24gKGNsaWNrKT1cImxvZ2luKClcIiA+ICBMb2dpbiA8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gKGNsaWNrKT1cInRva2VuKClcIiA+IEdldCB0b2tlbnNldDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiAoY2xpY2spPVwibG9nb3V0KClcIiA+IExvZ291dCA8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gKGNsaWNrKT1cInVzZXJpbmZvKClcIiA+IEluIG1lbW9yeSB1c2VyIGluZm8gPC9idXR0b24+XG4gICAgICA8YnV0dG9uIChjbGljayk9XCJodHRwVGVzdCgpXCIgPiBIdHRwIEludGVyY2VwdG9yIHRlc3QgPC9idXR0b24+XG4gICAgICBgLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIE5ldXRyaW5vc09hdXRoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbmV1dHJpbm9zT2F1dGhTZXJ2aWNlOiBOZXV0cmlub3NPQXV0aENsaWVudFNlcnZpY2UsIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5uZXV0cmlub3NPYXV0aFNlcnZpY2UuYXV0aFN0YXRlKCkuc3Vic2NyaWJlKHN0YXRlID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHN0YXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGxvZ2luKCkge1xuICAgIGNvbnN0IGEgPSB0aGlzLm5ldXRyaW5vc09hdXRoU2VydmljZS5sb2dpbignL2ktYW0tbG9nZ2VkaW4nKS50aGVuKHRva2VucyA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnZ290IHRva2VucyBpbiBjb21wb25lbnQnLCB0b2tlbnMpO1xuICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9KTtcbiAgICAvLyBjb25zb2xlLmxvZyhhKTtcbiAgfVxuXG4gIHRva2VuKCkge1xuICAgIHRoaXMubmV1dHJpbm9zT2F1dGhTZXJ2aWNlLmdldFVzZXJJbmZvKCkudGhlbih0ID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCd0JywgdCk7XG4gICAgfSkuY2F0Y2goY29uc29sZS5sb2cpO1xuICB9XG5cbiAgbG9nb3V0KCkge1xuICAgIHRoaXMubmV1dHJpbm9zT2F1dGhTZXJ2aWNlLmxvZ291dCgpXG4gIH1cblxuICB1c2VyaW5mbygpIHtcbiAgICBhbGVydChKU09OLnN0cmluZ2lmeSh0aGlzLm5ldXRyaW5vc09hdXRoU2VydmljZS51c2VySW5mbykpXG4gICAgY29uc29sZS5sb2codGhpcy5uZXV0cmlub3NPYXV0aFNlcnZpY2UudXNlckluZm8pO1xuICB9XG5cbiAgaHR0cFRlc3QoKSB7XG4gICAgdGhpcy5odHRwLmdldCgnaHR0cDovL2xvY2FsaG9zdDo4MDgxL2FwaS9waW5nJykuc3Vic2NyaWJlKHJlcyA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgIH0sIGUgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=