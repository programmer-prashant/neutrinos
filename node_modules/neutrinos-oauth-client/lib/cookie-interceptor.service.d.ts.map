{"version":3,"file":"cookie-interceptor.service.d.ts","sources":["cookie-interceptor.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UtilService } from './services/util.service';\nimport { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';\nexport declare class CookieInterceptorService {\n    private utilService;\n    private neutrinosOAuthClientService;\n    constructor(utilService: UtilService, neutrinosOAuthClientService: NeutrinosOAuthClientService);\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n    /**\n     * Returns true is the ssd url is running on a different domain than where UI is hosted.\n     * For mobile Returns false always since UI is already bundled with cordova\n     * If the user is not using IDS and is cross domain isIDSEnabled can be set to false to skip adding withCredentials\n     * @param ssdUrl - string\n     */\n    private isCrossDomain;\n}\n"]}