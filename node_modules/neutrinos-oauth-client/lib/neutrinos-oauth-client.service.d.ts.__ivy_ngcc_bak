import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { UtilService } from './services/util.service';
export declare class NeutrinosOAuthClientService {
    private util;
    private http;
    private cookieName;
    private currentUserInfo;
    private authStateSubject;
    constructor(util: UtilService, http: HttpClient);
    /**
     * Get user info and tokens of the current logged in user
     */
    get userInfo(): any;
    get isLoggedIn(): boolean;
    private setUserInfo;
    /**
     * Performs authentication based on configuration and returns user info for mobile env and
     * for web app user info is stored in memory. Call userInfo getter method to retrieve userinfo
     * @param redirectBackUrl - url to redirect back to when authentication is done. Valid only for Web.
     * For mobile use the Promise returned to perform post authentication actions
     */
    login(redirectBackUrl?: string): Promise<unknown>;
    /**
     *
     * @param loginUrl - Login url where SSD is hosted
     */
    private loginWithInAppBrowser;
    private isURLMatch;
    /**
     * Returns JS as a string to be executed in inAppBrowser which sets guid and device details in localStorage
     */
    private getScript;
    private getuniqueDeviceID;
    getUserInfo(): Promise<{}>;
    removeUserInfo(errorResponse: any): void;
    /**
     * Returns event when Auth state has changed due to session expiry, access revoke or cookie expiry.
     */
    authState(): Observable<any>;
    private loginWithRedirect;
    /**
     * Restores the connect.sid cookie from session storage during app bootstrap if device is mobile
     */
    restoreCookies(): Promise<any>;
    /**
     *
     * @param url - site where the cookie is stored
     * @param cookieName - name of the cookie to restore
     * @param cookieValue - value of the cookie to restore
     */
    private setCookie;
    /**
     *
     * @param cookieName          name of the cookie to retrieve
     * @param fullCookieString    String containing all the cookies from an url
     */
    private readCookieValueFromCookieString;
    /**
     *
     * @param  cookieName - name of the cookie to retrieve
     * @param   url - site where the cookie is stored
     */
    private getCookie;
    /**
     * Logout the current user, destroys session between client and server.
     * @param redirectBackUrl - URL where the user is navigated post logout. Valid only for Web.
     * For mobile use the Promise returned to perform post authentication actions
     */
    logout(redirectBackUrl?: string): Promise<{}>;
    private destroyIDSSession;
    /**
     *
     * @param idsLogoutUrl - IDS logout url
     * Opens InApp browser and destroys the session
     */
    private logoutWithInappBrowser;
    private destroyClientSession;
}
