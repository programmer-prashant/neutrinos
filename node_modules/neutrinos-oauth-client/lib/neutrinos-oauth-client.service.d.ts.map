{"version":3,"file":"neutrinos-oauth-client.service.d.ts","sources":["neutrinos-oauth-client.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UtilService } from './services/util.service';\nexport declare class NeutrinosOAuthClientService {\n    private util;\n    private http;\n    private cookieName;\n    private currentUserInfo;\n    private authStateSubject;\n    constructor(util: UtilService, http: HttpClient);\n    /**\n     * Get user info and tokens of the current logged in user\n     */\n    get userInfo(): any;\n    get isLoggedIn(): boolean;\n    private setUserInfo;\n    /**\n     * Performs authentication based on configuration and returns user info for mobile env and\n     * for web app user info is stored in memory. Call userInfo getter method to retrieve userinfo\n     * @param redirectBackUrl - url to redirect back to when authentication is done. Valid only for Web.\n     * For mobile use the Promise returned to perform post authentication actions\n     */\n    login(redirectBackUrl?: string): Promise<unknown>;\n    /**\n     *\n     * @param loginUrl - Login url where SSD is hosted\n     */\n    private loginWithInAppBrowser;\n    private isURLMatch;\n    /**\n     * Returns JS as a string to be executed in inAppBrowser which sets guid and device details in localStorage\n     */\n    private getScript;\n    private getuniqueDeviceID;\n    getUserInfo(): Promise<{}>;\n    removeUserInfo(errorResponse: any): void;\n    /**\n     * Returns event when Auth state has changed due to session expiry, access revoke or cookie expiry.\n     */\n    authState(): Observable<any>;\n    private loginWithRedirect;\n    /**\n     * Restores the connect.sid cookie from session storage during app bootstrap if device is mobile\n     */\n    restoreCookies(): Promise<any>;\n    /**\n     *\n     * @param url - site where the cookie is stored\n     * @param cookieName - name of the cookie to restore\n     * @param cookieValue - value of the cookie to restore\n     */\n    private setCookie;\n    /**\n     *\n     * @param cookieName          name of the cookie to retrieve\n     * @param fullCookieString    String containing all the cookies from an url\n     */\n    private readCookieValueFromCookieString;\n    /**\n     *\n     * @param  cookieName - name of the cookie to retrieve\n     * @param   url - site where the cookie is stored\n     */\n    private getCookie;\n    /**\n     * Logout the current user, destroys session between client and server.\n     * @param redirectBackUrl - URL where the user is navigated post logout. Valid only for Web.\n     * For mobile use the Promise returned to perform post authentication actions\n     */\n    logout(redirectBackUrl?: string): Promise<{}>;\n    private destroyIDSSession;\n    /**\n     *\n     * @param idsLogoutUrl - IDS logout url\n     * Opens InApp browser and destroys the session\n     */\n    private logoutWithInappBrowser;\n    private destroyClientSession;\n}\n"]}