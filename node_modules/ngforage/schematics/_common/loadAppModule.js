"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const schematics_1 = require("@angular-devkit/schematics");
const schematics_2 = require("@angular/cdk/schematics");
const config_1 = require("@schematics/angular/utility/config");
const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
const lazy_get_decorator_1 = require("lazy-get-decorator");
const ts = require("typescript");
const findNgModuleMetadata_1 = require("./findNgModuleMetadata");
const lazyGetter = lazy_get_decorator_1.LazyGetter();
class LoadedAppModuleImpl {
    constructor(_tree, _projectName) {
        this._tree = _tree;
        this._projectName = _projectName;
    }
    get appModule() {
        const moduleFileContent = this._tree.read(this.modulePath);
        if (!moduleFileContent) {
            throw new schematics_1.SchematicsException(`Could not read app module ${this.modulePath}`);
        }
        return ts.createSourceFile(this.modulePath, moduleFileContent.toString('utf8'), ts.ScriptTarget.Latest, true);
    }
    get modulePath() {
        return ng_ast_utils_1.getAppModulePath(this._tree, schematics_2.getProjectMainFile(this.project));
    }
    get ngModuleMetadata() {
        const value = findNgModuleMetadata_1.findNgModuleMetadata(this.appModule);
        if (!value) {
            throw new schematics_1.SchematicsException(`Could not find NgModule declaration inside ${this.modulePath}`);
        }
        return value;
    }
    get project() {
        return schematics_2.getProjectFromWorkspace(this.workspace, this._projectName);
    }
    get workspace() {
        return config_1.getWorkspace(this._tree);
    }
}
tslib_1.__decorate([
    lazyGetter
], LoadedAppModuleImpl.prototype, "appModule", null);
tslib_1.__decorate([
    lazyGetter
], LoadedAppModuleImpl.prototype, "modulePath", null);
tslib_1.__decorate([
    lazyGetter
], LoadedAppModuleImpl.prototype, "ngModuleMetadata", null);
tslib_1.__decorate([
    lazyGetter
], LoadedAppModuleImpl.prototype, "project", null);
tslib_1.__decorate([
    lazyGetter
], LoadedAppModuleImpl.prototype, "workspace", null);
function loadAppModule(tree, projectName) {
    return new LoadedAppModuleImpl(tree, projectName);
}
exports.loadAppModule = loadAppModule;
//# sourceMappingURL=loadAppModule.js.map