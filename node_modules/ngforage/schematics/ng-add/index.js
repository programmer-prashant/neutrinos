"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tasks_1 = require("@angular-devkit/schematics/tasks");
const os_1 = require("os");
function sortObjectByKeys(obj) {
    const keys = Object.keys(obj);
    keys.sort();
    return keys.reduce((result, key) => (result[key] = obj[key]) && result, {});
}
function readPkgJson(host) {
    return JSON.parse(host.read("package.json" /* PKG_JSON */).toString('utf8'));
}
function hasDependency(host, pkg, version = null, json) {
    if (!host.exists("package.json" /* PKG_JSON */)) {
        return false;
    }
    if (!json) {
        json = readPkgJson(host);
    }
    if (!json.dependencies) {
        return false;
    }
    const dep = json.dependencies[pkg];
    return !!dep && (version === null || dep === version);
}
function addToPackageJson(host, pkg, version) {
    if (host.exists("package.json" /* PKG_JSON */)) {
        const json = readPkgJson(host);
        if (hasDependency(host, pkg, version, json)) {
            return false;
        }
        if (!json.dependencies) {
            json.dependencies = {};
        }
        if (!json.dependencies[pkg]) {
            json.dependencies[pkg] = version;
            json.dependencies = sortObjectByKeys(json.dependencies);
            host.overwrite("package.json" /* PKG_JSON */, JSON.stringify(json, null, 2) + os_1.EOL); //tslint:disable-line:no-magic-numbers max-line-length
            return true;
        }
        else {
            return false;
        }
    }
    else {
        const contents = {
            dependencies: {
                [pkg]: version
            }
        };
        host.create("package.json" /* PKG_JSON */, JSON.stringify(contents, null, 2) + os_1.EOL); //tslint:disable-line:no-magic-numbers max-line-length
        return true;
    }
}
/** Base ng add */
function ngAdd(options) {
    return (tree, context) => {
        const pkgJson = require('../../package.json');
        const taskDeps = [];
        const addedLocalforage = addToPackageJson(tree, 'localforage', pkgJson.peerDependencies.localforage);
        const hasNgforage = hasDependency(tree, 'ngforage');
        if (addedLocalforage || !hasNgforage) {
            taskDeps.push(context.addTask(new tasks_1.NodePackageInstallTask()));
        }
        context.addTask(new tasks_1.RunSchematicTask('ng-add-setup-project', options), taskDeps);
    };
}
exports.ngAdd = ngAdd;
//# sourceMappingURL=index.js.map