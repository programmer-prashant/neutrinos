/**
 * @fileoverview added by tsickle
 * Generated from: lib/config/base-configurable-impl.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import 'localforage';
import { InstanceFactory } from '../instance-factory/instance-factory.service';
import { NgForageConfig } from './ng-forage-config.service';
/**
 * \@internal
 * @type {?}
 */
var store$ = Symbol('Store');
/**
 * Abstract service-level configuration layer for NgForage
 * @abstract
 */
var BaseConfigurableImpl = /** @class */ (function () {
    /** @internal */
    function BaseConfigurableImpl(config, instanceFactory) {
        /**
         * \@internal
         */
        this.config = {};
        /**
         * \@internal
         */
        this.storeNeedsRecalc = true;
        this.baseConfig = config;
        this.fact = instanceFactory;
    }
    Object.defineProperty(BaseConfigurableImpl.prototype, "description", {
        /**
         * A description of the database, essentially for developer usage.
         * @default ""
         */
        get: /**
         * A description of the database, essentially for developer usage.
         * \@default ""
         * @return {?}
         */
        function () {
            return this.config.description || this.baseConfig.description;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.config.description = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "driver", {
        /**
         * The preferred driver(s) to use.
         * @default IndexedDB, WebSQL and localStorage
         */
        get: /**
         * The preferred driver(s) to use.
         * \@default IndexedDB, WebSQL and localStorage
         * @return {?}
         */
        function () {
            return this.config.driver || this.baseConfig.driver;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.config.driver = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "name", {
        /**
         * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
         * In localStorage, this is used as a key prefix for all keys stored in localStorage.
         * @default ngForage
         */
        get: /**
         * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
         * In localStorage, this is used as a key prefix for all keys stored in localStorage.
         * \@default ngForage
         * @return {?}
         */
        function () {
            return this.config.name || this.baseConfig.name;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.config.name = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "size", {
        /**
         * The size of the database in bytes. Used only in WebSQL for now.
         * @default 4980736
         */
        get: /**
         * The size of the database in bytes. Used only in WebSQL for now.
         * \@default 4980736
         * @return {?}
         */
        function () {
            return this.config.size || this.baseConfig.size;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.config.size = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "storeName", {
        /**
         * The name of the datastore.
         * In IndexedDB this is the dataStore,
         * in WebSQL this is the name of the key/value table in the database.
         * Must be alphanumeric, with underscores.
         * Any non-alphanumeric characters will be converted to underscores.
         * @default ng_forage
         */
        get: /**
         * The name of the datastore.
         * In IndexedDB this is the dataStore,
         * in WebSQL this is the name of the key/value table in the database.
         * Must be alphanumeric, with underscores.
         * Any non-alphanumeric characters will be converted to underscores.
         * \@default ng_forage
         * @return {?}
         */
        function () {
            return this.config.storeName || this.baseConfig.storeName;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.config.storeName = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "version", {
        /**
         * The version of your database. May be used for upgrades in the future; currently unused.
         * @default 1.0
         */
        get: /**
         * The version of your database. May be used for upgrades in the future; currently unused.
         * \@default 1.0
         * @return {?}
         */
        function () {
            return 'version' in this.config ? (/** @type {?} */ (this.config.version)) : this.baseConfig.version;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.config.version = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "finalConfig", {
        /** @internal */
        get: /**
         * \@internal
         * @protected
         * @return {?}
         */
        function () {
            return Object.assign({}, this.baseConfig.config, this.config);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "store", {
        /** @internal */
        get: /**
         * \@internal
         * @protected
         * @return {?}
         */
        function () {
            if (this.storeNeedsRecalc || !this[store$]) {
                this[store$] = this.fact.getInstance(this.finalConfig);
                this.storeNeedsRecalc = false;
            }
            return this[store$];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Bulk-set configuration options
     * @param opts The configuration
     */
    /**
     * Bulk-set configuration options
     * @template THIS
     * @this {THIS}
     * @param {?} opts The configuration
     * @return {THIS}
     */
    BaseConfigurableImpl.prototype.configure = /**
     * Bulk-set configuration options
     * @template THIS
     * @this {THIS}
     * @param {?} opts The configuration
     * @return {THIS}
     */
    function (opts) {
        opts = opts || {};
        if (Array.isArray(opts.driver)) {
            opts.driver = opts.driver.slice();
        }
        Object.assign((/** @type {?} */ (this)).config, opts);
        (/** @type {?} */ (this)).storeNeedsRecalc = true;
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    BaseConfigurableImpl.prototype.toJSON = /**
     * @return {?}
     */
    function () {
        return {
            description: this.description,
            driver: this.driver,
            name: this.name,
            size: this.size,
            storeName: this.storeName,
            version: this.version
        };
    };
    /**
     * @return {?}
     */
    BaseConfigurableImpl.prototype.toString = /**
     * @return {?}
     */
    function () {
        return JSON.stringify(this.toJSON());
    };
    BaseConfigurableImpl.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BaseConfigurableImpl.ctorParameters = function () { return [
        { type: NgForageConfig, decorators: [{ type: Inject, args: [NgForageConfig,] }] },
        { type: InstanceFactory, decorators: [{ type: Inject, args: [InstanceFactory,] }] }
    ]; };
    return BaseConfigurableImpl;
}());
export { BaseConfigurableImpl };
if (false) {
    /**
     * \@internal
     * @type {?}
     * @protected
     */
    BaseConfigurableImpl.prototype.baseConfig;
    /**
     * \@internal
     * @type {?}
     * @protected
     */
    BaseConfigurableImpl.prototype.config;
    /**
     * \@internal
     * @type {?}
     * @protected
     */
    BaseConfigurableImpl.prototype.fact;
    /**
     * \@internal
     * @type {?}
     * @protected
     */
    BaseConfigurableImpl.prototype.storeNeedsRecalc;
}
//# sourceMappingURL=data:application/json;base64,