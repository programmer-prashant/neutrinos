/**
 * @fileoverview added by tsickle
 * Generated from: lib/config/ng-forage-config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import 'localforage';
import { localForage as lf } from '../imports/localforage';
import { Driver } from '../misc/driver.enum';
import { DEFAULT_CONFIG } from '../misc/injection-tokens';
import * as i0 from "@angular/core";
import * as i1 from "../misc/injection-tokens";
/**
 * \@internal
 * @type {?}
 */
var $defaultConfig = Symbol('Default Config');
/**
 * Global/default configuration
 */
var NgForageConfig = /** @class */ (function () {
    function NgForageConfig(conf) {
        this[$defaultConfig] = {
            cacheTime: 300000,
            description: '',
            driver: [Driver.INDEXED_DB, Driver.WEB_SQL, Driver.LOCAL_STORAGE],
            name: 'ngForage',
            size: 4980736,
            storeName: 'ng_forage',
            version: 1
        };
        if (conf) {
            this.configure(conf);
        }
    }
    Object.defineProperty(NgForageConfig.prototype, "cacheTime", {
        /**
         * Cache time in milliseconds
         * @default 300000
         */
        get: /**
         * Cache time in milliseconds
         * \@default 300000
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this[$defaultConfig].cacheTime));
        },
        set: /**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            this[$defaultConfig].cacheTime = t;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "config", {
        /**
         * Get the compiled configuration
         */
        get: /**
         * Get the compiled configuration
         * @return {?}
         */
        function () {
            return {
                cacheTime: this.cacheTime,
                description: this.description,
                driver: this.driver,
                name: this.name,
                size: this.size,
                storeName: this.storeName,
                version: this.version
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "description", {
        /**
         * A description of the database, essentially for developer usage.
         * @default
         */
        get: /**
         * A description of the database, essentially for developer usage.
         * \@default
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this[$defaultConfig].description));
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this[$defaultConfig].description = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "driver", {
        /**
         * The preferred driver(s) to use.
         */
        get: /**
         * The preferred driver(s) to use.
         * @return {?}
         */
        function () {
            if (typeof this[$defaultConfig].driver === 'string') {
                return (/** @type {?} */ (this[$defaultConfig].driver));
            }
            return ((/** @type {?} */ (this[$defaultConfig].driver))).slice();
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this[$defaultConfig].driver = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "name", {
        /**
         * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
         * In localStorage, this is used as a key prefix for all keys stored in localStorage.
         * @default ngForage
         */
        get: /**
         * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
         * In localStorage, this is used as a key prefix for all keys stored in localStorage.
         * \@default ngForage
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this[$defaultConfig].name));
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this[$defaultConfig].name = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "size", {
        /**
         * The size of the database in bytes. Used only in WebSQL for now.
         * @default 4980736
         */
        get: /**
         * The size of the database in bytes. Used only in WebSQL for now.
         * \@default 4980736
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this[$defaultConfig].size));
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this[$defaultConfig].size = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "storeName", {
        /**
         * The name of the datastore.
         * In IndexedDB this is the dataStore,
         * in WebSQL this is the name of the key/value table in the database.
         * Must be alphanumeric, with underscores.
         * Any non-alphanumeric characters will be converted to underscores.
         * @default ng_forage
         */
        get: /**
         * The name of the datastore.
         * In IndexedDB this is the dataStore,
         * in WebSQL this is the name of the key/value table in the database.
         * Must be alphanumeric, with underscores.
         * Any non-alphanumeric characters will be converted to underscores.
         * \@default ng_forage
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this[$defaultConfig].storeName));
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this[$defaultConfig].storeName = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "version", {
        /**
         * The version of your database. May be used for upgrades in the future; currently unused.
         * @default 1.0
         */
        get: /**
         * The version of your database. May be used for upgrades in the future; currently unused.
         * \@default 1.0
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this[$defaultConfig].version));
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this[$defaultConfig].version = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Bulk-set configuration options
     * @param opts The configuration
     */
    /**
     * Bulk-set configuration options
     * @template THIS
     * @this {THIS}
     * @param {?} opts The configuration
     * @return {THIS}
     */
    NgForageConfig.prototype.configure = /**
     * Bulk-set configuration options
     * @template THIS
     * @this {THIS}
     * @param {?} opts The configuration
     * @return {THIS}
     */
    function (opts) {
        opts = opts || {};
        if (opts.driver && ((/** @type {?} */ (opts.driver))).slice) {
            opts.driver = ((/** @type {?} */ (opts.driver))).slice();
        }
        Object.assign((/** @type {?} */ (this))[$defaultConfig], opts);
        return (/** @type {?} */ (this));
    };
    /**
     * Define a driver
     *
     * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the
     * default drivers do. You’ll also want to resolve or reject promises.
     * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}
     * for an idea of how to implement your own, custom driver.
     * @param spec Driver spec
     */
    /**
     * Define a driver
     *
     * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the
     * default drivers do. You’ll also want to resolve or reject promises.
     * Check any of the {\@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}
     * for an idea of how to implement your own, custom driver.
     * @param {?} spec Driver spec
     * @return {?}
     */
    NgForageConfig.prototype.defineDriver = /**
     * Define a driver
     *
     * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the
     * default drivers do. You’ll also want to resolve or reject promises.
     * Check any of the {\@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}
     * for an idea of how to implement your own, custom driver.
     * @param {?} spec Driver spec
     * @return {?}
     */
    function (spec) {
        return lf.defineDriver(spec);
    };
    /** @internal */
    /**
     * \@internal
     * @return {?}
     */
    NgForageConfig.prototype.toJSON = /**
     * \@internal
     * @return {?}
     */
    function () {
        return this.config;
    };
    /**
     * @return {?}
     */
    NgForageConfig.prototype.toString = /**
     * @return {?}
     */
    function () {
        return JSON.stringify(this.toJSON());
    };
    NgForageConfig.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    NgForageConfig.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DEFAULT_CONFIG,] }] }
    ]; };
    /** @nocollapse */ NgForageConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgForageConfig_Factory() { return new NgForageConfig(i0.ɵɵinject(i1.DEFAULT_CONFIG, 8)); }, token: NgForageConfig, providedIn: "root" });
    return NgForageConfig;
}());
export { NgForageConfig };
if (false) {
    /* Skipping unnamed member:
    private readonly [$defaultConfig]: NgForageOptions;*/
}
//# sourceMappingURL=data:application/json;base64,