/**
 * @fileoverview added by tsickle
 * Generated from: lib/instance-factory/instance-factory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import 'localforage';
import { NgForageConfig } from '../config/ng-forage-config.service';
import { localForage as lf } from '../imports/localforage';
import * as i0 from "@angular/core";
import * as i1 from "../config/ng-forage-config.service";
/**
 * \@internal
 * @record
 */
function InstanceMap() { }
/**
 * \@internal
 * @type {?}
 */
var stores = {};
/**
 * \@internal
 * @param {?=} driver
 * @return {?}
 */
function getDriverString(driver) {
    if (!driver) {
        return '';
    }
    else if (Array.isArray(driver)) {
        return driver.slice().sort().join(',');
    }
    else {
        return (/** @type {?} */ (driver));
    }
}
/**
 * \@internal
 * @param {?} cfg
 * @return {?}
 */
function getHash(cfg) {
    return [
        getDriverString(cfg.driver),
        cfg.name,
        cfg.size,
        cfg.storeName,
        cfg.version,
        cfg.description,
        cfg.cacheTime
    ].join('|');
}
/**
 * \@internal
 * @type {?}
 */
var conf$ = Symbol('Config');
/**
 * Creates localForage instances
 */
var InstanceFactory = /** @class */ (function () {
    /** @internal */
    function InstanceFactory(conf) {
        this[conf$] = conf;
    }
    /**
     * @param {?} cfg
     * @return {?}
     */
    InstanceFactory.prototype.getInstance = /**
     * @param {?} cfg
     * @return {?}
     */
    function (cfg) {
        cfg = Object.assign({}, this[conf$].config, cfg || {});
        /** @type {?} */
        var hash = getHash(cfg);
        if (!stores[hash]) {
            stores[hash] = lf.createInstance(cfg);
        }
        return stores[hash];
    };
    InstanceFactory.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    InstanceFactory.ctorParameters = function () { return [
        { type: NgForageConfig }
    ]; };
    /** @nocollapse */ InstanceFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function InstanceFactory_Factory() { return new InstanceFactory(i0.ɵɵinject(i1.NgForageConfig)); }, token: InstanceFactory, providedIn: "root" });
    return InstanceFactory;
}());
export { InstanceFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UtZmFjdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdmb3JhZ2UvIiwic291cmNlcyI6WyJsaWIvaW5zdGFuY2UtZmFjdG9yeS9pbnN0YW5jZS1mYWN0b3J5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUVsRSxPQUFPLEVBQUMsV0FBVyxJQUFJLEVBQUUsRUFBQyxNQUFNLHdCQUF3QixDQUFDOzs7Ozs7O0FBSXpELDBCQUVDOzs7OztJQUdLLE1BQU0sR0FBZ0IsRUFBRTs7Ozs7O0FBRzlCLFNBQVMsZUFBZSxDQUFDLE1BQWtDO0lBQ3pELElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxPQUFPLEVBQUUsQ0FBQztLQUNYO1NBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2hDLE9BQU8sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN4QztTQUFNO1FBQ0wsT0FBTyxtQkFBUSxNQUFNLEVBQUEsQ0FBQztLQUN2QjtBQUNILENBQUM7Ozs7OztBQUdELFNBQVMsT0FBTyxDQUFDLEdBQW9CO0lBQ25DLE9BQU87UUFDTCxlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUMzQixHQUFHLENBQUMsSUFBSTtRQUNSLEdBQUcsQ0FBQyxJQUFJO1FBQ1IsR0FBRyxDQUFDLFNBQVM7UUFDYixHQUFHLENBQUMsT0FBTztRQUNYLEdBQUcsQ0FBQyxXQUFXO1FBQ2YsR0FBRyxDQUFDLFNBQVM7S0FDZCxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLENBQUM7Ozs7O0lBR0ssS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7Ozs7QUFLOUI7SUFHRSxnQkFBZ0I7SUFDaEIseUJBQW1CLElBQW9CO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFTSxxQ0FBVzs7OztJQUFsQixVQUFtQixHQUFvQjtRQUNyQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUM7O1lBQ2pELElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBRXpCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkM7UUFFRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDOztnQkFqQkYsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7OztnQkEzQ3hCLGNBQWM7OzswQkFGdEI7Q0ErREMsQUFsQkQsSUFrQkM7U0FqQlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgJ2xvY2FsZm9yYWdlJztcbmltcG9ydCB7TmdGb3JhZ2VDb25maWd9IGZyb20gJy4uL2NvbmZpZy9uZy1mb3JhZ2UtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHtOZ0ZvcmFnZU9wdGlvbnN9IGZyb20gJy4uL2NvbmZpZy9uZy1mb3JhZ2Utb3B0aW9ucyc7XG5pbXBvcnQge2xvY2FsRm9yYWdlIGFzIGxmfSBmcm9tICcuLi9pbXBvcnRzL2xvY2FsZm9yYWdlJztcbmltcG9ydCB7RHJpdmVyVHlwZX0gZnJvbSAnLi4vbWlzYy9kcml2ZXItdHlwZS50eXBlJztcblxuLyoqIEBpbnRlcm5hbCAqL1xuaW50ZXJmYWNlIEluc3RhbmNlTWFwIHtcbiAgW2hhc2g6IHN0cmluZ106IExvY2FsRm9yYWdlO1xufVxuXG4vKiogQGludGVybmFsICovXG5jb25zdCBzdG9yZXM6IEluc3RhbmNlTWFwID0ge307XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIGdldERyaXZlclN0cmluZyhkcml2ZXI/OiBEcml2ZXJUeXBlIHwgRHJpdmVyVHlwZVtdKTogc3RyaW5nIHtcbiAgaWYgKCFkcml2ZXIpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkcml2ZXIpKSB7XG4gICAgcmV0dXJuIGRyaXZlci5zbGljZSgpLnNvcnQoKS5qb2luKCcsJyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDxzdHJpbmc+ZHJpdmVyO1xuICB9XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIGdldEhhc2goY2ZnOiBOZ0ZvcmFnZU9wdGlvbnMpOiBzdHJpbmcge1xuICByZXR1cm4gW1xuICAgIGdldERyaXZlclN0cmluZyhjZmcuZHJpdmVyKSxcbiAgICBjZmcubmFtZSxcbiAgICBjZmcuc2l6ZSxcbiAgICBjZmcuc3RvcmVOYW1lLFxuICAgIGNmZy52ZXJzaW9uLFxuICAgIGNmZy5kZXNjcmlwdGlvbixcbiAgICBjZmcuY2FjaGVUaW1lXG4gIF0uam9pbignfCcpO1xufVxuXG4vKiogQGludGVybmFsICovXG5jb25zdCBjb25mJCA9IFN5bWJvbCgnQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBsb2NhbEZvcmFnZSBpbnN0YW5jZXNcbiAqL1xuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgSW5zdGFuY2VGYWN0b3J5IHtcblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb25mOiBOZ0ZvcmFnZUNvbmZpZykge1xuICAgIHRoaXNbY29uZiRdID0gY29uZjtcbiAgfVxuXG4gIHB1YmxpYyBnZXRJbnN0YW5jZShjZmc6IE5nRm9yYWdlT3B0aW9ucyk6IExvY2FsRm9yYWdlIHtcbiAgICBjZmcgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzW2NvbmYkXS5jb25maWcsIGNmZyB8fCB7fSk7XG4gICAgY29uc3QgaGFzaCA9IGdldEhhc2goY2ZnKTtcblxuICAgIGlmICghc3RvcmVzW2hhc2hdKSB7XG4gICAgICBzdG9yZXNbaGFzaF0gPSBsZi5jcmVhdGVJbnN0YW5jZShjZmcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdG9yZXNbaGFzaF07XG4gIH1cbn1cbiJdfQ==