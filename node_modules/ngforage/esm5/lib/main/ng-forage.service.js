/**
 * @fileoverview added by tsickle
 * Generated from: lib/main/ng-forage.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { BaseConfigurableImpl } from '../config/base-configurable-impl.service';
import * as i0 from "@angular/core";
import * as i1 from "../config/ng-forage-config.service";
import * as i2 from "../instance-factory/instance-factory.service";
/**
 * Cache instance
 */
var NgForage = /** @class */ (function (_super) {
    __extends(NgForage, _super);
    function NgForage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NgForage.prototype, "activeDriver", {
        /**
         * Returns the name of the driver being used, or null if none can be used.
         */
        get: /**
         * Returns the name of the driver being used, or null if none can be used.
         * @return {?}
         */
        function () {
            return this.store.driver();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Removes every key from the database, returning it to a blank slate.
     *
     * clear() will remove <b>every item in the offline store</b>. Use this method with caution.
     */
    /**
     * Removes every key from the database, returning it to a blank slate.
     *
     * clear() will remove <b>every item in the offline store</b>. Use this method with caution.
     * @return {?}
     */
    NgForage.prototype.clear = /**
     * Removes every key from the database, returning it to a blank slate.
     *
     * clear() will remove <b>every item in the offline store</b>. Use this method with caution.
     * @return {?}
     */
    function () {
        return this.store.clear();
    };
    /**
     * Make a clone of the instance
     * @param config Optional configuration
     */
    /**
     * Make a clone of the instance
     * @param {?=} config Optional configuration
     * @return {?}
     */
    NgForage.prototype.clone = /**
     * Make a clone of the instance
     * @param {?=} config Optional configuration
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var inst = new NgForage(this.baseConfig, this.fact);
        inst.configure(Object.assign(this.finalConfig, config || {}));
        return inst;
    };
    /**
     * Gets an item from the storage library.
     * If the key does not exist, getItem() will return null.
     * @param key Data key
     */
    /**
     * Gets an item from the storage library.
     * If the key does not exist, getItem() will return null.
     * @template T
     * @param {?} key Data key
     * @return {?}
     */
    NgForage.prototype.getItem = /**
     * Gets an item from the storage library.
     * If the key does not exist, getItem() will return null.
     * @template T
     * @param {?} key Data key
     * @return {?}
     */
    function (key) {
        return this.store.getItem(key);
    };
    /**
     * Iterate over all value/key pairs in datastore.
     * <i>iteratee</i> is called once for each pair, with the following arguments:
     * <ol>
     *   <li>Value</li>
     *   <li>Key</li>
     *   <li>iterationNumber - one-based number</li>
     * </ol>
     * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.
     * @param iteratee
     */
    /**
     * Iterate over all value/key pairs in datastore.
     * <i>iteratee</i> is called once for each pair, with the following arguments:
     * <ol>
     *   <li>Value</li>
     *   <li>Key</li>
     *   <li>iterationNumber - one-based number</li>
     * </ol>
     * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.
     * @template T, U
     * @param {?} iteratee
     * @return {?}
     */
    NgForage.prototype.iterate = /**
     * Iterate over all value/key pairs in datastore.
     * <i>iteratee</i> is called once for each pair, with the following arguments:
     * <ol>
     *   <li>Value</li>
     *   <li>Key</li>
     *   <li>iterationNumber - one-based number</li>
     * </ol>
     * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.
     * @template T, U
     * @param {?} iteratee
     * @return {?}
     */
    function (iteratee) {
        return this.store.iterate(iteratee);
    };
    /**
     * Get the name of a key based on its ID.
     * @param index
     */
    /**
     * Get the name of a key based on its ID.
     * @param {?} index
     * @return {?}
     */
    NgForage.prototype.key = /**
     * Get the name of a key based on its ID.
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.store.key(index);
    };
    /**
     * Get the list of all keys in the datastore.
     */
    /**
     * Get the list of all keys in the datastore.
     * @return {?}
     */
    NgForage.prototype.keys = /**
     * Get the list of all keys in the datastore.
     * @return {?}
     */
    function () {
        return this.store.keys();
    };
    /**
     * Gets the number of keys in the offline store (i.e. its “length”).
     */
    /**
     * Gets the number of keys in the offline store (i.e. its “length”).
     * @return {?}
     */
    NgForage.prototype.length = /**
     * Gets the number of keys in the offline store (i.e. its “length”).
     * @return {?}
     */
    function () {
        return this.store.length();
    };
    /**
     * Even though localForage queues up all of its data API method calls,
     * ready() provides a way to determine whether the asynchronous driver initialization process has finished.
     * That’s useful in cases like when we want to know which driver localForage has settled down using.
     */
    /**
     * Even though localForage queues up all of its data API method calls,
     * ready() provides a way to determine whether the asynchronous driver initialization process has finished.
     * That’s useful in cases like when we want to know which driver localForage has settled down using.
     * @return {?}
     */
    NgForage.prototype.ready = /**
     * Even though localForage queues up all of its data API method calls,
     * ready() provides a way to determine whether the asynchronous driver initialization process has finished.
     * That’s useful in cases like when we want to know which driver localForage has settled down using.
     * @return {?}
     */
    function () {
        return this.store.ready();
    };
    /**
     * Removes the value of a key from the offline store.
     * @param key Data key
     */
    /**
     * Removes the value of a key from the offline store.
     * @param {?} key Data key
     * @return {?}
     */
    NgForage.prototype.removeItem = /**
     * Removes the value of a key from the offline store.
     * @param {?} key Data key
     * @return {?}
     */
    function (key) {
        return this.store.removeItem(key);
    };
    /**
     * Saves data to an offline store. You can store the following types of JavaScript objects:
     * <ul>
     *  <li>Array</li>
     *  <li>ArrayBuffer</li>
     *  <li>Blob</li>
     *  <li>Float32Array</li>
     *  <li>Float64Array</li>
     *  <li>Int8Array</li>
     *  <li>Int16Array</li>
     *  <li>Int32Array</li>
     *  <li>Number</li>
     *  <li>Object</li>
     *  <li>Uint8Array</li>
     *  <li>Uint8ClampedArray</li>
     *  <li>Uint16Array</li>
     *  <li>Uint32Array</li>
     *  <li>String</li>
     * </ul>
     * @param key Data key
     * @param data Data
     */
    /**
     * Saves data to an offline store. You can store the following types of JavaScript objects:
     * <ul>
     *  <li>Array</li>
     *  <li>ArrayBuffer</li>
     *  <li>Blob</li>
     *  <li>Float32Array</li>
     *  <li>Float64Array</li>
     *  <li>Int8Array</li>
     *  <li>Int16Array</li>
     *  <li>Int32Array</li>
     *  <li>Number</li>
     *  <li>Object</li>
     *  <li>Uint8Array</li>
     *  <li>Uint8ClampedArray</li>
     *  <li>Uint16Array</li>
     *  <li>Uint32Array</li>
     *  <li>String</li>
     * </ul>
     * @template T
     * @param {?} key Data key
     * @param {?} data Data
     * @return {?}
     */
    NgForage.prototype.setItem = /**
     * Saves data to an offline store. You can store the following types of JavaScript objects:
     * <ul>
     *  <li>Array</li>
     *  <li>ArrayBuffer</li>
     *  <li>Blob</li>
     *  <li>Float32Array</li>
     *  <li>Float64Array</li>
     *  <li>Int8Array</li>
     *  <li>Int16Array</li>
     *  <li>Int32Array</li>
     *  <li>Number</li>
     *  <li>Object</li>
     *  <li>Uint8Array</li>
     *  <li>Uint8ClampedArray</li>
     *  <li>Uint16Array</li>
     *  <li>Uint32Array</li>
     *  <li>String</li>
     * </ul>
     * @template T
     * @param {?} key Data key
     * @param {?} data Data
     * @return {?}
     */
    function (key, data) {
        return this.store.setItem(key, data);
    };
    /**
     * Check whether the given driver is supported/registered.
     * @param driver Driver name
     */
    /**
     * Check whether the given driver is supported/registered.
     * @param {?} driver Driver name
     * @return {?}
     */
    NgForage.prototype.supports = /**
     * Check whether the given driver is supported/registered.
     * @param {?} driver Driver name
     * @return {?}
     */
    function (driver) {
        return this.store.supports((/** @type {?} */ (driver)));
    };
    NgForage.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ NgForage.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgForage_Factory() { return new NgForage(i0.ɵɵinject(i1.NgForageConfig), i0.ɵɵinject(i2.InstanceFactory)); }, token: NgForage, providedIn: "root" });
    return NgForage;
}(BaseConfigurableImpl));
export { NgForage };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZm9yYWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ2ZvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9tYWluL25nLWZvcmFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sMENBQTBDLENBQUM7Ozs7Ozs7QUFROUU7SUFDOEIsNEJBQW9CO0lBRGxEOztLQThIQztJQXhIQyxzQkFBVyxrQ0FBWTtRQUh2Qjs7V0FFRzs7Ozs7UUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixDQUFDOzs7T0FBQTtJQUVEOzs7O09BSUc7Ozs7Ozs7SUFDSSx3QkFBSzs7Ozs7O0lBQVo7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0ksd0JBQUs7Ozs7O0lBQVosVUFBYSxNQUF3Qjs7WUFDN0IsSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNyRCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU5RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7OztJQUNJLDBCQUFPOzs7Ozs7O0lBQWQsVUFBa0IsR0FBVztRQUMzQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHOzs7Ozs7Ozs7Ozs7OztJQUNJLDBCQUFPOzs7Ozs7Ozs7Ozs7O0lBQWQsVUFBcUIsUUFBK0Q7UUFDbEYsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7SUFDSSxzQkFBRzs7Ozs7SUFBVixVQUFXLEtBQWE7UUFDdEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0ksdUJBQUk7Ozs7SUFBWDtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0kseUJBQU07Ozs7SUFBYjtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNJLHdCQUFLOzs7Ozs7SUFBWjtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7SUFDSSw2QkFBVTs7Ozs7SUFBakIsVUFBa0IsR0FBVztRQUMzQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BcUJHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBQ0ksMEJBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFkLFVBQWtCLEdBQVcsRUFBRSxJQUFPO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUksR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7O09BR0c7Ozs7OztJQUNJLDJCQUFROzs7OztJQUFmLFVBQWdCLE1BQXVCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsbUJBQVEsTUFBTSxFQUFBLENBQUMsQ0FBQztJQUM3QyxDQUFDOztnQkE3SEYsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7O21CQVZoQztDQXdJQyxBQTlIRCxDQUM4QixvQkFBb0IsR0E2SGpEO1NBN0hZLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCYXNlQ29uZmlndXJhYmxlfSBmcm9tICcuLi9jb25maWcvYmFzZS1jb25maWd1cmFibGUnO1xuaW1wb3J0IHtCYXNlQ29uZmlndXJhYmxlSW1wbH0gZnJvbSAnLi4vY29uZmlnL2Jhc2UtY29uZmlndXJhYmxlLWltcGwuc2VydmljZSc7XG5pbXBvcnQge05nRm9yYWdlT3B0aW9uc30gZnJvbSAnLi4vY29uZmlnL25nLWZvcmFnZS1vcHRpb25zJztcbmltcG9ydCB7RHJpdmVyVHlwZX0gZnJvbSAnLi4vbWlzYy9kcml2ZXItdHlwZS50eXBlJztcbmltcG9ydCB7RHJpdmVyfSBmcm9tICcuLi9taXNjL2RyaXZlci5lbnVtJztcblxuLyoqXG4gKiBDYWNoZSBpbnN0YW5jZVxuICovXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBOZ0ZvcmFnZSBleHRlbmRzIEJhc2VDb25maWd1cmFibGVJbXBsIGltcGxlbWVudHMgQmFzZUNvbmZpZ3VyYWJsZSB7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIGRyaXZlciBiZWluZyB1c2VkLCBvciBudWxsIGlmIG5vbmUgY2FuIGJlIHVzZWQuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGFjdGl2ZURyaXZlcigpOiBEcml2ZXJUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5kcml2ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZXJ5IGtleSBmcm9tIHRoZSBkYXRhYmFzZSwgcmV0dXJuaW5nIGl0IHRvIGEgYmxhbmsgc2xhdGUuXG4gICAqXG4gICAqIGNsZWFyKCkgd2lsbCByZW1vdmUgPGI+ZXZlcnkgaXRlbSBpbiB0aGUgb2ZmbGluZSBzdG9yZTwvYj4uIFVzZSB0aGlzIG1ldGhvZCB3aXRoIGNhdXRpb24uXG4gICAqL1xuICBwdWJsaWMgY2xlYXIoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIGEgY2xvbmUgb2YgdGhlIGluc3RhbmNlXG4gICAqIEBwYXJhbSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvblxuICAgKi9cbiAgcHVibGljIGNsb25lKGNvbmZpZz86IE5nRm9yYWdlT3B0aW9ucyk6IE5nRm9yYWdlIHtcbiAgICBjb25zdCBpbnN0ID0gbmV3IE5nRm9yYWdlKHRoaXMuYmFzZUNvbmZpZywgdGhpcy5mYWN0KTtcbiAgICBpbnN0LmNvbmZpZ3VyZShPYmplY3QuYXNzaWduKHRoaXMuZmluYWxDb25maWcsIGNvbmZpZyB8fCB7fSkpO1xuXG4gICAgcmV0dXJuIGluc3Q7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBpdGVtIGZyb20gdGhlIHN0b3JhZ2UgbGlicmFyeS5cbiAgICogSWYgdGhlIGtleSBkb2VzIG5vdCBleGlzdCwgZ2V0SXRlbSgpIHdpbGwgcmV0dXJuIG51bGwuXG4gICAqIEBwYXJhbSBrZXkgRGF0YSBrZXlcbiAgICovXG4gIHB1YmxpYyBnZXRJdGVtPFQ+KGtleTogc3RyaW5nKTogUHJvbWlzZTxUPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0SXRlbTxUPihrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBhbGwgdmFsdWUva2V5IHBhaXJzIGluIGRhdGFzdG9yZS5cbiAgICogPGk+aXRlcmF0ZWU8L2k+IGlzIGNhbGxlZCBvbmNlIGZvciBlYWNoIHBhaXIsIHdpdGggdGhlIGZvbGxvd2luZyBhcmd1bWVudHM6XG4gICAqIDxvbD5cbiAgICogICA8bGk+VmFsdWU8L2xpPlxuICAgKiAgIDxsaT5LZXk8L2xpPlxuICAgKiAgIDxsaT5pdGVyYXRpb25OdW1iZXIgLSBvbmUtYmFzZWQgbnVtYmVyPC9saT5cbiAgICogPC9vbD5cbiAgICogaXRlcmF0ZSgpIHN1cHBvcnRzIGVhcmx5IGV4aXQgYnkgcmV0dXJuaW5nIG5vbiB1bmRlZmluZWQgdmFsdWUgaW5zaWRlIGl0ZXJhdG9yQ2FsbGJhY2sgY2FsbGJhY2suXG4gICAqIEBwYXJhbSBpdGVyYXRlZVxuICAgKi9cbiAgcHVibGljIGl0ZXJhdGU8VCwgVT4oaXRlcmF0ZWU6ICh2YWx1ZTogVCwga2V5OiBzdHJpbmcsIGl0ZXJhdGlvbk51bWJlcjogbnVtYmVyKSA9PiBVKTogUHJvbWlzZTxVPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuaXRlcmF0ZShpdGVyYXRlZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lIG9mIGEga2V5IGJhc2VkIG9uIGl0cyBJRC5cbiAgICogQHBhcmFtIGluZGV4XG4gICAqL1xuICBwdWJsaWMga2V5KGluZGV4OiBudW1iZXIpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLmtleShpbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsaXN0IG9mIGFsbCBrZXlzIGluIHRoZSBkYXRhc3RvcmUuXG4gICAqL1xuICBwdWJsaWMga2V5cygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUua2V5cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBrZXlzIGluIHRoZSBvZmZsaW5lIHN0b3JlIChpLmUuIGl0cyDigJxsZW5ndGjigJ0pLlxuICAgKi9cbiAgcHVibGljIGxlbmd0aCgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLmxlbmd0aCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW4gdGhvdWdoIGxvY2FsRm9yYWdlIHF1ZXVlcyB1cCBhbGwgb2YgaXRzIGRhdGEgQVBJIG1ldGhvZCBjYWxscyxcbiAgICogcmVhZHkoKSBwcm92aWRlcyBhIHdheSB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgYXN5bmNocm9ub3VzIGRyaXZlciBpbml0aWFsaXphdGlvbiBwcm9jZXNzIGhhcyBmaW5pc2hlZC5cbiAgICogVGhhdOKAmXMgdXNlZnVsIGluIGNhc2VzIGxpa2Ugd2hlbiB3ZSB3YW50IHRvIGtub3cgd2hpY2ggZHJpdmVyIGxvY2FsRm9yYWdlIGhhcyBzZXR0bGVkIGRvd24gdXNpbmcuXG4gICAqL1xuICBwdWJsaWMgcmVhZHkoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUucmVhZHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSB2YWx1ZSBvZiBhIGtleSBmcm9tIHRoZSBvZmZsaW5lIHN0b3JlLlxuICAgKiBAcGFyYW0ga2V5IERhdGEga2V5XG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlcyBkYXRhIHRvIGFuIG9mZmxpbmUgc3RvcmUuIFlvdSBjYW4gc3RvcmUgdGhlIGZvbGxvd2luZyB0eXBlcyBvZiBKYXZhU2NyaXB0IG9iamVjdHM6XG4gICAqIDx1bD5cbiAgICogIDxsaT5BcnJheTwvbGk+XG4gICAqICA8bGk+QXJyYXlCdWZmZXI8L2xpPlxuICAgKiAgPGxpPkJsb2I8L2xpPlxuICAgKiAgPGxpPkZsb2F0MzJBcnJheTwvbGk+XG4gICAqICA8bGk+RmxvYXQ2NEFycmF5PC9saT5cbiAgICogIDxsaT5JbnQ4QXJyYXk8L2xpPlxuICAgKiAgPGxpPkludDE2QXJyYXk8L2xpPlxuICAgKiAgPGxpPkludDMyQXJyYXk8L2xpPlxuICAgKiAgPGxpPk51bWJlcjwvbGk+XG4gICAqICA8bGk+T2JqZWN0PC9saT5cbiAgICogIDxsaT5VaW50OEFycmF5PC9saT5cbiAgICogIDxsaT5VaW50OENsYW1wZWRBcnJheTwvbGk+XG4gICAqICA8bGk+VWludDE2QXJyYXk8L2xpPlxuICAgKiAgPGxpPlVpbnQzMkFycmF5PC9saT5cbiAgICogIDxsaT5TdHJpbmc8L2xpPlxuICAgKiA8L3VsPlxuICAgKiBAcGFyYW0ga2V5IERhdGEga2V5XG4gICAqIEBwYXJhbSBkYXRhIERhdGFcbiAgICovXG4gIHB1YmxpYyBzZXRJdGVtPFQ+KGtleTogc3RyaW5nLCBkYXRhOiBUKTogUHJvbWlzZTxUPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuc2V0SXRlbTxUPihrZXksIGRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIGRyaXZlciBpcyBzdXBwb3J0ZWQvcmVnaXN0ZXJlZC5cbiAgICogQHBhcmFtIGRyaXZlciBEcml2ZXIgbmFtZVxuICAgKi9cbiAgcHVibGljIHN1cHBvcnRzKGRyaXZlcjogRHJpdmVyIHwgc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuc3VwcG9ydHMoPHN0cmluZz5kcml2ZXIpO1xuICB9XG59XG4iXX0=