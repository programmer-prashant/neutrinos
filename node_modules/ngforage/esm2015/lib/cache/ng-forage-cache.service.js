/**
 * @fileoverview added by tsickle
 * Generated from: lib/cache/ng-forage-cache.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NgForage } from '../main/ng-forage.service';
import { CachedItemImpl } from './cached-item-impl.class';
import * as i0 from "@angular/core";
import * as i1 from "../config/ng-forage-config.service";
import * as i2 from "../instance-factory/instance-factory.service";
/**
 * \@internal
 * @record
 */
function CacheKeys() { }
if (false) {
    /** @type {?} */
    CacheKeys.prototype.data;
    /** @type {?} */
    CacheKeys.prototype.expiry;
}
/**
 * \@internal
 * @param {?} mainKey
 * @return {?}
 */
function calculateCacheKeys(mainKey) {
    return {
        data: `${mainKey}_data`,
        expiry: `${mainKey}_expiry`
    };
}
/**
 * \@internal
 * @template T
 * @param {?} r
 * @return {?}
 */
function toCachedItem(r) {
    return new CachedItemImpl(r[0], r[1]);
}
/**
 * \@internal
 * @template T
 * @param {?} r
 * @return {?}
 */
function head(r) {
    return r[0];
}
/**
 * \@internal
 * @return {?}
 */
// tslint:disable-next-line:no-empty
function toVoid() {
}
/**
 * An extension of {\@link NgForage} which adds expiration support
 */
export class NgForageCache extends NgForage {
    /**
     * Cache time in milliseconds
     * \@default 300000
     * @return {?}
     */
    get cacheTime() {
        return this.config.cacheTime || this.baseConfig.cacheTime;
    }
    /**
     * @param {?} t
     * @return {?}
     */
    set cacheTime(t) {
        this.config.cacheTime = t;
        this.storeNeedsRecalc = true;
    }
    /**
     * @inheritDoc
     * @param {?=} config
     * @return {?}
     */
    clone(config) {
        /** @type {?} */
        const inst = new NgForageCache(this.baseConfig, this.fact);
        inst.configure(Object.assign(this.finalConfig, config || {}));
        return inst;
    }
    /**
     * Retrieve data
     * @template T
     * @param {?} key Data key
     * @return {?}
     */
    getCached(key) {
        /** @type {?} */
        const keys = calculateCacheKeys(key);
        /** @type {?} */
        const dataPromise = this.getItem(keys.data);
        /** @type {?} */
        const expiryPromise = this.getItem(keys.expiry);
        return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);
    }
    /**
     * Remove data
     * @param {?} key Data key
     * @return {?}
     */
    removeCached(key) {
        /** @type {?} */
        const keys = calculateCacheKeys(key);
        /** @type {?} */
        const dataPromise = this.removeItem(keys.data);
        /** @type {?} */
        const expiryPromise = this.removeItem(keys.expiry);
        return Promise.all([dataPromise, expiryPromise]).then(toVoid);
    }
    /**
     * Set data
     * @template T
     * @param {?} key Data key
     * @param {?} data Data to set
     * @param {?=} cacheTime
     * @return {?}
     */
    setCached(key, data, cacheTime) {
        /** @type {?} */
        const keys = calculateCacheKeys(key);
        /** @type {?} */
        const expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;
        /** @type {?} */
        const dataPromise = this.setItem(keys.data, data);
        /** @type {?} */
        const expiryPromise = this.setItem(keys.expiry, Date.now() + expiry);
        return Promise.all([dataPromise, expiryPromise]).then(head);
    }
    /**
     * \@internal
     * @return {?}
     */
    toJSON() {
        return Object.assign((/** @type {?} */ (super.toJSON())), { cacheTime: this.cacheTime });
    }
}
NgForageCache.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ NgForageCache.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgForageCache_Factory() { return new NgForageCache(i0.ɵɵinject(i1.NgForageConfig), i0.ɵɵinject(i2.InstanceFactory)); }, token: NgForageCache, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZm9yYWdlLWNhY2hlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ2ZvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9jYWNoZS9uZy1mb3JhZ2UtY2FjaGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHekMsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRW5ELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7Ozs7QUFHeEQsd0JBSUM7OztJQUhDLHlCQUFhOztJQUViLDJCQUFlOzs7Ozs7O0FBSWpCLFNBQVMsa0JBQWtCLENBQUMsT0FBZTtJQUN6QyxPQUFPO1FBQ0wsSUFBSSxFQUFFLEdBQUcsT0FBTyxPQUFPO1FBQ3ZCLE1BQU0sRUFBRSxHQUFHLE9BQU8sU0FBUztLQUM1QixDQUFDO0FBQ0osQ0FBQzs7Ozs7OztBQUdELFNBQVMsWUFBWSxDQUFJLENBQWM7SUFDckMsT0FBTyxJQUFJLGNBQWMsQ0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0MsQ0FBQzs7Ozs7OztBQUdELFNBQVMsSUFBSSxDQUFJLENBQWM7SUFDN0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxDQUFDOzs7Ozs7QUFJRCxTQUFTLE1BQU07QUFFZixDQUFDOzs7O0FBTUQsTUFBTSxPQUFPLGFBQWMsU0FBUSxRQUFROzs7Ozs7SUFNekMsSUFBVyxTQUFTO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7SUFDNUQsQ0FBQzs7Ozs7SUFFRCxJQUFXLFNBQVMsQ0FBQyxDQUFTO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0lBQy9CLENBQUM7Ozs7OztJQUdNLEtBQUssQ0FBQyxNQUF3Qjs7Y0FDN0IsSUFBSSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMxRCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU5RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7Ozs7SUFNTSxTQUFTLENBQUksR0FBVzs7Y0FDdkIsSUFBSSxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQzs7Y0FDOUIsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUksSUFBSSxDQUFDLElBQUksQ0FBQzs7Y0FDeEMsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUV2RCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEUsQ0FBQzs7Ozs7O0lBTU0sWUFBWSxDQUFDLEdBQVc7O2NBQ3ZCLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUM7O2NBRTlCLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7O2NBQ3hDLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFbEQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7Ozs7OztJQVFNLFNBQVMsQ0FBSSxHQUFXLEVBQUUsSUFBTyxFQUFFLFNBQWtCOztjQUNwRCxJQUFJLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDOztjQUM5QixNQUFNLEdBQUcsT0FBTyxTQUFTLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTOztjQUVuRSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQzs7Y0FDOUMsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBRTVFLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7OztJQUdNLE1BQU07UUFDWCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsbUJBQUEsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFtQixFQUFFLEVBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7OztZQXBFRixVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q2FjaGVDb25maWd1cmFibGV9IGZyb20gJy4uL2NvbmZpZy9jYWNoZS1jb25maWd1cmFibGUnO1xuaW1wb3J0IHtOZ0ZvcmFnZU9wdGlvbnN9IGZyb20gJy4uL2NvbmZpZy9uZy1mb3JhZ2Utb3B0aW9ucyc7XG5pbXBvcnQge05nRm9yYWdlfSBmcm9tICcuLi9tYWluL25nLWZvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7Q2FjaGVkSXRlbX0gZnJvbSAnLi9jYWNoZWQtaXRlbSc7XG5pbXBvcnQge0NhY2hlZEl0ZW1JbXBsfSBmcm9tICcuL2NhY2hlZC1pdGVtLWltcGwuY2xhc3MnO1xuXG4vKiogQGludGVybmFsICovXG5pbnRlcmZhY2UgQ2FjaGVLZXlzIHtcbiAgZGF0YTogc3RyaW5nO1xuXG4gIGV4cGlyeTogc3RyaW5nO1xufVxuXG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBjYWxjdWxhdGVDYWNoZUtleXMobWFpbktleTogc3RyaW5nKTogQ2FjaGVLZXlzIHtcbiAgcmV0dXJuIHtcbiAgICBkYXRhOiBgJHttYWluS2V5fV9kYXRhYCxcbiAgICBleHBpcnk6IGAke21haW5LZXl9X2V4cGlyeWBcbiAgfTtcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gdG9DYWNoZWRJdGVtPFQ+KHI6IFtULCBudW1iZXJdKTogQ2FjaGVkSXRlbTxUPiB7XG4gIHJldHVybiBuZXcgQ2FjaGVkSXRlbUltcGw8VD4oclswXSwgclsxXSk7XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIGhlYWQ8VD4ocjogW1QsIG51bWJlcl0pIHtcbiAgcmV0dXJuIHJbMF07XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eVxuZnVuY3Rpb24gdG9Wb2lkKCk6IHZvaWQge1xuXG59XG5cbi8qKlxuICogQW4gZXh0ZW5zaW9uIG9mIHtAbGluayBOZ0ZvcmFnZX0gd2hpY2ggYWRkcyBleHBpcmF0aW9uIHN1cHBvcnRcbiAqL1xuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgTmdGb3JhZ2VDYWNoZSBleHRlbmRzIE5nRm9yYWdlIGltcGxlbWVudHMgQ2FjaGVDb25maWd1cmFibGUge1xuXG4gIC8qKlxuICAgKiBDYWNoZSB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAZGVmYXVsdCAzMDAwMDBcbiAgICovXG4gIHB1YmxpYyBnZXQgY2FjaGVUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmNhY2hlVGltZSB8fCB0aGlzLmJhc2VDb25maWcuY2FjaGVUaW1lO1xuICB9XG5cbiAgcHVibGljIHNldCBjYWNoZVRpbWUodDogbnVtYmVyKSB7XG4gICAgdGhpcy5jb25maWcuY2FjaGVUaW1lID0gdDtcbiAgICB0aGlzLnN0b3JlTmVlZHNSZWNhbGMgPSB0cnVlO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gIHB1YmxpYyBjbG9uZShjb25maWc/OiBOZ0ZvcmFnZU9wdGlvbnMpOiBOZ0ZvcmFnZUNhY2hlIHtcbiAgICBjb25zdCBpbnN0ID0gbmV3IE5nRm9yYWdlQ2FjaGUodGhpcy5iYXNlQ29uZmlnLCB0aGlzLmZhY3QpO1xuICAgIGluc3QuY29uZmlndXJlKE9iamVjdC5hc3NpZ24odGhpcy5maW5hbENvbmZpZywgY29uZmlnIHx8IHt9KSk7XG5cbiAgICByZXR1cm4gaW5zdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBkYXRhXG4gICAqIEBwYXJhbSBrZXkgRGF0YSBrZXlcbiAgICovXG4gIHB1YmxpYyBnZXRDYWNoZWQ8VD4oa2V5OiBzdHJpbmcpOiBQcm9taXNlPENhY2hlZEl0ZW08VD4+IHtcbiAgICBjb25zdCBrZXlzID0gY2FsY3VsYXRlQ2FjaGVLZXlzKGtleSk7XG4gICAgY29uc3QgZGF0YVByb21pc2UgPSB0aGlzLmdldEl0ZW08VD4oa2V5cy5kYXRhKTtcbiAgICBjb25zdCBleHBpcnlQcm9taXNlID0gdGhpcy5nZXRJdGVtPG51bWJlcj4oa2V5cy5leHBpcnkpO1xuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFtkYXRhUHJvbWlzZSwgZXhwaXJ5UHJvbWlzZV0pLnRoZW4odG9DYWNoZWRJdGVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgZGF0YVxuICAgKiBAcGFyYW0ga2V5IERhdGEga2V5XG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlQ2FjaGVkKGtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qga2V5cyA9IGNhbGN1bGF0ZUNhY2hlS2V5cyhrZXkpO1xuXG4gICAgY29uc3QgZGF0YVByb21pc2UgPSB0aGlzLnJlbW92ZUl0ZW0oa2V5cy5kYXRhKTtcbiAgICBjb25zdCBleHBpcnlQcm9taXNlID0gdGhpcy5yZW1vdmVJdGVtKGtleXMuZXhwaXJ5KTtcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChbZGF0YVByb21pc2UsIGV4cGlyeVByb21pc2VdKS50aGVuKHRvVm9pZCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGRhdGFcbiAgICogQHBhcmFtIGtleSBEYXRhIGtleVxuICAgKiBAcGFyYW0gZGF0YSBEYXRhIHRvIHNldFxuICAgKiBAcGFyYW0gW2NhY2hlVGltZV0gT3ZlcnJpZGUgY2FjaGUgc2V0IGluIHtAbGluayBDYWNoZUNvbmZpZ3VyYWJsZSNjYWNoZVRpbWUgZ2xvYmFsIG9yIGluc3RhbmNlIGNvbmZpZ30uXG4gICAqL1xuICBwdWJsaWMgc2V0Q2FjaGVkPFQ+KGtleTogc3RyaW5nLCBkYXRhOiBULCBjYWNoZVRpbWU/OiBudW1iZXIpOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCBrZXlzID0gY2FsY3VsYXRlQ2FjaGVLZXlzKGtleSk7XG4gICAgY29uc3QgZXhwaXJ5ID0gdHlwZW9mIGNhY2hlVGltZSA9PT0gJ251bWJlcicgPyBjYWNoZVRpbWUgOiB0aGlzLmNhY2hlVGltZTtcblxuICAgIGNvbnN0IGRhdGFQcm9taXNlID0gdGhpcy5zZXRJdGVtPFQ+KGtleXMuZGF0YSwgZGF0YSk7XG4gICAgY29uc3QgZXhwaXJ5UHJvbWlzZSA9IHRoaXMuc2V0SXRlbTxudW1iZXI+KGtleXMuZXhwaXJ5LCBEYXRlLm5vdygpICsgZXhwaXJ5KTtcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChbZGF0YVByb21pc2UsIGV4cGlyeVByb21pc2VdKS50aGVuKGhlYWQpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgdG9KU09OKCk6IE5nRm9yYWdlT3B0aW9ucyB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3VwZXIudG9KU09OKCkgYXMgTmdGb3JhZ2VPcHRpb25zLCB7Y2FjaGVUaW1lOiB0aGlzLmNhY2hlVGltZX0pO1xuICB9XG59XG4iXX0=