/**
 * @fileoverview added by tsickle
 * Generated from: lib/dedicated/dedicated-instance-factory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NgForageConfig } from '../config/ng-forage-config.service';
import { InstanceFactory } from '../instance-factory/instance-factory.service';
import { NgForageCacheDedicated } from './ng-forage-cache-dedicated.class';
import { NgForageDedicated } from './ng-forage-dedicated.class';
import * as i0 from "@angular/core";
import * as i1 from "../config/ng-forage-config.service";
import * as i2 from "../instance-factory/instance-factory.service";
/**
 * \@internal
 * @type {?}
 */
const conf$ = Symbol('NgForageConfig');
/**
 * \@internal
 * @type {?}
 */
const if$ = Symbol('InstanceFactory');
export class DedicatedInstanceFactory {
    /**
     * @param {?} conf
     * @param {?} instFact
     */
    constructor(conf, instFact) {
        this[conf$] = conf;
        this[if$] = instFact;
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    createCache(config) {
        /** @type {?} */
        const inst = new NgForageCacheDedicated(this[conf$], this[if$]);
        if (config) {
            inst.configure(config);
        }
        return inst;
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    createNgForage(config) {
        /** @type {?} */
        const inst = new NgForageDedicated(this[conf$], this[if$]);
        if (config) {
            inst.configure(config);
        }
        return inst;
    }
}
DedicatedInstanceFactory.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
DedicatedInstanceFactory.ctorParameters = () => [
    { type: NgForageConfig },
    { type: InstanceFactory }
];
/** @nocollapse */ DedicatedInstanceFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function DedicatedInstanceFactory_Factory() { return new DedicatedInstanceFactory(i0.ɵɵinject(i1.NgForageConfig), i0.ɵɵinject(i2.InstanceFactory)); }, token: DedicatedInstanceFactory, providedIn: "root" });
if (false) {
    /* Skipping unnamed member:
    private readonly [conf$]: NgForageConfig;*/
    /* Skipping unnamed member:
    private readonly [if$]: InstanceFactory;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVkaWNhdGVkLWluc3RhbmNlLWZhY3Rvcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nZm9yYWdlLyIsInNvdXJjZXMiOlsibGliL2RlZGljYXRlZC9kZWRpY2F0ZWQtaW5zdGFuY2UtZmFjdG9yeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFFbEUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBRTdFLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7OztNQUd4RCxLQUFLLEdBQWtCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQzs7Ozs7TUFFL0MsR0FBRyxHQUFrQixNQUFNLENBQUMsaUJBQWlCLENBQUM7QUFHcEQsTUFBTSxPQUFPLHdCQUF3Qjs7Ozs7SUFRbkMsWUFBbUIsSUFBb0IsRUFBRSxRQUF5QjtRQUNoRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFFTSxXQUFXLENBQUMsTUFBd0I7O2NBQ25DLElBQUksR0FBRyxJQUFJLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0QsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3hCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7OztJQUVNLGNBQWMsQ0FBQyxNQUF3Qjs7Y0FDdEMsSUFBSSxHQUFHLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxRCxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7OztZQTlCRixVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7O1lBWnhCLGNBQWM7WUFFZCxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmdGb3JhZ2VDYWNoZX0gZnJvbSAnLi4vY2FjaGUvbmctZm9yYWdlLWNhY2hlLnNlcnZpY2UnO1xuaW1wb3J0IHtOZ0ZvcmFnZUNvbmZpZ30gZnJvbSAnLi4vY29uZmlnL25nLWZvcmFnZS1jb25maWcuc2VydmljZSc7XG5pbXBvcnQge05nRm9yYWdlT3B0aW9uc30gZnJvbSAnLi4vY29uZmlnL25nLWZvcmFnZS1vcHRpb25zJztcbmltcG9ydCB7SW5zdGFuY2VGYWN0b3J5fSBmcm9tICcuLi9pbnN0YW5jZS1mYWN0b3J5L2luc3RhbmNlLWZhY3Rvcnkuc2VydmljZSc7XG5pbXBvcnQge05nRm9yYWdlfSBmcm9tICcuLi9tYWluL25nLWZvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7TmdGb3JhZ2VDYWNoZURlZGljYXRlZH0gZnJvbSAnLi9uZy1mb3JhZ2UtY2FjaGUtZGVkaWNhdGVkLmNsYXNzJztcbmltcG9ydCB7TmdGb3JhZ2VEZWRpY2F0ZWR9IGZyb20gJy4vbmctZm9yYWdlLWRlZGljYXRlZC5jbGFzcyc7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGNvbmYkOiB1bmlxdWUgc3ltYm9sID0gU3ltYm9sKCdOZ0ZvcmFnZUNvbmZpZycpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgaWYkOiB1bmlxdWUgc3ltYm9sID0gU3ltYm9sKCdJbnN0YW5jZUZhY3RvcnknKTtcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgRGVkaWNhdGVkSW5zdGFuY2VGYWN0b3J5IHtcblxuICAvKiogQGludGVybmFsICovXG4gIHByaXZhdGUgcmVhZG9ubHkgW2NvbmYkXTogTmdGb3JhZ2VDb25maWc7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcml2YXRlIHJlYWRvbmx5IFtpZiRdOiBJbnN0YW5jZUZhY3Rvcnk7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbmY6IE5nRm9yYWdlQ29uZmlnLCBpbnN0RmFjdDogSW5zdGFuY2VGYWN0b3J5KSB7XG4gICAgdGhpc1tjb25mJF0gPSBjb25mO1xuICAgIHRoaXNbaWYkXSA9IGluc3RGYWN0O1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZUNhY2hlKGNvbmZpZz86IE5nRm9yYWdlT3B0aW9ucyk6IE5nRm9yYWdlQ2FjaGUge1xuICAgIGNvbnN0IGluc3QgPSBuZXcgTmdGb3JhZ2VDYWNoZURlZGljYXRlZCh0aGlzW2NvbmYkXSwgdGhpc1tpZiRdKTtcbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICBpbnN0LmNvbmZpZ3VyZShjb25maWcpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0O1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZU5nRm9yYWdlKGNvbmZpZz86IE5nRm9yYWdlT3B0aW9ucyk6IE5nRm9yYWdlIHtcbiAgICBjb25zdCBpbnN0ID0gbmV3IE5nRm9yYWdlRGVkaWNhdGVkKHRoaXNbY29uZiRdLCB0aGlzW2lmJF0pO1xuICAgIGlmIChjb25maWcpIHtcbiAgICAgIGluc3QuY29uZmlndXJlKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3Q7XG4gIH1cbn1cbiJdfQ==