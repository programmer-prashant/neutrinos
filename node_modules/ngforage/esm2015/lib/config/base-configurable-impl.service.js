/**
 * @fileoverview added by tsickle
 * Generated from: lib/config/base-configurable-impl.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import 'localforage';
import { InstanceFactory } from '../instance-factory/instance-factory.service';
import { NgForageConfig } from './ng-forage-config.service';
/**
 * \@internal
 * @type {?}
 */
const store$ = Symbol('Store');
/**
 * Abstract service-level configuration layer for NgForage
 * @abstract
 */
export class BaseConfigurableImpl {
    /**
     * \@internal
     * @param {?} config
     * @param {?} instanceFactory
     */
    constructor(config, instanceFactory) {
        /**
         * \@internal
         */
        this.config = {};
        /**
         * \@internal
         */
        this.storeNeedsRecalc = true;
        this.baseConfig = config;
        this.fact = instanceFactory;
    }
    /**
     * A description of the database, essentially for developer usage.
     * \@default ""
     * @return {?}
     */
    get description() {
        return this.config.description || this.baseConfig.description;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set description(v) {
        this.config.description = v;
        this.storeNeedsRecalc = true;
    }
    /**
     * The preferred driver(s) to use.
     * \@default IndexedDB, WebSQL and localStorage
     * @return {?}
     */
    get driver() {
        return this.config.driver || this.baseConfig.driver;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set driver(v) {
        this.config.driver = v;
        this.storeNeedsRecalc = true;
    }
    /**
     * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
     * In localStorage, this is used as a key prefix for all keys stored in localStorage.
     * \@default ngForage
     * @return {?}
     */
    get name() {
        return this.config.name || this.baseConfig.name;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set name(v) {
        this.config.name = v;
        this.storeNeedsRecalc = true;
    }
    /**
     * The size of the database in bytes. Used only in WebSQL for now.
     * \@default 4980736
     * @return {?}
     */
    get size() {
        return this.config.size || this.baseConfig.size;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set size(v) {
        this.config.size = v;
        this.storeNeedsRecalc = true;
    }
    /**
     * The name of the datastore.
     * In IndexedDB this is the dataStore,
     * in WebSQL this is the name of the key/value table in the database.
     * Must be alphanumeric, with underscores.
     * Any non-alphanumeric characters will be converted to underscores.
     * \@default ng_forage
     * @return {?}
     */
    get storeName() {
        return this.config.storeName || this.baseConfig.storeName;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set storeName(v) {
        this.config.storeName = v;
        this.storeNeedsRecalc = true;
    }
    /**
     * The version of your database. May be used for upgrades in the future; currently unused.
     * \@default 1.0
     * @return {?}
     */
    get version() {
        return 'version' in this.config ? (/** @type {?} */ (this.config.version)) : this.baseConfig.version;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set version(v) {
        this.config.version = v;
        this.storeNeedsRecalc = true;
    }
    /**
     * \@internal
     * @protected
     * @return {?}
     */
    get finalConfig() {
        return Object.assign({}, this.baseConfig.config, this.config);
    }
    /**
     * \@internal
     * @protected
     * @return {?}
     */
    get store() {
        if (this.storeNeedsRecalc || !this[store$]) {
            this[store$] = this.fact.getInstance(this.finalConfig);
            this.storeNeedsRecalc = false;
        }
        return this[store$];
    }
    /**
     * Bulk-set configuration options
     * @template THIS
     * @this {THIS}
     * @param {?} opts The configuration
     * @return {THIS}
     */
    configure(opts) {
        opts = opts || {};
        if (Array.isArray(opts.driver)) {
            opts.driver = opts.driver.slice();
        }
        Object.assign((/** @type {?} */ (this)).config, opts);
        (/** @type {?} */ (this)).storeNeedsRecalc = true;
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    toJSON() {
        return {
            description: this.description,
            driver: this.driver,
            name: this.name,
            size: this.size,
            storeName: this.storeName,
            version: this.version
        };
    }
    /**
     * @return {?}
     */
    toString() {
        return JSON.stringify(this.toJSON());
    }
}
BaseConfigurableImpl.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BaseConfigurableImpl.ctorParameters = () => [
    { type: NgForageConfig, decorators: [{ type: Inject, args: [NgForageConfig,] }] },
    { type: InstanceFactory, decorators: [{ type: Inject, args: [InstanceFactory,] }] }
];
if (false) {
    /**
     * \@internal
     * @type {?}
     * @protected
     */
    BaseConfigurableImpl.prototype.baseConfig;
    /**
     * \@internal
     * @type {?}
     * @protected
     */
    BaseConfigurableImpl.prototype.config;
    /**
     * \@internal
     * @type {?}
     * @protected
     */
    BaseConfigurableImpl.prototype.fact;
    /**
     * \@internal
     * @type {?}
     * @protected
     */
    BaseConfigurableImpl.prototype.storeNeedsRecalc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb25maWd1cmFibGUtaW1wbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdmb3JhZ2UvIiwic291cmNlcyI6WyJsaWIvY29uZmlnL2Jhc2UtY29uZmlndXJhYmxlLWltcGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUc3RSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sNEJBQTRCLENBQUM7Ozs7O01BSXBELE1BQU0sR0FBa0IsTUFBTSxDQUFDLE9BQU8sQ0FBQzs7Ozs7QUFNN0MsTUFBTSxPQUFnQixvQkFBb0I7Ozs7OztJQWV4QyxZQUMwQixNQUFzQixFQUNyQixlQUFnQzs7OztRQVh4QyxXQUFNLEdBQW9CLEVBQUUsQ0FBQzs7OztRQU10QyxxQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFPaEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxlQUFlLENBQUM7SUFDOUIsQ0FBQzs7Ozs7O0lBTUQsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUM7SUFDaEUsQ0FBQzs7Ozs7SUFFRCxJQUFXLFdBQVcsQ0FBQyxDQUFTO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0lBQy9CLENBQUM7Ozs7OztJQU1ELElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7SUFDdEQs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QU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDZCxDQUFDOzs7O0lBRU0sTUFBTTtRQUNYLE9BQU87WUFDTCxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDdEIsQ0FBQztJQUNKLENBQUM7Ozs7SUFFTSxRQUFRO1FBQ2IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7OztZQTVKRixVQUFVOzs7O1lBVEgsY0FBYyx1QkEwQmpCLE1BQU0sU0FBQyxjQUFjO1lBN0JsQixlQUFlLHVCQThCbEIsTUFBTSxTQUFDLGVBQWU7Ozs7Ozs7O0lBZHpCLDBDQUE4Qzs7Ozs7O0lBRzlDLHNDQUFnRDs7Ozs7O0lBR2hELG9DQUF5Qzs7Ozs7O0lBR3pDLGdEQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICdsb2NhbGZvcmFnZSc7XG5pbXBvcnQge0luc3RhbmNlRmFjdG9yeX0gZnJvbSAnLi4vaW5zdGFuY2UtZmFjdG9yeS9pbnN0YW5jZS1mYWN0b3J5LnNlcnZpY2UnO1xuaW1wb3J0IHtEcml2ZXJUeXBlfSBmcm9tICcuLi9taXNjL2RyaXZlci10eXBlLnR5cGUnO1xuaW1wb3J0IHtCYXNlQ29uZmlndXJhYmxlfSBmcm9tICcuL2Jhc2UtY29uZmlndXJhYmxlJztcbmltcG9ydCB7TmdGb3JhZ2VDb25maWd9IGZyb20gJy4vbmctZm9yYWdlLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7TmdGb3JhZ2VPcHRpb25zfSBmcm9tICcuL25nLWZvcmFnZS1vcHRpb25zJztcblxuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3Qgc3RvcmUkOiB1bmlxdWUgc3ltYm9sID0gU3ltYm9sKCdTdG9yZScpO1xuXG4vKipcbiAqIEFic3RyYWN0IHNlcnZpY2UtbGV2ZWwgY29uZmlndXJhdGlvbiBsYXllciBmb3IgTmdGb3JhZ2VcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VDb25maWd1cmFibGVJbXBsIGltcGxlbWVudHMgQmFzZUNvbmZpZ3VyYWJsZSB7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgYmFzZUNvbmZpZzogTmdGb3JhZ2VDb25maWc7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgY29uZmlnOiBOZ0ZvcmFnZU9wdGlvbnMgPSB7fTtcblxuICAvKiogQGludGVybmFsICovXG4gIHByb3RlY3RlZCByZWFkb25seSBmYWN0OiBJbnN0YW5jZUZhY3Rvcnk7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgc3RvcmVOZWVkc1JlY2FsYyA9IHRydWU7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChOZ0ZvcmFnZUNvbmZpZykgY29uZmlnOiBOZ0ZvcmFnZUNvbmZpZyxcbiAgICBASW5qZWN0KEluc3RhbmNlRmFjdG9yeSkgaW5zdGFuY2VGYWN0b3J5OiBJbnN0YW5jZUZhY3RvcnlcbiAgKSB7XG4gICAgdGhpcy5iYXNlQ29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuZmFjdCA9IGluc3RhbmNlRmFjdG9yeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0aW9uIG9mIHRoZSBkYXRhYmFzZSwgZXNzZW50aWFsbHkgZm9yIGRldmVsb3BlciB1c2FnZS5cbiAgICogQGRlZmF1bHQgXCJcIlxuICAgKi9cbiAgcHVibGljIGdldCBkZXNjcmlwdGlvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5kZXNjcmlwdGlvbiB8fCB0aGlzLmJhc2VDb25maWcuZGVzY3JpcHRpb247XG4gIH1cblxuICBwdWJsaWMgc2V0IGRlc2NyaXB0aW9uKHY6IHN0cmluZykge1xuICAgIHRoaXMuY29uZmlnLmRlc2NyaXB0aW9uID0gdjtcbiAgICB0aGlzLnN0b3JlTmVlZHNSZWNhbGMgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBwcmVmZXJyZWQgZHJpdmVyKHMpIHRvIHVzZS5cbiAgICogQGRlZmF1bHQgSW5kZXhlZERCLCBXZWJTUUwgYW5kIGxvY2FsU3RvcmFnZVxuICAgKi9cbiAgcHVibGljIGdldCBkcml2ZXIoKTogRHJpdmVyVHlwZSB8IERyaXZlclR5cGVbXSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmRyaXZlciB8fCB0aGlzLmJhc2VDb25maWcuZHJpdmVyO1xuICB9XG5cbiAgcHVibGljIHNldCBkcml2ZXIodjogRHJpdmVyVHlwZSB8IERyaXZlclR5cGVbXSkge1xuICAgIHRoaXMuY29uZmlnLmRyaXZlciA9IHY7XG4gICAgdGhpcy5zdG9yZU5lZWRzUmVjYWxjID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2UuIE1heSBhcHBlYXIgZHVyaW5nIHN0b3JhZ2UgbGltaXQgcHJvbXB0cy4gVXNlZnVsIHRvIHVzZSB0aGUgbmFtZSBvZiB5b3VyIGFwcCBoZXJlLlxuICAgKiBJbiBsb2NhbFN0b3JhZ2UsIHRoaXMgaXMgdXNlZCBhcyBhIGtleSBwcmVmaXggZm9yIGFsbCBrZXlzIHN0b3JlZCBpbiBsb2NhbFN0b3JhZ2UuXG4gICAqIEBkZWZhdWx0IG5nRm9yYWdlXG4gICAqL1xuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcubmFtZSB8fCB0aGlzLmJhc2VDb25maWcubmFtZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgbmFtZSh2OiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbmZpZy5uYW1lID0gdjtcbiAgICB0aGlzLnN0b3JlTmVlZHNSZWNhbGMgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBkYXRhYmFzZSBpbiBieXRlcy4gVXNlZCBvbmx5IGluIFdlYlNRTCBmb3Igbm93LlxuICAgKiBAZGVmYXVsdCA0OTgwNzM2XG4gICAqL1xuICBwdWJsaWMgZ2V0IHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuc2l6ZSB8fCB0aGlzLmJhc2VDb25maWcuc2l6ZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgc2l6ZSh2OiBudW1iZXIpIHtcbiAgICB0aGlzLmNvbmZpZy5zaXplID0gdjtcbiAgICB0aGlzLnN0b3JlTmVlZHNSZWNhbGMgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBkYXRhc3RvcmUuXG4gICAqIEluIEluZGV4ZWREQiB0aGlzIGlzIHRoZSBkYXRhU3RvcmUsXG4gICAqIGluIFdlYlNRTCB0aGlzIGlzIHRoZSBuYW1lIG9mIHRoZSBrZXkvdmFsdWUgdGFibGUgaW4gdGhlIGRhdGFiYXNlLlxuICAgKiBNdXN0IGJlIGFscGhhbnVtZXJpYywgd2l0aCB1bmRlcnNjb3Jlcy5cbiAgICogQW55IG5vbi1hbHBoYW51bWVyaWMgY2hhcmFjdGVycyB3aWxsIGJlIGNvbnZlcnRlZCB0byB1bmRlcnNjb3Jlcy5cbiAgICogQGRlZmF1bHQgbmdfZm9yYWdlXG4gICAqL1xuICBwdWJsaWMgZ2V0IHN0b3JlTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5zdG9yZU5hbWUgfHwgdGhpcy5iYXNlQ29uZmlnLnN0b3JlTmFtZTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgc3RvcmVOYW1lKHY6IHN0cmluZykge1xuICAgIHRoaXMuY29uZmlnLnN0b3JlTmFtZSA9IHY7XG4gICAgdGhpcy5zdG9yZU5lZWRzUmVjYWxjID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiB5b3VyIGRhdGFiYXNlLiBNYXkgYmUgdXNlZCBmb3IgdXBncmFkZXMgaW4gdGhlIGZ1dHVyZTsgY3VycmVudGx5IHVudXNlZC5cbiAgICogQGRlZmF1bHQgMS4wXG4gICAqL1xuICBwdWJsaWMgZ2V0IHZlcnNpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gJ3ZlcnNpb24nIGluIHRoaXMuY29uZmlnID8gPG51bWJlcj50aGlzLmNvbmZpZy52ZXJzaW9uIDogdGhpcy5iYXNlQ29uZmlnLnZlcnNpb247XG4gIH1cblxuICBwdWJsaWMgc2V0IHZlcnNpb24odjogbnVtYmVyKSB7XG4gICAgdGhpcy5jb25maWcudmVyc2lvbiA9IHY7XG4gICAgdGhpcy5zdG9yZU5lZWRzUmVjYWxjID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIGdldCBmaW5hbENvbmZpZygpOiBOZ0ZvcmFnZU9wdGlvbnMge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICB0aGlzLmJhc2VDb25maWcuY29uZmlnLFxuICAgICAgdGhpcy5jb25maWdcbiAgICApO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgZ2V0IHN0b3JlKCk6IExvY2FsRm9yYWdlIHtcbiAgICBpZiAodGhpcy5zdG9yZU5lZWRzUmVjYWxjIHx8ICF0aGlzW3N0b3JlJF0pIHtcbiAgICAgIHRoaXNbc3RvcmUkXSA9IHRoaXMuZmFjdC5nZXRJbnN0YW5jZSh0aGlzLmZpbmFsQ29uZmlnKTtcbiAgICAgIHRoaXMuc3RvcmVOZWVkc1JlY2FsYyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzW3N0b3JlJF07XG4gIH1cblxuICAvKipcbiAgICogQnVsay1zZXQgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRzIFRoZSBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwdWJsaWMgY29uZmlndXJlKG9wdHM6IE5nRm9yYWdlT3B0aW9ucyk6IHRoaXMge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0cy5kcml2ZXIpKSB7XG4gICAgICBvcHRzLmRyaXZlciA9IG9wdHMuZHJpdmVyLnNsaWNlKCk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbmZpZywgb3B0cyk7XG4gICAgdGhpcy5zdG9yZU5lZWRzUmVjYWxjID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIHRvSlNPTigpOiBQYXJ0aWFsPE5nRm9yYWdlT3B0aW9ucz4ge1xuICAgIHJldHVybiB7XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIGRyaXZlcjogdGhpcy5kcml2ZXIsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBzaXplOiB0aGlzLnNpemUsXG4gICAgICBzdG9yZU5hbWU6IHRoaXMuc3RvcmVOYW1lLFxuICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKTtcbiAgfVxufVxuIl19