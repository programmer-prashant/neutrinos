/**
 * @fileoverview added by tsickle
 * Generated from: lib/config/base-configurable.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A configurable object
 * @record
 */
export function BaseConfigurable() { }
if (false) {
    /**
     * A description of the database, essentially for developer usage.
     * \@default ""
     * @type {?}
     */
    BaseConfigurable.prototype.description;
    /**
     * The preferred driver(s) to use.
     * \@default IndexedDB, WebSQL & localStorage
     * @type {?}
     */
    BaseConfigurable.prototype.driver;
    /**
     * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
     * In localStorage, this is used as a key prefix for all keys stored in localStorage.
     * \@default ngForage
     * @type {?}
     */
    BaseConfigurable.prototype.name;
    /**
     * The size of the database in bytes. Used only in WebSQL for now.
     * \@default 4980736
     * @type {?}
     */
    BaseConfigurable.prototype.size;
    /**
     * The name of the datastore.
     * In IndexedDB this is the dataStore,
     * in WebSQL this is the name of the key/value table in the database.
     * Must be alphanumeric, with underscores.
     * Any non-alphanumeric characters will be converted to underscores.
     * \@default ng_forage
     * @type {?}
     */
    BaseConfigurable.prototype.storeName;
    /**
     * The version of your database. May be used for upgrades in the future; currently unused.
     * \@default 1.0
     * @type {?}
     */
    BaseConfigurable.prototype.version;
    /**
     * Bulk-set configuration options
     * @template THIS
     * @this {THIS}
     * @param {?} opts The configuration
     * @return {THIS}
     */
    BaseConfigurable.prototype.configure = function (opts) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb25maWd1cmFibGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ2ZvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9jb25maWcvYmFzZS1jb25maWd1cmFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBTUEsc0NBZ0RDOzs7Ozs7O0lBMUNDLHVDQUFvQjs7Ozs7O0lBTXBCLGtDQUFrQzs7Ozs7OztJQU9sQyxnQ0FBYTs7Ozs7O0lBTWIsZ0NBQWE7Ozs7Ozs7Ozs7SUFVYixxQ0FBa0I7Ozs7OztJQU1sQixtQ0FBZ0I7Ozs7Ozs7O0lBTWhCLDJEQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RHJpdmVyVHlwZX0gZnJvbSAnLi4vbWlzYy9kcml2ZXItdHlwZS50eXBlJztcbmltcG9ydCB7TmdGb3JhZ2VPcHRpb25zfSBmcm9tICcuL25nLWZvcmFnZS1vcHRpb25zJztcblxuLyoqXG4gKiBBIGNvbmZpZ3VyYWJsZSBvYmplY3RcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNlQ29uZmlndXJhYmxlIHtcblxuICAvKipcbiAgICogQSBkZXNjcmlwdGlvbiBvZiB0aGUgZGF0YWJhc2UsIGVzc2VudGlhbGx5IGZvciBkZXZlbG9wZXIgdXNhZ2UuXG4gICAqIEBkZWZhdWx0IFwiXCJcbiAgICovXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwcmVmZXJyZWQgZHJpdmVyKHMpIHRvIHVzZS5cbiAgICogQGRlZmF1bHQgSW5kZXhlZERCLCBXZWJTUUwgJiBsb2NhbFN0b3JhZ2VcbiAgICovXG4gIGRyaXZlcjogRHJpdmVyVHlwZSB8IERyaXZlclR5cGVbXTtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGRhdGFiYXNlLiBNYXkgYXBwZWFyIGR1cmluZyBzdG9yYWdlIGxpbWl0IHByb21wdHMuIFVzZWZ1bCB0byB1c2UgdGhlIG5hbWUgb2YgeW91ciBhcHAgaGVyZS5cbiAgICogSW4gbG9jYWxTdG9yYWdlLCB0aGlzIGlzIHVzZWQgYXMgYSBrZXkgcHJlZml4IGZvciBhbGwga2V5cyBzdG9yZWQgaW4gbG9jYWxTdG9yYWdlLlxuICAgKiBAZGVmYXVsdCBuZ0ZvcmFnZVxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgZGF0YWJhc2UgaW4gYnl0ZXMuIFVzZWQgb25seSBpbiBXZWJTUUwgZm9yIG5vdy5cbiAgICogQGRlZmF1bHQgNDk4MDczNlxuICAgKi9cbiAgc2l6ZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZGF0YXN0b3JlLlxuICAgKiBJbiBJbmRleGVkREIgdGhpcyBpcyB0aGUgZGF0YVN0b3JlLFxuICAgKiBpbiBXZWJTUUwgdGhpcyBpcyB0aGUgbmFtZSBvZiB0aGUga2V5L3ZhbHVlIHRhYmxlIGluIHRoZSBkYXRhYmFzZS5cbiAgICogTXVzdCBiZSBhbHBoYW51bWVyaWMsIHdpdGggdW5kZXJzY29yZXMuXG4gICAqIEFueSBub24tYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gdW5kZXJzY29yZXMuXG4gICAqIEBkZWZhdWx0IG5nX2ZvcmFnZVxuICAgKi9cbiAgc3RvcmVOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB2ZXJzaW9uIG9mIHlvdXIgZGF0YWJhc2UuIE1heSBiZSB1c2VkIGZvciB1cGdyYWRlcyBpbiB0aGUgZnV0dXJlOyBjdXJyZW50bHkgdW51c2VkLlxuICAgKiBAZGVmYXVsdCAxLjBcbiAgICovXG4gIHZlcnNpb246IG51bWJlcjtcblxuICAvKipcbiAgICogQnVsay1zZXQgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRzIFRoZSBjb25maWd1cmF0aW9uXG4gICAqL1xuICBjb25maWd1cmUob3B0czogTmdGb3JhZ2VPcHRpb25zKTogdGhpcztcbn1cbiJdfQ==