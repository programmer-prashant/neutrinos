/**
 * @fileoverview added by tsickle
 * Generated from: lib/config/ng-forage-config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import 'localforage';
import { localForage as lf } from '../imports/localforage';
import { Driver } from '../misc/driver.enum';
import { DEFAULT_CONFIG } from '../misc/injection-tokens';
import * as i0 from "@angular/core";
import * as i1 from "../misc/injection-tokens";
/**
 * \@internal
 * @type {?}
 */
const $defaultConfig = Symbol('Default Config');
/**
 * Global/default configuration
 */
export class NgForageConfig {
    /**
     * @param {?} conf
     */
    constructor(conf) {
        this[$defaultConfig] = {
            cacheTime: 300000,
            description: '',
            driver: [Driver.INDEXED_DB, Driver.WEB_SQL, Driver.LOCAL_STORAGE],
            name: 'ngForage',
            size: 4980736,
            storeName: 'ng_forage',
            version: 1
        };
        if (conf) {
            this.configure(conf);
        }
    }
    /**
     * Cache time in milliseconds
     * \@default 300000
     * @return {?}
     */
    get cacheTime() {
        return (/** @type {?} */ (this[$defaultConfig].cacheTime));
    }
    /**
     * @param {?} t
     * @return {?}
     */
    set cacheTime(t) {
        this[$defaultConfig].cacheTime = t;
    }
    /**
     * Get the compiled configuration
     * @return {?}
     */
    get config() {
        return {
            cacheTime: this.cacheTime,
            description: this.description,
            driver: this.driver,
            name: this.name,
            size: this.size,
            storeName: this.storeName,
            version: this.version
        };
    }
    /**
     * A description of the database, essentially for developer usage.
     * \@default
     * @return {?}
     */
    get description() {
        return (/** @type {?} */ (this[$defaultConfig].description));
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set description(v) {
        this[$defaultConfig].description = v;
    }
    /**
     * The preferred driver(s) to use.
     * @return {?}
     */
    get driver() {
        if (typeof this[$defaultConfig].driver === 'string') {
            return (/** @type {?} */ (this[$defaultConfig].driver));
        }
        return ((/** @type {?} */ (this[$defaultConfig].driver))).slice();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set driver(v) {
        this[$defaultConfig].driver = v;
    }
    /**
     * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
     * In localStorage, this is used as a key prefix for all keys stored in localStorage.
     * \@default ngForage
     * @return {?}
     */
    get name() {
        return (/** @type {?} */ (this[$defaultConfig].name));
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set name(v) {
        this[$defaultConfig].name = v;
    }
    /**
     * The size of the database in bytes. Used only in WebSQL for now.
     * \@default 4980736
     * @return {?}
     */
    get size() {
        return (/** @type {?} */ (this[$defaultConfig].size));
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set size(v) {
        this[$defaultConfig].size = v;
    }
    /**
     * The name of the datastore.
     * In IndexedDB this is the dataStore,
     * in WebSQL this is the name of the key/value table in the database.
     * Must be alphanumeric, with underscores.
     * Any non-alphanumeric characters will be converted to underscores.
     * \@default ng_forage
     * @return {?}
     */
    get storeName() {
        return (/** @type {?} */ (this[$defaultConfig].storeName));
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set storeName(v) {
        this[$defaultConfig].storeName = v;
    }
    /**
     * The version of your database. May be used for upgrades in the future; currently unused.
     * \@default 1.0
     * @return {?}
     */
    get version() {
        return (/** @type {?} */ (this[$defaultConfig].version));
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set version(v) {
        this[$defaultConfig].version = v;
    }
    /**
     * Bulk-set configuration options
     * @template THIS
     * @this {THIS}
     * @param {?} opts The configuration
     * @return {THIS}
     */
    configure(opts) {
        opts = opts || {};
        if (opts.driver && ((/** @type {?} */ (opts.driver))).slice) {
            opts.driver = ((/** @type {?} */ (opts.driver))).slice();
        }
        Object.assign((/** @type {?} */ (this))[$defaultConfig], opts);
        return (/** @type {?} */ (this));
    }
    /**
     * Define a driver
     *
     * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the
     * default drivers do. You’ll also want to resolve or reject promises.
     * Check any of the {\@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}
     * for an idea of how to implement your own, custom driver.
     * @param {?} spec Driver spec
     * @return {?}
     */
    defineDriver(spec) {
        return lf.defineDriver(spec);
    }
    /**
     * \@internal
     * @return {?}
     */
    toJSON() {
        return this.config;
    }
    /**
     * @return {?}
     */
    toString() {
        return JSON.stringify(this.toJSON());
    }
}
NgForageConfig.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
NgForageConfig.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DEFAULT_CONFIG,] }] }
];
/** @nocollapse */ NgForageConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgForageConfig_Factory() { return new NgForageConfig(i0.ɵɵinject(i1.DEFAULT_CONFIG, 8)); }, token: NgForageConfig, providedIn: "root" });
if (false) {
    /* Skipping unnamed member:
    private readonly [$defaultConfig]: NgForageOptions;*/
}
//# sourceMappingURL=data:application/json;base64,