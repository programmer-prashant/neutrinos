{"version":3,"file":"ngforage.js","sources":["ngforage/lib/cache/cached-item.ts","ngforage/lib/cache/cached-item-impl.class.ts","ngforage/lib/imports/localforage.ts","ngforage/lib/misc/driver.enum.ts","ngforage/lib/misc/injection-tokens.ts","ngforage/lib/config/ng-forage-config.service.ts","ngforage/lib/instance-factory/instance-factory.service.ts","ngforage/lib/config/base-configurable-impl.service.ts","ngforage/lib/main/ng-forage.service.ts","ngforage/lib/cache/ng-forage-cache.service.ts","ngforage/lib/config/base-configurable.ts","ngforage/lib/config/cache-configurable.ts","ngforage/lib/dedicated/ng-forage-cache-dedicated.class.ts","ngforage/lib/dedicated/ng-forage-dedicated.class.ts","ngforage/lib/dedicated/dedicated-instance-factory.service.ts"],"names":["lf['default']","lf","conf$"],"mappings":"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","sourcesContent":["/** Cached data */\nexport interface CachedItem<T> {\n  /** The data */\n  readonly data: T;\n\n  /** Whether the data has expired */\n  readonly expired: boolean;\n\n  /** When the cached item expired or will expire */\n  readonly expires: Date;\n\n  /** Number of milliseconds until the data expires */\n  readonly expiresIn: number;\n\n  /** Whether data was found */\n  readonly hasData: boolean;\n}\n","import {CachedItem} from './cached-item';\n\n/** @internal */\nexport class CachedItemImpl<T> implements CachedItem<T> {\n\n  public readonly expires: Date;\n\n  public constructor(public readonly data: T, expiryTime: number) {\n    this.expires = new Date(typeof <any>expiryTime === 'number' ? expiryTime : 0);\n  }\n\n  public get expired(): boolean {\n    const value = this.expiresIn === 0;\n    if (value) {\n      Object.defineProperty(this, 'expired', {value});\n    }\n\n    return value;\n  }\n\n  public get expiresIn(): number {\n    const value = Math.max(0, this.expires.getTime() - Date.now());\n    if (!value) {\n      Object.defineProperty(this, 'expiresIn', {value});\n    }\n\n    return value;\n  }\n\n  public get hasData(): boolean {\n    const value = this.data != null; //tslint:disable-line:triple-equals\n    Object.defineProperty(this, 'hasData', {value});\n\n    return value;\n  }\n\n  public toJSON(): CachedItem<T> {\n    return {\n      data: this.data,\n      expired: this.expired,\n      expires: this.expires,\n      expiresIn: this.expiresIn,\n      hasData: this.hasData\n    };\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import * as lf from 'localforage';\n\n/** @internal */\nexport const localForage: LocalForage = 'defineDriver' in lf ? lf : lf['default'];\n","import {localForage as lf} from '../imports/localforage';\n\n/** ngforage abstraction over localforage driver names */\nenum Driver {\n  /** The IndexedDB driver */\n  INDEXED_DB = <any>lf.INDEXEDDB,\n  /** The localStorage driver */\n  LOCAL_STORAGE = <any>lf.LOCALSTORAGE,\n  /** The WebSQL driver */\n  WEB_SQL = <any>lf.WEBSQL\n}\n\n// Clean up after Typescript's two-way enum transpilig\nfor (const d of [lf.INDEXEDDB, lf.LOCALSTORAGE, lf.WEBSQL]) {\n  delete Driver[d];\n}\n\nObject.freeze(Driver);\n\nexport {Driver};\n","import {InjectionToken} from '@angular/core';\nimport {NgForageOptions} from '../config/ng-forage-options';\n\n/** Default ngforage configuration */\nexport const DEFAULT_CONFIG = new InjectionToken<NgForageOptions>('Default NgForage config');\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport 'localforage';\nimport {localForage as lf} from '../imports/localforage';\nimport {DriverType} from '../misc/driver-type.type';\nimport {Driver} from '../misc/driver.enum';\nimport {DEFAULT_CONFIG} from '../misc/injection-tokens';\nimport {BaseConfigurable} from './base-configurable';\nimport {CacheConfigurable} from './cache-configurable';\nimport {NgForageOptions} from './ng-forage-options';\n\n/** @internal */\nconst $defaultConfig: unique symbol = Symbol('Default Config');\n\n/**\n * Global/default configuration\n */\n@Injectable({providedIn: 'root'})\nexport class NgForageConfig implements BaseConfigurable, CacheConfigurable {\n\n  /** @internal */\n  private readonly [$defaultConfig]: NgForageOptions;\n\n  public constructor(@Optional() @Inject(DEFAULT_CONFIG) conf: NgForageOptions) {\n    this[$defaultConfig] = {\n      cacheTime: 300000,\n      description: '',\n      driver: [Driver.INDEXED_DB, Driver.WEB_SQL, Driver.LOCAL_STORAGE],\n      name: 'ngForage',\n      size: 4980736,\n      storeName: 'ng_forage',\n      version: 1\n    };\n    if (conf) {\n      this.configure(conf);\n    }\n  }\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  public get cacheTime(): number {\n    return <number>this[$defaultConfig].cacheTime;\n  }\n\n  public set cacheTime(t: number) {\n    this[$defaultConfig].cacheTime = t;\n  }\n\n  /**\n   * Get the compiled configuration\n   */\n  public get config(): NgForageOptions {\n    return {\n      cacheTime: this.cacheTime,\n      description: this.description,\n      driver: this.driver,\n      name: this.name,\n      size: this.size,\n      storeName: this.storeName,\n      version: this.version\n    };\n  }\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default\n   */\n  public get description(): string {\n    return <string>this[$defaultConfig].description;\n  }\n\n  public set description(v: string) {\n    this[$defaultConfig].description = v;\n  }\n\n  /**\n   * The preferred driver(s) to use.\n   */\n  public get driver(): DriverType | DriverType[] {\n    if (typeof this[$defaultConfig].driver === 'string') {\n      return <string>this[$defaultConfig].driver;\n    }\n\n    return (<string[]>this[$defaultConfig].driver).slice();\n  }\n\n  public set driver(v: DriverType | DriverType[]) {\n    this[$defaultConfig].driver = v;\n  }\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  public get name(): string {\n    return <string>this[$defaultConfig].name;\n  }\n\n  public set name(v: string) {\n    this[$defaultConfig].name = v;\n  }\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  public get size(): number {\n    return <number>this[$defaultConfig].size;\n  }\n\n  public set size(v: number) {\n    this[$defaultConfig].size = v;\n  }\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  public get storeName(): string {\n    return <string>this[$defaultConfig].storeName;\n  }\n\n  public set storeName(v: string) {\n    this[$defaultConfig].storeName = v;\n  }\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  public get version(): number {\n    return <number>this[$defaultConfig].version;\n  }\n\n  public set version(v: number) {\n    this[$defaultConfig].version = v;\n  }\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  public configure(opts: NgForageOptions): this {\n    opts = opts || {};\n\n    if (opts.driver && (<any[]>opts.driver).slice) {\n      opts.driver = (<DriverType[]>opts.driver).slice();\n    }\n\n    Object.assign(this[$defaultConfig], opts);\n\n    return this;\n  }\n\n  /**\n   * Define a driver\n   *\n   * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the\n   * default drivers do. You’ll also want to resolve or reject promises.\n   * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}\n   * for an idea of how to implement your own, custom driver.\n   * @param spec Driver spec\n   */\n  public defineDriver(spec: LocalForageDriver): Promise<void> {\n    return lf.defineDriver(spec);\n  }\n\n  /** @internal */\n  public toJSON(): NgForageOptions {\n    return this.config;\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import {Injectable} from '@angular/core';\nimport 'localforage';\nimport {NgForageConfig} from '../config/ng-forage-config.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {localForage as lf} from '../imports/localforage';\nimport {DriverType} from '../misc/driver-type.type';\n\n/** @internal */\ninterface InstanceMap {\n  [hash: string]: LocalForage;\n}\n\n/** @internal */\nconst stores: InstanceMap = {};\n\n/** @internal */\nfunction getDriverString(driver?: DriverType | DriverType[]): string {\n  if (!driver) {\n    return '';\n  } else if (Array.isArray(driver)) {\n    return driver.slice().sort().join(',');\n  } else {\n    return <string>driver;\n  }\n}\n\n/** @internal */\nfunction getHash(cfg: NgForageOptions): string {\n  return [\n    getDriverString(cfg.driver),\n    cfg.name,\n    cfg.size,\n    cfg.storeName,\n    cfg.version,\n    cfg.description,\n    cfg.cacheTime\n  ].join('|');\n}\n\n/** @internal */\nconst conf$ = Symbol('Config');\n\n/**\n * Creates localForage instances\n */\n@Injectable({providedIn: 'root'})\nexport class InstanceFactory {\n\n  /** @internal */\n  public constructor(conf: NgForageConfig) {\n    this[conf$] = conf;\n  }\n\n  public getInstance(cfg: NgForageOptions): LocalForage {\n    cfg = Object.assign({}, this[conf$].config, cfg || {});\n    const hash = getHash(cfg);\n\n    if (!stores[hash]) {\n      stores[hash] = lf.createInstance(cfg);\n    }\n\n    return stores[hash];\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport 'localforage';\nimport {InstanceFactory} from '../instance-factory/instance-factory.service';\nimport {DriverType} from '../misc/driver-type.type';\nimport {BaseConfigurable} from './base-configurable';\nimport {NgForageConfig} from './ng-forage-config.service';\nimport {NgForageOptions} from './ng-forage-options';\n\n/** @internal */\nconst store$: unique symbol = Symbol('Store');\n\n/**\n * Abstract service-level configuration layer for NgForage\n */\n@Injectable()\nexport abstract class BaseConfigurableImpl implements BaseConfigurable {\n\n  /** @internal */\n  protected readonly baseConfig: NgForageConfig;\n\n  /** @internal */\n  protected readonly config: NgForageOptions = {};\n\n  /** @internal */\n  protected readonly fact: InstanceFactory;\n\n  /** @internal */\n  protected storeNeedsRecalc = true;\n\n  /** @internal */\n  public constructor(\n    @Inject(NgForageConfig) config: NgForageConfig,\n    @Inject(InstanceFactory) instanceFactory: InstanceFactory\n  ) {\n    this.baseConfig = config;\n    this.fact = instanceFactory;\n  }\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default \"\"\n   */\n  public get description(): string {\n    return this.config.description || this.baseConfig.description;\n  }\n\n  public set description(v: string) {\n    this.config.description = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The preferred driver(s) to use.\n   * @default IndexedDB, WebSQL and localStorage\n   */\n  public get driver(): DriverType | DriverType[] {\n    return this.config.driver || this.baseConfig.driver;\n  }\n\n  public set driver(v: DriverType | DriverType[]) {\n    this.config.driver = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  public get name(): string {\n    return this.config.name || this.baseConfig.name;\n  }\n\n  public set name(v: string) {\n    this.config.name = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  public get size(): number {\n    return this.config.size || this.baseConfig.size;\n  }\n\n  public set size(v: number) {\n    this.config.size = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  public get storeName(): string {\n    return this.config.storeName || this.baseConfig.storeName;\n  }\n\n  public set storeName(v: string) {\n    this.config.storeName = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  public get version(): number {\n    return 'version' in this.config ? <number>this.config.version : this.baseConfig.version;\n  }\n\n  public set version(v: number) {\n    this.config.version = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /** @internal */\n  protected get finalConfig(): NgForageOptions {\n    return Object.assign(\n      {},\n      this.baseConfig.config,\n      this.config\n    );\n  }\n\n  /** @internal */\n  protected get store(): LocalForage {\n    if (this.storeNeedsRecalc || !this[store$]) {\n      this[store$] = this.fact.getInstance(this.finalConfig);\n      this.storeNeedsRecalc = false;\n    }\n\n    return this[store$];\n  }\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  public configure(opts: NgForageOptions): this {\n    opts = opts || {};\n\n    if (Array.isArray(opts.driver)) {\n      opts.driver = opts.driver.slice();\n    }\n\n    Object.assign(this.config, opts);\n    this.storeNeedsRecalc = true;\n\n    return this;\n  }\n\n  public toJSON(): Partial<NgForageOptions> {\n    return {\n      description: this.description,\n      driver: this.driver,\n      name: this.name,\n      size: this.size,\n      storeName: this.storeName,\n      version: this.version\n    };\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BaseConfigurable} from '../config/base-configurable';\nimport {BaseConfigurableImpl} from '../config/base-configurable-impl.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {DriverType} from '../misc/driver-type.type';\nimport {Driver} from '../misc/driver.enum';\n\n/**\n * Cache instance\n */\n@Injectable({providedIn: 'root'})\nexport class NgForage extends BaseConfigurableImpl implements BaseConfigurable {\n\n  /**\n   * Returns the name of the driver being used, or null if none can be used.\n   */\n  public get activeDriver(): DriverType {\n    return this.store.driver();\n  }\n\n  /**\n   * Removes every key from the database, returning it to a blank slate.\n   *\n   * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n   */\n  public clear(): Promise<void> {\n    return this.store.clear();\n  }\n\n  /**\n   * Make a clone of the instance\n   * @param config Optional configuration\n   */\n  public clone(config?: NgForageOptions): NgForage {\n    const inst = new NgForage(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n\n  /**\n   * Gets an item from the storage library.\n   * If the key does not exist, getItem() will return null.\n   * @param key Data key\n   */\n  public getItem<T>(key: string): Promise<T> {\n    return this.store.getItem<T>(key);\n  }\n\n  /**\n   * Iterate over all value/key pairs in datastore.\n   * <i>iteratee</i> is called once for each pair, with the following arguments:\n   * <ol>\n   *   <li>Value</li>\n   *   <li>Key</li>\n   *   <li>iterationNumber - one-based number</li>\n   * </ol>\n   * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n   * @param iteratee\n   */\n  public iterate<T, U>(iteratee: (value: T, key: string, iterationNumber: number) => U): Promise<U> {\n    return this.store.iterate(iteratee);\n  }\n\n  /**\n   * Get the name of a key based on its ID.\n   * @param index\n   */\n  public key(index: number): Promise<string> {\n    return this.store.key(index);\n  }\n\n  /**\n   * Get the list of all keys in the datastore.\n   */\n  public keys(): Promise<string[]> {\n    return this.store.keys();\n  }\n\n  /**\n   * Gets the number of keys in the offline store (i.e. its “length”).\n   */\n  public length(): Promise<number> {\n    return this.store.length();\n  }\n\n  /**\n   * Even though localForage queues up all of its data API method calls,\n   * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n   * That’s useful in cases like when we want to know which driver localForage has settled down using.\n   */\n  public ready(): Promise<void> {\n    return this.store.ready();\n  }\n\n  /**\n   * Removes the value of a key from the offline store.\n   * @param key Data key\n   */\n  public removeItem(key: string): Promise<void> {\n    return this.store.removeItem(key);\n  }\n\n  /**\n   * Saves data to an offline store. You can store the following types of JavaScript objects:\n   * <ul>\n   *  <li>Array</li>\n   *  <li>ArrayBuffer</li>\n   *  <li>Blob</li>\n   *  <li>Float32Array</li>\n   *  <li>Float64Array</li>\n   *  <li>Int8Array</li>\n   *  <li>Int16Array</li>\n   *  <li>Int32Array</li>\n   *  <li>Number</li>\n   *  <li>Object</li>\n   *  <li>Uint8Array</li>\n   *  <li>Uint8ClampedArray</li>\n   *  <li>Uint16Array</li>\n   *  <li>Uint32Array</li>\n   *  <li>String</li>\n   * </ul>\n   * @param key Data key\n   * @param data Data\n   */\n  public setItem<T>(key: string, data: T): Promise<T> {\n    return this.store.setItem<T>(key, data);\n  }\n\n  /**\n   * Check whether the given driver is supported/registered.\n   * @param driver Driver name\n   */\n  public supports(driver: Driver | string): boolean {\n    return this.store.supports(<string>driver);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {CacheConfigurable} from '../config/cache-configurable';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {NgForage} from '../main/ng-forage.service';\nimport {CachedItem} from './cached-item';\nimport {CachedItemImpl} from './cached-item-impl.class';\n\n/** @internal */\ninterface CacheKeys {\n  data: string;\n\n  expiry: string;\n}\n\n/** @internal */\nfunction calculateCacheKeys(mainKey: string): CacheKeys {\n  return {\n    data: `${mainKey}_data`,\n    expiry: `${mainKey}_expiry`\n  };\n}\n\n/** @internal */\nfunction toCachedItem<T>(r: [T, number]): CachedItem<T> {\n  return new CachedItemImpl<T>(r[0], r[1]);\n}\n\n/** @internal */\nfunction head<T>(r: [T, number]) {\n  return r[0];\n}\n\n/** @internal */\n// tslint:disable-next-line:no-empty\nfunction toVoid(): void {\n\n}\n\n/**\n * An extension of {@link NgForage} which adds expiration support\n */\n@Injectable({providedIn: 'root'})\nexport class NgForageCache extends NgForage implements CacheConfigurable {\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  public get cacheTime(): number {\n    return this.config.cacheTime || this.baseConfig.cacheTime;\n  }\n\n  public set cacheTime(t: number) {\n    this.config.cacheTime = t;\n    this.storeNeedsRecalc = true;\n  }\n\n  /** @inheritDoc */\n  public clone(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCache(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n\n  /**\n   * Retrieve data\n   * @param key Data key\n   */\n  public getCached<T>(key: string): Promise<CachedItem<T>> {\n    const keys = calculateCacheKeys(key);\n    const dataPromise = this.getItem<T>(keys.data);\n    const expiryPromise = this.getItem<number>(keys.expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);\n  }\n\n  /**\n   * Remove data\n   * @param key Data key\n   */\n  public removeCached(key: string): Promise<void> {\n    const keys = calculateCacheKeys(key);\n\n    const dataPromise = this.removeItem(keys.data);\n    const expiryPromise = this.removeItem(keys.expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(toVoid);\n  }\n\n  /**\n   * Set data\n   * @param key Data key\n   * @param data Data to set\n   * @param [cacheTime] Override cache set in {@link CacheConfigurable#cacheTime global or instance config}.\n   */\n  public setCached<T>(key: string, data: T, cacheTime?: number): Promise<T> {\n    const keys = calculateCacheKeys(key);\n    const expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;\n\n    const dataPromise = this.setItem<T>(keys.data, data);\n    const expiryPromise = this.setItem<number>(keys.expiry, Date.now() + expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(head);\n  }\n\n  /** @internal */\n  public toJSON(): NgForageOptions {\n    return Object.assign(super.toJSON() as NgForageOptions, {cacheTime: this.cacheTime});\n  }\n}\n","import {DriverType} from '../misc/driver-type.type';\nimport {NgForageOptions} from './ng-forage-options';\n\n/**\n * A configurable object\n */\nexport interface BaseConfigurable {\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default \"\"\n   */\n  description: string;\n\n  /**\n   * The preferred driver(s) to use.\n   * @default IndexedDB, WebSQL & localStorage\n   */\n  driver: DriverType | DriverType[];\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  name: string;\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  size: number;\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  storeName: string;\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  version: number;\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  configure(opts: NgForageOptions): this;\n}\n","/**\n * A cacheable configurable object\n */\nexport interface CacheConfigurable {\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  cacheTime: number;\n}\n","import {NgForageCache} from '../cache/ng-forage-cache.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\n\n/** @internal */\nexport class NgForageCacheDedicated extends NgForageCache {\n\n  public clone(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCacheDedicated(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n}\n","import {NgForageOptions} from '../config/ng-forage-options';\nimport {NgForage} from '../main/ng-forage.service';\n\n/** @internal */\nexport class NgForageDedicated extends NgForage {\n\n  public clone(config?: NgForageOptions): NgForage {\n    const inst = new NgForageDedicated(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {NgForageCache} from '../cache/ng-forage-cache.service';\nimport {NgForageConfig} from '../config/ng-forage-config.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {InstanceFactory} from '../instance-factory/instance-factory.service';\nimport {NgForage} from '../main/ng-forage.service';\nimport {NgForageCacheDedicated} from './ng-forage-cache-dedicated.class';\nimport {NgForageDedicated} from './ng-forage-dedicated.class';\n\n/** @internal */\nconst conf$: unique symbol = Symbol('NgForageConfig');\n/** @internal */\nconst if$: unique symbol = Symbol('InstanceFactory');\n\n@Injectable({providedIn: 'root'})\nexport class DedicatedInstanceFactory {\n\n  /** @internal */\n  private readonly [conf$]: NgForageConfig;\n\n  /** @internal */\n  private readonly [if$]: InstanceFactory;\n\n  public constructor(conf: NgForageConfig, instFact: InstanceFactory) {\n    this[conf$] = conf;\n    this[if$] = instFact;\n  }\n\n  public createCache(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCacheDedicated(this[conf$], this[if$]);\n    if (config) {\n      inst.configure(config);\n    }\n\n    return inst;\n  }\n\n  public createNgForage(config?: NgForageOptions): NgForage {\n    const inst = new NgForageDedicated(this[conf$], this[if$]);\n    if (config) {\n      inst.configure(config);\n    }\n\n    return inst;\n  }\n}\n"]}