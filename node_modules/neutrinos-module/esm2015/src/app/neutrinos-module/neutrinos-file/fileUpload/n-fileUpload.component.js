import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild, Renderer2 } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
let NFileUploadComponent = class NFileUploadComponent {
    constructor(fileIOService, _renderer) {
        this.fileIOService = fileIOService;
        this._renderer = _renderer;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    /**
     * Method executed when upload button is clicked.
     */
    handleUpload() {
        this.isDone = false;
        if (this.file && this.uploadOptions && this.uploadOptions.entityName && this.uploadOptions.metadata) {
            this.fileIOService.upload({ files: this.file, entityName: this.uploadOptions.entityName, metadata: this.uploadOptions.metadata })
                .then((res) => {
                this.isDone = true;
                this.onsuccess.emit(res);
            })
                .catch(err => this.onerror.emit(err));
        }
        else {
            this.onerror.emit(new Error('Upload options missing'));
        }
    }
    /**
     * Method executed when a file is selected.
     */
    handleSelect(fileInput) {
        if (fileInput.target.files && fileInput.target.files[0]) {
            this.file = fileInput.target.files[0];
            this.fileName = this.file.name;
        }
    }
    /**
     * Methods executed when cancel button is clicked.
     * Clears files.
     */
    cancel() {
        this.file = null;
        this.fileName = null;
        this.isDone = false;
        // check if the file input is rendered before clearing it
        if (this.fileInput) {
            this._renderer.setProperty(this.fileInput, 'value', '');
        }
    }
    disableFileUploadButton() {
        if (typeof this.disableButton === 'boolean') {
            return this.disableButton;
        }
        return this.disableButton === 'disabled' || this.disableButton === 'true' ? true : false;
    }
};
NFileUploadComponent.ctorParameters = () => [
    { type: NFileIOService },
    { type: Renderer2 }
];
__decorate([
    ViewChild('fileInput', { static: false })
], NFileUploadComponent.prototype, "fileInput", void 0);
__decorate([
    Input()
], NFileUploadComponent.prototype, "uploadOptions", void 0);
__decorate([
    Input('disabled')
], NFileUploadComponent.prototype, "disableButton", void 0);
__decorate([
    Output()
], NFileUploadComponent.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NFileUploadComponent.prototype, "onerror", void 0);
NFileUploadComponent = __decorate([
    Component({
        selector: 'n-file-upload',
        template: "<div>\n  <button mat-raised-button class=\"bh-file-upload\" (click)=\"fileInput.click()\" color=\"primary\"\n    *ngIf=\"!fileName\" [disabled]=\"disableFileUploadButton()\">\n    <mat-icon>attach_file</mat-icon>\n    <span>Choose a file...</span>\n    <input #fileInput type=\"file\" (change)=\"handleSelect($event)\" style=\"display:none;\" />\n  </button>\n  <div *ngIf=\"fileName\">\n    <button mat-raised-button color=\"primary\" (click)=\"handleUpload()\">\n      <mat-icon>file_upload</mat-icon>\n      <span>{{fileName}}</span>\n    </button>\n    <button *ngIf=\"!isDone\" mat-icon-button color=\"warn\" (click)=\"cancel()\" class=\"bh-file-upload-cancel\">\n      <mat-icon>cancel</mat-icon>\n    </button>\n    <button *ngIf=\"isDone\" mat-icon-button (click)=\"cancel()\" class=\"bh-file-upload-done\">\n      <mat-icon>done</mat-icon>\n    </button>\n  </div>\n</div>\n",
        styles: [".bh-file-upload{padding-left:8px;padding-right:8px}.bh-file-upload-cancel{height:24px;width:24px;position:relative;top:24px;left:-12px}::ng-deep [dir=rtl] .bh-file-upload-cancel{right:-12px;left:0}.bh-file-upload-cancel mat-icon{border-radius:12px;vertical-align:baseline}.bh-file-upload-done{height:24px;width:24px;position:relative;top:20px;left:-13px}::ng-deep [dir=rtl] .bh-file-upload-done{right:-12px;left:0}.bh-file-upload-done mat-icon{border-radius:12px;vertical-align:baseline}"]
    })
], NFileUploadComponent);
export { NFileUploadComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1maWxlVXBsb2FkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1tb2R1bGUvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1tb2R1bGUvbmV1dHJpbm9zLWZpbGUvZmlsZVVwbG9hZC9uLWZpbGVVcGxvYWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0YsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBUTlELElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBVy9CLFlBQ1UsYUFBNkIsRUFDN0IsU0FBb0I7UUFEcEIsa0JBQWEsR0FBYixhQUFhLENBQWdCO1FBQzdCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFMcEIsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3ZELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUk3QixDQUFDO0lBRW5DOztPQUVHO0lBQ0gsWUFBWTtRQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFO1lBQ25HLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO2lCQUM5SCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDWixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDbkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDekM7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztTQUN4RDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILFlBQVksQ0FBQyxTQUFjO1FBQ3pCLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdkQsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU07UUFDSixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQix5REFBeUQ7UUFDekQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQztJQUVELHVCQUF1QjtRQUNyQixJQUFJLE9BQU8sSUFBSSxDQUFDLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDM0MsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxLQUFLLFVBQVUsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDM0YsQ0FBQztDQUVGLENBQUE7O1lBbkQwQixjQUFjO1lBQ2xCLFNBQVM7O0FBWlc7SUFBeEMsU0FBUyxDQUFDLFdBQVcsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMsQ0FBQzt1REFBVztBQUsxQztJQUFSLEtBQUssRUFBRTsyREFBZTtBQUNKO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7MkRBQWU7QUFDdkI7SUFBVCxNQUFNLEVBQUU7dURBQXdEO0FBQ3ZEO0lBQVQsTUFBTSxFQUFFO3FEQUFzRDtBQVRwRCxvQkFBb0I7SUFMaEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGVBQWU7UUFFekIsKzNCQUEyQzs7S0FDNUMsQ0FBQztHQUNXLG9CQUFvQixDQStEaEM7U0EvRFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFZpZXdDaGlsZCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBORmlsZUlPU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL24tZmlsZUlPLnNlcnZpY2UnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ24tZmlsZS11cGxvYWQnLFxuICBzdHlsZVVybHM6IFsnLi9uLWZpbGVVcGxvYWQuY29tcG9uZW50LnNjc3MnXSxcbiAgdGVtcGxhdGVVcmw6ICcuL24tZmlsZVVwbG9hZC50ZW1wbGF0ZS5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgTkZpbGVVcGxvYWRDb21wb25lbnQge1xuICBAVmlld0NoaWxkKCdmaWxlSW5wdXQnLCB7c3RhdGljOiBmYWxzZX0pIGZpbGVJbnB1dDtcbiAgZmlsZTogRmlsZTtcbiAgZmlsZU5hbWU7XG4gIGlzRG9uZTogYm9vbGVhbjtcblxuICBASW5wdXQoKSB1cGxvYWRPcHRpb25zO1xuICBASW5wdXQoJ2Rpc2FibGVkJykgZGlzYWJsZUJ1dHRvbjtcbiAgQE91dHB1dCgpIG9uc3VjY2VzczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIG9uZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBmaWxlSU9TZXJ2aWNlOiBORmlsZUlPU2VydmljZSxcbiAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyKSB7IH1cblxuICAvKipcbiAgICogTWV0aG9kIGV4ZWN1dGVkIHdoZW4gdXBsb2FkIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKi9cbiAgaGFuZGxlVXBsb2FkKCk6IHZvaWQge1xuICAgIHRoaXMuaXNEb25lID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuZmlsZSAmJiB0aGlzLnVwbG9hZE9wdGlvbnMgJiYgdGhpcy51cGxvYWRPcHRpb25zLmVudGl0eU5hbWUgJiYgdGhpcy51cGxvYWRPcHRpb25zLm1ldGFkYXRhKSB7XG4gICAgICB0aGlzLmZpbGVJT1NlcnZpY2UudXBsb2FkKHsgZmlsZXM6IHRoaXMuZmlsZSwgZW50aXR5TmFtZTogdGhpcy51cGxvYWRPcHRpb25zLmVudGl0eU5hbWUsIG1ldGFkYXRhOiB0aGlzLnVwbG9hZE9wdGlvbnMubWV0YWRhdGEgfSlcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgIHRoaXMuaXNEb25lID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLm9uc3VjY2Vzcy5lbWl0KHJlcyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4gdGhpcy5vbmVycm9yLmVtaXQoZXJyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub25lcnJvci5lbWl0KG5ldyBFcnJvcignVXBsb2FkIG9wdGlvbnMgbWlzc2luZycpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIGV4ZWN1dGVkIHdoZW4gYSBmaWxlIGlzIHNlbGVjdGVkLlxuICAgKi9cbiAgaGFuZGxlU2VsZWN0KGZpbGVJbnB1dDogYW55KTogdm9pZCB7XG4gICAgaWYgKGZpbGVJbnB1dC50YXJnZXQuZmlsZXMgJiYgZmlsZUlucHV0LnRhcmdldC5maWxlc1swXSkge1xuICAgICAgdGhpcy5maWxlID0gZmlsZUlucHV0LnRhcmdldC5maWxlc1swXTtcbiAgICAgIHRoaXMuZmlsZU5hbWUgPSB0aGlzLmZpbGUubmFtZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kcyBleGVjdXRlZCB3aGVuIGNhbmNlbCBidXR0b24gaXMgY2xpY2tlZC5cbiAgICogQ2xlYXJzIGZpbGVzLlxuICAgKi9cbiAgY2FuY2VsKCk6IHZvaWQge1xuICAgIHRoaXMuZmlsZSA9IG51bGw7XG4gICAgdGhpcy5maWxlTmFtZSA9IG51bGw7XG4gICAgdGhpcy5pc0RvbmUgPSBmYWxzZTtcbiAgICAvLyBjaGVjayBpZiB0aGUgZmlsZSBpbnB1dCBpcyByZW5kZXJlZCBiZWZvcmUgY2xlYXJpbmcgaXRcbiAgICBpZiAodGhpcy5maWxlSW5wdXQpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZmlsZUlucHV0LCAndmFsdWUnLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgZGlzYWJsZUZpbGVVcGxvYWRCdXR0b24oKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmRpc2FibGVCdXR0b24gPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZUJ1dHRvbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGlzYWJsZUJ1dHRvbiA9PT0gJ2Rpc2FibGVkJyB8fCB0aGlzLmRpc2FibGVCdXR0b24gPT09ICd0cnVlJyA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG59XG4iXX0=