import { __decorate } from "tslib";
// import { MatSnackBar } from '@angular/material';
import { Component, Input, EventEmitter, Output } from '@angular/core';
let NToggleoptionsComponent = class NToggleoptionsComponent {
    constructor() {
        // options = {icon: 'home', value: 'home', disabled: false, 'checked': false}
        this.toggleOptions = [];
        this.align = 'horizontal';
        this.indexChange = new EventEmitter();
        this.valueChange = new EventEmitter();
    }
    // constructor(private snackbar: MatSnackBar) {
    // }
    ngOnInit() {
        if (this.checkNumber(this.checkedIndex)) {
            this.checkedIndex = Number(this.checkedIndex);
        }
        if (this.checkNumber(this.disabledIndex)) {
            this.disabledIndex = Number(this.disabledIndex);
        }
    }
    ngOnChanges(changes) {
        if (changes['checkedIndex'] && this.checkNumber(this.checkedIndex)) {
            this.checkedIndex = Number(this.checkedIndex);
        }
        else if (changes['disabledIndex'] && this.checkNumber(this.disabledIndex)) {
            this.disabledIndex = Number(this.disabledIndex);
        }
    }
    optionClicked(index) {
        if (this.toggleOptions && this.toggleOptions.length > 0) {
            this.indexChange.emit(index);
            if (this.toggleOptions[index] && this.toggleOptions[index].value) {
                this.valueChange.emit(this.toggleOptions[index].value);
            }
            else {
                // this.snackbar.open('Invalid toggle button value', 'OK');
            }
        }
        else {
            // this.snackbar.open('Invalid toggle options', 'OK');
        }
    }
    checkNumber(number) {
        if (number !== undefined && number !== null) {
            return Number.isNaN(Number(number));
        }
        return false;
    }
};
__decorate([
    Input('toggleOptions')
], NToggleoptionsComponent.prototype, "toggleOptions", void 0);
__decorate([
    Input('align')
], NToggleoptionsComponent.prototype, "align", void 0);
__decorate([
    Input('disabledIndex')
], NToggleoptionsComponent.prototype, "disabledIndex", void 0);
__decorate([
    Input('checkedIndex')
], NToggleoptionsComponent.prototype, "checkedIndex", void 0);
__decorate([
    Input('value')
], NToggleoptionsComponent.prototype, "value", void 0);
__decorate([
    Output()
], NToggleoptionsComponent.prototype, "indexChange", void 0);
__decorate([
    Output()
], NToggleoptionsComponent.prototype, "valueChange", void 0);
NToggleoptionsComponent = __decorate([
    Component({
        selector: 'n-toggleoptions',
        template: "<mat-button-toggle-group #group=\"matButtonToggleGroup\" [vertical]=\"align == 'vertical'? true: false\" [value]=\"value\">\n    <mat-button-toggle *ngFor=\"let option of toggleOptions; let i = index;\" [value]=\"option.value\" [disabled]=\"option.disabled || disabledIndex == i\" [checked]=\"option.checked || checkedIndex == i\" (click)=\"optionClicked(i)\" fxLayoutAlign=\"center center\">\n        <mat-icon *ngIf=\"option.icon\">{{option.icon}}</mat-icon>\n        <span *ngIf=\"!option.icon && option.value\">{{option.value}}</span>\n    </mat-button-toggle>\n</mat-button-toggle-group>"
    })
], NToggleoptionsComponent);
export { NToggleoptionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi10b2dnbGVvcHRpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1tb2R1bGUvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1tb2R1bGUvbmV1dHJpbm9zLWNvbXBvbmVudHMvblRvZ2dsZW9wdGlvbnNDb21wb25lbnQvbi10b2dnbGVvcHRpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsbURBQW1EO0FBQ25ELE9BQU8sRUFBRSxTQUFTLEVBQW9DLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBT3hHLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBQXBDO1FBQ0ksNkVBQTZFO1FBQ3JELGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBQzNCLFVBQUssR0FBRyxZQUFZLENBQUM7UUFJM0IsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2pDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQTBDL0MsQ0FBQztJQXpDRywrQ0FBK0M7SUFDL0MsSUFBSTtJQUVKLFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNqRDtRQUVELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ25EO0lBRUwsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNoRSxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakQ7YUFBTSxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6RSxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkQ7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQUs7UUFDZixJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRTtnQkFDOUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMxRDtpQkFBTTtnQkFDSCwyREFBMkQ7YUFDOUQ7U0FDSjthQUFNO1lBQ0gsc0RBQXNEO1NBQ3pEO0lBQ0wsQ0FBQztJQUVPLFdBQVcsQ0FBQyxNQUFNO1FBQ3RCLElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ3pDLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUN2QztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Q0FDSixDQUFBO0FBaEQyQjtJQUF2QixLQUFLLENBQUMsZUFBZSxDQUFDOzhEQUFvQjtBQUMzQjtJQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7c0RBQXNCO0FBQ2I7SUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs4REFBZTtBQUNmO0lBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7NkRBQWM7QUFDcEI7SUFBZixLQUFLLENBQUMsT0FBTyxDQUFDO3NEQUFnQjtBQUNyQjtJQUFULE1BQU0sRUFBRTs0REFBa0M7QUFDakM7SUFBVCxNQUFNLEVBQUU7NERBQWtDO0FBUmxDLHVCQUF1QjtJQUxuQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLDRsQkFBOEM7S0FDakQsQ0FBQztHQUVXLHVCQUF1QixDQWtEbkM7U0FsRFksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgTWF0U25hY2tCYXIgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ24tdG9nZ2xlb3B0aW9ucycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL24tdG9nZ2xlb3B0aW9ucy50ZW1wbGF0ZS5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIE5Ub2dnbGVvcHRpb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAgIC8vIG9wdGlvbnMgPSB7aWNvbjogJ2hvbWUnLCB2YWx1ZTogJ2hvbWUnLCBkaXNhYmxlZDogZmFsc2UsICdjaGVja2VkJzogZmFsc2V9XG4gICAgQElucHV0KCd0b2dnbGVPcHRpb25zJykgdG9nZ2xlT3B0aW9ucyA9IFtdO1xuICAgIEBJbnB1dCgnYWxpZ24nKSBhbGlnbiA9ICdob3Jpem9udGFsJztcbiAgICBASW5wdXQoJ2Rpc2FibGVkSW5kZXgnKSBkaXNhYmxlZEluZGV4O1xuICAgIEBJbnB1dCgnY2hlY2tlZEluZGV4JykgY2hlY2tlZEluZGV4O1xuICAgIEBJbnB1dCgndmFsdWUnKSB2YWx1ZSA6IHN0cmluZztcbiAgICBAT3V0cHV0KCkgaW5kZXhDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIC8vIGNvbnN0cnVjdG9yKHByaXZhdGUgc25hY2tiYXI6IE1hdFNuYWNrQmFyKSB7XG4gICAgLy8gfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrTnVtYmVyKHRoaXMuY2hlY2tlZEluZGV4KSkge1xuICAgICAgICAgICAgdGhpcy5jaGVja2VkSW5kZXggPSBOdW1iZXIodGhpcy5jaGVja2VkSW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tOdW1iZXIodGhpcy5kaXNhYmxlZEluZGV4KSkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZEluZGV4ID0gTnVtYmVyKHRoaXMuZGlzYWJsZWRJbmRleCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXNbJ2NoZWNrZWRJbmRleCddICYmIHRoaXMuY2hlY2tOdW1iZXIodGhpcy5jaGVja2VkSW5kZXgpKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrZWRJbmRleCA9IE51bWJlcih0aGlzLmNoZWNrZWRJbmRleCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhbmdlc1snZGlzYWJsZWRJbmRleCddICYmIHRoaXMuY2hlY2tOdW1iZXIodGhpcy5kaXNhYmxlZEluZGV4KSkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZEluZGV4ID0gTnVtYmVyKHRoaXMuZGlzYWJsZWRJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcHRpb25DbGlja2VkKGluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLnRvZ2dsZU9wdGlvbnMgJiYgdGhpcy50b2dnbGVPcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXhDaGFuZ2UuZW1pdChpbmRleCk7XG4gICAgICAgICAgICBpZiAodGhpcy50b2dnbGVPcHRpb25zW2luZGV4XSAmJiB0aGlzLnRvZ2dsZU9wdGlvbnNbaW5kZXhdLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudG9nZ2xlT3B0aW9uc1tpbmRleF0udmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnNuYWNrYmFyLm9wZW4oJ0ludmFsaWQgdG9nZ2xlIGJ1dHRvbiB2YWx1ZScsICdPSycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcy5zbmFja2Jhci5vcGVuKCdJbnZhbGlkIHRvZ2dsZSBvcHRpb25zJywgJ09LJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNoZWNrTnVtYmVyKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyICE9PSB1bmRlZmluZWQgJiYgbnVtYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKE51bWJlcihudW1iZXIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIl19