import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
var NFingerprintDirective = /** @class */ (function () {
    function NFingerprintDirective(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    NFingerprintDirective.prototype.methodToHandleMouseClickAction = function () {
        var _this = this;
        this.getFingerprint()
            .then(function (sucess) { return _this.onsuccess.emit(sucess); })
            .catch(function (error) { return _this.onerror.emit(error); });
    };
    NFingerprintDirective.prototype.getFingerprint = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.fsv.getFingerprint(_this.fingerprintOptions).then(function (res) {
                return resolve(res);
            }).catch(function (err) { return reject(err); });
        });
    };
    NFingerprintDirective.ctorParameters = function () { return [
        { type: NFileIOService }
    ]; };
    __decorate([
        Input()
    ], NFingerprintDirective.prototype, "fingerprintOptions", void 0);
    __decorate([
        Output()
    ], NFingerprintDirective.prototype, "onsuccess", void 0);
    __decorate([
        Output()
    ], NFingerprintDirective.prototype, "onerror", void 0);
    __decorate([
        HostListener('click')
    ], NFingerprintDirective.prototype, "methodToHandleMouseClickAction", null);
    NFingerprintDirective = __decorate([
        Directive({
            selector: '[n-fingerprint]'
        })
    ], NFingerprintDirective);
    return NFingerprintDirective;
}());
export { NFingerprintDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1maW5nZXJwcmludC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXV0cmlub3MtbW9kdWxlLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3MtbW9kdWxlL25ldXRyaW5vcy1maWxlL2RpcmVjdGl2ZXMvbi1maW5nZXJwcmludC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFTOUQ7SUFLRSwrQkFBb0IsR0FBbUI7UUFBbkIsUUFBRyxHQUFILEdBQUcsQ0FBZ0I7UUFIN0IsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVmLENBQUM7SUFFckIsOERBQThCLEdBQTlCO1FBQXZCLGlCQUlDO1FBSEMsSUFBSSxDQUFDLGNBQWMsRUFBRTthQUNsQixJQUFJLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBM0IsQ0FBMkIsQ0FBQzthQUMzQyxLQUFLLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCw4Q0FBYyxHQUFkO1FBQUEsaUJBTUM7UUFMQyxPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDakMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsR0FBRztnQkFDdkQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBZHdCLGNBQWM7O0lBSjlCO1FBQVIsS0FBSyxFQUFFO3FFQUF1QztJQUNyQztRQUFULE1BQU0sRUFBRTs0REFBbUQ7SUFDbEQ7UUFBVCxNQUFNLEVBQUU7MERBQWlEO0lBSW5DO1FBQXRCLFlBQVksQ0FBQyxPQUFPLENBQUM7K0VBSXJCO0lBWFUscUJBQXFCO1FBSGpDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxpQkFBaUI7U0FDNUIsQ0FBQztPQUNXLHFCQUFxQixDQW9CakM7SUFBRCw0QkFBQztDQUFBLEFBcEJELElBb0JDO1NBcEJZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5GaWxlSU9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbi1maWxlSU8uc2VydmljZSc7XG5pbXBvcnQgeyBORGlyZWN0aXZlT3B0aW9ucyB9IGZyb20gJy4vZGlyZWN0aXZlLmNsYXNzJztcblxuXG5kZWNsYXJlIGNvbnN0IG5hdmlnYXRvcjogYW55O1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbi1maW5nZXJwcmludF0nXG59KVxuZXhwb3J0IGNsYXNzIE5GaW5nZXJwcmludERpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIGZpbmdlcnByaW50T3B0aW9uczogTkRpcmVjdGl2ZU9wdGlvbnM7XG4gIEBPdXRwdXQoKSBvbnN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgb25lcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmc3Y6IE5GaWxlSU9TZXJ2aWNlKSB7IH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpIG1ldGhvZFRvSGFuZGxlTW91c2VDbGlja0FjdGlvbigpIHtcbiAgICB0aGlzLmdldEZpbmdlcnByaW50KClcbiAgICAgIC50aGVuKHN1Y2VzcyA9PiB0aGlzLm9uc3VjY2Vzcy5lbWl0KHN1Y2VzcykpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gdGhpcy5vbmVycm9yLmVtaXQoZXJyb3IpKTtcbiAgfVxuXG4gIGdldEZpbmdlcnByaW50KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZnN2LmdldEZpbmdlcnByaW50KHRoaXMuZmluZ2VycHJpbnRPcHRpb25zKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHJlcyk7XG4gICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=