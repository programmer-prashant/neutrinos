import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
var NBarcodeDirective = /** @class */ (function () {
    function NBarcodeDirective(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    NBarcodeDirective.prototype.methodToHandleMouseClickAction = function () {
        var _this = this;
        this.getBarcode()
            .then(function (sucess) { return _this.onsuccess.emit(sucess); })
            .catch(function (error) { return _this.onerror.emit(error); });
    };
    NBarcodeDirective.prototype.getBarcode = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.fsv.getBarcode(_this.barcodeOptions).then(function (res) {
                return resolve(res);
            }).catch(function (err) { return reject(err); });
        });
    };
    NBarcodeDirective.ctorParameters = function () { return [
        { type: NFileIOService }
    ]; };
    __decorate([
        Input()
    ], NBarcodeDirective.prototype, "barcodeOptions", void 0);
    __decorate([
        Output()
    ], NBarcodeDirective.prototype, "onsuccess", void 0);
    __decorate([
        Output()
    ], NBarcodeDirective.prototype, "onerror", void 0);
    __decorate([
        HostListener('click')
    ], NBarcodeDirective.prototype, "methodToHandleMouseClickAction", null);
    NBarcodeDirective = __decorate([
        Directive({
            selector: '[n-barcode]'
        })
    ], NBarcodeDirective);
    return NBarcodeDirective;
}());
export { NBarcodeDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1iYXJjb2RlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1tb2R1bGUvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1tb2R1bGUvbmV1dHJpbm9zLWZpbGUvZGlyZWN0aXZlcy9uLWJhcmNvZGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBUzlEO0lBS0UsMkJBQW9CLEdBQW1CO1FBQW5CLFFBQUcsR0FBSCxHQUFHLENBQWdCO1FBSDdCLGNBQVMsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsRCxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUFFZixDQUFDO0lBRXJCLDBEQUE4QixHQUE5QjtRQUF2QixpQkFJQztRQUhDLElBQUksQ0FBQyxVQUFVLEVBQUU7YUFDaEIsSUFBSSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQTNCLENBQTJCLENBQUM7YUFDM0MsS0FBSyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXhCLENBQXdCLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsc0NBQVUsR0FBVjtRQUFBLGlCQU1DO1FBTEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pDLEtBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHO2dCQUMvQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQVgsQ0FBVyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkFkd0IsY0FBYzs7SUFKOUI7UUFBUixLQUFLLEVBQUU7NkRBQW1DO0lBQ2pDO1FBQVQsTUFBTSxFQUFFO3dEQUFtRDtJQUNsRDtRQUFULE1BQU0sRUFBRTtzREFBaUQ7SUFJbkM7UUFBdEIsWUFBWSxDQUFDLE9BQU8sQ0FBQzsyRUFJckI7SUFYVSxpQkFBaUI7UUFIN0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGFBQWE7U0FDeEIsQ0FBQztPQUNXLGlCQUFpQixDQW9CN0I7SUFBRCx3QkFBQztDQUFBLEFBcEJELElBb0JDO1NBcEJZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5GaWxlSU9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbi1maWxlSU8uc2VydmljZSc7XG5pbXBvcnQgeyBORGlyZWN0aXZlT3B0aW9ucyB9IGZyb20gJy4vZGlyZWN0aXZlLmNsYXNzJztcblxuXG5kZWNsYXJlIGNvbnN0IG5hdmlnYXRvcjogYW55O1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbi1iYXJjb2RlXSdcbn0pXG5leHBvcnQgY2xhc3MgTkJhcmNvZGVEaXJlY3RpdmUge1xuICBASW5wdXQoKSBiYXJjb2RlT3B0aW9uczogTkRpcmVjdGl2ZU9wdGlvbnM7XG4gIEBPdXRwdXQoKSBvbnN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgb25lcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmc3Y6IE5GaWxlSU9TZXJ2aWNlKSB7IH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpIG1ldGhvZFRvSGFuZGxlTW91c2VDbGlja0FjdGlvbigpIHtcbiAgICB0aGlzLmdldEJhcmNvZGUoKVxuICAgIC50aGVuKHN1Y2VzcyA9PiB0aGlzLm9uc3VjY2Vzcy5lbWl0KHN1Y2VzcykpXG4gICAgLmNhdGNoKGVycm9yID0+IHRoaXMub25lcnJvci5lbWl0KGVycm9yKSk7XG4gIH1cblxuICBnZXRCYXJjb2RlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZnN2LmdldEJhcmNvZGUodGhpcy5iYXJjb2RlT3B0aW9ucykudGhlbihyZXMgPT4ge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXMpO1xuICAgICAgfSkuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICB9KTtcbiAgfVxufVxuIl19