import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
var NShakeDirective = /** @class */ (function () {
    function NShakeDirective(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    NShakeDirective.prototype.methodToHandleMouseClickAction = function () {
        var _this = this;
        this.getShake()
            .then(function (sucess) { return _this.onsuccess.emit(sucess); })
            .catch(function (error) { return _this.onerror.emit(error); });
    };
    NShakeDirective.prototype.getShake = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.fsv.getShake(_this.shakeOptions).then(function (res) {
                return resolve(res);
            }).catch(function (err) { return reject(err); });
        });
    };
    NShakeDirective.ctorParameters = function () { return [
        { type: NFileIOService }
    ]; };
    __decorate([
        Input()
    ], NShakeDirective.prototype, "shakeOptions", void 0);
    __decorate([
        Output()
    ], NShakeDirective.prototype, "onsuccess", void 0);
    __decorate([
        Output()
    ], NShakeDirective.prototype, "onerror", void 0);
    __decorate([
        HostListener('click')
    ], NShakeDirective.prototype, "methodToHandleMouseClickAction", null);
    NShakeDirective = __decorate([
        Directive({
            selector: '[n-shake]'
        })
    ], NShakeDirective);
    return NShakeDirective;
}());
export { NShakeDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zaGFrZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXV0cmlub3MtbW9kdWxlLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3MtbW9kdWxlL25ldXRyaW5vcy1maWxlL2RpcmVjdGl2ZXMvbi1zaGFrZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFTOUQ7SUFLRSx5QkFBb0IsR0FBbUI7UUFBbkIsUUFBRyxHQUFILEdBQUcsQ0FBZ0I7UUFIN0IsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVmLENBQUM7SUFFckIsd0RBQThCLEdBQTlCO1FBQXZCLGlCQUlDO1FBSEMsSUFBSSxDQUFDLFFBQVEsRUFBRTthQUNaLElBQUksQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUEzQixDQUEyQixDQUFDO2FBQzNDLEtBQUssQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUF4QixDQUF3QixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGtDQUFRLEdBQVI7UUFBQSxpQkFNQztRQUxDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUNqQyxLQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsR0FBRztnQkFDM0MsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBZHdCLGNBQWM7O0lBSjlCO1FBQVIsS0FBSyxFQUFFO3lEQUFpQztJQUMvQjtRQUFULE1BQU0sRUFBRTtzREFBbUQ7SUFDbEQ7UUFBVCxNQUFNLEVBQUU7b0RBQWlEO0lBSW5DO1FBQXRCLFlBQVksQ0FBQyxPQUFPLENBQUM7eUVBSXJCO0lBWFUsZUFBZTtRQUgzQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsV0FBVztTQUN0QixDQUFDO09BQ1csZUFBZSxDQW9CM0I7SUFBRCxzQkFBQztDQUFBLEFBcEJELElBb0JDO1NBcEJZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBORmlsZUlPU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL24tZmlsZUlPLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkRpcmVjdGl2ZU9wdGlvbnMgfSBmcm9tICcuL2RpcmVjdGl2ZS5jbGFzcyc7XG5cblxuZGVjbGFyZSBjb25zdCBuYXZpZ2F0b3I6IGFueTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW24tc2hha2VdJ1xufSlcbmV4cG9ydCBjbGFzcyBOU2hha2VEaXJlY3RpdmUge1xuICBASW5wdXQoKSBzaGFrZU9wdGlvbnM6IE5EaXJlY3RpdmVPcHRpb25zO1xuICBAT3V0cHV0KCkgb25zdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG9uZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnN2OiBORmlsZUlPU2VydmljZSkgeyB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBtZXRob2RUb0hhbmRsZU1vdXNlQ2xpY2tBY3Rpb24oKSB7XG4gICAgdGhpcy5nZXRTaGFrZSgpXG4gICAgICAudGhlbihzdWNlc3MgPT4gdGhpcy5vbnN1Y2Nlc3MuZW1pdChzdWNlc3MpKVxuICAgICAgLmNhdGNoKGVycm9yID0+IHRoaXMub25lcnJvci5lbWl0KGVycm9yKSk7XG4gIH1cblxuICBnZXRTaGFrZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmZzdi5nZXRTaGFrZSh0aGlzLnNoYWtlT3B0aW9ucykudGhlbihyZXMgPT4ge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXMpO1xuICAgICAgfSkuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICB9KTtcbiAgfVxufVxuIl19