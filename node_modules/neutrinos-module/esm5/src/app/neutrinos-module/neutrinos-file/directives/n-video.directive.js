import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
var NVideoDirective = /** @class */ (function () {
    function NVideoDirective(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    NVideoDirective.prototype.methodToHandleMouseClickAction = function () {
        var _this = this;
        this.getVideo()
            .then(function (sucess) { return _this.onsuccess.emit(sucess); })
            .catch(function (error) { return _this.onerror.emit(error); });
    };
    NVideoDirective.prototype.getVideo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.fsv.getVideo(_this.videoOptions).then(function (res) {
                var options = {
                    'formData': res,
                    'entityName': _this.videoOptions.entityName,
                    'metadata': _this.videoOptions.metadata
                };
                _this.fsv.upload(options)
                    .then(function (uri) { return resolve(uri); })
                    .catch(function (err) { return reject(err); });
            }).catch(function (err) { return reject(err); });
        });
    };
    NVideoDirective.ctorParameters = function () { return [
        { type: NFileIOService }
    ]; };
    __decorate([
        Input()
    ], NVideoDirective.prototype, "videoOptions", void 0);
    __decorate([
        Output()
    ], NVideoDirective.prototype, "onsuccess", void 0);
    __decorate([
        Output()
    ], NVideoDirective.prototype, "onerror", void 0);
    __decorate([
        HostListener('click')
    ], NVideoDirective.prototype, "methodToHandleMouseClickAction", null);
    NVideoDirective = __decorate([
        Directive({
            selector: '[n-video]'
        })
    ], NVideoDirective);
    return NVideoDirective;
}());
export { NVideoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi12aWRlby5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXV0cmlub3MtbW9kdWxlLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3MtbW9kdWxlL25ldXRyaW5vcy1maWxlL2RpcmVjdGl2ZXMvbi12aWRlby5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFTOUQ7SUFLRSx5QkFBb0IsR0FBbUI7UUFBbkIsUUFBRyxHQUFILEdBQUcsQ0FBZ0I7UUFIN0IsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVmLENBQUM7SUFFckIsd0RBQThCLEdBQTlCO1FBQXZCLGlCQUlDO1FBSEMsSUFBSSxDQUFDLFFBQVEsRUFBRTthQUNaLElBQUksQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUEzQixDQUEyQixDQUFDO2FBQzNDLEtBQUssQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUF4QixDQUF3QixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGtDQUFRLEdBQVI7UUFBQSxpQkFhQztRQVpDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUNqQyxLQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsR0FBRztnQkFDM0MsSUFBTSxPQUFPLEdBQUc7b0JBQ2QsVUFBVSxFQUFFLEdBQUc7b0JBQ2YsWUFBWSxFQUFFLEtBQUksQ0FBQyxZQUFZLENBQUMsVUFBVTtvQkFDMUMsVUFBVSxFQUFFLEtBQUksQ0FBQyxZQUFZLENBQUMsUUFBUTtpQkFDdkMsQ0FBQztnQkFDRixLQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7cUJBQ3JCLElBQUksQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBWixDQUFZLENBQUM7cUJBQ3pCLEtBQUssQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBWCxDQUFXLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQVgsQ0FBVyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkFyQndCLGNBQWM7O0lBSjlCO1FBQVIsS0FBSyxFQUFFO3lEQUFpQztJQUMvQjtRQUFULE1BQU0sRUFBRTtzREFBbUQ7SUFDbEQ7UUFBVCxNQUFNLEVBQUU7b0RBQWlEO0lBSW5DO1FBQXRCLFlBQVksQ0FBQyxPQUFPLENBQUM7eUVBSXJCO0lBWFUsZUFBZTtRQUgzQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsV0FBVztTQUN0QixDQUFDO09BQ1csZUFBZSxDQTJCM0I7SUFBRCxzQkFBQztDQUFBLEFBM0JELElBMkJDO1NBM0JZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBORmlsZUlPU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL24tZmlsZUlPLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkRpcmVjdGl2ZU9wdGlvbnMgfSBmcm9tICcuL2RpcmVjdGl2ZS5jbGFzcyc7XG5cblxuZGVjbGFyZSBjb25zdCBuYXZpZ2F0b3I6IGFueTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW24tdmlkZW9dJ1xufSlcbmV4cG9ydCBjbGFzcyBOVmlkZW9EaXJlY3RpdmUge1xuICBASW5wdXQoKSB2aWRlb09wdGlvbnM6IE5EaXJlY3RpdmVPcHRpb25zO1xuICBAT3V0cHV0KCkgb25zdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG9uZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnN2OiBORmlsZUlPU2VydmljZSkgeyB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBtZXRob2RUb0hhbmRsZU1vdXNlQ2xpY2tBY3Rpb24oKSB7XG4gICAgdGhpcy5nZXRWaWRlbygpXG4gICAgICAudGhlbihzdWNlc3MgPT4gdGhpcy5vbnN1Y2Nlc3MuZW1pdChzdWNlc3MpKVxuICAgICAgLmNhdGNoKGVycm9yID0+IHRoaXMub25lcnJvci5lbWl0KGVycm9yKSk7XG4gIH1cblxuICBnZXRWaWRlbygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmZzdi5nZXRWaWRlbyh0aGlzLnZpZGVvT3B0aW9ucykudGhlbihyZXMgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICdmb3JtRGF0YSc6IHJlcyxcbiAgICAgICAgICAnZW50aXR5TmFtZSc6IHRoaXMudmlkZW9PcHRpb25zLmVudGl0eU5hbWUsXG4gICAgICAgICAgJ21ldGFkYXRhJzogdGhpcy52aWRlb09wdGlvbnMubWV0YWRhdGFcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mc3YudXBsb2FkKG9wdGlvbnMpXG4gICAgICAgICAgLnRoZW4odXJpID0+IHJlc29sdmUodXJpKSlcbiAgICAgICAgICAuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==