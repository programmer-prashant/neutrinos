import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
var NTtsDirective = /** @class */ (function () {
    function NTtsDirective(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    NTtsDirective.prototype.methodToHandleMouseClickAction = function () {
        var _this = this;
        this.getTts()
            .then(function (sucess) { return _this.onsuccess.emit(sucess); })
            .catch(function (error) { return _this.onerror.emit(error); });
    };
    NTtsDirective.prototype.getTts = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.fsv.getTts(_this.ttsOptions).then(function (res) {
                return resolve(res);
            }).catch(function (err) { return reject(err); });
        });
    };
    NTtsDirective.ctorParameters = function () { return [
        { type: NFileIOService }
    ]; };
    __decorate([
        Input()
    ], NTtsDirective.prototype, "ttsOptions", void 0);
    __decorate([
        Output()
    ], NTtsDirective.prototype, "onsuccess", void 0);
    __decorate([
        Output()
    ], NTtsDirective.prototype, "onerror", void 0);
    __decorate([
        HostListener('click')
    ], NTtsDirective.prototype, "methodToHandleMouseClickAction", null);
    NTtsDirective = __decorate([
        Directive({
            selector: '[n-tts]'
        })
    ], NTtsDirective);
    return NTtsDirective;
}());
export { NTtsDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi10dHMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLW1vZHVsZS8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbmV1dHJpbm9zLW1vZHVsZS9uZXV0cmlub3MtZmlsZS9kaXJlY3RpdmVzL24tdHRzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQVE5RDtJQUtFLHVCQUFvQixHQUFtQjtRQUFuQixRQUFHLEdBQUgsR0FBRyxDQUFnQjtRQUg3QixjQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBRWYsQ0FBQztJQUVyQixzREFBOEIsR0FBOUI7UUFBdkIsaUJBSUM7UUFIQyxJQUFJLENBQUMsTUFBTSxFQUFFO2FBQ1YsSUFBSSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQTNCLENBQTJCLENBQUM7YUFDM0MsS0FBSyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXhCLENBQXdCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsOEJBQU0sR0FBTjtRQUFBLGlCQU1DO1FBTEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pDLEtBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHO2dCQUN2QyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQVgsQ0FBVyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkFkd0IsY0FBYzs7SUFKOUI7UUFBUixLQUFLLEVBQUU7cURBQStCO0lBQzdCO1FBQVQsTUFBTSxFQUFFO29EQUFtRDtJQUNsRDtRQUFULE1BQU0sRUFBRTtrREFBaUQ7SUFJbkM7UUFBdEIsWUFBWSxDQUFDLE9BQU8sQ0FBQzt1RUFJckI7SUFYVSxhQUFhO1FBSHpCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxTQUFTO1NBQ3BCLENBQUM7T0FDVyxhQUFhLENBb0J6QjtJQUFELG9CQUFDO0NBQUEsQUFwQkQsSUFvQkM7U0FwQlksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5GaWxlSU9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbi1maWxlSU8uc2VydmljZSc7XG5pbXBvcnQgeyBORGlyZWN0aXZlT3B0aW9ucyB9IGZyb20gJy4vZGlyZWN0aXZlLmNsYXNzJztcblxuZGVjbGFyZSBjb25zdCBuYXZpZ2F0b3I6IGFueTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW24tdHRzXSdcbn0pXG5leHBvcnQgY2xhc3MgTlR0c0RpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIHR0c09wdGlvbnM6IE5EaXJlY3RpdmVPcHRpb25zO1xuICBAT3V0cHV0KCkgb25zdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG9uZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnN2OiBORmlsZUlPU2VydmljZSkgeyB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBtZXRob2RUb0hhbmRsZU1vdXNlQ2xpY2tBY3Rpb24oKSB7XG4gICAgdGhpcy5nZXRUdHMoKVxuICAgICAgLnRoZW4oc3VjZXNzID0+IHRoaXMub25zdWNjZXNzLmVtaXQoc3VjZXNzKSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB0aGlzLm9uZXJyb3IuZW1pdChlcnJvcikpO1xuICB9XG5cbiAgZ2V0VHRzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZnN2LmdldFR0cyh0aGlzLnR0c09wdGlvbnMpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzKTtcbiAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==