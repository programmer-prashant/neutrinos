import { __decorate } from "tslib";
// import { MatSnackBar } from '@angular/material';
import { Component, Input, EventEmitter, Output } from '@angular/core';
var NToggleoptionsComponent = /** @class */ (function () {
    function NToggleoptionsComponent() {
        // options = {icon: 'home', value: 'home', disabled: false, 'checked': false}
        this.toggleOptions = [];
        this.align = 'horizontal';
        this.indexChange = new EventEmitter();
        this.valueChange = new EventEmitter();
    }
    // constructor(private snackbar: MatSnackBar) {
    // }
    NToggleoptionsComponent.prototype.ngOnInit = function () {
        if (this.checkNumber(this.checkedIndex)) {
            this.checkedIndex = Number(this.checkedIndex);
        }
        if (this.checkNumber(this.disabledIndex)) {
            this.disabledIndex = Number(this.disabledIndex);
        }
    };
    NToggleoptionsComponent.prototype.ngOnChanges = function (changes) {
        if (changes['checkedIndex'] && this.checkNumber(this.checkedIndex)) {
            this.checkedIndex = Number(this.checkedIndex);
        }
        else if (changes['disabledIndex'] && this.checkNumber(this.disabledIndex)) {
            this.disabledIndex = Number(this.disabledIndex);
        }
    };
    NToggleoptionsComponent.prototype.optionClicked = function (index) {
        if (this.toggleOptions && this.toggleOptions.length > 0) {
            this.indexChange.emit(index);
            if (this.toggleOptions[index] && this.toggleOptions[index].value) {
                this.valueChange.emit(this.toggleOptions[index].value);
            }
            else {
                // this.snackbar.open('Invalid toggle button value', 'OK');
            }
        }
        else {
            // this.snackbar.open('Invalid toggle options', 'OK');
        }
    };
    NToggleoptionsComponent.prototype.checkNumber = function (number) {
        if (number !== undefined && number !== null) {
            return Number.isNaN(Number(number));
        }
        return false;
    };
    __decorate([
        Input('toggleOptions')
    ], NToggleoptionsComponent.prototype, "toggleOptions", void 0);
    __decorate([
        Input('align')
    ], NToggleoptionsComponent.prototype, "align", void 0);
    __decorate([
        Input('disabledIndex')
    ], NToggleoptionsComponent.prototype, "disabledIndex", void 0);
    __decorate([
        Input('checkedIndex')
    ], NToggleoptionsComponent.prototype, "checkedIndex", void 0);
    __decorate([
        Input('value')
    ], NToggleoptionsComponent.prototype, "value", void 0);
    __decorate([
        Output()
    ], NToggleoptionsComponent.prototype, "indexChange", void 0);
    __decorate([
        Output()
    ], NToggleoptionsComponent.prototype, "valueChange", void 0);
    NToggleoptionsComponent = __decorate([
        Component({
            selector: 'n-toggleoptions',
            template: "<mat-button-toggle-group #group=\"matButtonToggleGroup\" [vertical]=\"align == 'vertical'? true: false\" [value]=\"value\">\n    <mat-button-toggle *ngFor=\"let option of toggleOptions; let i = index;\" [value]=\"option.value\" [disabled]=\"option.disabled || disabledIndex == i\" [checked]=\"option.checked || checkedIndex == i\" (click)=\"optionClicked(i)\" fxLayoutAlign=\"center center\">\n        <mat-icon *ngIf=\"option.icon\">{{option.icon}}</mat-icon>\n        <span *ngIf=\"!option.icon && option.value\">{{option.value}}</span>\n    </mat-button-toggle>\n</mat-button-toggle-group>"
        })
    ], NToggleoptionsComponent);
    return NToggleoptionsComponent;
}());
export { NToggleoptionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi10b2dnbGVvcHRpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1tb2R1bGUvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1tb2R1bGUvbmV1dHJpbm9zLWNvbXBvbmVudHMvblRvZ2dsZW9wdGlvbnNDb21wb25lbnQvbi10b2dnbGVvcHRpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsbURBQW1EO0FBQ25ELE9BQU8sRUFBRSxTQUFTLEVBQW9DLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBT3hHO0lBQUE7UUFDSSw2RUFBNkU7UUFDckQsa0JBQWEsR0FBRyxFQUFFLENBQUM7UUFDM0IsVUFBSyxHQUFHLFlBQVksQ0FBQztRQUkzQixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDakMsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBMEMvQyxDQUFDO0lBekNHLCtDQUErQztJQUMvQyxJQUFJO0lBRUosMENBQVEsR0FBUjtRQUNJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkQ7SUFFTCxDQUFDO0lBRUQsNkNBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ2hFLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNqRDthQUFNLElBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3pFLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNuRDtJQUNMLENBQUM7SUFFRCwrQ0FBYSxHQUFiLFVBQWMsS0FBSztRQUNmLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0IsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUM5RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzFEO2lCQUFNO2dCQUNILDJEQUEyRDthQUM5RDtTQUNKO2FBQU07WUFDSCxzREFBc0Q7U0FDekQ7SUFDTCxDQUFDO0lBRU8sNkNBQVcsR0FBbkIsVUFBb0IsTUFBTTtRQUN0QixJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtZQUN6QyxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDdkM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBL0N1QjtRQUF2QixLQUFLLENBQUMsZUFBZSxDQUFDO2tFQUFvQjtJQUMzQjtRQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7MERBQXNCO0lBQ2I7UUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQztrRUFBZTtJQUNmO1FBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7aUVBQWM7SUFDcEI7UUFBZixLQUFLLENBQUMsT0FBTyxDQUFDOzBEQUFnQjtJQUNyQjtRQUFULE1BQU0sRUFBRTtnRUFBa0M7SUFDakM7UUFBVCxNQUFNLEVBQUU7Z0VBQWtDO0lBUmxDLHVCQUF1QjtRQUxuQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLDRsQkFBOEM7U0FDakQsQ0FBQztPQUVXLHVCQUF1QixDQWtEbkM7SUFBRCw4QkFBQztDQUFBLEFBbERELElBa0RDO1NBbERZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IE1hdFNuYWNrQmFyIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgSW5wdXQsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduLXRvZ2dsZW9wdGlvbnMnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9uLXRvZ2dsZW9wdGlvbnMudGVtcGxhdGUuaHRtbCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBOVG9nZ2xlb3B0aW9uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICAvLyBvcHRpb25zID0ge2ljb246ICdob21lJywgdmFsdWU6ICdob21lJywgZGlzYWJsZWQ6IGZhbHNlLCAnY2hlY2tlZCc6IGZhbHNlfVxuICAgIEBJbnB1dCgndG9nZ2xlT3B0aW9ucycpIHRvZ2dsZU9wdGlvbnMgPSBbXTtcbiAgICBASW5wdXQoJ2FsaWduJykgYWxpZ24gPSAnaG9yaXpvbnRhbCc7XG4gICAgQElucHV0KCdkaXNhYmxlZEluZGV4JykgZGlzYWJsZWRJbmRleDtcbiAgICBASW5wdXQoJ2NoZWNrZWRJbmRleCcpIGNoZWNrZWRJbmRleDtcbiAgICBASW5wdXQoJ3ZhbHVlJykgdmFsdWUgOiBzdHJpbmc7XG4gICAgQE91dHB1dCgpIGluZGV4Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAvLyBjb25zdHJ1Y3Rvcihwcml2YXRlIHNuYWNrYmFyOiBNYXRTbmFja0Jhcikge1xuICAgIC8vIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5jaGVja051bWJlcih0aGlzLmNoZWNrZWRJbmRleCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZEluZGV4ID0gTnVtYmVyKHRoaXMuY2hlY2tlZEluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrTnVtYmVyKHRoaXMuZGlzYWJsZWRJbmRleCkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWRJbmRleCA9IE51bWJlcih0aGlzLmRpc2FibGVkSW5kZXgpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzWydjaGVja2VkSW5kZXgnXSAmJiB0aGlzLmNoZWNrTnVtYmVyKHRoaXMuY2hlY2tlZEluZGV4KSkge1xuICAgICAgICAgICAgdGhpcy5jaGVja2VkSW5kZXggPSBOdW1iZXIodGhpcy5jaGVja2VkSW5kZXgpO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYW5nZXNbJ2Rpc2FibGVkSW5kZXgnXSAmJiB0aGlzLmNoZWNrTnVtYmVyKHRoaXMuZGlzYWJsZWRJbmRleCkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWRJbmRleCA9IE51bWJlcih0aGlzLmRpc2FibGVkSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3B0aW9uQ2xpY2tlZChpbmRleCkge1xuICAgICAgICBpZiAodGhpcy50b2dnbGVPcHRpb25zICYmIHRoaXMudG9nZ2xlT3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4Q2hhbmdlLmVtaXQoaW5kZXgpO1xuICAgICAgICAgICAgaWYgKHRoaXMudG9nZ2xlT3B0aW9uc1tpbmRleF0gJiYgdGhpcy50b2dnbGVPcHRpb25zW2luZGV4XS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh0aGlzLnRvZ2dsZU9wdGlvbnNbaW5kZXhdLnZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5zbmFja2Jhci5vcGVuKCdJbnZhbGlkIHRvZ2dsZSBidXR0b24gdmFsdWUnLCAnT0snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMuc25hY2tiYXIub3BlbignSW52YWxpZCB0b2dnbGUgb3B0aW9ucycsICdPSycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjaGVja051bWJlcihudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciAhPT0gdW5kZWZpbmVkICYmIG51bWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5pc05hTihOdW1iZXIobnVtYmVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==