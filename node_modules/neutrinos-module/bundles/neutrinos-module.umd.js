(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/common/http'), require('@angular/forms'), require('@angular/platform-browser/animations'), require('@angular/flex-layout'), require('neutrinos-seed-services'), require('@angular/material/icon'), require('@angular/material/dialog'), require('@angular/material/button'), require('@angular/material/button-toggle'), require('signature_pad')) :
    typeof define === 'function' && define.amd ? define('neutrinos-module', ['exports', '@angular/core', '@angular/common', '@angular/common/http', '@angular/forms', '@angular/platform-browser/animations', '@angular/flex-layout', 'neutrinos-seed-services', '@angular/material/icon', '@angular/material/dialog', '@angular/material/button', '@angular/material/button-toggle', 'signature_pad'], factory) :
    (global = global || self, factory(global['neutrinos-module'] = {}, global.ng.core, global.ng.common, global.ng.common.http, global.ng.forms, global.ng.platformBrowser.animations, global.ng.flexLayout, global['neutrinos-seed-services'], global.ng.material.icon, global.ng.material.dialog, global.ng.material.button, global.ng.material.buttonToggle, global.signature_pad));
}(this, (function (exports, core, common, http, forms, animations, flexLayout, neutrinosSeedServices, icon, dialog, button, buttonToggle, signing__default) { 'use strict';

    signing__default = signing__default && Object.prototype.hasOwnProperty.call(signing__default, 'default') ? signing__default['default'] : signing__default;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var NFileIOService = /** @class */ (function () {
        function NFileIOService(http) {
            var _this = this;
            this.http = http;
            this.checkFileExist = function (path, fileName, i, callback) {
                return window.resolveLocalFileSystemURL(path + fileName, function () {
                    var length = 4;
                    if (fileName.lastIndexOf('(') > -1) {
                        var isExist = parseInt(fileName.slice((fileName.lastIndexOf('(') + 1), fileName.lastIndexOf(')')), 10);
                        if (!isNaN(isExist)) {
                            i = isExist + 1;
                            if (i > 10 && i < 100) {
                                length += 1;
                            }
                            else if (i > 100) {
                                length += 2;
                            }
                            fileName = fileName.slice(0, (fileName.lastIndexOf('.') - length)) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                        }
                        else {
                            i += 1;
                            fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                            fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                        }
                    }
                    else {
                        i += 1;
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                    return _this.checkFileExist(path, fileName, i, callback);
                }, function () {
                    return callback(fileName);
                });
            };
            this.systemService = neutrinosSeedServices.NSystemService.getInstance();
            this.appProperties = this.systemService.getVal('properties');
        }
        NFileIOService.prototype.getFileInfo = function (options) {
            var dataModelURL = this.systemService.getDataModelUrl();
            if (options.metadata) {
                dataModelURL += this.appProperties.appName + "_" + options.entityName + ".files?filter={\"metadata.key\": \"" + options.metadata.key + "\"}";
            }
            else {
                dataModelURL += this.appProperties.appName + "_" + options.entityName + ".files/" + options.fileId;
            }
            return this.http.get(dataModelURL);
        };
        NFileIOService.prototype.getFormData = function (fileUri) {
            return new Promise(function (resolve, reject) {
                window.resolveLocalFileSystemURL(fileUri, function (fileEntry) {
                    fileEntry.file(function (file) {
                        var reader = new FileReader();
                        reader.onerror = function (evt) {
                            return reject(evt);
                        };
                        reader.onloadend = function (evt) {
                            var formData = new FormData();
                            var blob = new Blob([new Uint8Array(reader.result)], { type: file.type });
                            formData.append('file', blob, file.name);
                            return resolve(formData);
                        };
                        reader.readAsArrayBuffer(file);
                    });
                }, function (error) {
                    return reject(error);
                });
            });
        };
        NFileIOService.prototype.getPicture = function (cameraOptions) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                document.addEventListener('deviceready', function () {
                    navigator.camera.getPicture(function (imageUri) {
                        _this.getFormData(imageUri).then(function (res) {
                            return resolve(res);
                        }).catch(function (err) { return reject(err); });
                    }, function (error) {
                        return reject(error);
                    }, cameraOptions);
                }, false);
            });
        };
        NFileIOService.prototype.scanPicture = function (scanOptions) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                document.addEventListener('deviceready', function () {
                    if (scanOptions.hasOwnProperty('sourceType') && scanOptions.hasOwnProperty('doUpload')) {
                        scan.scanDoc(scanOptions.sourceType, function (imageUri) {
                            if (scanOptions.doUpload) {
                                _this.getFormData(imageUri).then(function (res) {
                                    return resolve(res);
                                }).catch(function (err) { return reject(err); });
                            }
                            else {
                                resolve(imageUri);
                            }
                        }, function (error) {
                            return reject(error);
                        });
                    }
                    else {
                        reject('sourceType not found');
                    }
                }, false);
            });
        };
        //Barcode
        NFileIOService.prototype.getBarcode = function (barcodeOptions) {
            return new Promise(function (resolve, reject) {
                document.addEventListener('deviceready', function () {
                    cordova.plugins.barcodeScanner.scan(function (result) {
                        if (result.cancelled) {
                            return reject(result);
                        }
                        else {
                            return resolve(result);
                        }
                    }, function (error) {
                        return reject(error);
                    }, barcodeOptions);
                }, false);
            });
        };
        //Video
        NFileIOService.prototype.getVideo = function (videoOptions) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                document.addEventListener('deviceready', function () {
                    navigator.device.capture.captureVideo(function (mediaFiles) {
                        var imageUri = mediaFiles[0].fullPath;
                        _this.getFormData(imageUri).then(function (res) {
                            return resolve(res);
                        }).catch(function (err) { return reject(err); });
                    }, function (error) {
                        return reject(error);
                    }, {});
                }, false);
            });
        };
        //tts
        NFileIOService.prototype.getTts = function (ttsOptions) {
            return new Promise(function (resolve, reject) {
                document.addEventListener('deviceready', function () {
                    if (ttsOptions.hasOwnProperty('text')) {
                        TTS.speak(ttsOptions).then(function () {
                            return resolve('success');
                        }, function (reason) {
                            return reject(reason);
                        });
                    }
                    else {
                        reject('text not found');
                    }
                }, false);
            });
        };
        //shake
        NFileIOService.prototype.getShake = function (shakeOptions) {
            return new Promise(function (resolve, reject) {
                document.addEventListener('deviceready', function () {
                    if (shakeOptions.hasOwnProperty('start') && shakeOptions.hasOwnProperty('sensitivity')) {
                        if (shakeOptions.start) {
                            shake.startWatch(function () {
                                return resolve('success');
                            }, shakeOptions.sensitivity, function () {
                                return reject('error');
                            });
                        }
                        else {
                            shake.stopWatch();
                        }
                    }
                    else {
                        reject('start or sensitivity not found');
                    }
                }, false);
            });
        };
        //ocr
        NFileIOService.prototype.getOcr = function (ocrOptions) {
            return new Promise(function (resolve, reject) {
                document.addEventListener('deviceready', function () {
                    if (ocrOptions.hasOwnProperty('uriOrBase') && ocrOptions.hasOwnProperty('returnType')) {
                        navigator.camera.getPicture(function (imageData) {
                            textocr.recText(ocrOptions.uriOrBase, ocrOptions.returnType, imageData, function (recognizedText) {
                                return resolve(recognizedText);
                            }, function (message) {
                                return reject(message);
                            });
                        }, function (message) {
                            return reject(message);
                        }, ocrOptions);
                    }
                    else {
                        reject('uriOrBase or returnType not found');
                    }
                }, false);
            });
        };
        //fingerprint
        NFileIOService.prototype.getFingerprint = function (fingerprintOptions) {
            return new Promise(function (resolve, reject) {
                document.addEventListener('deviceready', function () {
                    if (fingerprintOptions.hasOwnProperty('clientId') && fingerprintOptions.hasOwnProperty('clientSecret')) {
                        Fingerprint.isAvailable(function (result) {
                            Fingerprint.show(fingerprintOptions, function () {
                                return resolve('success');
                            }, function (err) {
                                return reject(err);
                            });
                        }, function (message) {
                            return reject(message);
                        });
                    }
                    else {
                        reject('clientId or clientSecret not found');
                    }
                }, false);
            });
        };
        NFileIOService.prototype.upload = function (options) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var body = new FormData();
                if (options.formData) {
                    body = options.formData;
                }
                else if (options.files) {
                    body.append('file', options.files);
                }
                else {
                    reject('No file selected!');
                }
                if (options.metadata) {
                    body.append('metadata', JSON.stringify(options.metadata));
                }
                var headers = { 'Content-Type': 'no-content' };
                var url = _this.systemService.getFileIOUrl() + ("" + options.entityName);
                var temp_headers = { headers: _this.setHeaders(headers) };
                _this.http.post(url, body, temp_headers)
                    .subscribe(function (res) { return resolve(res); }, function (err) { return reject(err); });
            });
        };
        NFileIOService.prototype.download = function (options) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (options.entityName && (options.metadata || options.fileId)) {
                    _this.getFileInfo(options).subscribe(function (res) {
                        if (options.metadata) {
                            res = res[res.length - 1];
                        }
                        else {
                            res = res.result;
                        }
                        var fileInfo = {
                            contentType: '',
                            filename: ''
                        };
                        if (res && res['contentType'] && res['filename']) {
                            fileInfo['contentType'] = res['contentType'];
                            fileInfo['filename'] = res['filename'];
                            var fileIOURL = _this.systemService.getFileIOUrl();
                            if (options.metadata) {
                                fileIOURL += options.entityName + "?metadataFilter={\"metadata.key\": \"" + options.metadata.key + "\"}";
                            }
                            else {
                                fileIOURL += options.entityName + "/" + options.fileId;
                            }
                            var headers = {
                                'Accept': fileInfo.contentType
                            };
                            _this.http.get(fileIOURL, { headers: _this.setHeaders(headers), responseType: 'blob' }).subscribe(function (response) {
                                var blob = new Blob([response.body], { type: fileInfo.contentType });
                                _this.saveFile(blob, fileInfo.filename).then(function (resp) {
                                }).catch(function (err) { return reject(err); });
                            }, function (err) { return reject(err); });
                        }
                        else {
                            reject('fileInfo not exit');
                        }
                    }, function (err) { return reject(err); });
                }
                else {
                    return reject('download options not found');
                }
            });
        };
        NFileIOService.prototype.saveFile = function (data, filename) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this.systemService.checkDevice() == 'mobile') {
                    var storageLocation = _this.systemService.isAndroid() ? cordova.file.externalRootDirectory : cordova.file.documentsDirectory;
                    _this.createDirectory(storageLocation, _this.appProperties.appName, filename, data)
                        .then(function (res) { return resolve(res); })
                        .catch(function (err) { return reject(err); });
                }
                else {
                    _this.saveToBrowser(data, filename).then(function (res) { return resolve(res); });
                }
            });
        };
        NFileIOService.prototype.saveToBrowser = function (data, fileName) {
            return new Promise(function (resolve) {
                // Edge 20+
                var isEdge = !( /*@cc_on!@*/false || !!document['documentMode']) && !!window.StyleMedia;
                if (isEdge) {
                    window.navigator.msSaveBlob(data, fileName);
                }
                else {
                    var downloadURL = window.URL.createObjectURL(data);
                    var anchor = document.createElement('a');
                    document.body.appendChild(anchor);
                    anchor.style.display = 'none';
                    anchor.download = fileName;
                    anchor.href = downloadURL;
                    anchor.click();
                    window.URL.revokeObjectURL(downloadURL);
                    document.body.removeChild(anchor);
                    anchor.remove();
                }
                return resolve('download complete');
            });
        };
        NFileIOService.prototype.createDirectory = function (rootDirectory, appName, fileName, data) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                window.resolveLocalFileSystemURL(rootDirectory, function (fileSystem) {
                    fileSystem.getDirectory(appName, { create: true }, function (dirEntry) {
                        _this.checkFileExist(dirEntry.nativeURL, fileName, 0, function (newFileName) {
                            dirEntry.getFile(newFileName, { create: true }, function (targetFile) {
                                targetFile.createWriter(function (fileWriter) {
                                    fileWriter.onwriteend = function () {
                                        return resolve(targetFile.toURL());
                                    };
                                    fileWriter.onerror = function (err) {
                                        return reject(err);
                                    };
                                    fileWriter.write(data);
                                });
                            });
                        });
                    }, function (err) { return reject(err); });
                }, function (err) { return reject(err); });
            });
        };
        NFileIOService.prototype.setHeaders = function (headerJSON) {
            var headers = new http.HttpHeaders();
            for (var key in headerJSON) {
                if (key) {
                    headers = headers.set(key, headerJSON[key]);
                }
            }
            return headers;
        };
        NFileIOService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        NFileIOService = __decorate([
            core.Injectable()
        ], NFileIOService);
        return NFileIOService;
    }());

    var NCameraDirective = /** @class */ (function () {
        function NCameraDirective(fsv) {
            this.fsv = fsv;
            this.onsuccess = new core.EventEmitter();
            this.onerror = new core.EventEmitter();
        }
        NCameraDirective.prototype.methodToHandleMouseClickAction = function () {
            var _this = this;
            this.getPicture()
                .then(function (sucess) { return _this.onsuccess.emit(sucess); })
                .catch(function (error) { return _this.onerror.emit(error); });
        };
        NCameraDirective.prototype.getPicture = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.fsv.getPicture(_this.cameraOptions).then(function (res) {
                    var options = {
                        'formData': res,
                        'entityName': _this.cameraOptions.entityName,
                        'metadata': _this.cameraOptions.metadata
                    };
                    _this.fsv.upload(options)
                        .then(function (uri) { return resolve(uri); })
                        .catch(function (err) { return reject(err); });
                }).catch(function (err) { return reject(err); });
            });
        };
        NCameraDirective.ctorParameters = function () { return [
            { type: NFileIOService }
        ]; };
        __decorate([
            core.Input()
        ], NCameraDirective.prototype, "cameraOptions", void 0);
        __decorate([
            core.Output()
        ], NCameraDirective.prototype, "onsuccess", void 0);
        __decorate([
            core.Output()
        ], NCameraDirective.prototype, "onerror", void 0);
        __decorate([
            core.HostListener('click')
        ], NCameraDirective.prototype, "methodToHandleMouseClickAction", null);
        NCameraDirective = __decorate([
            core.Directive({
                selector: '[n-camera]'
            })
        ], NCameraDirective);
        return NCameraDirective;
    }());

    var NDownloadDirective = /** @class */ (function () {
        function NDownloadDirective(fsv) {
            this.fsv = fsv;
            this.onsuccess = new core.EventEmitter();
            this.onerror = new core.EventEmitter();
        }
        NDownloadDirective.prototype.methodToHandleMouseClickAction = function () {
            var _this = this;
            this.downloadFile()
                .then(function (res) { return _this.onsuccess.emit(res); })
                .catch(function (err) { return _this.onerror.emit(err); });
        };
        NDownloadDirective.prototype.downloadFile = function () {
            return this.fsv.download(this.downloadOptions);
        };
        NDownloadDirective.ctorParameters = function () { return [
            { type: NFileIOService }
        ]; };
        __decorate([
            core.Input()
        ], NDownloadDirective.prototype, "downloadOptions", void 0);
        __decorate([
            core.Output()
        ], NDownloadDirective.prototype, "onsuccess", void 0);
        __decorate([
            core.Output()
        ], NDownloadDirective.prototype, "onerror", void 0);
        __decorate([
            core.HostListener('click')
        ], NDownloadDirective.prototype, "methodToHandleMouseClickAction", null);
        NDownloadDirective = __decorate([
            core.Directive({ selector: '[n-download]' })
        ], NDownloadDirective);
        return NDownloadDirective;
    }());

    var NScanDirective = /** @class */ (function () {
        function NScanDirective(fsv) {
            this.fsv = fsv;
            this.onsuccess = new core.EventEmitter();
            this.onerror = new core.EventEmitter();
        }
        NScanDirective.prototype.methodToHandleMouseClickAction = function () {
            var _this = this;
            this.getPicture()
                .then(function (sucess) { return _this.onsuccess.emit(sucess); })
                .catch(function (error) { return _this.onerror.emit(error); });
        };
        NScanDirective.prototype.getPicture = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.fsv.scanPicture(_this.scanOptions).then(function (res) {
                    if (_this.scanOptions.doUpload) {
                        var options = {
                            'formData': res,
                            'entityName': _this.scanOptions.entityName,
                            'metadata': _this.scanOptions.metadata
                        };
                        _this.fsv.upload(options).then(function (uri) {
                            resolve(uri);
                        }).catch(function (err) { return reject(err); });
                    }
                    else {
                        resolve(res);
                    }
                }).catch(function (err) {
                    return reject(err);
                });
            });
        };
        NScanDirective.ctorParameters = function () { return [
            { type: NFileIOService }
        ]; };
        __decorate([
            core.Input()
        ], NScanDirective.prototype, "scanOptions", void 0);
        __decorate([
            core.Output()
        ], NScanDirective.prototype, "onsuccess", void 0);
        __decorate([
            core.Output()
        ], NScanDirective.prototype, "onerror", void 0);
        __decorate([
            core.HostListener('click')
        ], NScanDirective.prototype, "methodToHandleMouseClickAction", null);
        NScanDirective = __decorate([
            core.Directive({
                selector: '[n-scan]'
            })
        ], NScanDirective);
        return NScanDirective;
    }());

    var NVideoDirective = /** @class */ (function () {
        function NVideoDirective(fsv) {
            this.fsv = fsv;
            this.onsuccess = new core.EventEmitter();
            this.onerror = new core.EventEmitter();
        }
        NVideoDirective.prototype.methodToHandleMouseClickAction = function () {
            var _this = this;
            this.getVideo()
                .then(function (sucess) { return _this.onsuccess.emit(sucess); })
                .catch(function (error) { return _this.onerror.emit(error); });
        };
        NVideoDirective.prototype.getVideo = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.fsv.getVideo(_this.videoOptions).then(function (res) {
                    var options = {
                        'formData': res,
                        'entityName': _this.videoOptions.entityName,
                        'metadata': _this.videoOptions.metadata
                    };
                    _this.fsv.upload(options)
                        .then(function (uri) { return resolve(uri); })
                        .catch(function (err) { return reject(err); });
                }).catch(function (err) { return reject(err); });
            });
        };
        NVideoDirective.ctorParameters = function () { return [
            { type: NFileIOService }
        ]; };
        __decorate([
            core.Input()
        ], NVideoDirective.prototype, "videoOptions", void 0);
        __decorate([
            core.Output()
        ], NVideoDirective.prototype, "onsuccess", void 0);
        __decorate([
            core.Output()
        ], NVideoDirective.prototype, "onerror", void 0);
        __decorate([
            core.HostListener('click')
        ], NVideoDirective.prototype, "methodToHandleMouseClickAction", null);
        NVideoDirective = __decorate([
            core.Directive({
                selector: '[n-video]'
            })
        ], NVideoDirective);
        return NVideoDirective;
    }());

    var NBarcodeDirective = /** @class */ (function () {
        function NBarcodeDirective(fsv) {
            this.fsv = fsv;
            this.onsuccess = new core.EventEmitter();
            this.onerror = new core.EventEmitter();
        }
        NBarcodeDirective.prototype.methodToHandleMouseClickAction = function () {
            var _this = this;
            this.getBarcode()
                .then(function (sucess) { return _this.onsuccess.emit(sucess); })
                .catch(function (error) { return _this.onerror.emit(error); });
        };
        NBarcodeDirective.prototype.getBarcode = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.fsv.getBarcode(_this.barcodeOptions).then(function (res) {
                    return resolve(res);
                }).catch(function (err) { return reject(err); });
            });
        };
        NBarcodeDirective.ctorParameters = function () { return [
            { type: NFileIOService }
        ]; };
        __decorate([
            core.Input()
        ], NBarcodeDirective.prototype, "barcodeOptions", void 0);
        __decorate([
            core.Output()
        ], NBarcodeDirective.prototype, "onsuccess", void 0);
        __decorate([
            core.Output()
        ], NBarcodeDirective.prototype, "onerror", void 0);
        __decorate([
            core.HostListener('click')
        ], NBarcodeDirective.prototype, "methodToHandleMouseClickAction", null);
        NBarcodeDirective = __decorate([
            core.Directive({
                selector: '[n-barcode]'
            })
        ], NBarcodeDirective);
        return NBarcodeDirective;
    }());

    var NTtsDirective = /** @class */ (function () {
        function NTtsDirective(fsv) {
            this.fsv = fsv;
            this.onsuccess = new core.EventEmitter();
            this.onerror = new core.EventEmitter();
        }
        NTtsDirective.prototype.methodToHandleMouseClickAction = function () {
            var _this = this;
            this.getTts()
                .then(function (sucess) { return _this.onsuccess.emit(sucess); })
                .catch(function (error) { return _this.onerror.emit(error); });
        };
        NTtsDirective.prototype.getTts = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.fsv.getTts(_this.ttsOptions).then(function (res) {
                    return resolve(res);
                }).catch(function (err) { return reject(err); });
            });
        };
        NTtsDirective.ctorParameters = function () { return [
            { type: NFileIOService }
        ]; };
        __decorate([
            core.Input()
        ], NTtsDirective.prototype, "ttsOptions", void 0);
        __decorate([
            core.Output()
        ], NTtsDirective.prototype, "onsuccess", void 0);
        __decorate([
            core.Output()
        ], NTtsDirective.prototype, "onerror", void 0);
        __decorate([
            core.HostListener('click')
        ], NTtsDirective.prototype, "methodToHandleMouseClickAction", null);
        NTtsDirective = __decorate([
            core.Directive({
                selector: '[n-tts]'
            })
        ], NTtsDirective);
        return NTtsDirective;
    }());

    var NFingerprintDirective = /** @class */ (function () {
        function NFingerprintDirective(fsv) {
            this.fsv = fsv;
            this.onsuccess = new core.EventEmitter();
            this.onerror = new core.EventEmitter();
        }
        NFingerprintDirective.prototype.methodToHandleMouseClickAction = function () {
            var _this = this;
            this.getFingerprint()
                .then(function (sucess) { return _this.onsuccess.emit(sucess); })
                .catch(function (error) { return _this.onerror.emit(error); });
        };
        NFingerprintDirective.prototype.getFingerprint = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.fsv.getFingerprint(_this.fingerprintOptions).then(function (res) {
                    return resolve(res);
                }).catch(function (err) { return reject(err); });
            });
        };
        NFingerprintDirective.ctorParameters = function () { return [
            { type: NFileIOService }
        ]; };
        __decorate([
            core.Input()
        ], NFingerprintDirective.prototype, "fingerprintOptions", void 0);
        __decorate([
            core.Output()
        ], NFingerprintDirective.prototype, "onsuccess", void 0);
        __decorate([
            core.Output()
        ], NFingerprintDirective.prototype, "onerror", void 0);
        __decorate([
            core.HostListener('click')
        ], NFingerprintDirective.prototype, "methodToHandleMouseClickAction", null);
        NFingerprintDirective = __decorate([
            core.Directive({
                selector: '[n-fingerprint]'
            })
        ], NFingerprintDirective);
        return NFingerprintDirective;
    }());

    var NOcrDirective = /** @class */ (function () {
        function NOcrDirective(fsv) {
            this.fsv = fsv;
            this.onsuccess = new core.EventEmitter();
            this.onerror = new core.EventEmitter();
        }
        NOcrDirective.prototype.methodToHandleMouseClickAction = function () {
            var _this = this;
            this.getOcr()
                .then(function (sucess) { return _this.onsuccess.emit(sucess); })
                .catch(function (error) { return _this.onerror.emit(error); });
        };
        NOcrDirective.prototype.getOcr = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.fsv.getOcr(_this.ocrOptions).then(function (res) {
                    return resolve(res);
                }).catch(function (err) { return reject(err); });
            });
        };
        NOcrDirective.ctorParameters = function () { return [
            { type: NFileIOService }
        ]; };
        __decorate([
            core.Input()
        ], NOcrDirective.prototype, "ocrOptions", void 0);
        __decorate([
            core.Output()
        ], NOcrDirective.prototype, "onsuccess", void 0);
        __decorate([
            core.Output()
        ], NOcrDirective.prototype, "onerror", void 0);
        __decorate([
            core.HostListener('click')
        ], NOcrDirective.prototype, "methodToHandleMouseClickAction", null);
        NOcrDirective = __decorate([
            core.Directive({
                selector: '[n-ocr]'
            })
        ], NOcrDirective);
        return NOcrDirective;
    }());

    var NShakeDirective = /** @class */ (function () {
        function NShakeDirective(fsv) {
            this.fsv = fsv;
            this.onsuccess = new core.EventEmitter();
            this.onerror = new core.EventEmitter();
        }
        NShakeDirective.prototype.methodToHandleMouseClickAction = function () {
            var _this = this;
            this.getShake()
                .then(function (sucess) { return _this.onsuccess.emit(sucess); })
                .catch(function (error) { return _this.onerror.emit(error); });
        };
        NShakeDirective.prototype.getShake = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.fsv.getShake(_this.shakeOptions).then(function (res) {
                    return resolve(res);
                }).catch(function (err) { return reject(err); });
            });
        };
        NShakeDirective.ctorParameters = function () { return [
            { type: NFileIOService }
        ]; };
        __decorate([
            core.Input()
        ], NShakeDirective.prototype, "shakeOptions", void 0);
        __decorate([
            core.Output()
        ], NShakeDirective.prototype, "onsuccess", void 0);
        __decorate([
            core.Output()
        ], NShakeDirective.prototype, "onerror", void 0);
        __decorate([
            core.HostListener('click')
        ], NShakeDirective.prototype, "methodToHandleMouseClickAction", null);
        NShakeDirective = __decorate([
            core.Directive({
                selector: '[n-shake]'
            })
        ], NShakeDirective);
        return NShakeDirective;
    }());

    var NFileUploadComponent = /** @class */ (function () {
        function NFileUploadComponent(fileIOService, _renderer) {
            this.fileIOService = fileIOService;
            this._renderer = _renderer;
            this.onsuccess = new core.EventEmitter();
            this.onerror = new core.EventEmitter();
        }
        /**
         * Method executed when upload button is clicked.
         */
        NFileUploadComponent.prototype.handleUpload = function () {
            var _this = this;
            this.isDone = false;
            if (this.file && this.uploadOptions && this.uploadOptions.entityName && this.uploadOptions.metadata) {
                this.fileIOService.upload({ files: this.file, entityName: this.uploadOptions.entityName, metadata: this.uploadOptions.metadata })
                    .then(function (res) {
                    _this.isDone = true;
                    _this.onsuccess.emit(res);
                })
                    .catch(function (err) { return _this.onerror.emit(err); });
            }
            else {
                this.onerror.emit(new Error('Upload options missing'));
            }
        };
        /**
         * Method executed when a file is selected.
         */
        NFileUploadComponent.prototype.handleSelect = function (fileInput) {
            if (fileInput.target.files && fileInput.target.files[0]) {
                this.file = fileInput.target.files[0];
                this.fileName = this.file.name;
            }
        };
        /**
         * Methods executed when cancel button is clicked.
         * Clears files.
         */
        NFileUploadComponent.prototype.cancel = function () {
            this.file = null;
            this.fileName = null;
            this.isDone = false;
            // check if the file input is rendered before clearing it
            if (this.fileInput) {
                this._renderer.setProperty(this.fileInput, 'value', '');
            }
        };
        NFileUploadComponent.prototype.disableFileUploadButton = function () {
            if (typeof this.disableButton === 'boolean') {
                return this.disableButton;
            }
            return this.disableButton === 'disabled' || this.disableButton === 'true' ? true : false;
        };
        NFileUploadComponent.ctorParameters = function () { return [
            { type: NFileIOService },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.ViewChild('fileInput', { static: false })
        ], NFileUploadComponent.prototype, "fileInput", void 0);
        __decorate([
            core.Input()
        ], NFileUploadComponent.prototype, "uploadOptions", void 0);
        __decorate([
            core.Input('disabled')
        ], NFileUploadComponent.prototype, "disableButton", void 0);
        __decorate([
            core.Output()
        ], NFileUploadComponent.prototype, "onsuccess", void 0);
        __decorate([
            core.Output()
        ], NFileUploadComponent.prototype, "onerror", void 0);
        NFileUploadComponent = __decorate([
            core.Component({
                selector: 'n-file-upload',
                template: "<div>\n  <button mat-raised-button class=\"bh-file-upload\" (click)=\"fileInput.click()\" color=\"primary\"\n    *ngIf=\"!fileName\" [disabled]=\"disableFileUploadButton()\">\n    <mat-icon>attach_file</mat-icon>\n    <span>Choose a file...</span>\n    <input #fileInput type=\"file\" (change)=\"handleSelect($event)\" style=\"display:none;\" />\n  </button>\n  <div *ngIf=\"fileName\">\n    <button mat-raised-button color=\"primary\" (click)=\"handleUpload()\">\n      <mat-icon>file_upload</mat-icon>\n      <span>{{fileName}}</span>\n    </button>\n    <button *ngIf=\"!isDone\" mat-icon-button color=\"warn\" (click)=\"cancel()\" class=\"bh-file-upload-cancel\">\n      <mat-icon>cancel</mat-icon>\n    </button>\n    <button *ngIf=\"isDone\" mat-icon-button (click)=\"cancel()\" class=\"bh-file-upload-done\">\n      <mat-icon>done</mat-icon>\n    </button>\n  </div>\n</div>\n",
                styles: [".bh-file-upload{padding-left:8px;padding-right:8px}.bh-file-upload-cancel{height:24px;width:24px;position:relative;top:24px;left:-12px}::ng-deep [dir=rtl] .bh-file-upload-cancel{right:-12px;left:0}.bh-file-upload-cancel mat-icon{border-radius:12px;vertical-align:baseline}.bh-file-upload-done{height:24px;width:24px;position:relative;top:20px;left:-13px}::ng-deep [dir=rtl] .bh-file-upload-done{right:-12px;left:0}.bh-file-upload-done mat-icon{border-radius:12px;vertical-align:baseline}"]
            })
        ], NFileUploadComponent);
        return NFileUploadComponent;
    }());

    var NAlertComponent = /** @class */ (function () {
        function NAlertComponent(dialogRef) {
            this.dialogRef = dialogRef;
            this.messageContent = NAlertComponent_1.message;
            this.titleContent = NAlertComponent_1.title;
        }
        NAlertComponent_1 = NAlertComponent;
        var NAlertComponent_1;
        NAlertComponent.title = '';
        NAlertComponent.message = '';
        NAlertComponent.ctorParameters = function () { return [
            { type: dialog.MatDialogRef }
        ]; };
        NAlertComponent = NAlertComponent_1 = __decorate([
            core.Component({
                selector: 'n-alert-dialog',
                template: "\n<div class=\"alertContainer\" fxLayout=\"column\">\n  <h4 mat-dialog-title>{{titleContent}}</h4>\n  <span class=\"msgContainer\" >{{messageContent}}</span>\n  <button mat-raised-button (click)=\"dialogRef.close()\">Close</button>\n</div>\n",
                styles: [".alertContainer{height:auto;width:auto}.msgContainer{margin-bottom:.5em}"]
            })
        ], NAlertComponent);
        return NAlertComponent;
    }());

    var NAlertService = /** @class */ (function () {
        function NAlertService(dialog) {
            this.dialog = dialog;
        }
        NAlertService.prototype.alert = function (message, title, data) {
            NAlertComponent.message = message;
            NAlertComponent.title = title;
            this.dialog.open(NAlertComponent, data);
        };
        NAlertService.ctorParameters = function () { return [
            { type: dialog.MatDialog }
        ]; };
        NAlertService = __decorate([
            core.Injectable()
        ], NAlertService);
        return NAlertService;
    }());

    var NToggleoptionsComponent = /** @class */ (function () {
        function NToggleoptionsComponent() {
            // options = {icon: 'home', value: 'home', disabled: false, 'checked': false}
            this.toggleOptions = [];
            this.align = 'horizontal';
            this.indexChange = new core.EventEmitter();
            this.valueChange = new core.EventEmitter();
        }
        // constructor(private snackbar: MatSnackBar) {
        // }
        NToggleoptionsComponent.prototype.ngOnInit = function () {
            if (this.checkNumber(this.checkedIndex)) {
                this.checkedIndex = Number(this.checkedIndex);
            }
            if (this.checkNumber(this.disabledIndex)) {
                this.disabledIndex = Number(this.disabledIndex);
            }
        };
        NToggleoptionsComponent.prototype.ngOnChanges = function (changes) {
            if (changes['checkedIndex'] && this.checkNumber(this.checkedIndex)) {
                this.checkedIndex = Number(this.checkedIndex);
            }
            else if (changes['disabledIndex'] && this.checkNumber(this.disabledIndex)) {
                this.disabledIndex = Number(this.disabledIndex);
            }
        };
        NToggleoptionsComponent.prototype.optionClicked = function (index) {
            if (this.toggleOptions && this.toggleOptions.length > 0) {
                this.indexChange.emit(index);
                if (this.toggleOptions[index] && this.toggleOptions[index].value) {
                    this.valueChange.emit(this.toggleOptions[index].value);
                }
                else {
                    // this.snackbar.open('Invalid toggle button value', 'OK');
                }
            }
            else {
                // this.snackbar.open('Invalid toggle options', 'OK');
            }
        };
        NToggleoptionsComponent.prototype.checkNumber = function (number) {
            if (number !== undefined && number !== null) {
                return Number.isNaN(Number(number));
            }
            return false;
        };
        __decorate([
            core.Input('toggleOptions')
        ], NToggleoptionsComponent.prototype, "toggleOptions", void 0);
        __decorate([
            core.Input('align')
        ], NToggleoptionsComponent.prototype, "align", void 0);
        __decorate([
            core.Input('disabledIndex')
        ], NToggleoptionsComponent.prototype, "disabledIndex", void 0);
        __decorate([
            core.Input('checkedIndex')
        ], NToggleoptionsComponent.prototype, "checkedIndex", void 0);
        __decorate([
            core.Input('value')
        ], NToggleoptionsComponent.prototype, "value", void 0);
        __decorate([
            core.Output()
        ], NToggleoptionsComponent.prototype, "indexChange", void 0);
        __decorate([
            core.Output()
        ], NToggleoptionsComponent.prototype, "valueChange", void 0);
        NToggleoptionsComponent = __decorate([
            core.Component({
                selector: 'n-toggleoptions',
                template: "<mat-button-toggle-group #group=\"matButtonToggleGroup\" [vertical]=\"align == 'vertical'? true: false\" [value]=\"value\">\n    <mat-button-toggle *ngFor=\"let option of toggleOptions; let i = index;\" [value]=\"option.value\" [disabled]=\"option.disabled || disabledIndex == i\" [checked]=\"option.checked || checkedIndex == i\" (click)=\"optionClicked(i)\" fxLayoutAlign=\"center center\">\n        <mat-icon *ngIf=\"option.icon\">{{option.icon}}</mat-icon>\n        <span *ngIf=\"!option.icon && option.value\">{{option.value}}</span>\n    </mat-button-toggle>\n</mat-button-toggle-group>"
            })
        ], NToggleoptionsComponent);
        return NToggleoptionsComponent;
    }());

    // import { MatSnackBar } from '@angular/material';
    /**
    * Model import Example :
    * import { HERO } from '../models/hero.model';
    */
    /**
     * Service import Example :
     * import { HeroService } from '../services/hero/hero.service';
     */
    var NSignatureComponent = /** @class */ (function () {
        function NSignatureComponent() {
            this.imageDataValue = '';
            this.signaturePad = '';
            this.mode = 'responsive'; // 'click-fullscreen' or 'responsive'
            this.canvasMode = 'responsive'; // 'responsive' or 'fullscreen'
            this.imageDataChange = new core.EventEmitter();
        }
        Object.defineProperty(NSignatureComponent.prototype, "imageData", {
            get: function () {
                return this.imageDataValue;
            },
            set: function (val) {
                this.imageDataValue = val;
                if (val || val === '' || this.isDataURL(val)) {
                    this.saveCavas(val);
                }
                this.imageDataChange.emit(this.imageDataValue);
            },
            enumerable: true,
            configurable: true
        });
        NSignatureComponent.prototype.ngAfterViewInit = function () {
            if (this.mode === 'responsive') {
                this.createCanvas();
            }
        };
        NSignatureComponent.prototype.createCanvas = function () {
            this.fitToContainer(this.signaturecanvas.nativeElement);
            this.signaturePad = new signing__default(this.signaturecanvas.nativeElement, this.assignOptions());
        };
        NSignatureComponent.prototype.saveCavas = function (dataUrl) {
            if (this.signaturePad) {
                if (this.signaturePad.isEmpty() || dataUrl === '') {
                    this.savedData = '';
                    this.signaturePad.clear();
                }
                else if (this.isDataURL(dataUrl)) {
                    this.signaturePad.fromDataURL(dataUrl);
                    this.savedData = this.signaturePad.toData();
                }
                else {
                    this.imageData = this.signaturePad.toDataURL();
                    if (this.mode === 'click-fullscreen') {
                        this.savedData = this.signaturePad.toData();
                        this.hideCanvas();
                    }
                }
            }
        };
        NSignatureComponent.prototype.clearCanvas = function () {
            this.signaturePad.clear();
            // this.fitToContainer(this.signaturecanvas.nativeElement);
        };
        NSignatureComponent.prototype.undoCanvas = function () {
            var data = this.signaturePad.toData();
            if (data) {
                data.pop(); // remove the last dot or line
                this.signaturePad.fromData(data);
            }
        };
        NSignatureComponent.prototype.showCanvas = function () {
            this.classAbs = true;
            this.canvasMode = 'fullscreen';
            if (!this.signaturePad) {
                this.createCanvas();
            }
            this.fitToContainer(this.signaturecanvas.nativeElement, document.body.clientHeight, document.body.clientWidth);
            this.clearCanvas();
            this.createCanvasFromData();
        };
        NSignatureComponent.prototype.hideCanvas = function () {
            this.canvasMode = 'responsive';
        };
        // cancel currently drawn
        NSignatureComponent.prototype.cancel = function () {
            this.savedData = Object.assign([], this.previousSavedData);
        };
        NSignatureComponent.prototype.createCanvasFromData = function () {
            if (this.savedData) {
                this.previousSavedData = Object.assign({}, this.savedData);
                this.signaturePad.fromData(this.savedData);
            }
        };
        NSignatureComponent.prototype.fitToContainer = function (element, height, width) {
            element.style.width = '100%';
            element.style.height = 'calc(100% - 56px)';
            if (height && width) {
                element.width = width;
                element.height = height - 56;
            }
            else {
                element.width = element.offsetWidth;
                element.height = element.offsetHeight;
            }
        };
        NSignatureComponent.prototype.assignOptions = function () {
            var options = {};
            options['backgroundColor'] = this.checkIfValidValueAndRGB(this.backgroundColor, 'backgroundColor');
            options['dotSize'] = this.checkIfValidValueAndNumber(this.dotSize, 'dotSize');
            options['minWidth'] = this.checkIfValidValueAndNumber(this.minWidth, 'minWidth');
            options['maxWidth'] = this.checkIfValidValueAndNumber(this.maxWidth, 'maxWidth');
            options['throttle'] = this.checkIfValidValueAndNumber(this.throttle, 'throttle');
            options['minDistance'] = this.checkIfValidValueAndNumber(this.minDistance, 'minDistance');
            options['penColor'] = this.checkIfValidValueAndRGB(this.penColor, 'penColor');
            options['velocityFilterWeight'] = this.checkIfValidValueAndNumber(this.velocityFilterWeight, 'velocityFilterWeight');
            options = JSON.parse(JSON.stringify(options)); // removing all undefined fields
            options['onBegin'] = this.checkIfValidValueAndFunction(this.onBegin, 'onBegin');
            options['onEnd'] = this.checkIfValidValueAndFunction(this.onEnd, 'onEnd');
            return options;
        };
        NSignatureComponent.prototype.checkIfValidValueAndNumber = function (num, name) {
            if (this.checkIfValid(num) && this.checkNumber(num)) {
                return num;
            }
            this.invalidToast(name, 'num');
            return undefined;
        };
        NSignatureComponent.prototype.checkIfValidValueAndRGB = function (color, name) {
            if (this.checkIfValid(color) && this.checkRGB(color)) {
                return color;
            }
            this.invalidToast(name, 'rgb');
            return undefined;
        };
        NSignatureComponent.prototype.checkIfValidValueAndFunction = function (fn, name) {
            if (this.checkIfValid(fn) && this.checkIfValidFunction(fn)) {
                return fn;
            }
            this.invalidToast(name, 'function format');
            return undefined;
        };
        NSignatureComponent.prototype.checkIfValid = function (value) {
            return (value !== undefined && value !== null) ? value : undefined;
        };
        NSignatureComponent.prototype.checkNumber = function (num) {
            return !this.checkIsNan(Number(num)) ? Number(num) : undefined;
        };
        NSignatureComponent.prototype.checkIfValidFunction = function (fn) {
            return typeof fn === 'function' ? fn : undefined;
        };
        NSignatureComponent.prototype.checkRGB = function (color) {
            var matchColors1 = new RegExp(/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/);
            var matchColors2 = new RegExp(/rgb\((\d{1,3}),[ \t]+(\d{1,3}),(\d{1,3})\)/);
            var matchColors3 = new RegExp(/rgb\((\d{1,3}),(\d{1,3}),[ \t]+(\d{1,3})\)/);
            return matchColors1.test(color) || matchColors2.test(color) || matchColors3.test(color);
        };
        NSignatureComponent.prototype.checkIsNan = function (value) {
            return Number.isNaN(value);
        };
        NSignatureComponent.prototype.invalidToast = function (optionName, optionType) {
            switch (optionType) {
                case 'num':
                    // this.snackbar.open(`Invalid ${optionName} (number or float) given, taking default value instead.`, 'OK');
                    break;
                case 'rgb':
                    // this.snackbar.open(`Invalid ${optionName} format Eg: rgb(255, 255, 255)  given, taking default value instead.`, 'OK');
                    break;
            }
            return;
        };
        NSignatureComponent.prototype.isDataURL = function (s) {
            if (s) {
                var regex = /^\s*data:([a-z]+\/[a-z]+(;[a-z\-]+\=[a-z\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i;
                return !!s.match(regex);
            }
            else {
                return false;
            }
        };
        __decorate([
            core.ViewChild('signaturecanvas', { static: false })
        ], NSignatureComponent.prototype, "signaturecanvas", void 0);
        __decorate([
            core.ViewChild('canvasparent', { static: false })
        ], NSignatureComponent.prototype, "canvasparent", void 0);
        __decorate([
            core.Input('backgroundColor')
        ], NSignatureComponent.prototype, "backgroundColor", void 0);
        __decorate([
            core.Input('dotSize')
        ], NSignatureComponent.prototype, "dotSize", void 0);
        __decorate([
            core.Input('minWidth')
        ], NSignatureComponent.prototype, "minWidth", void 0);
        __decorate([
            core.Input('maxWidth')
        ], NSignatureComponent.prototype, "maxWidth", void 0);
        __decorate([
            core.Input('throttle')
        ], NSignatureComponent.prototype, "throttle", void 0);
        __decorate([
            core.Input('minDistance')
        ], NSignatureComponent.prototype, "minDistance", void 0);
        __decorate([
            core.Input('penColor')
        ], NSignatureComponent.prototype, "penColor", void 0);
        __decorate([
            core.Input('velocityFilterWeight')
        ], NSignatureComponent.prototype, "velocityFilterWeight", void 0);
        __decorate([
            core.Input('onBegin')
        ], NSignatureComponent.prototype, "onBegin", void 0);
        __decorate([
            core.Input('onEnd')
        ], NSignatureComponent.prototype, "onEnd", void 0);
        __decorate([
            core.Input('mode')
        ], NSignatureComponent.prototype, "mode", void 0);
        __decorate([
            core.Output()
        ], NSignatureComponent.prototype, "imageDataChange", void 0);
        __decorate([
            core.Input()
        ], NSignatureComponent.prototype, "imageData", null);
        NSignatureComponent = __decorate([
            core.Component({
                selector: 'n-signature',
                template: "<div fxFill fxLayout=\"row\" *ngIf=\"mode == 'click-fullscreen' && canvasMode !== 'fullscreen'\" class=\"signature-component-border\">\n    <div fxFlex=\"calc(100%-56px)\" fxLayout=\"column\">\n        <img *ngIf=\"imageDataValue\" [src]=\"imageDataValue\" fxFill/>\n    </div>\n    <div fxFlex=\"56px\" fxLayoutAlign=\" center\" class=\"signature-component-border\">\n        <button mat-icon-button (click)=\"showCanvas()\">\n            <mat-icon>mode_edit</mat-icon>\n        </button>\n    </div>\n</div>\n<div fxFill fxLayout=\"column\" class=\"signature-component-border\" [fxShow]=\"(mode == 'click-fullscreen' && canvasMode == 'fullscreen') || mode == 'responsive'\" [ngClass]=\"{'signature-canvas-fullscreen': classAbs}\">\n    <canvas #signaturecanvas></canvas>\n    <div fxFlex=\"56px\" fxLayoutAlign=\"center center\" class=\"signature-component-border\">\n        <button mat-icon-button (click)=\"undoCanvas()\">\n            <mat-icon>undo</mat-icon>\n        </button>\n        <button mat-icon-button (click)=\"clearCanvas()\">\n            <mat-icon>loop</mat-icon>\n        </button>\n        <button mat-icon-button (click)=\"saveCavas()\">\n            <mat-icon>save</mat-icon>\n        </button>\n        <button mat-icon-button (click)=\"canvasMode = 'responsive'; cancel()\">\n            <mat-icon>clear</mat-icon>\n        </button>\n    </div>\n</div>",
                styles: ["\n     :host { height: 100% !important; }\n     .signature-canvas-fullscreen {\n         position: absolute;\n         top: 0;\n         bottom: 0;\n         right: 0;\n         left: 0;\n     }\n     .signature-component-border {\n         border: 2px solid black;\n     }\n    "]
            })
        ], NSignatureComponent);
        return NSignatureComponent;
    }());

    var EXPORTS = [
        NCameraDirective,
        NDownloadDirective,
        NScanDirective,
        NVideoDirective,
        NBarcodeDirective,
        NTtsDirective,
        NFingerprintDirective,
        NOcrDirective,
        NShakeDirective,
        NFileUploadComponent,
        NAlertComponent,
        NToggleoptionsComponent,
        NSignatureComponent,
    ];
    var NeutrinosModule = /** @class */ (function () {
        function NeutrinosModule() {
        }
        NeutrinosModule = __decorate([
            core.NgModule({
                imports: [
                    http.HttpClientModule,
                    forms.FormsModule,
                    common.CommonModule,
                    icon.MatIconModule,
                    dialog.MatDialogModule,
                    button.MatButtonModule,
                    animations.BrowserAnimationsModule,
                    buttonToggle.MatButtonToggleModule,
                    neutrinosSeedServices.NeutrinosSeedServicesModule,
                    flexLayout.FlexLayoutModule,
                ],
                declarations: [
                    EXPORTS,
                ],
                exports: [
                    EXPORTS,
                    NFileUploadComponent,
                    neutrinosSeedServices.NeutrinosSeedServicesModule,
                ],
                providers: [
                    NFileIOService,
                    NAlertService
                ]
            })
        ], NeutrinosModule);
        return NeutrinosModule;
    }());

    exports.NAlertComponent = NAlertComponent;
    exports.NAlertService = NAlertService;
    exports.NFileIOService = NFileIOService;
    exports.NFileUploadComponent = NFileUploadComponent;
    exports.NeutrinosModule = NeutrinosModule;
    exports.ɵa = NCameraDirective;
    exports.ɵb = NDownloadDirective;
    exports.ɵc = NScanDirective;
    exports.ɵd = NVideoDirective;
    exports.ɵe = NBarcodeDirective;
    exports.ɵf = NTtsDirective;
    exports.ɵg = NFingerprintDirective;
    exports.ɵh = NOcrDirective;
    exports.ɵi = NShakeDirective;
    exports.ɵj = NToggleoptionsComponent;
    exports.ɵk = NSignatureComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=neutrinos-module.umd.js.map
