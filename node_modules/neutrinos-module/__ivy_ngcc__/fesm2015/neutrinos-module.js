import { __decorate } from 'tslib';
import { Injectable, EventEmitter, Input, Output, HostListener, Directive, Renderer2, ViewChild, Component, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpHeaders, HttpClient, HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { FlexLayoutModule } from '@angular/flex-layout';
import { NSystemService, NeutrinosSeedServicesModule } from 'neutrinos-seed-services';
import { MatIconModule } from '@angular/material/icon';
import { MatDialogRef, MatDialog, MatDialogModule } from '@angular/material/dialog';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import signing__default from 'signature_pad';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/button';
import * as ɵngcc4 from '@angular/material/icon';
import * as ɵngcc5 from '@angular/material/dialog';
import * as ɵngcc6 from '@angular/flex-layout/flex';
import * as ɵngcc7 from '@angular/material/button-toggle';
import * as ɵngcc8 from '@angular/flex-layout/extended';

const _c0 = ["fileInput"];
function NFileUploadComponent_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 2);
    ɵngcc0.ɵɵlistener("click", function NFileUploadComponent_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const _r2 = ɵngcc0.ɵɵreference(6); return _r2.click(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "attach_file");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4, "Choose a file...");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "input", 3, 4);
    ɵngcc0.ɵɵlistener("change", function NFileUploadComponent_button_1_Template_input_change_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.handleSelect($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.disableFileUploadButton());
} }
function NFileUploadComponent_div_2_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function NFileUploadComponent_div_2_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.cancel(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "cancel");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function NFileUploadComponent_div_2_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function NFileUploadComponent_div_2_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.cancel(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "done");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function NFileUploadComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 5);
    ɵngcc0.ɵɵlistener("click", function NFileUploadComponent_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.handleUpload(); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, NFileUploadComponent_div_2_button_6_Template, 3, 0, "button", 6);
    ɵngcc0.ɵɵtemplate(7, NFileUploadComponent_div_2_button_7_Template, 3, 0, "button", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.fileName);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isDone);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isDone);
} }
function NToggleoptionsComponent_mat_button_toggle_2_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(option_r2.icon);
} }
function NToggleoptionsComponent_mat_button_toggle_2_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(option_r2.value);
} }
function NToggleoptionsComponent_mat_button_toggle_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-button-toggle", 3);
    ɵngcc0.ɵɵlistener("click", function NToggleoptionsComponent_mat_button_toggle_2_Template_mat_button_toggle_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const i_r3 = ctx.index; const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.optionClicked(i_r3); });
    ɵngcc0.ɵɵtemplate(1, NToggleoptionsComponent_mat_button_toggle_2_mat_icon_1_Template, 2, 1, "mat-icon", 4);
    ɵngcc0.ɵɵtemplate(2, NToggleoptionsComponent_mat_button_toggle_2_span_2_Template, 2, 1, "span", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", option_r2.value)("disabled", option_r2.disabled || ctx_r1.disabledIndex == i_r3)("checked", option_r2.checked || ctx_r1.checkedIndex == i_r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", option_r2.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !option_r2.icon && option_r2.value);
} }
const _c1 = ["signaturecanvas"];
const _c2 = ["canvasparent"];
function NSignatureComponent_div_0_img_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 9);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("src", ctx_r2.imageDataValue, ɵngcc0.ɵɵsanitizeUrl);
} }
function NSignatureComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵtemplate(2, NSignatureComponent_div_0_img_2_Template, 1, 1, "img", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 8);
    ɵngcc0.ɵɵelementStart(4, "button", 4);
    ɵngcc0.ɵɵlistener("click", function NSignatureComponent_div_0_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.showCanvas(); });
    ɵngcc0.ɵɵelementStart(5, "mat-icon");
    ɵngcc0.ɵɵtext(6, "mode_edit");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.imageDataValue);
} }
const _c3 = function (a0) { return { "signature-canvas-fullscreen": a0 }; };
let NFileIOService = class NFileIOService {
    constructor(http) {
        this.http = http;
        this.checkFileExist = (path, fileName, i, callback) => {
            return window.resolveLocalFileSystemURL(path + fileName, () => {
                let length = 4;
                if (fileName.lastIndexOf('(') > -1) {
                    const isExist = parseInt(fileName.slice((fileName.lastIndexOf('(') + 1), fileName.lastIndexOf(')')), 10);
                    if (!isNaN(isExist)) {
                        i = isExist + 1;
                        if (i > 10 && i < 100) {
                            length += 1;
                        }
                        else if (i > 100) {
                            length += 2;
                        }
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.') - length)) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                    else {
                        i += 1;
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                }
                else {
                    i += 1;
                    fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                    fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                }
                return this.checkFileExist(path, fileName, i, callback);
            }, () => {
                return callback(fileName);
            });
        };
        this.systemService = NSystemService.getInstance();
        this.appProperties = this.systemService.getVal('properties');
    }
    getFileInfo(options) {
        let dataModelURL = this.systemService.getDataModelUrl();
        if (options.metadata) {
            dataModelURL += `${this.appProperties.appName}_${options.entityName}.files?filter={"metadata.key": "${options.metadata.key}"}`;
        }
        else {
            dataModelURL += `${this.appProperties.appName}_${options.entityName}.files/${options.fileId}`;
        }
        return this.http.get(dataModelURL);
    }
    getFormData(fileUri) {
        return new Promise((resolve, reject) => {
            window.resolveLocalFileSystemURL(fileUri, (fileEntry) => {
                fileEntry.file((file) => {
                    const reader = new FileReader();
                    reader.onerror = evt => {
                        return reject(evt);
                    };
                    reader.onloadend = evt => {
                        const formData = new FormData();
                        const blob = new Blob([new Uint8Array(reader.result)], { type: file.type });
                        formData.append('file', blob, file.name);
                        return resolve(formData);
                    };
                    reader.readAsArrayBuffer(file);
                });
            }, (error) => {
                return reject(error);
            });
        });
    }
    getPicture(cameraOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                navigator.camera.getPicture((imageUri) => {
                    this.getFormData(imageUri).then(res => {
                        return resolve(res);
                    }).catch(err => reject(err));
                }, (error) => {
                    return reject(error);
                }, cameraOptions);
            }, false);
        });
    }
    scanPicture(scanOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (scanOptions.hasOwnProperty('sourceType') && scanOptions.hasOwnProperty('doUpload')) {
                    scan.scanDoc(scanOptions.sourceType, (imageUri) => {
                        if (scanOptions.doUpload) {
                            this.getFormData(imageUri).then(res => {
                                return resolve(res);
                            }).catch(err => reject(err));
                        }
                        else {
                            resolve(imageUri);
                        }
                    }, (error) => {
                        return reject(error);
                    });
                }
                else {
                    reject('sourceType not found');
                }
            }, false);
        });
    }
    //Barcode
    getBarcode(barcodeOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                cordova.plugins.barcodeScanner.scan((result) => {
                    if (result.cancelled) {
                        return reject(result);
                    }
                    else {
                        return resolve(result);
                    }
                }, (error) => {
                    return reject(error);
                }, barcodeOptions);
            }, false);
        });
    }
    //Video
    getVideo(videoOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                navigator.device.capture.captureVideo((mediaFiles) => {
                    var imageUri = mediaFiles[0].fullPath;
                    this.getFormData(imageUri).then(res => {
                        return resolve(res);
                    }).catch(err => reject(err));
                }, (error) => {
                    return reject(error);
                }, {});
            }, false);
        });
    }
    //tts
    getTts(ttsOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (ttsOptions.hasOwnProperty('text')) {
                    TTS.speak(ttsOptions).then(() => {
                        return resolve('success');
                    }, (reason) => {
                        return reject(reason);
                    });
                }
                else {
                    reject('text not found');
                }
            }, false);
        });
    }
    //shake
    getShake(shakeOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (shakeOptions.hasOwnProperty('start') && shakeOptions.hasOwnProperty('sensitivity')) {
                    if (shakeOptions.start) {
                        shake.startWatch(() => {
                            return resolve('success');
                        }, shakeOptions.sensitivity, () => {
                            return reject('error');
                        });
                    }
                    else {
                        shake.stopWatch();
                    }
                }
                else {
                    reject('start or sensitivity not found');
                }
            }, false);
        });
    }
    //ocr
    getOcr(ocrOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (ocrOptions.hasOwnProperty('uriOrBase') && ocrOptions.hasOwnProperty('returnType')) {
                    navigator.camera.getPicture((imageData) => {
                        textocr.recText(ocrOptions.uriOrBase, ocrOptions.returnType, imageData, (recognizedText) => {
                            return resolve(recognizedText);
                        }, (message) => {
                            return reject(message);
                        });
                    }, (message) => {
                        return reject(message);
                    }, ocrOptions);
                }
                else {
                    reject('uriOrBase or returnType not found');
                }
            }, false);
        });
    }
    //fingerprint
    getFingerprint(fingerprintOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (fingerprintOptions.hasOwnProperty('clientId') && fingerprintOptions.hasOwnProperty('clientSecret')) {
                    Fingerprint.isAvailable((result) => {
                        Fingerprint.show(fingerprintOptions, () => {
                            return resolve('success');
                        }, (err) => {
                            return reject(err);
                        });
                    }, (message) => {
                        return reject(message);
                    });
                }
                else {
                    reject('clientId or clientSecret not found');
                }
            }, false);
        });
    }
    upload(options) {
        return new Promise((resolve, reject) => {
            let body = new FormData();
            if (options.formData) {
                body = options.formData;
            }
            else if (options.files) {
                body.append('file', options.files);
            }
            else {
                reject('No file selected!');
            }
            if (options.metadata) {
                body.append('metadata', JSON.stringify(options.metadata));
            }
            const headers = { 'Content-Type': 'no-content' };
            const url = this.systemService.getFileIOUrl() + `${options.entityName}`;
            let temp_headers = { headers: this.setHeaders(headers) };
            this.http.post(url, body, temp_headers)
                .subscribe(res => resolve(res), err => reject(err));
        });
    }
    download(options) {
        return new Promise((resolve, reject) => {
            if (options.entityName && (options.metadata || options.fileId)) {
                this.getFileInfo(options).subscribe((res) => {
                    if (options.metadata) {
                        res = res[res.length - 1];
                    }
                    else {
                        res = res.result;
                    }
                    const fileInfo = {
                        contentType: '',
                        filename: ''
                    };
                    if (res && res['contentType'] && res['filename']) {
                        fileInfo['contentType'] = res['contentType'];
                        fileInfo['filename'] = res['filename'];
                        let fileIOURL = this.systemService.getFileIOUrl();
                        if (options.metadata) {
                            fileIOURL += `${options.entityName}?metadataFilter={"metadata.key": "${options.metadata.key}"}`;
                        }
                        else {
                            fileIOURL += `${options.entityName}/${options.fileId}`;
                        }
                        const headers = {
                            'Accept': fileInfo.contentType
                        };
                        this.http.get(fileIOURL, { headers: this.setHeaders(headers), responseType: 'blob' }).subscribe((response) => {
                            const blob = new Blob([response.body], { type: fileInfo.contentType });
                            this.saveFile(blob, fileInfo.filename).then((resp) => {
                            }).catch(err => reject(err));
                        }, err => reject(err));
                    }
                    else {
                        reject('fileInfo not exit');
                    }
                }, err => reject(err));
            }
            else {
                return reject('download options not found');
            }
        });
    }
    saveFile(data, filename) {
        return new Promise((resolve, reject) => {
            if (this.systemService.checkDevice() == 'mobile') {
                const storageLocation = this.systemService.isAndroid() ? cordova.file.externalRootDirectory : cordova.file.documentsDirectory;
                this.createDirectory(storageLocation, this.appProperties.appName, filename, data)
                    .then(res => resolve(res))
                    .catch(err => reject(err));
            }
            else {
                this.saveToBrowser(data, filename).then(res => resolve(res));
            }
        });
    }
    saveToBrowser(data, fileName) {
        return new Promise((resolve) => {
            // Edge 20+
            const isEdge = !( /*@cc_on!@*/false || !!document['documentMode']) && !!window.StyleMedia;
            if (isEdge) {
                window.navigator.msSaveBlob(data, fileName);
            }
            else {
                const downloadURL = window.URL.createObjectURL(data);
                const anchor = document.createElement('a');
                document.body.appendChild(anchor);
                anchor.style.display = 'none';
                anchor.download = fileName;
                anchor.href = downloadURL;
                anchor.click();
                window.URL.revokeObjectURL(downloadURL);
                document.body.removeChild(anchor);
                anchor.remove();
            }
            return resolve('download complete');
        });
    }
    createDirectory(rootDirectory, appName, fileName, data) {
        return new Promise((resolve, reject) => {
            window.resolveLocalFileSystemURL(rootDirectory, (fileSystem) => {
                fileSystem.getDirectory(appName, { create: true }, (dirEntry) => {
                    this.checkFileExist(dirEntry.nativeURL, fileName, 0, (newFileName) => {
                        dirEntry.getFile(newFileName, { create: true }, (targetFile) => {
                            targetFile.createWriter((fileWriter) => {
                                fileWriter.onwriteend = () => {
                                    return resolve(targetFile.toURL());
                                };
                                fileWriter.onerror = (err) => {
                                    return reject(err);
                                };
                                fileWriter.write(data);
                            });
                        });
                    });
                }, err => reject(err));
            }, err => reject(err));
        });
    }
    setHeaders(headerJSON) {
        let headers = new HttpHeaders();
        for (const key in headerJSON) {
            if (key) {
                headers = headers.set(key, headerJSON[key]);
            }
        }
        return headers;
    }
};
NFileIOService.ɵfac = function NFileIOService_Factory(t) { return new (t || NFileIOService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
NFileIOService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NFileIOService, factory: function (t) { return NFileIOService.ɵfac(t); } });
NFileIOService.ctorParameters = () => [
    { type: HttpClient }
];

let NCameraDirective = class NCameraDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getPicture()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getPicture() {
        return new Promise((resolve, reject) => {
            this.fsv.getPicture(this.cameraOptions).then(res => {
                const options = {
                    'formData': res,
                    'entityName': this.cameraOptions.entityName,
                    'metadata': this.cameraOptions.metadata
                };
                this.fsv.upload(options)
                    .then(uri => resolve(uri))
                    .catch(err => reject(err));
            }).catch(err => reject(err));
        });
    }
};
NCameraDirective.ɵfac = function NCameraDirective_Factory(t) { return new (t || NCameraDirective)(ɵngcc0.ɵɵdirectiveInject(NFileIOService)); };
NCameraDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NCameraDirective, selectors: [["", "n-camera", ""]], hostBindings: function NCameraDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NCameraDirective_click_HostBindingHandler() { return ctx.methodToHandleMouseClickAction(); });
    } }, inputs: { cameraOptions: "cameraOptions" }, outputs: { onsuccess: "onsuccess", onerror: "onerror" } });
NCameraDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NCameraDirective.prototype, "cameraOptions", void 0);
__decorate([
    Output()
], NCameraDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NCameraDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NCameraDirective.prototype, "methodToHandleMouseClickAction", null);

let NDownloadDirective = class NDownloadDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.downloadFile()
            .then(res => this.onsuccess.emit(res))
            .catch(err => this.onerror.emit(err));
    }
    downloadFile() {
        return this.fsv.download(this.downloadOptions);
    }
};
NDownloadDirective.ɵfac = function NDownloadDirective_Factory(t) { return new (t || NDownloadDirective)(ɵngcc0.ɵɵdirectiveInject(NFileIOService)); };
NDownloadDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NDownloadDirective, selectors: [["", "n-download", ""]], hostBindings: function NDownloadDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NDownloadDirective_click_HostBindingHandler() { return ctx.methodToHandleMouseClickAction(); });
    } }, inputs: { downloadOptions: "downloadOptions" }, outputs: { onsuccess: "onsuccess", onerror: "onerror" } });
NDownloadDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NDownloadDirective.prototype, "downloadOptions", void 0);
__decorate([
    Output()
], NDownloadDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NDownloadDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NDownloadDirective.prototype, "methodToHandleMouseClickAction", null);

let NScanDirective = class NScanDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getPicture()
            .then((sucess) => this.onsuccess.emit(sucess))
            .catch((error) => this.onerror.emit(error));
    }
    getPicture() {
        return new Promise((resolve, reject) => {
            this.fsv.scanPicture(this.scanOptions).then(res => {
                if (this.scanOptions.doUpload) {
                    const options = {
                        'formData': res,
                        'entityName': this.scanOptions.entityName,
                        'metadata': this.scanOptions.metadata
                    };
                    this.fsv.upload(options).then(uri => {
                        resolve(uri);
                    }).catch(err => reject(err));
                }
                else {
                    resolve(res);
                }
            }).catch((err) => {
                return reject(err);
            });
        });
    }
};
NScanDirective.ɵfac = function NScanDirective_Factory(t) { return new (t || NScanDirective)(ɵngcc0.ɵɵdirectiveInject(NFileIOService)); };
NScanDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NScanDirective, selectors: [["", "n-scan", ""]], hostBindings: function NScanDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NScanDirective_click_HostBindingHandler() { return ctx.methodToHandleMouseClickAction(); });
    } }, inputs: { scanOptions: "scanOptions" }, outputs: { onsuccess: "onsuccess", onerror: "onerror" } });
NScanDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NScanDirective.prototype, "scanOptions", void 0);
__decorate([
    Output()
], NScanDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NScanDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NScanDirective.prototype, "methodToHandleMouseClickAction", null);

let NVideoDirective = class NVideoDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getVideo()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getVideo() {
        return new Promise((resolve, reject) => {
            this.fsv.getVideo(this.videoOptions).then(res => {
                const options = {
                    'formData': res,
                    'entityName': this.videoOptions.entityName,
                    'metadata': this.videoOptions.metadata
                };
                this.fsv.upload(options)
                    .then(uri => resolve(uri))
                    .catch(err => reject(err));
            }).catch(err => reject(err));
        });
    }
};
NVideoDirective.ɵfac = function NVideoDirective_Factory(t) { return new (t || NVideoDirective)(ɵngcc0.ɵɵdirectiveInject(NFileIOService)); };
NVideoDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NVideoDirective, selectors: [["", "n-video", ""]], hostBindings: function NVideoDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NVideoDirective_click_HostBindingHandler() { return ctx.methodToHandleMouseClickAction(); });
    } }, inputs: { videoOptions: "videoOptions" }, outputs: { onsuccess: "onsuccess", onerror: "onerror" } });
NVideoDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NVideoDirective.prototype, "videoOptions", void 0);
__decorate([
    Output()
], NVideoDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NVideoDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NVideoDirective.prototype, "methodToHandleMouseClickAction", null);

let NBarcodeDirective = class NBarcodeDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getBarcode()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getBarcode() {
        return new Promise((resolve, reject) => {
            this.fsv.getBarcode(this.barcodeOptions).then(res => {
                return resolve(res);
            }).catch(err => reject(err));
        });
    }
};
NBarcodeDirective.ɵfac = function NBarcodeDirective_Factory(t) { return new (t || NBarcodeDirective)(ɵngcc0.ɵɵdirectiveInject(NFileIOService)); };
NBarcodeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NBarcodeDirective, selectors: [["", "n-barcode", ""]], hostBindings: function NBarcodeDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NBarcodeDirective_click_HostBindingHandler() { return ctx.methodToHandleMouseClickAction(); });
    } }, inputs: { barcodeOptions: "barcodeOptions" }, outputs: { onsuccess: "onsuccess", onerror: "onerror" } });
NBarcodeDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NBarcodeDirective.prototype, "barcodeOptions", void 0);
__decorate([
    Output()
], NBarcodeDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NBarcodeDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NBarcodeDirective.prototype, "methodToHandleMouseClickAction", null);

let NTtsDirective = class NTtsDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getTts()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getTts() {
        return new Promise((resolve, reject) => {
            this.fsv.getTts(this.ttsOptions).then(res => {
                return resolve(res);
            }).catch(err => reject(err));
        });
    }
};
NTtsDirective.ɵfac = function NTtsDirective_Factory(t) { return new (t || NTtsDirective)(ɵngcc0.ɵɵdirectiveInject(NFileIOService)); };
NTtsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NTtsDirective, selectors: [["", "n-tts", ""]], hostBindings: function NTtsDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NTtsDirective_click_HostBindingHandler() { return ctx.methodToHandleMouseClickAction(); });
    } }, inputs: { ttsOptions: "ttsOptions" }, outputs: { onsuccess: "onsuccess", onerror: "onerror" } });
NTtsDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NTtsDirective.prototype, "ttsOptions", void 0);
__decorate([
    Output()
], NTtsDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NTtsDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NTtsDirective.prototype, "methodToHandleMouseClickAction", null);

let NFingerprintDirective = class NFingerprintDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getFingerprint()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getFingerprint() {
        return new Promise((resolve, reject) => {
            this.fsv.getFingerprint(this.fingerprintOptions).then(res => {
                return resolve(res);
            }).catch(err => reject(err));
        });
    }
};
NFingerprintDirective.ɵfac = function NFingerprintDirective_Factory(t) { return new (t || NFingerprintDirective)(ɵngcc0.ɵɵdirectiveInject(NFileIOService)); };
NFingerprintDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NFingerprintDirective, selectors: [["", "n-fingerprint", ""]], hostBindings: function NFingerprintDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NFingerprintDirective_click_HostBindingHandler() { return ctx.methodToHandleMouseClickAction(); });
    } }, inputs: { fingerprintOptions: "fingerprintOptions" }, outputs: { onsuccess: "onsuccess", onerror: "onerror" } });
NFingerprintDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NFingerprintDirective.prototype, "fingerprintOptions", void 0);
__decorate([
    Output()
], NFingerprintDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NFingerprintDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NFingerprintDirective.prototype, "methodToHandleMouseClickAction", null);

let NOcrDirective = class NOcrDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getOcr()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getOcr() {
        return new Promise((resolve, reject) => {
            this.fsv.getOcr(this.ocrOptions).then(res => {
                return resolve(res);
            }).catch(err => reject(err));
        });
    }
};
NOcrDirective.ɵfac = function NOcrDirective_Factory(t) { return new (t || NOcrDirective)(ɵngcc0.ɵɵdirectiveInject(NFileIOService)); };
NOcrDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NOcrDirective, selectors: [["", "n-ocr", ""]], hostBindings: function NOcrDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NOcrDirective_click_HostBindingHandler() { return ctx.methodToHandleMouseClickAction(); });
    } }, inputs: { ocrOptions: "ocrOptions" }, outputs: { onsuccess: "onsuccess", onerror: "onerror" } });
NOcrDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NOcrDirective.prototype, "ocrOptions", void 0);
__decorate([
    Output()
], NOcrDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NOcrDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NOcrDirective.prototype, "methodToHandleMouseClickAction", null);

let NShakeDirective = class NShakeDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getShake()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getShake() {
        return new Promise((resolve, reject) => {
            this.fsv.getShake(this.shakeOptions).then(res => {
                return resolve(res);
            }).catch(err => reject(err));
        });
    }
};
NShakeDirective.ɵfac = function NShakeDirective_Factory(t) { return new (t || NShakeDirective)(ɵngcc0.ɵɵdirectiveInject(NFileIOService)); };
NShakeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NShakeDirective, selectors: [["", "n-shake", ""]], hostBindings: function NShakeDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NShakeDirective_click_HostBindingHandler() { return ctx.methodToHandleMouseClickAction(); });
    } }, inputs: { shakeOptions: "shakeOptions" }, outputs: { onsuccess: "onsuccess", onerror: "onerror" } });
NShakeDirective.ctorParameters = () => [
    { type: NFileIOService }
];
__decorate([
    Input()
], NShakeDirective.prototype, "shakeOptions", void 0);
__decorate([
    Output()
], NShakeDirective.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NShakeDirective.prototype, "onerror", void 0);
__decorate([
    HostListener('click')
], NShakeDirective.prototype, "methodToHandleMouseClickAction", null);

let NFileUploadComponent = class NFileUploadComponent {
    constructor(fileIOService, _renderer) {
        this.fileIOService = fileIOService;
        this._renderer = _renderer;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    /**
     * Method executed when upload button is clicked.
     */
    handleUpload() {
        this.isDone = false;
        if (this.file && this.uploadOptions && this.uploadOptions.entityName && this.uploadOptions.metadata) {
            this.fileIOService.upload({ files: this.file, entityName: this.uploadOptions.entityName, metadata: this.uploadOptions.metadata })
                .then((res) => {
                this.isDone = true;
                this.onsuccess.emit(res);
            })
                .catch(err => this.onerror.emit(err));
        }
        else {
            this.onerror.emit(new Error('Upload options missing'));
        }
    }
    /**
     * Method executed when a file is selected.
     */
    handleSelect(fileInput) {
        if (fileInput.target.files && fileInput.target.files[0]) {
            this.file = fileInput.target.files[0];
            this.fileName = this.file.name;
        }
    }
    /**
     * Methods executed when cancel button is clicked.
     * Clears files.
     */
    cancel() {
        this.file = null;
        this.fileName = null;
        this.isDone = false;
        // check if the file input is rendered before clearing it
        if (this.fileInput) {
            this._renderer.setProperty(this.fileInput, 'value', '');
        }
    }
    disableFileUploadButton() {
        if (typeof this.disableButton === 'boolean') {
            return this.disableButton;
        }
        return this.disableButton === 'disabled' || this.disableButton === 'true' ? true : false;
    }
};
NFileUploadComponent.ɵfac = function NFileUploadComponent_Factory(t) { return new (t || NFileUploadComponent)(ɵngcc0.ɵɵdirectiveInject(NFileIOService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
NFileUploadComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NFileUploadComponent, selectors: [["n-file-upload"]], viewQuery: function NFileUploadComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
    } }, inputs: { uploadOptions: "uploadOptions", disableButton: ["disabled", "disableButton"] }, outputs: { onsuccess: "onsuccess", onerror: "onerror" }, decls: 3, vars: 2, consts: [["mat-raised-button", "", "class", "bh-file-upload", "color", "primary", 3, "disabled", "click", 4, "ngIf"], [4, "ngIf"], ["mat-raised-button", "", "color", "primary", 1, "bh-file-upload", 3, "disabled", "click"], ["type", "file", 2, "display", "none", 3, "change"], ["fileInput", ""], ["mat-raised-button", "", "color", "primary", 3, "click"], ["mat-icon-button", "", "color", "warn", "class", "bh-file-upload-cancel", 3, "click", 4, "ngIf"], ["mat-icon-button", "", "class", "bh-file-upload-done", 3, "click", 4, "ngIf"], ["mat-icon-button", "", "color", "warn", 1, "bh-file-upload-cancel", 3, "click"], ["mat-icon-button", "", 1, "bh-file-upload-done", 3, "click"]], template: function NFileUploadComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, NFileUploadComponent_button_1_Template, 7, 1, "button", 0);
        ɵngcc0.ɵɵtemplate(2, NFileUploadComponent_div_2_Template, 8, 3, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.fileName);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fileName);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.MatButton, ɵngcc4.MatIcon], styles: [".bh-file-upload[_ngcontent-%COMP%]{padding-left:8px;padding-right:8px}.bh-file-upload-cancel[_ngcontent-%COMP%]{height:24px;width:24px;position:relative;top:24px;left:-12px}  [dir=rtl] .bh-file-upload-cancel{right:-12px;left:0}.bh-file-upload-cancel[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{border-radius:12px;vertical-align:baseline}.bh-file-upload-done[_ngcontent-%COMP%]{height:24px;width:24px;position:relative;top:20px;left:-13px}  [dir=rtl] .bh-file-upload-done{right:-12px;left:0}.bh-file-upload-done[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{border-radius:12px;vertical-align:baseline}"] });
NFileUploadComponent.ctorParameters = () => [
    { type: NFileIOService },
    { type: Renderer2 }
];
__decorate([
    ViewChild('fileInput', { static: false })
], NFileUploadComponent.prototype, "fileInput", void 0);
__decorate([
    Input()
], NFileUploadComponent.prototype, "uploadOptions", void 0);
__decorate([
    Input('disabled')
], NFileUploadComponent.prototype, "disableButton", void 0);
__decorate([
    Output()
], NFileUploadComponent.prototype, "onsuccess", void 0);
__decorate([
    Output()
], NFileUploadComponent.prototype, "onerror", void 0);

var NAlertComponent_1;
let NAlertComponent = NAlertComponent_1 = class NAlertComponent {
    constructor(dialogRef) {
        this.dialogRef = dialogRef;
        this.messageContent = NAlertComponent_1.message;
        this.titleContent = NAlertComponent_1.title;
    }
};
NAlertComponent.ɵfac = function NAlertComponent_Factory(t) { return new (t || NAlertComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatDialogRef)); };
NAlertComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NAlertComponent, selectors: [["n-alert-dialog"]], decls: 7, vars: 2, consts: [["fxLayout", "column", 1, "alertContainer"], ["mat-dialog-title", ""], [1, "msgContainer"], ["mat-raised-button", "", 3, "click"]], template: function NAlertComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "h4", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "span", 2);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "button", 3);
        ɵngcc0.ɵɵlistener("click", function NAlertComponent_Template_button_click_5_listener() { return ctx.dialogRef.close(); });
        ɵngcc0.ɵɵtext(6, "Close");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.titleContent);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.messageContent);
    } }, directives: [ɵngcc6.DefaultLayoutDirective, ɵngcc5.MatDialogTitle, ɵngcc3.MatButton], styles: [".alertContainer[_ngcontent-%COMP%]{height:auto;width:auto}.msgContainer[_ngcontent-%COMP%]{margin-bottom:.5em}"] });
NAlertComponent.title = '';
NAlertComponent.message = '';
NAlertComponent.ctorParameters = () => [
    { type: MatDialogRef }
];

let NAlertService = class NAlertService {
    constructor(dialog) {
        this.dialog = dialog;
    }
    alert(message, title, data) {
        NAlertComponent.message = message;
        NAlertComponent.title = title;
        this.dialog.open(NAlertComponent, data);
    }
};
NAlertService.ɵfac = function NAlertService_Factory(t) { return new (t || NAlertService)(ɵngcc0.ɵɵinject(ɵngcc5.MatDialog)); };
NAlertService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NAlertService, factory: function (t) { return NAlertService.ɵfac(t); } });
NAlertService.ctorParameters = () => [
    { type: MatDialog }
];

let NToggleoptionsComponent = class NToggleoptionsComponent {
    constructor() {
        // options = {icon: 'home', value: 'home', disabled: false, 'checked': false}
        this.toggleOptions = [];
        this.align = 'horizontal';
        this.indexChange = new EventEmitter();
        this.valueChange = new EventEmitter();
    }
    // constructor(private snackbar: MatSnackBar) {
    // }
    ngOnInit() {
        if (this.checkNumber(this.checkedIndex)) {
            this.checkedIndex = Number(this.checkedIndex);
        }
        if (this.checkNumber(this.disabledIndex)) {
            this.disabledIndex = Number(this.disabledIndex);
        }
    }
    ngOnChanges(changes) {
        if (changes['checkedIndex'] && this.checkNumber(this.checkedIndex)) {
            this.checkedIndex = Number(this.checkedIndex);
        }
        else if (changes['disabledIndex'] && this.checkNumber(this.disabledIndex)) {
            this.disabledIndex = Number(this.disabledIndex);
        }
    }
    optionClicked(index) {
        if (this.toggleOptions && this.toggleOptions.length > 0) {
            this.indexChange.emit(index);
            if (this.toggleOptions[index] && this.toggleOptions[index].value) {
                this.valueChange.emit(this.toggleOptions[index].value);
            }
            else {
                // this.snackbar.open('Invalid toggle button value', 'OK');
            }
        }
        else {
            // this.snackbar.open('Invalid toggle options', 'OK');
        }
    }
    checkNumber(number) {
        if (number !== undefined && number !== null) {
            return Number.isNaN(Number(number));
        }
        return false;
    }
};
NToggleoptionsComponent.ɵfac = function NToggleoptionsComponent_Factory(t) { return new (t || NToggleoptionsComponent)(); };
NToggleoptionsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NToggleoptionsComponent, selectors: [["n-toggleoptions"]], inputs: { toggleOptions: "toggleOptions", align: "align", checkedIndex: "checkedIndex", disabledIndex: "disabledIndex", value: "value" }, outputs: { indexChange: "indexChange", valueChange: "valueChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 3, consts: [[3, "vertical", "value"], ["group", "matButtonToggleGroup"], ["fxLayoutAlign", "center center", 3, "value", "disabled", "checked", "click", 4, "ngFor", "ngForOf"], ["fxLayoutAlign", "center center", 3, "value", "disabled", "checked", "click"], [4, "ngIf"]], template: function NToggleoptionsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-button-toggle-group", 0, 1);
        ɵngcc0.ɵɵtemplate(2, NToggleoptionsComponent_mat_button_toggle_2_Template, 3, 5, "mat-button-toggle", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("vertical", ctx.align == "vertical" ? true : false)("value", ctx.value);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.toggleOptions);
    } }, directives: [ɵngcc7.MatButtonToggleGroup, ɵngcc2.NgForOf, ɵngcc7.MatButtonToggle, ɵngcc6.DefaultLayoutAlignDirective, ɵngcc2.NgIf, ɵngcc4.MatIcon], encapsulation: 2 });
__decorate([
    Input('toggleOptions')
], NToggleoptionsComponent.prototype, "toggleOptions", void 0);
__decorate([
    Input('align')
], NToggleoptionsComponent.prototype, "align", void 0);
__decorate([
    Input('disabledIndex')
], NToggleoptionsComponent.prototype, "disabledIndex", void 0);
__decorate([
    Input('checkedIndex')
], NToggleoptionsComponent.prototype, "checkedIndex", void 0);
__decorate([
    Input('value')
], NToggleoptionsComponent.prototype, "value", void 0);
__decorate([
    Output()
], NToggleoptionsComponent.prototype, "indexChange", void 0);
__decorate([
    Output()
], NToggleoptionsComponent.prototype, "valueChange", void 0);

// import { MatSnackBar } from '@angular/material';
/**
* Model import Example :
* import { HERO } from '../models/hero.model';
*/
/**
 * Service import Example :
 * import { HeroService } from '../services/hero/hero.service';
 */
let NSignatureComponent = class NSignatureComponent {
    constructor() {
        this.imageDataValue = '';
        this.signaturePad = '';
        this.mode = 'responsive'; // 'click-fullscreen' or 'responsive'
        this.canvasMode = 'responsive'; // 'responsive' or 'fullscreen'
        this.imageDataChange = new EventEmitter();
    }
    get imageData() {
        return this.imageDataValue;
    }
    set imageData(val) {
        this.imageDataValue = val;
        if (val || val === '' || this.isDataURL(val)) {
            this.saveCavas(val);
        }
        this.imageDataChange.emit(this.imageDataValue);
    }
    ngAfterViewInit() {
        if (this.mode === 'responsive') {
            this.createCanvas();
        }
    }
    createCanvas() {
        this.fitToContainer(this.signaturecanvas.nativeElement);
        this.signaturePad = new signing__default(this.signaturecanvas.nativeElement, this.assignOptions());
    }
    saveCavas(dataUrl) {
        if (this.signaturePad) {
            if (this.signaturePad.isEmpty() || dataUrl === '') {
                this.savedData = '';
                this.signaturePad.clear();
            }
            else if (this.isDataURL(dataUrl)) {
                this.signaturePad.fromDataURL(dataUrl);
                this.savedData = this.signaturePad.toData();
            }
            else {
                this.imageData = this.signaturePad.toDataURL();
                if (this.mode === 'click-fullscreen') {
                    this.savedData = this.signaturePad.toData();
                    this.hideCanvas();
                }
            }
        }
    }
    clearCanvas() {
        this.signaturePad.clear();
        // this.fitToContainer(this.signaturecanvas.nativeElement);
    }
    undoCanvas() {
        const data = this.signaturePad.toData();
        if (data) {
            data.pop(); // remove the last dot or line
            this.signaturePad.fromData(data);
        }
    }
    showCanvas() {
        this.classAbs = true;
        this.canvasMode = 'fullscreen';
        if (!this.signaturePad) {
            this.createCanvas();
        }
        this.fitToContainer(this.signaturecanvas.nativeElement, document.body.clientHeight, document.body.clientWidth);
        this.clearCanvas();
        this.createCanvasFromData();
    }
    hideCanvas() {
        this.canvasMode = 'responsive';
    }
    // cancel currently drawn
    cancel() {
        this.savedData = Object.assign([], this.previousSavedData);
    }
    createCanvasFromData() {
        if (this.savedData) {
            this.previousSavedData = Object.assign({}, this.savedData);
            this.signaturePad.fromData(this.savedData);
        }
    }
    fitToContainer(element, height, width) {
        element.style.width = '100%';
        element.style.height = 'calc(100% - 56px)';
        if (height && width) {
            element.width = width;
            element.height = height - 56;
        }
        else {
            element.width = element.offsetWidth;
            element.height = element.offsetHeight;
        }
    }
    assignOptions() {
        let options = {};
        options['backgroundColor'] = this.checkIfValidValueAndRGB(this.backgroundColor, 'backgroundColor');
        options['dotSize'] = this.checkIfValidValueAndNumber(this.dotSize, 'dotSize');
        options['minWidth'] = this.checkIfValidValueAndNumber(this.minWidth, 'minWidth');
        options['maxWidth'] = this.checkIfValidValueAndNumber(this.maxWidth, 'maxWidth');
        options['throttle'] = this.checkIfValidValueAndNumber(this.throttle, 'throttle');
        options['minDistance'] = this.checkIfValidValueAndNumber(this.minDistance, 'minDistance');
        options['penColor'] = this.checkIfValidValueAndRGB(this.penColor, 'penColor');
        options['velocityFilterWeight'] = this.checkIfValidValueAndNumber(this.velocityFilterWeight, 'velocityFilterWeight');
        options = JSON.parse(JSON.stringify(options)); // removing all undefined fields
        options['onBegin'] = this.checkIfValidValueAndFunction(this.onBegin, 'onBegin');
        options['onEnd'] = this.checkIfValidValueAndFunction(this.onEnd, 'onEnd');
        return options;
    }
    checkIfValidValueAndNumber(num, name) {
        if (this.checkIfValid(num) && this.checkNumber(num)) {
            return num;
        }
        this.invalidToast(name, 'num');
        return undefined;
    }
    checkIfValidValueAndRGB(color, name) {
        if (this.checkIfValid(color) && this.checkRGB(color)) {
            return color;
        }
        this.invalidToast(name, 'rgb');
        return undefined;
    }
    checkIfValidValueAndFunction(fn, name) {
        if (this.checkIfValid(fn) && this.checkIfValidFunction(fn)) {
            return fn;
        }
        this.invalidToast(name, 'function format');
        return undefined;
    }
    checkIfValid(value) {
        return (value !== undefined && value !== null) ? value : undefined;
    }
    checkNumber(num) {
        return !this.checkIsNan(Number(num)) ? Number(num) : undefined;
    }
    checkIfValidFunction(fn) {
        return typeof fn === 'function' ? fn : undefined;
    }
    checkRGB(color) {
        const matchColors1 = new RegExp(/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/);
        const matchColors2 = new RegExp(/rgb\((\d{1,3}),[ \t]+(\d{1,3}),(\d{1,3})\)/);
        const matchColors3 = new RegExp(/rgb\((\d{1,3}),(\d{1,3}),[ \t]+(\d{1,3})\)/);
        return matchColors1.test(color) || matchColors2.test(color) || matchColors3.test(color);
    }
    checkIsNan(value) {
        return Number.isNaN(value);
    }
    invalidToast(optionName, optionType) {
        switch (optionType) {
            case 'num':
                // this.snackbar.open(`Invalid ${optionName} (number or float) given, taking default value instead.`, 'OK');
                break;
            case 'rgb':
                // this.snackbar.open(`Invalid ${optionName} format Eg: rgb(255, 255, 255)  given, taking default value instead.`, 'OK');
                break;
        }
        return;
    }
    isDataURL(s) {
        if (s) {
            const regex = /^\s*data:([a-z]+\/[a-z]+(;[a-z\-]+\=[a-z\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i;
            return !!s.match(regex);
        }
        else {
            return false;
        }
    }
};
NSignatureComponent.ɵfac = function NSignatureComponent_Factory(t) { return new (t || NSignatureComponent)(); };
NSignatureComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NSignatureComponent, selectors: [["n-signature"]], viewQuery: function NSignatureComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵviewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.signaturecanvas = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.canvasparent = _t.first);
    } }, inputs: { mode: "mode", imageData: "imageData", backgroundColor: "backgroundColor", dotSize: "dotSize", minWidth: "minWidth", maxWidth: "maxWidth", throttle: "throttle", minDistance: "minDistance", penColor: "penColor", velocityFilterWeight: "velocityFilterWeight", onBegin: "onBegin", onEnd: "onEnd" }, outputs: { imageDataChange: "imageDataChange" }, decls: 17, vars: 5, consts: [["fxFill", "", "fxLayout", "row", "class", "signature-component-border", 4, "ngIf"], ["fxFill", "", "fxLayout", "column", 1, "signature-component-border", 3, "fxShow", "ngClass"], ["signaturecanvas", ""], ["fxFlex", "56px", "fxLayoutAlign", "center center", 1, "signature-component-border"], ["mat-icon-button", "", 3, "click"], ["fxFill", "", "fxLayout", "row", 1, "signature-component-border"], ["fxFlex", "calc(100%-56px)", "fxLayout", "column"], ["fxFill", "", 3, "src", 4, "ngIf"], ["fxFlex", "56px", "fxLayoutAlign", " center", 1, "signature-component-border"], ["fxFill", "", 3, "src"]], template: function NSignatureComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NSignatureComponent_div_0_Template, 7, 1, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "canvas", null, 2);
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "button", 4);
        ɵngcc0.ɵɵlistener("click", function NSignatureComponent_Template_button_click_5_listener() { return ctx.undoCanvas(); });
        ɵngcc0.ɵɵelementStart(6, "mat-icon");
        ɵngcc0.ɵɵtext(7, "undo");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "button", 4);
        ɵngcc0.ɵɵlistener("click", function NSignatureComponent_Template_button_click_8_listener() { return ctx.clearCanvas(); });
        ɵngcc0.ɵɵelementStart(9, "mat-icon");
        ɵngcc0.ɵɵtext(10, "loop");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "button", 4);
        ɵngcc0.ɵɵlistener("click", function NSignatureComponent_Template_button_click_11_listener() { return ctx.saveCavas(); });
        ɵngcc0.ɵɵelementStart(12, "mat-icon");
        ɵngcc0.ɵɵtext(13, "save");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "button", 4);
        ɵngcc0.ɵɵlistener("click", function NSignatureComponent_Template_button_click_14_listener() { ctx.canvasMode = "responsive"; return ctx.cancel(); });
        ɵngcc0.ɵɵelementStart(15, "mat-icon");
        ɵngcc0.ɵɵtext(16, "clear");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode == "click-fullscreen" && ctx.canvasMode !== "fullscreen");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("fxShow", ctx.mode == "click-fullscreen" && ctx.canvasMode == "fullscreen" || ctx.mode == "responsive")("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c3, ctx.classAbs));
    } }, directives: [ɵngcc2.NgIf, ɵngcc6.FlexFillDirective, ɵngcc6.DefaultLayoutDirective, ɵngcc8.DefaultShowHideDirective, ɵngcc2.NgClass, ɵngcc8.DefaultClassDirective, ɵngcc6.DefaultFlexDirective, ɵngcc6.DefaultLayoutAlignDirective, ɵngcc3.MatButton, ɵngcc4.MatIcon], styles: ["[_nghost-%COMP%] { height: 100% !important; }\n     .signature-canvas-fullscreen[_ngcontent-%COMP%] {\n         position: absolute;\n         top: 0;\n         bottom: 0;\n         right: 0;\n         left: 0;\n     }\n     .signature-component-border[_ngcontent-%COMP%] {\n         border: 2px solid black;\n     }"] });
__decorate([
    ViewChild('signaturecanvas', { static: false })
], NSignatureComponent.prototype, "signaturecanvas", void 0);
__decorate([
    ViewChild('canvasparent', { static: false })
], NSignatureComponent.prototype, "canvasparent", void 0);
__decorate([
    Input('backgroundColor')
], NSignatureComponent.prototype, "backgroundColor", void 0);
__decorate([
    Input('dotSize')
], NSignatureComponent.prototype, "dotSize", void 0);
__decorate([
    Input('minWidth')
], NSignatureComponent.prototype, "minWidth", void 0);
__decorate([
    Input('maxWidth')
], NSignatureComponent.prototype, "maxWidth", void 0);
__decorate([
    Input('throttle')
], NSignatureComponent.prototype, "throttle", void 0);
__decorate([
    Input('minDistance')
], NSignatureComponent.prototype, "minDistance", void 0);
__decorate([
    Input('penColor')
], NSignatureComponent.prototype, "penColor", void 0);
__decorate([
    Input('velocityFilterWeight')
], NSignatureComponent.prototype, "velocityFilterWeight", void 0);
__decorate([
    Input('onBegin')
], NSignatureComponent.prototype, "onBegin", void 0);
__decorate([
    Input('onEnd')
], NSignatureComponent.prototype, "onEnd", void 0);
__decorate([
    Input('mode')
], NSignatureComponent.prototype, "mode", void 0);
__decorate([
    Output()
], NSignatureComponent.prototype, "imageDataChange", void 0);
__decorate([
    Input()
], NSignatureComponent.prototype, "imageData", null);

const EXPORTS = [
    NCameraDirective,
    NDownloadDirective,
    NScanDirective,
    NVideoDirective,
    NBarcodeDirective,
    NTtsDirective,
    NFingerprintDirective,
    NOcrDirective,
    NShakeDirective,
    NFileUploadComponent,
    NAlertComponent,
    NToggleoptionsComponent,
    NSignatureComponent,
];
let NeutrinosModule = class NeutrinosModule {
};
NeutrinosModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NeutrinosModule });
NeutrinosModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NeutrinosModule_Factory(t) { return new (t || NeutrinosModule)(); }, providers: [
        NFileIOService,
        NAlertService
    ], imports: [[
            HttpClientModule,
            FormsModule,
            CommonModule,
            MatIconModule,
            MatDialogModule,
            MatButtonModule,
            BrowserAnimationsModule,
            MatButtonToggleModule,
            NeutrinosSeedServicesModule,
            FlexLayoutModule,
        ], NeutrinosSeedServicesModule] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NFileIOService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NCameraDirective, [{
        type: Directive,
        args: [{
                selector: '[n-camera]'
            }]
    }], function () { return [{ type: NFileIOService }]; }, { onsuccess: [{
            type: Output
        }], onerror: [{
            type: Output
        }], methodToHandleMouseClickAction: [{
            type: HostListener,
            args: ['click']
        }], cameraOptions: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NDownloadDirective, [{
        type: Directive,
        args: [{ selector: '[n-download]' }]
    }], function () { return [{ type: NFileIOService }]; }, { onsuccess: [{
            type: Output
        }], onerror: [{
            type: Output
        }], methodToHandleMouseClickAction: [{
            type: HostListener,
            args: ['click']
        }], downloadOptions: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NScanDirective, [{
        type: Directive,
        args: [{
                selector: '[n-scan]'
            }]
    }], function () { return [{ type: NFileIOService }]; }, { onsuccess: [{
            type: Output
        }], onerror: [{
            type: Output
        }], methodToHandleMouseClickAction: [{
            type: HostListener,
            args: ['click']
        }], scanOptions: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NVideoDirective, [{
        type: Directive,
        args: [{
                selector: '[n-video]'
            }]
    }], function () { return [{ type: NFileIOService }]; }, { onsuccess: [{
            type: Output
        }], onerror: [{
            type: Output
        }], methodToHandleMouseClickAction: [{
            type: HostListener,
            args: ['click']
        }], videoOptions: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NBarcodeDirective, [{
        type: Directive,
        args: [{
                selector: '[n-barcode]'
            }]
    }], function () { return [{ type: NFileIOService }]; }, { onsuccess: [{
            type: Output
        }], onerror: [{
            type: Output
        }], methodToHandleMouseClickAction: [{
            type: HostListener,
            args: ['click']
        }], barcodeOptions: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NTtsDirective, [{
        type: Directive,
        args: [{
                selector: '[n-tts]'
            }]
    }], function () { return [{ type: NFileIOService }]; }, { onsuccess: [{
            type: Output
        }], onerror: [{
            type: Output
        }], methodToHandleMouseClickAction: [{
            type: HostListener,
            args: ['click']
        }], ttsOptions: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NFingerprintDirective, [{
        type: Directive,
        args: [{
                selector: '[n-fingerprint]'
            }]
    }], function () { return [{ type: NFileIOService }]; }, { onsuccess: [{
            type: Output
        }], onerror: [{
            type: Output
        }], methodToHandleMouseClickAction: [{
            type: HostListener,
            args: ['click']
        }], fingerprintOptions: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NOcrDirective, [{
        type: Directive,
        args: [{
                selector: '[n-ocr]'
            }]
    }], function () { return [{ type: NFileIOService }]; }, { onsuccess: [{
            type: Output
        }], onerror: [{
            type: Output
        }], methodToHandleMouseClickAction: [{
            type: HostListener,
            args: ['click']
        }], ocrOptions: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NShakeDirective, [{
        type: Directive,
        args: [{
                selector: '[n-shake]'
            }]
    }], function () { return [{ type: NFileIOService }]; }, { onsuccess: [{
            type: Output
        }], onerror: [{
            type: Output
        }], methodToHandleMouseClickAction: [{
            type: HostListener,
            args: ['click']
        }], shakeOptions: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NFileUploadComponent, [{
        type: Component,
        args: [{
                selector: 'n-file-upload',
                template: "<div>\n  <button mat-raised-button class=\"bh-file-upload\" (click)=\"fileInput.click()\" color=\"primary\"\n    *ngIf=\"!fileName\" [disabled]=\"disableFileUploadButton()\">\n    <mat-icon>attach_file</mat-icon>\n    <span>Choose a file...</span>\n    <input #fileInput type=\"file\" (change)=\"handleSelect($event)\" style=\"display:none;\" />\n  </button>\n  <div *ngIf=\"fileName\">\n    <button mat-raised-button color=\"primary\" (click)=\"handleUpload()\">\n      <mat-icon>file_upload</mat-icon>\n      <span>{{fileName}}</span>\n    </button>\n    <button *ngIf=\"!isDone\" mat-icon-button color=\"warn\" (click)=\"cancel()\" class=\"bh-file-upload-cancel\">\n      <mat-icon>cancel</mat-icon>\n    </button>\n    <button *ngIf=\"isDone\" mat-icon-button (click)=\"cancel()\" class=\"bh-file-upload-done\">\n      <mat-icon>done</mat-icon>\n    </button>\n  </div>\n</div>\n",
                styles: [".bh-file-upload{padding-left:8px;padding-right:8px}.bh-file-upload-cancel{height:24px;width:24px;position:relative;top:24px;left:-12px}::ng-deep [dir=rtl] .bh-file-upload-cancel{right:-12px;left:0}.bh-file-upload-cancel mat-icon{border-radius:12px;vertical-align:baseline}.bh-file-upload-done{height:24px;width:24px;position:relative;top:20px;left:-13px}::ng-deep [dir=rtl] .bh-file-upload-done{right:-12px;left:0}.bh-file-upload-done mat-icon{border-radius:12px;vertical-align:baseline}"]
            }]
    }], function () { return [{ type: NFileIOService }, { type: ɵngcc0.Renderer2 }]; }, { onsuccess: [{
            type: Output
        }], onerror: [{
            type: Output
        }], fileInput: [{
            type: ViewChild,
            args: ['fileInput', { static: false }]
        }], uploadOptions: [{
            type: Input
        }], disableButton: [{
            type: Input,
            args: ['disabled']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NAlertComponent, [{
        type: Component,
        args: [{
                selector: 'n-alert-dialog',
                template: "\n<div class=\"alertContainer\" fxLayout=\"column\">\n  <h4 mat-dialog-title>{{titleContent}}</h4>\n  <span class=\"msgContainer\" >{{messageContent}}</span>\n  <button mat-raised-button (click)=\"dialogRef.close()\">Close</button>\n</div>\n",
                styles: [".alertContainer{height:auto;width:auto}.msgContainer{margin-bottom:.5em}"]
            }]
    }], function () { return [{ type: ɵngcc5.MatDialogRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NAlertService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc5.MatDialog }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NToggleoptionsComponent, [{
        type: Component,
        args: [{
                selector: 'n-toggleoptions',
                template: "<mat-button-toggle-group #group=\"matButtonToggleGroup\" [vertical]=\"align == 'vertical'? true: false\" [value]=\"value\">\n    <mat-button-toggle *ngFor=\"let option of toggleOptions; let i = index;\" [value]=\"option.value\" [disabled]=\"option.disabled || disabledIndex == i\" [checked]=\"option.checked || checkedIndex == i\" (click)=\"optionClicked(i)\" fxLayoutAlign=\"center center\">\n        <mat-icon *ngIf=\"option.icon\">{{option.icon}}</mat-icon>\n        <span *ngIf=\"!option.icon && option.value\">{{option.value}}</span>\n    </mat-button-toggle>\n</mat-button-toggle-group>"
            }]
    }], function () { return []; }, { toggleOptions: [{
            type: Input,
            args: ['toggleOptions']
        }], align: [{
            type: Input,
            args: ['align']
        }], indexChange: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], checkedIndex: [{
            type: Input,
            args: ['checkedIndex']
        }], disabledIndex: [{
            type: Input,
            args: ['disabledIndex']
        }], value: [{
            type: Input,
            args: ['value']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NSignatureComponent, [{
        type: Component,
        args: [{
                selector: 'n-signature',
                template: "<div fxFill fxLayout=\"row\" *ngIf=\"mode == 'click-fullscreen' && canvasMode !== 'fullscreen'\" class=\"signature-component-border\">\n    <div fxFlex=\"calc(100%-56px)\" fxLayout=\"column\">\n        <img *ngIf=\"imageDataValue\" [src]=\"imageDataValue\" fxFill/>\n    </div>\n    <div fxFlex=\"56px\" fxLayoutAlign=\" center\" class=\"signature-component-border\">\n        <button mat-icon-button (click)=\"showCanvas()\">\n            <mat-icon>mode_edit</mat-icon>\n        </button>\n    </div>\n</div>\n<div fxFill fxLayout=\"column\" class=\"signature-component-border\" [fxShow]=\"(mode == 'click-fullscreen' && canvasMode == 'fullscreen') || mode == 'responsive'\" [ngClass]=\"{'signature-canvas-fullscreen': classAbs}\">\n    <canvas #signaturecanvas></canvas>\n    <div fxFlex=\"56px\" fxLayoutAlign=\"center center\" class=\"signature-component-border\">\n        <button mat-icon-button (click)=\"undoCanvas()\">\n            <mat-icon>undo</mat-icon>\n        </button>\n        <button mat-icon-button (click)=\"clearCanvas()\">\n            <mat-icon>loop</mat-icon>\n        </button>\n        <button mat-icon-button (click)=\"saveCavas()\">\n            <mat-icon>save</mat-icon>\n        </button>\n        <button mat-icon-button (click)=\"canvasMode = 'responsive'; cancel()\">\n            <mat-icon>clear</mat-icon>\n        </button>\n    </div>\n</div>",
                styles: [`
     :host { height: 100% !important; }
     .signature-canvas-fullscreen {
         position: absolute;
         top: 0;
         bottom: 0;
         right: 0;
         left: 0;
     }
     .signature-component-border {
         border: 2px solid black;
     }
    `]
            }]
    }], function () { return []; }, { mode: [{
            type: Input,
            args: ['mode']
        }], imageDataChange: [{
            type: Output
        }], imageData: [{
            type: Input
        }], signaturecanvas: [{
            type: ViewChild,
            args: ['signaturecanvas', { static: false }]
        }], canvasparent: [{
            type: ViewChild,
            args: ['canvasparent', { static: false }]
        }], backgroundColor: [{
            type: Input,
            args: ['backgroundColor']
        }], dotSize: [{
            type: Input,
            args: ['dotSize']
        }], minWidth: [{
            type: Input,
            args: ['minWidth']
        }], maxWidth: [{
            type: Input,
            args: ['maxWidth']
        }], throttle: [{
            type: Input,
            args: ['throttle']
        }], minDistance: [{
            type: Input,
            args: ['minDistance']
        }], penColor: [{
            type: Input,
            args: ['penColor']
        }], velocityFilterWeight: [{
            type: Input,
            args: ['velocityFilterWeight']
        }], onBegin: [{
            type: Input,
            args: ['onBegin']
        }], onEnd: [{
            type: Input,
            args: ['onEnd']
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NeutrinosModule, { declarations: function () { return [NCameraDirective, NDownloadDirective, NScanDirective, NVideoDirective, NBarcodeDirective, NTtsDirective, NFingerprintDirective, NOcrDirective, NShakeDirective, NFileUploadComponent, NAlertComponent, NToggleoptionsComponent, NSignatureComponent]; }, imports: function () { return [HttpClientModule,
        FormsModule,
        CommonModule,
        MatIconModule,
        MatDialogModule,
        MatButtonModule,
        BrowserAnimationsModule,
        MatButtonToggleModule,
        NeutrinosSeedServicesModule,
        FlexLayoutModule]; }, exports: function () { return [NCameraDirective, NDownloadDirective, NScanDirective, NVideoDirective, NBarcodeDirective, NTtsDirective, NFingerprintDirective, NOcrDirective, NShakeDirective, NFileUploadComponent, NAlertComponent, NToggleoptionsComponent, NSignatureComponent, NFileUploadComponent, NeutrinosSeedServicesModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NeutrinosModule, [{
        type: NgModule,
        args: [{
                imports: [
                    HttpClientModule,
                    FormsModule,
                    CommonModule,
                    MatIconModule,
                    MatDialogModule,
                    MatButtonModule,
                    BrowserAnimationsModule,
                    MatButtonToggleModule,
                    NeutrinosSeedServicesModule,
                    FlexLayoutModule,
                ],
                declarations: [
                    EXPORTS,
                ],
                exports: [
                    EXPORTS,
                    NFileUploadComponent,
                    NeutrinosSeedServicesModule,
                ],
                providers: [
                    NFileIOService,
                    NAlertService
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { NAlertComponent, NAlertService, NFileIOService, NFileUploadComponent, NeutrinosModule, NCameraDirective as ɵa, NDownloadDirective as ɵb, NScanDirective as ɵc, NVideoDirective as ɵd, NBarcodeDirective as ɵe, NTtsDirective as ɵf, NFingerprintDirective as ɵg, NOcrDirective as ɵh, NShakeDirective as ɵi, NToggleoptionsComponent as ɵj, NSignatureComponent as ɵk };

//# sourceMappingURL=neutrinos-module.js.map