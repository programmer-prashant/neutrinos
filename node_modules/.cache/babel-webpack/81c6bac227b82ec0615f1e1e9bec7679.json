{"ast":null,"code":"import _get from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, Injectable, Optional, Inject, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport * as lf from 'localforage';\nimport lf__default from 'localforage';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/cache/cached-item.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Cached data\n * @record\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction CachedItem() {}\n\nif (false) {\n  /**\n   * The data\n   * @type {?}\n   */\n  CachedItem.prototype.data;\n  /**\n   * Whether the data has expired\n   * @type {?}\n   */\n\n  CachedItem.prototype.expired;\n  /**\n   * When the cached item expired or will expire\n   * @type {?}\n   */\n\n  CachedItem.prototype.expires;\n  /**\n   * Number of milliseconds until the data expires\n   * @type {?}\n   */\n\n  CachedItem.prototype.expiresIn;\n  /**\n   * Whether data was found\n   * @type {?}\n   */\n\n  CachedItem.prototype.hasData;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/cache/cached-item-impl.class.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @template T\n */\n\n\nvar CachedItemImpl = /*#__PURE__*/function () {\n  /**\n   * @param {?} data\n   * @param {?} expiryTime\n   */\n  function CachedItemImpl(data, expiryTime) {\n    _classCallCheck(this, CachedItemImpl);\n\n    this.data = data;\n    this.expires = new Date(typeof\n    /** @type {?} */\n    expiryTime === 'number' ? expiryTime : 0);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CachedItemImpl, [{\n    key: \"expired\",\n    get: function get() {\n      /** @type {?} */\n      var value = this.expiresIn === 0;\n\n      if (value) {\n        Object.defineProperty(this, 'expired', {\n          value: value\n        });\n      }\n\n      return value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"expiresIn\",\n    get: function get() {\n      /** @type {?} */\n      var value = Math.max(0, this.expires.getTime() - Date.now());\n\n      if (!value) {\n        Object.defineProperty(this, 'expiresIn', {\n          value: value\n        });\n      }\n\n      return value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasData\",\n    get: function get() {\n      /** @type {?} */\n      var value = this.data != null;\n      Object.defineProperty(this, 'hasData', {\n        value: value\n      });\n      return value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        data: this.data,\n        expired: this.expired,\n        expires: this.expires,\n        expiresIn: this.expiresIn,\n        hasData: this.hasData\n      };\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this.toJSON());\n    }\n  }]);\n\n  return CachedItemImpl;\n}();\n\nif (false) {\n  /** @type {?} */\n  CachedItemImpl.prototype.expires;\n  /** @type {?} */\n\n  CachedItemImpl.prototype.data;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/imports/localforage.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @type {?}\n */\n\n\nvar localForage = 'defineDriver' in lf ? lf : lf__default;\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/misc/driver.enum.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {string} */\n\nvar Driver = {\n  /** The IndexedDB driver */\n  INDEXED_DB:\n  /** @type {?} */\n  localForage.INDEXEDDB,\n\n  /** The localStorage driver */\n  LOCAL_STORAGE:\n  /** @type {?} */\n  localForage.LOCALSTORAGE,\n\n  /** The WebSQL driver */\n  WEB_SQL:\n  /** @type {?} */\n  localForage.WEBSQL\n}; // Clean up after Typescript's two-way enum transpilig\n\nfor (var _i = 0, _arr = [localForage.INDEXEDDB, localForage.LOCALSTORAGE, localForage.WEBSQL]; _i < _arr.length; _i++) {\n  var d = _arr[_i];\n  delete Driver[d];\n}\n\nObject.freeze(Driver);\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/misc/injection-tokens.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default ngforage configuration\n * @type {?}\n */\n\nvar DEFAULT_CONFIG = new InjectionToken('Default NgForage config');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/ng-forage-config.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @type {?}\n */\n\nvar $defaultConfig = Symbol('Default Config');\n/**\n * Global/default configuration\n */\n\nvar NgForageConfig = /*#__PURE__*/function () {\n  /**\n   * @param {?} conf\n   */\n  function NgForageConfig(conf) {\n    _classCallCheck(this, NgForageConfig);\n\n    this[$defaultConfig] = {\n      cacheTime: 300000,\n      description: '',\n      driver: [Driver.INDEXED_DB, Driver.WEB_SQL, Driver.LOCAL_STORAGE],\n      name: 'ngForage',\n      size: 4980736,\n      storeName: 'ng_forage',\n      version: 1\n    };\n\n    if (conf) {\n      this.configure(conf);\n    }\n  }\n  /**\n   * Cache time in milliseconds\n   * \\@default 300000\n   * @return {?}\n   */\n\n\n  _createClass(NgForageConfig, [{\n    key: \"cacheTime\",\n    get: function get() {\n      return (\n        /** @type {?} */\n        this[$defaultConfig].cacheTime\n      );\n    }\n    /**\n     * @param {?} t\n     * @return {?}\n     */\n    ,\n    set: function set(t) {\n      this[$defaultConfig].cacheTime = t;\n    }\n    /**\n     * Get the compiled configuration\n     * @return {?}\n     */\n\n  }, {\n    key: \"config\",\n    get: function get() {\n      return {\n        cacheTime: this.cacheTime,\n        description: this.description,\n        driver: this.driver,\n        name: this.name,\n        size: this.size,\n        storeName: this.storeName,\n        version: this.version\n      };\n    }\n    /**\n     * A description of the database, essentially for developer usage.\n     * \\@default\n     * @return {?}\n     */\n\n  }, {\n    key: \"description\",\n    get: function get() {\n      return (\n        /** @type {?} */\n        this[$defaultConfig].description\n      );\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this[$defaultConfig].description = v;\n    }\n    /**\n     * The preferred driver(s) to use.\n     * @return {?}\n     */\n\n  }, {\n    key: \"driver\",\n    get: function get() {\n      if (typeof this[$defaultConfig].driver === 'string') {\n        return (\n          /** @type {?} */\n          this[$defaultConfig].driver\n        );\n      }\n\n      return (\n        /** @type {?} */\n        this[$defaultConfig].driver.slice()\n      );\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this[$defaultConfig].driver = v;\n    }\n    /**\n     * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n     * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n     * \\@default ngForage\n     * @return {?}\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return (\n        /** @type {?} */\n        this[$defaultConfig].name\n      );\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this[$defaultConfig].name = v;\n    }\n    /**\n     * The size of the database in bytes. Used only in WebSQL for now.\n     * \\@default 4980736\n     * @return {?}\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return (\n        /** @type {?} */\n        this[$defaultConfig].size\n      );\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this[$defaultConfig].size = v;\n    }\n    /**\n     * The name of the datastore.\n     * In IndexedDB this is the dataStore,\n     * in WebSQL this is the name of the key/value table in the database.\n     * Must be alphanumeric, with underscores.\n     * Any non-alphanumeric characters will be converted to underscores.\n     * \\@default ng_forage\n     * @return {?}\n     */\n\n  }, {\n    key: \"storeName\",\n    get: function get() {\n      return (\n        /** @type {?} */\n        this[$defaultConfig].storeName\n      );\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this[$defaultConfig].storeName = v;\n    }\n    /**\n     * The version of your database. May be used for upgrades in the future; currently unused.\n     * \\@default 1.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"version\",\n    get: function get() {\n      return (\n        /** @type {?} */\n        this[$defaultConfig].version\n      );\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this[$defaultConfig].version = v;\n    }\n    /**\n     * Bulk-set configuration options\n     * @template THIS\n     * @this {THIS}\n     * @param {?} opts The configuration\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"configure\",\n    value: function configure(opts) {\n      opts = opts || {};\n\n      if (opts.driver &&\n      /** @type {?} */\n      opts.driver.slice) {\n        opts.driver =\n        /** @type {?} */\n        opts.driver.slice();\n      }\n\n      Object.assign(\n      /** @type {?} */\n      this[$defaultConfig], opts);\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Define a driver\n     *\n     * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the\n     * default drivers do. You’ll also want to resolve or reject promises.\n     * Check any of the {\\@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}\n     * for an idea of how to implement your own, custom driver.\n     * @param {?} spec Driver spec\n     * @return {?}\n     */\n\n  }, {\n    key: \"defineDriver\",\n    value: function defineDriver(spec) {\n      return localForage.defineDriver(spec);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.config;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this.toJSON());\n    }\n  }]);\n\n  return NgForageConfig;\n}();\n\nNgForageConfig.ɵfac = function NgForageConfig_Factory(t) {\n  return new (t || NgForageConfig)(ɵngcc0.ɵɵinject(DEFAULT_CONFIG, 8));\n};\n/** @nocollapse */\n\n\nNgForageConfig.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DEFAULT_CONFIG]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nNgForageConfig.ɵprov = ɵɵdefineInjectable({\n  factory: function NgForageConfig_Factory() {\n    return new NgForageConfig(ɵɵinject(DEFAULT_CONFIG, 8));\n  },\n  token: NgForageConfig,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgForageConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DEFAULT_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /* Skipping unnamed member:\n  private readonly [$defaultConfig]: NgForageOptions;*/\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/instance-factory/instance-factory.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @record\n */\n\n\nfunction InstanceMap() {}\n/**\n * \\@internal\n * @type {?}\n */\n\n\nvar stores = {};\n/**\n * \\@internal\n * @param {?=} driver\n * @return {?}\n */\n\nfunction getDriverString(driver) {\n  if (!driver) {\n    return '';\n  } else if (Array.isArray(driver)) {\n    return driver.slice().sort().join(',');\n  } else {\n    return (\n      /** @type {?} */\n      driver\n    );\n  }\n}\n/**\n * \\@internal\n * @param {?} cfg\n * @return {?}\n */\n\n\nfunction getHash(cfg) {\n  return [getDriverString(cfg.driver), cfg.name, cfg.size, cfg.storeName, cfg.version, cfg.description, cfg.cacheTime].join('|');\n}\n/**\n * \\@internal\n * @type {?}\n */\n\n\nvar conf$ = Symbol('Config');\n/**\n * Creates localForage instances\n */\n\nvar InstanceFactory = /*#__PURE__*/function () {\n  /**\n   * \\@internal\n   * @param {?} conf\n   */\n  function InstanceFactory(conf) {\n    _classCallCheck(this, InstanceFactory);\n\n    this[conf$] = conf;\n  }\n  /**\n   * @param {?} cfg\n   * @return {?}\n   */\n\n\n  _createClass(InstanceFactory, [{\n    key: \"getInstance\",\n    value: function getInstance(cfg) {\n      cfg = Object.assign({}, this[conf$].config, cfg || {});\n      /** @type {?} */\n\n      var hash = getHash(cfg);\n\n      if (!stores[hash]) {\n        stores[hash] = localForage.createInstance(cfg);\n      }\n\n      return stores[hash];\n    }\n  }]);\n\n  return InstanceFactory;\n}();\n\nInstanceFactory.ɵfac = function InstanceFactory_Factory(t) {\n  return new (t || InstanceFactory)(ɵngcc0.ɵɵinject(NgForageConfig));\n};\n/** @nocollapse */\n\n\nInstanceFactory.ctorParameters = function () {\n  return [{\n    type: NgForageConfig\n  }];\n};\n/** @nocollapse */\n\n\nInstanceFactory.ɵprov = ɵɵdefineInjectable({\n  factory: function InstanceFactory_Factory() {\n    return new InstanceFactory(ɵɵinject(NgForageConfig));\n  },\n  token: InstanceFactory,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(InstanceFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NgForageConfig\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/base-configurable-impl.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @type {?}\n */\n\n\nvar store$ = Symbol('Store');\n/**\n * Abstract service-level configuration layer for NgForage\n * @abstract\n */\n\nvar BaseConfigurableImpl = /*#__PURE__*/function () {\n  /**\n   * \\@internal\n   * @param {?} config\n   * @param {?} instanceFactory\n   */\n  function BaseConfigurableImpl(config, instanceFactory) {\n    _classCallCheck(this, BaseConfigurableImpl);\n\n    /**\n     * \\@internal\n     */\n    this.config = {};\n    /**\n     * \\@internal\n     */\n\n    this.storeNeedsRecalc = true;\n    this.baseConfig = config;\n    this.fact = instanceFactory;\n  }\n  /**\n   * A description of the database, essentially for developer usage.\n   * \\@default \"\"\n   * @return {?}\n   */\n\n\n  _createClass(BaseConfigurableImpl, [{\n    key: \"description\",\n    get: function get() {\n      return this.config.description || this.baseConfig.description;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this.config.description = v;\n      this.storeNeedsRecalc = true;\n    }\n    /**\n     * The preferred driver(s) to use.\n     * \\@default IndexedDB, WebSQL and localStorage\n     * @return {?}\n     */\n\n  }, {\n    key: \"driver\",\n    get: function get() {\n      return this.config.driver || this.baseConfig.driver;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this.config.driver = v;\n      this.storeNeedsRecalc = true;\n    }\n    /**\n     * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n     * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n     * \\@default ngForage\n     * @return {?}\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.config.name || this.baseConfig.name;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this.config.name = v;\n      this.storeNeedsRecalc = true;\n    }\n    /**\n     * The size of the database in bytes. Used only in WebSQL for now.\n     * \\@default 4980736\n     * @return {?}\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.config.size || this.baseConfig.size;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this.config.size = v;\n      this.storeNeedsRecalc = true;\n    }\n    /**\n     * The name of the datastore.\n     * In IndexedDB this is the dataStore,\n     * in WebSQL this is the name of the key/value table in the database.\n     * Must be alphanumeric, with underscores.\n     * Any non-alphanumeric characters will be converted to underscores.\n     * \\@default ng_forage\n     * @return {?}\n     */\n\n  }, {\n    key: \"storeName\",\n    get: function get() {\n      return this.config.storeName || this.baseConfig.storeName;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this.config.storeName = v;\n      this.storeNeedsRecalc = true;\n    }\n    /**\n     * The version of your database. May be used for upgrades in the future; currently unused.\n     * \\@default 1.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"version\",\n    get: function get() {\n      return 'version' in this.config ?\n      /** @type {?} */\n      this.config.version : this.baseConfig.version;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this.config.version = v;\n      this.storeNeedsRecalc = true;\n    }\n    /**\n     * \\@internal\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"finalConfig\",\n    get: function get() {\n      return Object.assign({}, this.baseConfig.config, this.config);\n    }\n    /**\n     * \\@internal\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"store\",\n    get: function get() {\n      if (this.storeNeedsRecalc || !this[store$]) {\n        this[store$] = this.fact.getInstance(this.finalConfig);\n        this.storeNeedsRecalc = false;\n      }\n\n      return this[store$];\n    }\n    /**\n     * Bulk-set configuration options\n     * @template THIS\n     * @this {THIS}\n     * @param {?} opts The configuration\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"configure\",\n    value: function configure(opts) {\n      opts = opts || {};\n\n      if (Array.isArray(opts.driver)) {\n        opts.driver = opts.driver.slice();\n      }\n\n      Object.assign(\n      /** @type {?} */\n      this.config, opts);\n\n      /** @type {?} */\n      this.storeNeedsRecalc = true;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        description: this.description,\n        driver: this.driver,\n        name: this.name,\n        size: this.size,\n        storeName: this.storeName,\n        version: this.version\n      };\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this.toJSON());\n    }\n  }]);\n\n  return BaseConfigurableImpl;\n}();\n\nBaseConfigurableImpl.ɵfac = function BaseConfigurableImpl_Factory(t) {\n  return new (t || BaseConfigurableImpl)(ɵngcc0.ɵɵinject(NgForageConfig), ɵngcc0.ɵɵinject(InstanceFactory));\n};\n\nBaseConfigurableImpl.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BaseConfigurableImpl,\n  factory: BaseConfigurableImpl.ɵfac\n});\n/** @nocollapse */\n\nBaseConfigurableImpl.ctorParameters = function () {\n  return [{\n    type: NgForageConfig,\n    decorators: [{\n      type: Inject,\n      args: [NgForageConfig]\n    }]\n  }, {\n    type: InstanceFactory,\n    decorators: [{\n      type: Inject,\n      args: [InstanceFactory]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BaseConfigurableImpl, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgForageConfig,\n      decorators: [{\n        type: Inject,\n        args: [NgForageConfig]\n      }]\n    }, {\n      type: InstanceFactory,\n      decorators: [{\n        type: Inject,\n        args: [InstanceFactory]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * \\@internal\n   * @type {?}\n   * @protected\n   */\n  BaseConfigurableImpl.prototype.baseConfig;\n  /**\n   * \\@internal\n   * @type {?}\n   * @protected\n   */\n\n  BaseConfigurableImpl.prototype.config;\n  /**\n   * \\@internal\n   * @type {?}\n   * @protected\n   */\n\n  BaseConfigurableImpl.prototype.fact;\n  /**\n   * \\@internal\n   * @type {?}\n   * @protected\n   */\n\n  BaseConfigurableImpl.prototype.storeNeedsRecalc;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/main/ng-forage.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Cache instance\n */\n\n\nvar NgForage = /*#__PURE__*/function (_BaseConfigurableImpl) {\n  _inherits(NgForage, _BaseConfigurableImpl);\n\n  var _super = _createSuper(NgForage);\n\n  function NgForage() {\n    _classCallCheck(this, NgForage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NgForage, [{\n    key: \"activeDriver\",\n    get:\n    /**\n     * Returns the name of the driver being used, or null if none can be used.\n     * @return {?}\n     */\n    function get() {\n      return this.store.driver();\n    }\n    /**\n     * Removes every key from the database, returning it to a blank slate.\n     *\n     * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n     * @return {?}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.store.clear();\n    }\n    /**\n     * Make a clone of the instance\n     * @param {?=} config Optional configuration\n     * @return {?}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(config) {\n      /** @type {?} */\n      var inst = new NgForage(this.baseConfig, this.fact);\n      inst.configure(Object.assign(this.finalConfig, config || {}));\n      return inst;\n    }\n    /**\n     * Gets an item from the storage library.\n     * If the key does not exist, getItem() will return null.\n     * @template T\n     * @param {?} key Data key\n     * @return {?}\n     */\n\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.store.getItem(key);\n    }\n    /**\n     * Iterate over all value/key pairs in datastore.\n     * <i>iteratee</i> is called once for each pair, with the following arguments:\n     * <ol>\n     *   <li>Value</li>\n     *   <li>Key</li>\n     *   <li>iterationNumber - one-based number</li>\n     * </ol>\n     * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n     * @template T, U\n     * @param {?} iteratee\n     * @return {?}\n     */\n\n  }, {\n    key: \"iterate\",\n    value: function iterate(iteratee) {\n      return this.store.iterate(iteratee);\n    }\n    /**\n     * Get the name of a key based on its ID.\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"key\",\n    value: function key(index) {\n      return this.store.key(index);\n    }\n    /**\n     * Get the list of all keys in the datastore.\n     * @return {?}\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.store.keys();\n    }\n    /**\n     * Gets the number of keys in the offline store (i.e. its “length”).\n     * @return {?}\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.store.length();\n    }\n    /**\n     * Even though localForage queues up all of its data API method calls,\n     * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n     * That’s useful in cases like when we want to know which driver localForage has settled down using.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ready\",\n    value: function ready() {\n      return this.store.ready();\n    }\n    /**\n     * Removes the value of a key from the offline store.\n     * @param {?} key Data key\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key) {\n      return this.store.removeItem(key);\n    }\n    /**\n     * Saves data to an offline store. You can store the following types of JavaScript objects:\n     * <ul>\n     *  <li>Array</li>\n     *  <li>ArrayBuffer</li>\n     *  <li>Blob</li>\n     *  <li>Float32Array</li>\n     *  <li>Float64Array</li>\n     *  <li>Int8Array</li>\n     *  <li>Int16Array</li>\n     *  <li>Int32Array</li>\n     *  <li>Number</li>\n     *  <li>Object</li>\n     *  <li>Uint8Array</li>\n     *  <li>Uint8ClampedArray</li>\n     *  <li>Uint16Array</li>\n     *  <li>Uint32Array</li>\n     *  <li>String</li>\n     * </ul>\n     * @template T\n     * @param {?} key Data key\n     * @param {?} data Data\n     * @return {?}\n     */\n\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, data) {\n      return this.store.setItem(key, data);\n    }\n    /**\n     * Check whether the given driver is supported/registered.\n     * @param {?} driver Driver name\n     * @return {?}\n     */\n\n  }, {\n    key: \"supports\",\n    value: function supports(driver) {\n      return this.store.supports(\n      /** @type {?} */\n      driver);\n    }\n  }]);\n\n  return NgForage;\n}(BaseConfigurableImpl);\n\nNgForage.ɵfac = function NgForage_Factory(t) {\n  return ɵNgForage_BaseFactory(t || NgForage);\n};\n/** @nocollapse */\n\n\nNgForage.ɵprov = ɵɵdefineInjectable({\n  factory: function NgForage_Factory() {\n    return new NgForage(ɵɵinject(NgForageConfig), ɵɵinject(InstanceFactory));\n  },\n  token: NgForage,\n  providedIn: \"root\"\n});\nvar ɵNgForage_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(NgForage);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgForage, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/cache/ng-forage-cache.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @record\n */\n\n\nfunction CacheKeys() {}\n\nif (false) {\n  /** @type {?} */\n  CacheKeys.prototype.data;\n  /** @type {?} */\n\n  CacheKeys.prototype.expiry;\n}\n/**\n * \\@internal\n * @param {?} mainKey\n * @return {?}\n */\n\n\nfunction calculateCacheKeys(mainKey) {\n  return {\n    data: \"\".concat(mainKey, \"_data\"),\n    expiry: \"\".concat(mainKey, \"_expiry\")\n  };\n}\n/**\n * \\@internal\n * @template T\n * @param {?} r\n * @return {?}\n */\n\n\nfunction toCachedItem(r) {\n  return new CachedItemImpl(r[0], r[1]);\n}\n/**\n * \\@internal\n * @template T\n * @param {?} r\n * @return {?}\n */\n\n\nfunction head(r) {\n  return r[0];\n}\n/**\n * \\@internal\n * @return {?}\n */\n// tslint:disable-next-line:no-empty\n\n\nfunction toVoid() {}\n/**\n * An extension of {\\@link NgForage} which adds expiration support\n */\n\n\nvar NgForageCache = /*#__PURE__*/function (_NgForage) {\n  _inherits(NgForageCache, _NgForage);\n\n  var _super2 = _createSuper(NgForageCache);\n\n  function NgForageCache() {\n    _classCallCheck(this, NgForageCache);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(NgForageCache, [{\n    key: \"cacheTime\",\n    get:\n    /**\n     * Cache time in milliseconds\n     * \\@default 300000\n     * @return {?}\n     */\n    function get() {\n      return this.config.cacheTime || this.baseConfig.cacheTime;\n    }\n    /**\n     * @param {?} t\n     * @return {?}\n     */\n    ,\n    set: function set(t) {\n      this.config.cacheTime = t;\n      this.storeNeedsRecalc = true;\n    }\n    /**\n     * @inheritDoc\n     * @param {?=} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(config) {\n      /** @type {?} */\n      var inst = new NgForageCache(this.baseConfig, this.fact);\n      inst.configure(Object.assign(this.finalConfig, config || {}));\n      return inst;\n    }\n    /**\n     * Retrieve data\n     * @template T\n     * @param {?} key Data key\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCached\",\n    value: function getCached(key) {\n      /** @type {?} */\n      var keys = calculateCacheKeys(key);\n      /** @type {?} */\n\n      var dataPromise = this.getItem(keys.data);\n      /** @type {?} */\n\n      var expiryPromise = this.getItem(keys.expiry);\n      return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);\n    }\n    /**\n     * Remove data\n     * @param {?} key Data key\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeCached\",\n    value: function removeCached(key) {\n      /** @type {?} */\n      var keys = calculateCacheKeys(key);\n      /** @type {?} */\n\n      var dataPromise = this.removeItem(keys.data);\n      /** @type {?} */\n\n      var expiryPromise = this.removeItem(keys.expiry);\n      return Promise.all([dataPromise, expiryPromise]).then(toVoid);\n    }\n    /**\n     * Set data\n     * @template T\n     * @param {?} key Data key\n     * @param {?} data Data to set\n     * @param {?=} cacheTime\n     * @return {?}\n     */\n\n  }, {\n    key: \"setCached\",\n    value: function setCached(key, data, cacheTime) {\n      /** @type {?} */\n      var keys = calculateCacheKeys(key);\n      /** @type {?} */\n\n      var expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;\n      /** @type {?} */\n\n      var dataPromise = this.setItem(keys.data, data);\n      /** @type {?} */\n\n      var expiryPromise = this.setItem(keys.expiry, Date.now() + expiry);\n      return Promise.all([dataPromise, expiryPromise]).then(head);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign(\n      /** @type {?} */\n      _get(_getPrototypeOf(NgForageCache.prototype), \"toJSON\", this).call(this), {\n        cacheTime: this.cacheTime\n      });\n    }\n  }]);\n\n  return NgForageCache;\n}(NgForage);\n\nNgForageCache.ɵfac = function NgForageCache_Factory(t) {\n  return ɵNgForageCache_BaseFactory(t || NgForageCache);\n};\n/** @nocollapse */\n\n\nNgForageCache.ɵprov = ɵɵdefineInjectable({\n  factory: function NgForageCache_Factory() {\n    return new NgForageCache(ɵɵinject(NgForageConfig), ɵɵinject(InstanceFactory));\n  },\n  token: NgForageCache,\n  providedIn: \"root\"\n});\nvar ɵNgForageCache_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(NgForageCache);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgForageCache, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/cache/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/base-configurable.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A configurable object\n * @record\n */\n\n\nfunction BaseConfigurable() {}\n\nif (false) {\n  /**\n   * A description of the database, essentially for developer usage.\n   * \\@default \"\"\n   * @type {?}\n   */\n  BaseConfigurable.prototype.description;\n  /**\n   * The preferred driver(s) to use.\n   * \\@default IndexedDB, WebSQL & localStorage\n   * @type {?}\n   */\n\n  BaseConfigurable.prototype.driver;\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * \\@default ngForage\n   * @type {?}\n   */\n\n  BaseConfigurable.prototype.name;\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * \\@default 4980736\n   * @type {?}\n   */\n\n  BaseConfigurable.prototype.size;\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * \\@default ng_forage\n   * @type {?}\n   */\n\n  BaseConfigurable.prototype.storeName;\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * \\@default 1.0\n   * @type {?}\n   */\n\n  BaseConfigurable.prototype.version;\n  /**\n   * Bulk-set configuration options\n   * @template THIS\n   * @this {THIS}\n   * @param {?} opts The configuration\n   * @return {THIS}\n   */\n\n  BaseConfigurable.prototype.configure = function (opts) {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/cache-configurable.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A cacheable configurable object\n * @record\n */\n\n\nfunction CacheConfigurable() {}\n\nif (false) {\n  /**\n   * Cache time in milliseconds\n   * \\@default 300000\n   * @type {?}\n   */\n  CacheConfigurable.prototype.cacheTime;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/ng-forage-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/dedicated/ng-forage-cache-dedicated.class.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n */\n\n\nvar NgForageCacheDedicated = /*#__PURE__*/function (_NgForageCache) {\n  _inherits(NgForageCacheDedicated, _NgForageCache);\n\n  var _super3 = _createSuper(NgForageCacheDedicated);\n\n  function NgForageCacheDedicated() {\n    _classCallCheck(this, NgForageCacheDedicated);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(NgForageCacheDedicated, [{\n    key: \"clone\",\n    value:\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function clone(config) {\n      /** @type {?} */\n      var inst = new NgForageCacheDedicated(this.baseConfig, this.fact);\n      inst.configure(Object.assign(this.finalConfig, config || {}));\n      return inst;\n    }\n  }]);\n\n  return NgForageCacheDedicated;\n}(NgForageCache);\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/dedicated/ng-forage-dedicated.class.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n */\n\n\nvar NgForageDedicated = /*#__PURE__*/function (_NgForage2) {\n  _inherits(NgForageDedicated, _NgForage2);\n\n  var _super4 = _createSuper(NgForageDedicated);\n\n  function NgForageDedicated() {\n    _classCallCheck(this, NgForageDedicated);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(NgForageDedicated, [{\n    key: \"clone\",\n    value:\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function clone(config) {\n      /** @type {?} */\n      var inst = new NgForageDedicated(this.baseConfig, this.fact);\n      inst.configure(Object.assign(this.finalConfig, config || {}));\n      return inst;\n    }\n  }]);\n\n  return NgForageDedicated;\n}(NgForage);\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/dedicated/dedicated-instance-factory.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @type {?}\n */\n\n\nvar conf$$1 = Symbol('NgForageConfig');\n/**\n * \\@internal\n * @type {?}\n */\n\nvar if$ = Symbol('InstanceFactory');\n\nvar DedicatedInstanceFactory = /*#__PURE__*/function () {\n  /**\n   * @param {?} conf\n   * @param {?} instFact\n   */\n  function DedicatedInstanceFactory(conf, instFact) {\n    _classCallCheck(this, DedicatedInstanceFactory);\n\n    this[conf$$1] = conf;\n    this[if$] = instFact;\n  }\n  /**\n   * @param {?=} config\n   * @return {?}\n   */\n\n\n  _createClass(DedicatedInstanceFactory, [{\n    key: \"createCache\",\n    value: function createCache(config) {\n      /** @type {?} */\n      var inst = new NgForageCacheDedicated(this[conf$$1], this[if$]);\n\n      if (config) {\n        inst.configure(config);\n      }\n\n      return inst;\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"createNgForage\",\n    value: function createNgForage(config) {\n      /** @type {?} */\n      var inst = new NgForageDedicated(this[conf$$1], this[if$]);\n\n      if (config) {\n        inst.configure(config);\n      }\n\n      return inst;\n    }\n  }]);\n\n  return DedicatedInstanceFactory;\n}();\n\nDedicatedInstanceFactory.ɵfac = function DedicatedInstanceFactory_Factory(t) {\n  return new (t || DedicatedInstanceFactory)(ɵngcc0.ɵɵinject(NgForageConfig), ɵngcc0.ɵɵinject(InstanceFactory));\n};\n/** @nocollapse */\n\n\nDedicatedInstanceFactory.ctorParameters = function () {\n  return [{\n    type: NgForageConfig\n  }, {\n    type: InstanceFactory\n  }];\n};\n/** @nocollapse */\n\n\nDedicatedInstanceFactory.ɵprov = ɵɵdefineInjectable({\n  factory: function DedicatedInstanceFactory_Factory() {\n    return new DedicatedInstanceFactory(ɵɵinject(NgForageConfig), ɵɵinject(InstanceFactory));\n  },\n  token: DedicatedInstanceFactory,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DedicatedInstanceFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NgForageConfig\n    }, {\n      type: InstanceFactory\n    }];\n  }, null);\n})();\n\nif (false) {\n  /* Skipping unnamed member:\n  private readonly [conf$]: NgForageConfig;*/\n\n  /* Skipping unnamed member:\n  private readonly [if$]: InstanceFactory;*/\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/dedicated/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/instance-factory/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/main/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/misc/driver-type.type.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngforage.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { BaseConfigurableImpl, CachedItemImpl, DEFAULT_CONFIG, DedicatedInstanceFactory, Driver, InstanceFactory, NgForage, NgForageCache, NgForageCacheDedicated, NgForageConfig, NgForageDedicated };","map":{"version":3,"sources":["ngforage/lib/cache/cached-item.ts","ngforage/lib/cache/cached-item-impl.class.ts","ngforage/lib/imports/localforage.ts","ngforage/lib/misc/driver.enum.ts","ngforage/lib/misc/injection-tokens.ts","ngforage/lib/config/ng-forage-config.service.ts","ngforage/lib/instance-factory/instance-factory.service.ts","ngforage/lib/config/base-configurable-impl.service.ts","ngforage/lib/main/ng-forage.service.ts","ngforage/lib/cache/ng-forage-cache.service.ts","ngforage/lib/config/base-configurable.ts","ngforage/lib/config/cache-configurable.ts","ngforage/lib/dedicated/ng-forage-cache-dedicated.class.ts","ngforage/lib/dedicated/ng-forage-dedicated.class.ts","ngforage/lib/dedicated/dedicated-instance-factory.service.ts"],"names":["lf['default']","lf","conf$"],"mappings":"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","sourcesContent":["/** Cached data */\nexport interface CachedItem<T> {\n  /** The data */\n  readonly data: T;\n\n  /** Whether the data has expired */\n  readonly expired: boolean;\n\n  /** When the cached item expired or will expire */\n  readonly expires: Date;\n\n  /** Number of milliseconds until the data expires */\n  readonly expiresIn: number;\n\n  /** Whether data was found */\n  readonly hasData: boolean;\n}\n","import {CachedItem} from './cached-item';\n\n/** @internal */\nexport class CachedItemImpl<T> implements CachedItem<T> {\n\n  public readonly expires: Date;\n\n  public constructor(public readonly data: T, expiryTime: number) {\n    this.expires = new Date(typeof <any>expiryTime === 'number' ? expiryTime : 0);\n  }\n\n  public get expired(): boolean {\n    const value = this.expiresIn === 0;\n    if (value) {\n      Object.defineProperty(this, 'expired', {value});\n    }\n\n    return value;\n  }\n\n  public get expiresIn(): number {\n    const value = Math.max(0, this.expires.getTime() - Date.now());\n    if (!value) {\n      Object.defineProperty(this, 'expiresIn', {value});\n    }\n\n    return value;\n  }\n\n  public get hasData(): boolean {\n    const value = this.data != null; //tslint:disable-line:triple-equals\n    Object.defineProperty(this, 'hasData', {value});\n\n    return value;\n  }\n\n  public toJSON(): CachedItem<T> {\n    return {\n      data: this.data,\n      expired: this.expired,\n      expires: this.expires,\n      expiresIn: this.expiresIn,\n      hasData: this.hasData\n    };\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import * as lf from 'localforage';\n\n/** @internal */\nexport const localForage: LocalForage = 'defineDriver' in lf ? lf : lf['default'];\n","import {localForage as lf} from '../imports/localforage';\n\n/** ngforage abstraction over localforage driver names */\nenum Driver {\n  /** The IndexedDB driver */\n  INDEXED_DB = <any>lf.INDEXEDDB,\n  /** The localStorage driver */\n  LOCAL_STORAGE = <any>lf.LOCALSTORAGE,\n  /** The WebSQL driver */\n  WEB_SQL = <any>lf.WEBSQL\n}\n\n// Clean up after Typescript's two-way enum transpilig\nfor (const d of [lf.INDEXEDDB, lf.LOCALSTORAGE, lf.WEBSQL]) {\n  delete Driver[d];\n}\n\nObject.freeze(Driver);\n\nexport {Driver};\n","import {InjectionToken} from '@angular/core';\nimport {NgForageOptions} from '../config/ng-forage-options';\n\n/** Default ngforage configuration */\nexport const DEFAULT_CONFIG = new InjectionToken<NgForageOptions>('Default NgForage config');\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport 'localforage';\nimport {localForage as lf} from '../imports/localforage';\nimport {DriverType} from '../misc/driver-type.type';\nimport {Driver} from '../misc/driver.enum';\nimport {DEFAULT_CONFIG} from '../misc/injection-tokens';\nimport {BaseConfigurable} from './base-configurable';\nimport {CacheConfigurable} from './cache-configurable';\nimport {NgForageOptions} from './ng-forage-options';\n\n/** @internal */\nconst $defaultConfig: unique symbol = Symbol('Default Config');\n\n/**\n * Global/default configuration\n */\n@Injectable({providedIn: 'root'})\nexport class NgForageConfig implements BaseConfigurable, CacheConfigurable {\n\n  /** @internal */\n  private readonly [$defaultConfig]: NgForageOptions;\n\n  public constructor(@Optional() @Inject(DEFAULT_CONFIG) conf: NgForageOptions) {\n    this[$defaultConfig] = {\n      cacheTime: 300000,\n      description: '',\n      driver: [Driver.INDEXED_DB, Driver.WEB_SQL, Driver.LOCAL_STORAGE],\n      name: 'ngForage',\n      size: 4980736,\n      storeName: 'ng_forage',\n      version: 1\n    };\n    if (conf) {\n      this.configure(conf);\n    }\n  }\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  public get cacheTime(): number {\n    return <number>this[$defaultConfig].cacheTime;\n  }\n\n  public set cacheTime(t: number) {\n    this[$defaultConfig].cacheTime = t;\n  }\n\n  /**\n   * Get the compiled configuration\n   */\n  public get config(): NgForageOptions {\n    return {\n      cacheTime: this.cacheTime,\n      description: this.description,\n      driver: this.driver,\n      name: this.name,\n      size: this.size,\n      storeName: this.storeName,\n      version: this.version\n    };\n  }\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default\n   */\n  public get description(): string {\n    return <string>this[$defaultConfig].description;\n  }\n\n  public set description(v: string) {\n    this[$defaultConfig].description = v;\n  }\n\n  /**\n   * The preferred driver(s) to use.\n   */\n  public get driver(): DriverType | DriverType[] {\n    if (typeof this[$defaultConfig].driver === 'string') {\n      return <string>this[$defaultConfig].driver;\n    }\n\n    return (<string[]>this[$defaultConfig].driver).slice();\n  }\n\n  public set driver(v: DriverType | DriverType[]) {\n    this[$defaultConfig].driver = v;\n  }\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  public get name(): string {\n    return <string>this[$defaultConfig].name;\n  }\n\n  public set name(v: string) {\n    this[$defaultConfig].name = v;\n  }\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  public get size(): number {\n    return <number>this[$defaultConfig].size;\n  }\n\n  public set size(v: number) {\n    this[$defaultConfig].size = v;\n  }\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  public get storeName(): string {\n    return <string>this[$defaultConfig].storeName;\n  }\n\n  public set storeName(v: string) {\n    this[$defaultConfig].storeName = v;\n  }\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  public get version(): number {\n    return <number>this[$defaultConfig].version;\n  }\n\n  public set version(v: number) {\n    this[$defaultConfig].version = v;\n  }\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  public configure(opts: NgForageOptions): this {\n    opts = opts || {};\n\n    if (opts.driver && (<any[]>opts.driver).slice) {\n      opts.driver = (<DriverType[]>opts.driver).slice();\n    }\n\n    Object.assign(this[$defaultConfig], opts);\n\n    return this;\n  }\n\n  /**\n   * Define a driver\n   *\n   * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the\n   * default drivers do. You’ll also want to resolve or reject promises.\n   * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}\n   * for an idea of how to implement your own, custom driver.\n   * @param spec Driver spec\n   */\n  public defineDriver(spec: LocalForageDriver): Promise<void> {\n    return lf.defineDriver(spec);\n  }\n\n  /** @internal */\n  public toJSON(): NgForageOptions {\n    return this.config;\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import {Injectable} from '@angular/core';\nimport 'localforage';\nimport {NgForageConfig} from '../config/ng-forage-config.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {localForage as lf} from '../imports/localforage';\nimport {DriverType} from '../misc/driver-type.type';\n\n/** @internal */\ninterface InstanceMap {\n  [hash: string]: LocalForage;\n}\n\n/** @internal */\nconst stores: InstanceMap = {};\n\n/** @internal */\nfunction getDriverString(driver?: DriverType | DriverType[]): string {\n  if (!driver) {\n    return '';\n  } else if (Array.isArray(driver)) {\n    return driver.slice().sort().join(',');\n  } else {\n    return <string>driver;\n  }\n}\n\n/** @internal */\nfunction getHash(cfg: NgForageOptions): string {\n  return [\n    getDriverString(cfg.driver),\n    cfg.name,\n    cfg.size,\n    cfg.storeName,\n    cfg.version,\n    cfg.description,\n    cfg.cacheTime\n  ].join('|');\n}\n\n/** @internal */\nconst conf$ = Symbol('Config');\n\n/**\n * Creates localForage instances\n */\n@Injectable({providedIn: 'root'})\nexport class InstanceFactory {\n\n  /** @internal */\n  public constructor(conf: NgForageConfig) {\n    this[conf$] = conf;\n  }\n\n  public getInstance(cfg: NgForageOptions): LocalForage {\n    cfg = Object.assign({}, this[conf$].config, cfg || {});\n    const hash = getHash(cfg);\n\n    if (!stores[hash]) {\n      stores[hash] = lf.createInstance(cfg);\n    }\n\n    return stores[hash];\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport 'localforage';\nimport {InstanceFactory} from '../instance-factory/instance-factory.service';\nimport {DriverType} from '../misc/driver-type.type';\nimport {BaseConfigurable} from './base-configurable';\nimport {NgForageConfig} from './ng-forage-config.service';\nimport {NgForageOptions} from './ng-forage-options';\n\n/** @internal */\nconst store$: unique symbol = Symbol('Store');\n\n/**\n * Abstract service-level configuration layer for NgForage\n */\n@Injectable()\nexport abstract class BaseConfigurableImpl implements BaseConfigurable {\n\n  /** @internal */\n  protected readonly baseConfig: NgForageConfig;\n\n  /** @internal */\n  protected readonly config: NgForageOptions = {};\n\n  /** @internal */\n  protected readonly fact: InstanceFactory;\n\n  /** @internal */\n  protected storeNeedsRecalc = true;\n\n  /** @internal */\n  public constructor(\n    @Inject(NgForageConfig) config: NgForageConfig,\n    @Inject(InstanceFactory) instanceFactory: InstanceFactory\n  ) {\n    this.baseConfig = config;\n    this.fact = instanceFactory;\n  }\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default \"\"\n   */\n  public get description(): string {\n    return this.config.description || this.baseConfig.description;\n  }\n\n  public set description(v: string) {\n    this.config.description = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The preferred driver(s) to use.\n   * @default IndexedDB, WebSQL and localStorage\n   */\n  public get driver(): DriverType | DriverType[] {\n    return this.config.driver || this.baseConfig.driver;\n  }\n\n  public set driver(v: DriverType | DriverType[]) {\n    this.config.driver = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  public get name(): string {\n    return this.config.name || this.baseConfig.name;\n  }\n\n  public set name(v: string) {\n    this.config.name = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  public get size(): number {\n    return this.config.size || this.baseConfig.size;\n  }\n\n  public set size(v: number) {\n    this.config.size = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  public get storeName(): string {\n    return this.config.storeName || this.baseConfig.storeName;\n  }\n\n  public set storeName(v: string) {\n    this.config.storeName = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  public get version(): number {\n    return 'version' in this.config ? <number>this.config.version : this.baseConfig.version;\n  }\n\n  public set version(v: number) {\n    this.config.version = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /** @internal */\n  protected get finalConfig(): NgForageOptions {\n    return Object.assign(\n      {},\n      this.baseConfig.config,\n      this.config\n    );\n  }\n\n  /** @internal */\n  protected get store(): LocalForage {\n    if (this.storeNeedsRecalc || !this[store$]) {\n      this[store$] = this.fact.getInstance(this.finalConfig);\n      this.storeNeedsRecalc = false;\n    }\n\n    return this[store$];\n  }\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  public configure(opts: NgForageOptions): this {\n    opts = opts || {};\n\n    if (Array.isArray(opts.driver)) {\n      opts.driver = opts.driver.slice();\n    }\n\n    Object.assign(this.config, opts);\n    this.storeNeedsRecalc = true;\n\n    return this;\n  }\n\n  public toJSON(): Partial<NgForageOptions> {\n    return {\n      description: this.description,\n      driver: this.driver,\n      name: this.name,\n      size: this.size,\n      storeName: this.storeName,\n      version: this.version\n    };\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BaseConfigurable} from '../config/base-configurable';\nimport {BaseConfigurableImpl} from '../config/base-configurable-impl.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {DriverType} from '../misc/driver-type.type';\nimport {Driver} from '../misc/driver.enum';\n\n/**\n * Cache instance\n */\n@Injectable({providedIn: 'root'})\nexport class NgForage extends BaseConfigurableImpl implements BaseConfigurable {\n\n  /**\n   * Returns the name of the driver being used, or null if none can be used.\n   */\n  public get activeDriver(): DriverType {\n    return this.store.driver();\n  }\n\n  /**\n   * Removes every key from the database, returning it to a blank slate.\n   *\n   * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n   */\n  public clear(): Promise<void> {\n    return this.store.clear();\n  }\n\n  /**\n   * Make a clone of the instance\n   * @param config Optional configuration\n   */\n  public clone(config?: NgForageOptions): NgForage {\n    const inst = new NgForage(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n\n  /**\n   * Gets an item from the storage library.\n   * If the key does not exist, getItem() will return null.\n   * @param key Data key\n   */\n  public getItem<T>(key: string): Promise<T> {\n    return this.store.getItem<T>(key);\n  }\n\n  /**\n   * Iterate over all value/key pairs in datastore.\n   * <i>iteratee</i> is called once for each pair, with the following arguments:\n   * <ol>\n   *   <li>Value</li>\n   *   <li>Key</li>\n   *   <li>iterationNumber - one-based number</li>\n   * </ol>\n   * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n   * @param iteratee\n   */\n  public iterate<T, U>(iteratee: (value: T, key: string, iterationNumber: number) => U): Promise<U> {\n    return this.store.iterate(iteratee);\n  }\n\n  /**\n   * Get the name of a key based on its ID.\n   * @param index\n   */\n  public key(index: number): Promise<string> {\n    return this.store.key(index);\n  }\n\n  /**\n   * Get the list of all keys in the datastore.\n   */\n  public keys(): Promise<string[]> {\n    return this.store.keys();\n  }\n\n  /**\n   * Gets the number of keys in the offline store (i.e. its “length”).\n   */\n  public length(): Promise<number> {\n    return this.store.length();\n  }\n\n  /**\n   * Even though localForage queues up all of its data API method calls,\n   * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n   * That’s useful in cases like when we want to know which driver localForage has settled down using.\n   */\n  public ready(): Promise<void> {\n    return this.store.ready();\n  }\n\n  /**\n   * Removes the value of a key from the offline store.\n   * @param key Data key\n   */\n  public removeItem(key: string): Promise<void> {\n    return this.store.removeItem(key);\n  }\n\n  /**\n   * Saves data to an offline store. You can store the following types of JavaScript objects:\n   * <ul>\n   *  <li>Array</li>\n   *  <li>ArrayBuffer</li>\n   *  <li>Blob</li>\n   *  <li>Float32Array</li>\n   *  <li>Float64Array</li>\n   *  <li>Int8Array</li>\n   *  <li>Int16Array</li>\n   *  <li>Int32Array</li>\n   *  <li>Number</li>\n   *  <li>Object</li>\n   *  <li>Uint8Array</li>\n   *  <li>Uint8ClampedArray</li>\n   *  <li>Uint16Array</li>\n   *  <li>Uint32Array</li>\n   *  <li>String</li>\n   * </ul>\n   * @param key Data key\n   * @param data Data\n   */\n  public setItem<T>(key: string, data: T): Promise<T> {\n    return this.store.setItem<T>(key, data);\n  }\n\n  /**\n   * Check whether the given driver is supported/registered.\n   * @param driver Driver name\n   */\n  public supports(driver: Driver | string): boolean {\n    return this.store.supports(<string>driver);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {CacheConfigurable} from '../config/cache-configurable';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {NgForage} from '../main/ng-forage.service';\nimport {CachedItem} from './cached-item';\nimport {CachedItemImpl} from './cached-item-impl.class';\n\n/** @internal */\ninterface CacheKeys {\n  data: string;\n\n  expiry: string;\n}\n\n/** @internal */\nfunction calculateCacheKeys(mainKey: string): CacheKeys {\n  return {\n    data: `${mainKey}_data`,\n    expiry: `${mainKey}_expiry`\n  };\n}\n\n/** @internal */\nfunction toCachedItem<T>(r: [T, number]): CachedItem<T> {\n  return new CachedItemImpl<T>(r[0], r[1]);\n}\n\n/** @internal */\nfunction head<T>(r: [T, number]) {\n  return r[0];\n}\n\n/** @internal */\n// tslint:disable-next-line:no-empty\nfunction toVoid(): void {\n\n}\n\n/**\n * An extension of {@link NgForage} which adds expiration support\n */\n@Injectable({providedIn: 'root'})\nexport class NgForageCache extends NgForage implements CacheConfigurable {\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  public get cacheTime(): number {\n    return this.config.cacheTime || this.baseConfig.cacheTime;\n  }\n\n  public set cacheTime(t: number) {\n    this.config.cacheTime = t;\n    this.storeNeedsRecalc = true;\n  }\n\n  /** @inheritDoc */\n  public clone(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCache(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n\n  /**\n   * Retrieve data\n   * @param key Data key\n   */\n  public getCached<T>(key: string): Promise<CachedItem<T>> {\n    const keys = calculateCacheKeys(key);\n    const dataPromise = this.getItem<T>(keys.data);\n    const expiryPromise = this.getItem<number>(keys.expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);\n  }\n\n  /**\n   * Remove data\n   * @param key Data key\n   */\n  public removeCached(key: string): Promise<void> {\n    const keys = calculateCacheKeys(key);\n\n    const dataPromise = this.removeItem(keys.data);\n    const expiryPromise = this.removeItem(keys.expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(toVoid);\n  }\n\n  /**\n   * Set data\n   * @param key Data key\n   * @param data Data to set\n   * @param [cacheTime] Override cache set in {@link CacheConfigurable#cacheTime global or instance config}.\n   */\n  public setCached<T>(key: string, data: T, cacheTime?: number): Promise<T> {\n    const keys = calculateCacheKeys(key);\n    const expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;\n\n    const dataPromise = this.setItem<T>(keys.data, data);\n    const expiryPromise = this.setItem<number>(keys.expiry, Date.now() + expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(head);\n  }\n\n  /** @internal */\n  public toJSON(): NgForageOptions {\n    return Object.assign(super.toJSON() as NgForageOptions, {cacheTime: this.cacheTime});\n  }\n}\n","import {DriverType} from '../misc/driver-type.type';\nimport {NgForageOptions} from './ng-forage-options';\n\n/**\n * A configurable object\n */\nexport interface BaseConfigurable {\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default \"\"\n   */\n  description: string;\n\n  /**\n   * The preferred driver(s) to use.\n   * @default IndexedDB, WebSQL & localStorage\n   */\n  driver: DriverType | DriverType[];\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  name: string;\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  size: number;\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  storeName: string;\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  version: number;\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  configure(opts: NgForageOptions): this;\n}\n","/**\n * A cacheable configurable object\n */\nexport interface CacheConfigurable {\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  cacheTime: number;\n}\n","import {NgForageCache} from '../cache/ng-forage-cache.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\n\n/** @internal */\nexport class NgForageCacheDedicated extends NgForageCache {\n\n  public clone(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCacheDedicated(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n}\n","import {NgForageOptions} from '../config/ng-forage-options';\nimport {NgForage} from '../main/ng-forage.service';\n\n/** @internal */\nexport class NgForageDedicated extends NgForage {\n\n  public clone(config?: NgForageOptions): NgForage {\n    const inst = new NgForageDedicated(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {NgForageCache} from '../cache/ng-forage-cache.service';\nimport {NgForageConfig} from '../config/ng-forage-config.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {InstanceFactory} from '../instance-factory/instance-factory.service';\nimport {NgForage} from '../main/ng-forage.service';\nimport {NgForageCacheDedicated} from './ng-forage-cache-dedicated.class';\nimport {NgForageDedicated} from './ng-forage-dedicated.class';\n\n/** @internal */\nconst conf$: unique symbol = Symbol('NgForageConfig');\n/** @internal */\nconst if$: unique symbol = Symbol('InstanceFactory');\n\n@Injectable({providedIn: 'root'})\nexport class DedicatedInstanceFactory {\n\n  /** @internal */\n  private readonly [conf$]: NgForageConfig;\n\n  /** @internal */\n  private readonly [if$]: InstanceFactory;\n\n  public constructor(conf: NgForageConfig, instFact: InstanceFactory) {\n    this[conf$] = conf;\n    this[if$] = instFact;\n  }\n\n  public createCache(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCacheDedicated(this[conf$], this[if$]);\n    if (config) {\n      inst.configure(config);\n    }\n\n    return inst;\n  }\n\n  public createNgForage(config?: NgForageOptions): NgForage {\n    const inst = new NgForageDedicated(this[conf$], this[if$]);\n    if (config) {\n      inst.configure(config);\n    }\n\n    return inst;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}