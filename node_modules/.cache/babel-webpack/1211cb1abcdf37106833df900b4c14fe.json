{"ast":null,"code":"import _defineProperty from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _get from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _toConsumableArray from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createForOfIteratorHelper from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, Component, ViewEncapsulation, ElementRef, Renderer2, Input, ViewChild, HostBinding, HostListener, EventEmitter, ChangeDetectionStrategy, Output, Directive, NgZone, ChangeDetectorRef, NgModule, ViewContainerRef, ContentChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\nimport { __decorate } from 'tslib';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { select, event } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleQuantile, scaleOrdinal, scaleBand } from 'd3-scale';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { curveLinear, area, line, curveCardinalClosed, lineRadial, arc, pie } from 'd3-shape';\nimport { range, min, max } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { format } from 'd3-format';\nimport { rgb } from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"caretElm\"];\n\nfunction TooltipContentComponent_span_4_ng_template_1_Template(rf, ctx) {}\n\nvar _c1 = function _c1(a0) {\n  return {\n    model: a0\n  };\n};\n\nfunction TooltipContentComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtemplate(1, TooltipContentComponent_span_4_ng_template_1_Template, 0, 0, \"ng-template\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx_r1.context));\n  }\n}\n\nfunction TooltipContentComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r2.title, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ChartComponent_ngx_charts_scale_legend_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelement(0, \"ngx-charts-scale-legend\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"horizontal\", ctx_r0.legendOptions && ctx_r0.legendOptions.position === \"below\")(\"valueRange\", ctx_r0.legendOptions.domain)(\"colors\", ctx_r0.legendOptions.colors)(\"height\", ctx_r0.view[1])(\"width\", ctx_r0.legendWidth);\n  }\n}\n\nfunction ChartComponent_ngx_charts_legend_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"ngx-charts-legend\", 5);\n    ɵngcc0.ɵɵlistener(\"labelClick\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelClick_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.legendLabelClick.emit($event);\n    })(\"labelActivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelActivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.legendLabelActivate.emit($event);\n    })(\"labelDeactivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelDeactivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.legendLabelDeactivate.emit($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"horizontal\", ctx_r1.legendOptions && ctx_r1.legendOptions.position === \"below\")(\"data\", ctx_r1.legendOptions.domain)(\"title\", ctx_r1.legendOptions.title)(\"colors\", ctx_r1.legendOptions.colors)(\"height\", ctx_r1.view[1])(\"width\", ctx_r1.legendWidth)(\"activeEntries\", ctx_r1.activeEntries);\n  }\n}\n\nvar _c2 = [\"*\"];\nvar _c3 = [\"ngx-charts-axis-label\", \"\"];\nvar _c4 = [\"ticksel\"];\nvar _c5 = [\"ngx-charts-x-axis-ticks\", \"\"];\n\nfunction XAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 3);\n    ɵngcc0.ɵɵelementStart(1, \"title\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"text\", 4);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tick_r3 = ctx.$implicit;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r1.tickTransform(tick_r3));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.tickFormat(tick_r3));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"font-size\", \"12px\");\n    ɵngcc0.ɵɵattribute(\"text-anchor\", ctx_r1.textAnchor)(\"transform\", ctx_r1.textTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.tickTrim(ctx_r1.tickFormat(tick_r3)), \" \");\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"line\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r5.gridLineTransform());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"y1\", -ctx_r5.gridLineHeight);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_3__svg_g_1_Template, 2, 2, \"g\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tick_r4 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.tickTransform(tick_r4));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.showGridLines);\n  }\n}\n\nvar _c6 = [\"ngx-charts-x-axis\", \"\"];\n\nfunction XAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function XAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.emitTicksHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"rotateTicks\", ctx_r0.rotateTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.xScale)(\"orient\", ctx_r0.xOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineHeight\", ctx_r0.dims.height)(\"width\", ctx_r0.dims.width)(\"tickValues\", ctx_r0.ticks);\n  }\n}\n\nfunction XAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", \"bottom\")(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nvar _c7 = [\"ngx-charts-y-axis-ticks\", \"\"];\n\nfunction YAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 4);\n    ɵngcc0.ɵɵelementStart(1, \"title\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"text\", 5);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tick_r5 = ctx.$implicit;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r1.transform(tick_r5));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.tickFormat(tick_r5));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"font-size\", \"12px\");\n    ɵngcc0.ɵɵattribute(\"dy\", ctx_r1.dy)(\"x\", ctx_r1.x1)(\"y\", ctx_r1.y1)(\"text-anchor\", ctx_r1.textAnchor);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.tickTrim(ctx_r1.tickFormat(tick_r5)), \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_path_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"path\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"d\", ctx_r2.referenceAreaPath)(\"transform\", ctx_r2.gridLineTransform());\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"line\", 9);\n  }\n\n  if (rf & 2) {\n    var ctx_r8 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵattribute(\"x2\", ctx_r8.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"line\", 9);\n  }\n\n  if (rf & 2) {\n    var ctx_r9 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵattribute(\"x2\", -ctx_r9.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template, 1, 1, \"line\", 8);\n    ɵngcc0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template, 1, 1, \"line\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r7.gridLineTransform());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r7.orient === \"left\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r7.orient === \"right\");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1_Template, 3, 3, \"g\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tick_r6 = ctx.$implicit;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r3.transform(tick_r6));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.showGridLines);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"title\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"text\", 11);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var refLine_r10 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    var ctx_r12 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r12.tickTrim(ctx_r12.tickFormat(refLine_r10.value)));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"dy\", ctx_r12.dy)(\"y\", -6)(\"x\", ctx_r12.gridLineWidth)(\"text-anchor\", ctx_r12.textAnchor);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", refLine_r10.name, \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"line\", 10);\n    ɵngcc0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template, 5, 6, \"g\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var refLine_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r11 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r11.transform(refLine_r10.value));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"x2\", ctx_r11.gridLineWidth)(\"transform\", ctx_r11.gridLineTransform());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r11.showRefLabels);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_5__svg_g_1_Template, 3, 4, \"g\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.showRefLines);\n  }\n}\n\nvar _c8 = [\"ngx-charts-y-axis\", \"\"];\n\nfunction YAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function YAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.emitTicksWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickValues\", ctx_r0.ticks)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.yScale)(\"orient\", ctx_r0.yOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineWidth\", ctx_r0.dims.width)(\"referenceLines\", ctx_r0.referenceLines)(\"showRefLines\", ctx_r0.showRefLines)(\"showRefLabels\", ctx_r0.showRefLabels)(\"height\", ctx_r0.dims.height);\n  }\n}\n\nfunction YAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.yOrient)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nvar _c9 = [\"ngx-charts-circle-series\", \"\"];\n\nfunction CircleSeriesComponent__svg_g_0__svg_rect_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"rect\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"x\", ctx_r1.circle.cx - ctx_r1.circle.radius)(\"y\", ctx_r1.circle.cy)(\"width\", ctx_r1.circle.radius * 2)(\"height\", ctx_r1.circle.height)(\"fill\", ctx_r1.gradientFill);\n  }\n}\n\nvar _c10 = function _c10(a0) {\n  return {\n    name: a0\n  };\n};\n\nfunction CircleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"defs\");\n    ɵngcc0.ɵɵelement(2, \"g\", 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, CircleSeriesComponent__svg_g_0__svg_rect_3_Template, 1, 6, \"rect\", 2);\n    ɵngcc0.ɵɵelementStart(4, \"g\", 3);\n    ɵngcc0.ɵɵlistener(\"select\", function CircleSeriesComponent__svg_g_0_Template__svg_g_select_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onClick(ctx_r2.circle.data);\n    })(\"activate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_activate_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.activateCircle();\n    })(\"deactivate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_deactivate_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.deactivateCircle();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.circle.gradientStops);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"active\", ctx_r0.isActive(ɵngcc0.ɵɵpureFunction1(18, _c10, ctx_r0.circle.seriesName)));\n    ɵngcc0.ɵɵproperty(\"cx\", ctx_r0.circle.cx)(\"cy\", ctx_r0.circle.cy)(\"r\", ctx_r0.circle.radius)(\"fill\", ctx_r0.circle.color)(\"pointerEvents\", ctx_r0.circle.value === 0 ? \"none\" : \"all\")(\"data\", ctx_r0.circle.value)(\"classNames\", ctx_r0.circle.classNames)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(ctx_r0.circle))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", ctx_r0.circle.data);\n  }\n}\n\nvar _c11 = [\"ngx-charts-circle\", \"\"];\nvar _c12 = [\"ngx-charts-grid-panel\", \"\"];\nvar _c13 = [\"ngx-charts-grid-panel-series\", \"\"];\n\nfunction GridPanelSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 1);\n  }\n\n  if (rf & 2) {\n    var gridPanel_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"grid-panel\", true)(\"odd\", gridPanel_r1.class === \"odd\")(\"even\", gridPanel_r1.class === \"even\");\n    ɵngcc0.ɵɵproperty(\"height\", gridPanel_r1.height)(\"width\", gridPanel_r1.width)(\"x\", gridPanel_r1.x)(\"y\", gridPanel_r1.y);\n  }\n}\n\nvar _c14 = [\"ngx-charts-svg-linear-gradient\", \"\"];\n\nfunction SvgLinearGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    var stop_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    ɵngcc0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nvar _c15 = [\"ngx-charts-svg-radial-gradient\", \"\"];\n\nfunction SvgRadialGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    var stop_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    ɵngcc0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nvar _c16 = [\"ngx-charts-area\", \"\"];\n\nfunction AreaComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelement(1, \"g\", 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nvar _c17 = [\"ngx-charts-count-up\", \"\"];\nvar _c18 = [\"tooltipAnchor\"];\nvar _c19 = [\"ngx-charts-tooltip-area\", \"\"];\n\nfunction TooltipArea__svg_ng_template_2__xhtml_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵelement(1, \"span\", 7);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tooltipItem_r5 = ctx.$implicit;\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"background-color\", tooltipItem_r5.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r4.getToolTipText(tooltipItem_r5), \" \");\n  }\n}\n\nfunction TooltipArea__svg_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵtemplate(1, TooltipArea__svg_ng_template_2__xhtml_div_1_Template, 3, 3, \"div\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var model_r3 = ctx.model;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", model_r3);\n  }\n}\n\nvar _c20 = [\"ngx-charts-timeline\", \"\"];\n\nfunction LegendComponent_header_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"header\", 4);\n    ɵngcc0.ɵɵelementStart(1, \"span\", 5);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.title);\n  }\n}\n\nfunction LegendComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 6);\n    ɵngcc0.ɵɵelementStart(1, \"ngx-charts-legend-entry\", 7);\n    ɵngcc0.ɵɵlistener(\"select\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.labelClick.emit($event);\n    })(\"activate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.activate($event);\n    })(\"deactivate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.deactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var entry_r2 = ctx.$implicit;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"label\", entry_r2.label)(\"formattedLabel\", entry_r2.formattedLabel)(\"color\", entry_r2.color)(\"isActive\", ctx_r1.isActive(entry_r2));\n  }\n}\n\nfunction AdvancedLegendComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"countTo\", ctx_r0.roundedTotal)(\"valueFormatting\", ctx_r0.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.valueFormatting ? ctx_r1.valueFormatting(ctx_r1.roundedTotal) : ctx_r1.defaultValueFormatting(ctx_r1.roundedTotal), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 16);\n  }\n\n  if (rf & 2) {\n    var legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"countTo\", legendItem_r3._value)(\"valueFormatting\", ctx_r4.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 17);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r5.valueFormatting ? ctx_r5.valueFormatting(legendItem_r3.value) : ctx_r5.defaultValueFormatting(legendItem_r3.value), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 18);\n  }\n\n  if (rf & 2) {\n    var legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"countTo\", legendItem_r3.percentage)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\", legendItem_r3.percentage.toLocaleString(), \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵlistener(\"mouseenter\", function AdvancedLegendComponent_div_7_Template_div_mouseenter_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var legendItem_r3 = ctx.$implicit;\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.activate.emit(legendItem_r3.data);\n    })(\"mouseleave\", function AdvancedLegendComponent_div_7_Template_div_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var legendItem_r3 = ctx.$implicit;\n      var ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.deactivate.emit(legendItem_r3.data);\n    })(\"click\", function AdvancedLegendComponent_div_7_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var legendItem_r3 = ctx.$implicit;\n      var ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.select.emit(legendItem_r3.data);\n    });\n    ɵngcc0.ɵɵelement(1, \"div\", 10);\n    ɵngcc0.ɵɵtemplate(2, AdvancedLegendComponent_div_7_div_2_Template, 1, 2, \"div\", 11);\n    ɵngcc0.ɵɵtemplate(3, AdvancedLegendComponent_div_7_div_3_Template, 2, 1, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(4, \"div\", 13);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(6, AdvancedLegendComponent_div_7_div_6_Template, 1, 2, \"div\", 14);\n    ɵngcc0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_div_7_Template, 2, 1, \"div\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var legendItem_r3 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"border-left-color\", legendItem_r3.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(legendItem_r3.displayLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n  }\n}\n\nvar _c21 = [\"tooltipTemplate\"];\nvar _c22 = [\"seriesTooltipTemplate\"];\n\nfunction AreaChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r9 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"baseValue\", ctx_r2.baseValue)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r2.activeEntries)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 13);\n    ɵngcc0.ɵɵlistener(\"select\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var series_r11 = ctx.$implicit;\n      var ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r11 = ctx.$implicit;\n    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 10);\n    ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      var ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"g\", 11);\n    ɵngcc0.ɵɵlistener(\"hover\", function AreaChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      var ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, AreaChartComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r20 = ctx.$implicit;\n    var ctx_r19 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"baseValue\", ctx_r19.baseValue)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nvar _c23 = function _c23(a0, a1) {\n  return [a0, a1];\n};\n\nfunction AreaChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 14);\n    ɵngcc0.ɵɵlistener(\"onDomainChange\", function AreaChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      var ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, AreaChartComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r9 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"activeEntries\", ctx_r2.activeEntries)(\"gradient\", ctx_r2.gradient)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 13);\n    ɵngcc0.ɵɵlistener(\"select\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var series_r11 = ctx.$implicit;\n      var ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r11 = ctx.$implicit;\n    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 10);\n    ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      var ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"g\", 11);\n    ɵngcc0.ɵɵlistener(\"hover\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      var ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"showPercentage\", true)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r20 = ctx.$implicit;\n    var ctx_r19 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 14);\n    ɵngcc0.ɵɵlistener(\"onDomainChange\", function AreaChartNormalizedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      var ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template, 2, 8, \"g\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nvar _c24 = \".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\";\n\nfunction AreaChartStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r9 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"activeEntries\", ctx_r2.activeEntries)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 12);\n    ɵngcc0.ɵɵlistener(\"select\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var series_r11 = ctx.$implicit;\n      var ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r11 = ctx.$implicit;\n    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 10);\n    ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      var ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"g\", 11);\n    ɵngcc0.ɵɵlistener(\"hover\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      var ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, AreaChartStackedComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r20 = ctx.$implicit;\n    var ctx_r19 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 13);\n    ɵngcc0.ɵɵlistener(\"onDomainChange\", function AreaChartStackedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      var ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, AreaChartStackedComponent__svg_g_10__svg_g_1_Template, 2, 8, \"g\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nvar _c25 = [\"ngx-charts-area-series\", \"\"];\nvar _c26 = [\"ngx-charts-bar\", \"\"];\n\nfunction BarComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelement(1, \"g\", 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"orientation\", ctx_r0.orientation)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.valueScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.groupScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var index_r8 = ctx.index;\n      var ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxWidthChanged($event, index_r8);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var group_r7 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.valueScale)(\"activeEntries\", ctx_r2.activeEntries)(\"yScale\", ctx_r2.innerScale)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"roundEdges\", ctx_r2.roundEdges)(\"animations\", ctx_r2.animations)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var group_r7 = ctx.$implicit;\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onClick($event, group_r7);\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var group_r7 = ctx.$implicit;\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onActivate($event, group_r7);\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var group_r7 = ctx.$implicit;\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onDeactivate($event, group_r7);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var group_r7 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"activeEntries\", ctx_r2.activeEntries)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var index_r8 = ctx.index;\n      var ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxWidthChanged($event, index_r8);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var group_r7 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"activeEntries\", ctx_r2.activeEntries)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.groupScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.valueScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_5_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarVertical2DComponent__svg_g_5_Template__svg_g_activate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_5_Template__svg_g_deactivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_5_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var index_r8 = ctx.index;\n      var ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxHeightChanged($event, index_r8);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var group_r7 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\")(\"activeEntries\", ctx_r2.activeEntries)(\"xScale\", ctx_r2.innerScale)(\"yScale\", ctx_r2.valueScale)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"seriesName\", group_r7.name)(\"roundEdges\", ctx_r2.roundEdges)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var group_r7 = ctx.$implicit;\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onClick($event, group_r7);\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var group_r7 = ctx.$implicit;\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onActivate($event, group_r7);\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var group_r7 = ctx.$implicit;\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onDeactivate($event, group_r7);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var group_r7 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"activeEntries\", ctx_r2.activeEntries)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onClick($event, group_r7);\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onActivate($event, group_r7);\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var group_r7 = ctx.$implicit;\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onDeactivate($event, group_r7);\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var index_r8 = ctx.index;\n      var ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDataLabelMaxHeightChanged($event, index_r8);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var group_r7 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.groupTransform(group_r7));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"activeEntries\", ctx_r2.activeEntries)(\"colors\", ctx_r2.colors)(\"series\", group_r7.series)(\"dims\", ctx_r2.dims)(\"gradient\", ctx_r2.gradient)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"showDataLabel\", ctx_r2.showDataLabel)(\"dataLabelFormatting\", ctx_r2.dataLabelFormatting)(\"seriesName\", group_r7.name)(\"animations\", ctx_r2.animations)(\"noBarWhenZero\", ctx_r2.noBarWhenZero);\n  }\n}\n\nvar _c27 = [\"ngx-charts-series-vertical\", \"\"];\n\nfunction SeriesVerticalComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_0_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.onClick($event);\n    })(\"activate\", function SeriesVerticalComponent__svg_g_0_Template__svg_g_activate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.activate.emit($event);\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_0_Template__svg_g_deactivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var bar_r2 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx_r0.animations)(\"width\", bar_r2.width)(\"height\", bar_r2.height)(\"x\", bar_r2.x)(\"y\", bar_r2.y)(\"fill\", bar_r2.color)(\"stops\", bar_r2.gradientStops)(\"data\", bar_r2.data)(\"orientation\", \"vertical\")(\"roundEdges\", bar_r2.roundEdges)(\"gradient\", ctx_r0.gradient)(\"ariaLabel\", bar_r2.ariaLabel)(\"isActive\", ctx_r0.isActive(bar_r2.data))(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.tooltipPlacement)(\"tooltipType\", ctx_r0.tooltipType)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", bar_r2.data)(\"noBarWhenZero\", ctx_r0.noBarWhenZero)(\"animations\", ctx_r0.animations);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 4);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      var i_r9 = ctx.index;\n      var ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r10.dataLabelHeightChanged.emit({\n        size: $event,\n        index: i_r9\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var b_r8 = ctx.$implicit;\n    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"barX\", b_r8.x)(\"barY\", b_r8.y)(\"barWidth\", b_r8.width)(\"barHeight\", b_r8.height)(\"value\", b_r8.total)(\"valueFormatting\", ctx_r7.dataLabelFormatting)(\"orientation\", \"vertical\");\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1__svg_g_1_Template, 1, 7, \"g\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.barsForDataLabels)(\"ngForTrackBy\", ctx_r1.trackDataLabelBy);\n  }\n}\n\nvar _c28 = [\"ngx-charts-series-horizontal\", \"\"];\n\nfunction SeriesHorizontal__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"select\", function SeriesHorizontal__svg_g_0_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.click($event);\n    })(\"activate\", function SeriesHorizontal__svg_g_0_Template__svg_g_activate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.activate.emit($event);\n    })(\"deactivate\", function SeriesHorizontal__svg_g_0_Template__svg_g_deactivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var bar_r2 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\")(\"width\", bar_r2.width)(\"height\", bar_r2.height)(\"x\", bar_r2.x)(\"y\", bar_r2.y)(\"fill\", bar_r2.color)(\"stops\", bar_r2.gradientStops)(\"data\", bar_r2.data)(\"orientation\", \"horizontal\")(\"roundEdges\", bar_r2.roundEdges)(\"gradient\", ctx_r0.gradient)(\"isActive\", ctx_r0.isActive(bar_r2.data))(\"ariaLabel\", bar_r2.ariaLabel)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.tooltipPlacement)(\"tooltipType\", ctx_r0.tooltipType)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", bar_r2.data)(\"noBarWhenZero\", ctx_r0.noBarWhenZero);\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 4);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function SeriesHorizontal__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      var i_r9 = ctx.index;\n      var ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r10.dataLabelWidthChanged.emit({\n        size: $event,\n        index: i_r9\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var b_r8 = ctx.$implicit;\n    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"barX\", b_r8.x)(\"barY\", b_r8.y)(\"barWidth\", b_r8.width)(\"barHeight\", b_r8.height)(\"value\", b_r8.total)(\"valueFormatting\", ctx_r7.dataLabelFormatting)(\"orientation\", \"horizontal\");\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1__svg_g_1_Template, 1, 7, \"g\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.barsForDataLabels)(\"ngForTrackBy\", ctx_r1.trackDataLabelBy);\n  }\n}\n\nvar _c29 = [\"ngx-charts-bar-label\", \"\"];\n\nfunction BubbleChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"showGridLines\", ctx_r0.showGridLines)(\"dims\", ctx_r0.dims)(\"xScale\", ctx_r0.xScale)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"showGridLines\", ctx_r1.showGridLines)(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_9_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var series_r7 = ctx.$implicit;\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onClick($event, series_r7);\n    })(\"activate\", function BubbleChartComponent__svg_g_9_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onActivate($event);\n    })(\"deactivate\", function BubbleChartComponent__svg_g_9_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r7 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"rScale\", ctx_r2.rScale)(\"xScaleType\", ctx_r2.xScaleType)(\"yScaleType\", ctx_r2.yScaleType)(\"xAxisLabel\", ctx_r2.xAxisLabel)(\"yAxisLabel\", ctx_r2.yAxisLabel)(\"colors\", ctx_r2.colors)(\"data\", series_r7)(\"activeEntries\", ctx_r2.activeEntries)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipTemplate\", ctx_r2.tooltipTemplate);\n  }\n}\n\nvar _c30 = [\"ngx-charts-bubble-series\", \"\"];\n\nfunction BubbleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\");\n    ɵngcc0.ɵɵelementStart(2, \"g\", 1);\n    ɵngcc0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0_Template__svg_g_select_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var circle_r1 = ctx.$implicit;\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onClick(circle_r1.data);\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var circle_r1 = ctx.$implicit;\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.activateCircle(circle_r1);\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var circle_r1 = ctx.$implicit;\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.deactivateCircle(circle_r1);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var circle_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"transform\", circle_r1.transform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    ɵngcc0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\")(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\n\nvar _c31 = [\"ngx-charts-heat-map-cell\", \"\"];\n\nfunction HeatMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelement(1, \"g\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nvar _c32 = [\"ngx-charts-heat-map-cell-series\", \"\"];\n\nvar _c33 = function _c33(a0, a1, a2) {\n  return {\n    series: a0,\n    name: a1,\n    value: a2\n  };\n};\n\nfunction HeatCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 1);\n    ɵngcc0.ɵɵlistener(\"select\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var c_r1 = ctx.$implicit;\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onClick(c_r1.cell);\n    })(\"activate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_activate_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var c_r1 = ctx.$implicit;\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.activate.emit(c_r1.cell);\n    })(\"deactivate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_deactivate_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var c_r1 = ctx.$implicit;\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.deactivate.emit(c_r1.cell);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var c_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"data\", c_r1.data)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", ɵngcc0.ɵɵpureFunction3(14, _c33, c_r1.series, c_r1.label, c_r1.data));\n  }\n}\n\nfunction HeatMapComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 6);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"rect\");\n  }\n\n  if (rf & 2) {\n    var rect_r7 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"x\", rect_r7.x)(\"y\", rect_r7.y)(\"rx\", rect_r7.rx)(\"width\", rect_r7.width)(\"height\", rect_r7.height)(\"fill\", rect_r7.fill);\n  }\n}\n\nvar _c34 = [\"ngx-charts-line\", \"\"];\n\nfunction LineChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 7);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction LineChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 8);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"referenceLines\", ctx_r1.referenceLines)(\"showRefLines\", ctx_r1.showRefLines)(\"showRefLabels\", ctx_r1.showRefLabels);\n  }\n}\n\nfunction LineChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r9 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r2.activeEntries)(\"scaleType\", ctx_r2.scaleType)(\"curve\", ctx_r2.curve)(\"rangeFillOpacity\", ctx_r2.rangeFillOpacity)(\"hasRange\", ctx_r2.hasRange)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 13);\n    ɵngcc0.ɵɵlistener(\"select\", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event);\n    })(\"activate\", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r11 = ctx.$implicit;\n    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"activeEntries\", ctx_r10.activeEntries)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction LineChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 10);\n    ɵngcc0.ɵɵlistener(\"mouseleave\", function LineChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      var ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"g\", 11);\n    ɵngcc0.ɵɵlistener(\"hover\", function LineChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      var ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, LineChartComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction LineChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelement(1, \"g\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r20 = ctx.$implicit;\n    var ctx_r19 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"curve\", ctx_r19.curve)(\"hasRange\", ctx_r19.hasRange)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 14);\n    ɵngcc0.ɵɵlistener(\"onDomainChange\", function LineChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      var ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, LineChartComponent__svg_g_10__svg_g_1_Template, 2, 8, \"g\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"scaleType\", ctx_r4.scaleType)(\"legend\", ctx_r4.legend);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nvar _c35 = [\"ngx-charts-line-series\", \"\"];\n\nfunction LineSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction LineSeriesComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 5);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"active\", ctx_r1.isActive(ctx_r1.data))(\"inactive\", ctx_r1.isInactive(ctx_r1.data));\n    ɵngcc0.ɵɵproperty(\"data\", ctx_r1.data)(\"path\", ctx_r1.outerPath)(\"fill\", ctx_r1.hasGradient ? ctx_r1.gradientUrl : ctx_r1.colors.getColor(ctx_r1.data.name))(\"opacity\", ctx_r1.rangeFillOpacity)(\"animations\", ctx_r1.animations);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 8);\n  }\n\n  if (rf & 2) {\n    var r_r6 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"r\", r_r6);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, PolarChartComponent__svg_g_4__svg_circle_1_Template, 1, 1, \"circle\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.radiusTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 10);\n  }\n\n  if (rf & 2) {\n    var tick_r8 = ctx.$implicit;\n    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"data\", tick_r8)(\"radius\", ctx_r7.outerRadius)(\"label\", tick_r8.label)(\"max\", ctx_r7.outerRadius)(\"value\", ctx_r7.showGridLines ? 1 : ctx_r7.outerRadius)(\"explodeSlices\", true)(\"animations\", ctx_r7.animations)(\"labelTrim\", ctx_r7.labelTrim)(\"labelTrimSize\", ctx_r7.labelTrimSize);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, PolarChartComponent__svg_g_5__svg_g_1_Template, 1, 9, \"g\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.thetaTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 11);\n    ɵngcc0.ɵɵlistener(\"dimensionsChanged\", function PolarChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.updateYAxisWidth($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"yScale\", ctx_r2.yAxisScale)(\"dims\", ctx_r2.yAxisDims)(\"showGridLines\", ctx_r2.showGridLines)(\"showLabel\", ctx_r2.showYAxisLabel)(\"labelText\", ctx_r2.yAxisLabel)(\"trimTicks\", ctx_r2.trimYAxisTicks)(\"maxTickLength\", ctx_r2.maxYAxisTickLength)(\"tickFormatting\", ctx_r2.yAxisTickFormatting);\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.transformYAxis);\n  }\n}\n\nfunction PolarChartComponent__svg_g_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 12);\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"label\", ctx_r3.xAxisLabel)(\"offset\", ctx_r3.labelOffset)(\"orient\", \"bottom\")(\"height\", ctx_r3.dims.height)(\"width\", ctx_r3.dims.width);\n  }\n}\n\nfunction PolarChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 13);\n    ɵngcc0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_9_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onClick($event);\n    })(\"activate\", function PolarChartComponent__svg_g_9_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function PolarChartComponent__svg_g_9_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r11 = ctx.$implicit;\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"gradient\", ctx_r4.gradient)(\"xScale\", ctx_r4.xScale)(\"yScale\", ctx_r4.yScale)(\"colors\", ctx_r4.colors)(\"data\", series_r11)(\"activeEntries\", ctx_r4.activeEntries)(\"scaleType\", ctx_r4.scaleType)(\"curve\", ctx_r4.curve)(\"rangeFillOpacity\", ctx_r4.rangeFillOpacity)(\"animations\", ctx_r4.animations)(\"tooltipDisabled\", ctx_r4.tooltipDisabled)(\"tooltipTemplate\", ctx_r4.tooltipTemplate);\n  }\n}\n\nvar _c36 = [\"ngx-charts-polar-series\", \"\"];\n\nfunction PolarSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r0.seriesColor)(\"name\", ctx_r0.gradientId)(\"startOpacity\", 0.25)(\"endOpacity\", 1)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction PolarSeriesComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"select\", function PolarSeriesComponent__svg_g_4_Template__svg_g_select_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var circle_r2 = ctx.$implicit;\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.select.emit(circle_r2.data);\n    })(\"activate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_activate_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var circle_r2 = ctx.$implicit;\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.activate.emit({\n        name: circle_r2.data.series\n      });\n    })(\"deactivate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_deactivate_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var circle_r2 = ctx.$implicit;\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit({\n        name: circle_r2.data.series\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var circle_r2 = ctx.$implicit;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"opacity\", ctx_r1.inactive ? 0.2 : 1);\n    ɵngcc0.ɵɵproperty(\"cx\", circle_r2.cx)(\"cy\", circle_r2.cy)(\"r\", ctx_r1.circleRadius)(\"fill\", circle_r2.color)(\"tooltipDisabled\", ctx_r1.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipTitle\", ctx_r1.tooltipTemplate ? undefined : ctx_r1.tooltipText(circle_r2))(\"tooltipTemplate\", ctx_r1.tooltipTemplate)(\"tooltipContext\", circle_r2.data);\n  }\n}\n\nvar _c37 = [\"ngx-charts-pie-label\", \"\"];\nvar _c38 = [\"ngx-charts-pie-arc\", \"\"];\n\nfunction PieArcComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelement(1, \"g\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r0.fill)(\"name\", ctx_r0.radialGradientId)(\"startOpacity\", ctx_r0.startOpacity);\n  }\n}\n\nvar _c39 = \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:fadeIn .75s ease-in;animation:fadeIn .75s ease-in}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:drawOut 3s linear;animation:drawOut 3s linear;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\";\n\nfunction PieGridComponent__svg_g_2__svg_text_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"text\", 10);\n  }\n\n  if (rf & 2) {\n    var series_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"countTo\", series_r1.percent)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"text\", 11);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", series_r1.percent.toLocaleString(), \" \");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"text\", 12);\n  }\n\n  if (rf & 2) {\n    var series_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"countTo\", series_r1.total)(\"countPrefix\", ctx_r4.label + \": \");\n    ɵngcc0.ɵɵattribute(\"y\", series_r1.outerRadius);\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"text\", 13);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"y\", series_r1.outerRadius);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate2(\" \", ctx_r5.label, \": \", series_r1.total.toLocaleString(), \" \");\n  }\n}\n\nvar _c40 = function _c40(a0) {\n  return {\n    data: a0\n  };\n};\n\nfunction PieGridComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 3);\n    ɵngcc0.ɵɵelementStart(1, \"g\", 4);\n    ɵngcc0.ɵɵlistener(\"select\", function PieGridComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onClick($event);\n    })(\"activate\", function PieGridComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onActivate($event);\n    })(\"deactivate\", function PieGridComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      var ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, PieGridComponent__svg_g_2__svg_text_2_Template, 1, 2, \"text\", 5);\n    ɵngcc0.ɵɵtemplate(3, PieGridComponent__svg_g_2__svg_text_3_Template, 2, 1, \"text\", 6);\n    ɵngcc0.ɵɵelementStart(4, \"text\", 7);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(6, PieGridComponent__svg_g_2__svg_text_6_Template, 1, 3, \"text\", 8);\n    ɵngcc0.ɵɵtemplate(7, PieGridComponent__svg_g_2__svg_text_7_Template, 2, 3, \"text\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var series_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", series_r1.transform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"colors\", series_r1.colors)(\"data\", series_r1.data)(\"innerRadius\", series_r1.innerRadius)(\"outerRadius\", series_r1.outerRadius)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(ɵngcc0.ɵɵpureFunction1(17, _c40, series_r1)))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", series_r1.data[0].data);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", series_r1.label, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n  }\n}\n\nvar _c41 = [\"ngx-charts-pie-grid-series\", \"\"];\n\nfunction PieGridSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"select\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onClick($event);\n    })(\"activate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.activate.emit($event);\n    })(\"deactivate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.deactivate.emit($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var arc_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"data\", arc_r1.data)(\"gradient\", false)(\"pointerEvents\", arc_r1.pointerEvents)(\"animate\", arc_r1.animate);\n    ɵngcc0.ɵɵattribute(\"class\", arc_r1.class);\n  }\n}\n\nvar _c42 = [\"ngx-charts-pie-series\", \"\"];\n\nfunction PieSeriesComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    var arc_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"data\", arc_r1)(\"radius\", ctx_r2.outerRadius)(\"color\", ctx_r2.color(arc_r1))(\"label\", ctx_r2.labelText(arc_r1))(\"labelTrim\", ctx_r2.trimLabels)(\"labelTrimSize\", ctx_r2.maxLabelLength)(\"max\", ctx_r2.max)(\"value\", arc_r1.value)(\"explodeSlices\", ctx_r2.explodeSlices)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction PieSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵtemplate(1, PieSeriesComponent__svg_g_0__svg_g_1_Template, 1, 10, \"g\", 1);\n    ɵngcc0.ɵɵelementStart(2, \"g\", 2);\n    ɵngcc0.ɵɵlistener(\"select\", function PieSeriesComponent__svg_g_0_Template__svg_g_select_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    })(\"activate\", function PieSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.activate.emit($event);\n    })(\"deactivate\", function PieSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.deactivate.emit($event);\n    })(\"dblclick\", function PieSeriesComponent__svg_g_0_Template__svg_g_dblclick_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.dblclick.emit($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var arc_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.labelVisible(arc_r1));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"gradient\", ctx_r0.gradient)(\"data\", arc_r1.data)(\"max\", ctx_r0.max)(\"explodeSlices\", ctx_r0.explodeSlices)(\"isActive\", ctx_r0.isActive(arc_r1.data))(\"animate\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.getTooltipTitle(arc_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", arc_r1.data);\n  }\n}\n\nvar _c43 = [\"textEl\"];\nvar _c44 = [\"ngx-charts-card\", \"\"];\n\nfunction CardComponent__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"path\", 7);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"fill\", ctx_r0.bandColor)(\"transform\", ctx_r0.transformBand)(\"d\", ctx_r0.bandPath);\n  }\n}\n\nvar _c45 = [\"ngx-charts-card-series\", \"\"];\n\nfunction CardSeriesComponent__svg_rect_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"rect\", 2);\n  }\n\n  if (rf & 2) {\n    var c_r2 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"fill\", ctx_r0.emptyColor);\n    ɵngcc0.ɵɵattribute(\"x\", c_r2.x)(\"y\", c_r2.y)(\"width\", c_r2.width)(\"height\", c_r2.height);\n  }\n}\n\nfunction CardSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 3);\n    ɵngcc0.ɵɵlistener(\"select\", function CardSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var c_r3 = ctx.$implicit;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"x\", c_r3.x)(\"y\", c_r3.y)(\"width\", c_r3.width)(\"height\", c_r3.height)(\"color\", c_r3.color)(\"bandColor\", c_r3.bandColor)(\"textColor\", c_r3.textColor)(\"data\", c_r3.data)(\"label\", c_r3.label)(\"medianSize\", ctx_r1.medianSize)(\"valueFormatting\", ctx_r1.valueFormatting)(\"labelFormatting\", ctx_r1.labelFormatting)(\"animations\", ctx_r1.animations);\n  }\n}\n\nvar _c46 = [\"ngx-charts-tree-map-cell\", \"\"];\n\nfunction TreeMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelement(1, \"g\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 8);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"countTo\", ctx_r2.value)(\"valueFormatting\", ctx_r2.valueFormatting);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r3.formattedValue, \" \");\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"foreignObject\", 4);\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(1, \"p\");\n    ɵngcc0.ɵɵelement(2, \"span\", 5);\n    ɵngcc0.ɵɵelement(3, \"br\");\n    ɵngcc0.ɵɵtemplate(4, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template, 1, 2, \"span\", 6);\n    ɵngcc0.ɵɵtemplate(5, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template, 2, 1, \"span\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"pointer-events\", \"none\");\n    ɵngcc0.ɵɵattribute(\"x\", ctx_r1.x)(\"y\", ctx_r1.y)(\"width\", ctx_r1.width)(\"height\", ctx_r1.height);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"color\", ctx_r1.getTextColor())(\"height\", ctx_r1.height + \"px\")(\"width\", ctx_r1.width + \"px\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r1.formattedLabel, ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.animations);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.animations);\n  }\n}\n\nvar _c47 = [\"ngx-charts-tree-map-cell-series\", \"\"];\n\nfunction TreeMapCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 1);\n    ɵngcc0.ɵɵlistener(\"select\", function TreeMapCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onClick($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var c_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"data\", c_r1.data)(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"label\", c_r1.label)(\"value\", c_r1.value)(\"valueType\", c_r1.valueType)(\"valueFormatting\", ctx_r0.valueFormatting)(\"labelFormatting\", ctx_r0.labelFormatting)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", c_r1.data);\n  }\n}\n\nvar _c48 = [\"valueTextEl\"];\nvar _c49 = [\"unitsTextEl\"];\n\nfunction LinearGaugeComponent__svg_line_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"line\", 10);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r0.transformLine)(\"stroke\", ctx_r0.colors.getColor(ctx_r0.units));\n  }\n}\n\nfunction LinearGaugeComponent__svg_line_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"line\", 11);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r1.transformLine)(\"stroke\", ctx_r1.colors.getColor(ctx_r1.units));\n  }\n}\n\nvar _c50 = function _c50() {\n  return {};\n};\n\nfunction GaugeComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\");\n    ɵngcc0.ɵɵelementStart(1, \"g\", 5);\n    ɵngcc0.ɵɵlistener(\"select\", function GaugeComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    })(\"activate\", function GaugeComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.onActivate($event);\n    })(\"deactivate\", function GaugeComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.onDeactivate($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var arc_r3 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r0.rotation);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"backgroundArc\", arc_r3.backgroundArc)(\"valueArc\", arc_r3.valueArc)(\"cornerRadius\", ctx_r0.cornerRadius)(\"colors\", ctx_r0.colors)(\"isActive\", ctx_r0.isActive(arc_r3.valueArc.data))(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"valueFormatting\", ctx_r0.valueFormatting)(\"animations\", ctx_r0.animations);\n  }\n}\n\nfunction GaugeComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"g\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"bigSegments\", ctx_r1.bigSegments)(\"smallSegments\", ctx_r1.smallSegments)(\"min\", ctx_r1.min)(\"max\", ctx_r1.max)(\"radius\", ctx_r1.outerRadius)(\"angleSpan\", ctx_r1.angleSpan)(\"valueScale\", ctx_r1.valueScale)(\"startAngle\", ctx_r1.startAngle)(\"tickFormatting\", ctx_r1.axisTickFormatting);\n  }\n}\n\nfunction GaugeComponent__svg_text_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"text\", 7, 8);\n    ɵngcc0.ɵɵelementStart(2, \"tspan\", 9);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"tspan\", 10);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n    ɵngcc0.ɵɵattribute(\"transform\", ctx_r2.textTransform);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.displayValue);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.units);\n  }\n}\n\nvar _c51 = [\"ngx-charts-gauge-arc\", \"\"];\nvar _c52 = [\"ngx-charts-gauge-axis\", \"\"];\n\nfunction GaugeAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵelement(1, \"path\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tick_r3 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"d\", tick_r3.line);\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"text\", 3);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tick_r4 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"text-anchor\", tick_r4.textAnchor);\n    ɵngcc0.ɵɵattribute(\"transform\", tick_r4.textTransform);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", tick_r4.text, \" \");\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"g\", 4);\n    ɵngcc0.ɵɵelement(1, \"path\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tick_r5 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"d\", tick_r5.line);\n  }\n}\n\nfunction isViewContainerRef(x) {\n  return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n\n\nvar InjectionService = /*#__PURE__*/function () {\n  function InjectionService(applicationRef, componentFactoryResolver, injector) {\n    _classCallCheck(this, InjectionService);\n\n    this.applicationRef = applicationRef;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.injector = injector;\n  }\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n\n\n  _createClass(InjectionService, [{\n    key: \"getRootViewContainer\",\n    value:\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @memberOf InjectionService\n     */\n    function getRootViewContainer() {\n      if (this._container) return this._container;\n      if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n      if (this.applicationRef.components.length) return this.applicationRef.components[0];\n      throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n    }\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     *\n     * @memberOf InjectionService\n     */\n\n  }, {\n    key: \"setRootViewContainer\",\n    value: function setRootViewContainer(container) {\n      this._container = container;\n    }\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param componentRef\n     *\n     * @memberOf InjectionService\n     */\n\n  }, {\n    key: \"getComponentRootNode\",\n    value: function getComponentRootNode(component) {\n      if (isViewContainerRef(component)) {\n        return component.element.nativeElement;\n      }\n\n      if (component.hostView && component.hostView.rootNodes.length > 0) {\n        return component.hostView.rootNodes[0];\n      } // the top most component root node has no `hostView`\n\n\n      return component.location.nativeElement;\n    }\n    /**\n     * Gets the root component container html element.\n     *\n     * @memberOf InjectionService\n     */\n\n  }, {\n    key: \"getRootViewContainerNode\",\n    value: function getRootViewContainerNode(component) {\n      return this.getComponentRootNode(component);\n    }\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param component\n     * @param options\n     *\n     * @memberOf InjectionService\n     */\n\n  }, {\n    key: \"projectComponentBindings\",\n    value: function projectComponentBindings(component, bindings) {\n      if (bindings) {\n        if (bindings.inputs !== undefined) {\n          var bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n\n          var _iterator = _createForOfIteratorHelper(bindingKeys),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var bindingName = _step.value;\n              component.instance[bindingName] = bindings.inputs[bindingName];\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        if (bindings.outputs !== undefined) {\n          var eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n\n          var _iterator2 = _createForOfIteratorHelper(eventKeys),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var eventName = _step2.value;\n              component.instance[eventName] = bindings.outputs[eventName];\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n\n      return component;\n    }\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @param componentClass\n     * @param [options={}]\n     * @param [location]\n     *\n     * @memberOf InjectionService\n     */\n\n  }, {\n    key: \"appendComponent\",\n    value: function appendComponent(componentClass) {\n      var bindings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var location = arguments.length > 2 ? arguments[2] : undefined;\n      if (!location) location = this.getRootViewContainer();\n      var appendLocation = this.getComponentRootNode(location);\n      var portalHost = new DomPortalHost(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n      var portal = new ComponentPortal(componentClass);\n      var componentRef = portalHost.attach(portal);\n      this.projectComponentBindings(componentRef, bindings);\n      return componentRef;\n    }\n  }], [{\n    key: \"setGlobalRootViewContainer\",\n    value: function setGlobalRootViewContainer(container) {\n      InjectionService.globalRootViewContainer = container;\n    }\n  }]);\n\n  return InjectionService;\n}();\n\nInjectionService.ɵfac = function InjectionService_Factory(t) {\n  return new (t || InjectionService)(ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\n\nInjectionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: InjectionService,\n  factory: InjectionService.ɵfac\n});\nInjectionService.globalRootViewContainer = null;\n\nInjectionService.ctorParameters = function () {\n  return [{\n    type: ApplicationRef\n  }, {\n    type: ComponentFactoryResolver\n  }, {\n    type: Injector\n  }];\n};\n/**\n * Throttle a function\n *\n */\n\n\nfunction throttle(func, wait, options) {\n  options = options || {};\n  var context;\n  var args;\n  var result;\n  var timeout = null;\n  var previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    var now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\n\n\nfunction throttleable(duration, options) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n        return this[key];\n      }\n    };\n  };\n}\n\nvar PlacementTypes;\n\n(function (PlacementTypes) {\n  PlacementTypes[PlacementTypes[\"top\"] = 'top'] = \"top\";\n  PlacementTypes[PlacementTypes[\"bottom\"] = 'bottom'] = \"bottom\";\n  PlacementTypes[PlacementTypes[\"left\"] = 'left'] = \"left\";\n  PlacementTypes[PlacementTypes[\"right\"] = 'right'] = \"right\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nvar caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'top') {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === 'bottom') {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'left') {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === 'right') {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\n\n\nvar PositionHelper = /*#__PURE__*/function () {\n  function PositionHelper() {\n    _classCallCheck(this, PositionHelper);\n  }\n\n  _createClass(PositionHelper, null, [{\n    key: \"calculateVerticalAlignment\",\n    value:\n    /**\n     * Calculate vertical alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    function calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n      var result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n      if (result + popoverDimensions.height > window.innerHeight) {\n        result = window.innerHeight - popoverDimensions.height;\n      }\n\n      return result;\n    }\n    /**\n     * Calculate vertical caret position\n     *\n     * @memberOf PositionHelper\n     */\n\n  }, {\n    key: \"calculateVerticalCaret\",\n    value: function calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n      var result;\n\n      if (alignment === 'top') {\n        result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n      }\n\n      if (alignment === 'bottom') {\n        result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n      }\n\n      if (alignment === 'center') {\n        result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n      }\n\n      var popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n      if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n        result += popoverPosition + popoverDimensions.height - window.innerHeight;\n      }\n\n      return result;\n    }\n    /**\n     * Calculate horz alignment position\n     *\n     * @memberOf PositionHelper\n     */\n\n  }, {\n    key: \"calculateHorizontalAlignment\",\n    value: function calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n      var result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n      if (result + popoverDimensions.width > window.innerWidth) {\n        result = window.innerWidth - popoverDimensions.width;\n      }\n\n      return result;\n    }\n    /**\n     * Calculate horz caret position\n     *\n     * @memberOf PositionHelper\n     */\n\n  }, {\n    key: \"calculateHorizontalCaret\",\n    value: function calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n      var result;\n\n      if (alignment === 'left') {\n        result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n      }\n\n      if (alignment === 'right') {\n        result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n      }\n\n      if (alignment === 'center') {\n        result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n      }\n\n      var popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n      if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n        result += popoverPosition + popoverDimensions.width - window.innerWidth;\n      }\n\n      return result;\n    }\n    /**\n     * Checks if the element's position should be flipped\n     *\n     * @memberOf PositionHelper\n     */\n\n  }, {\n    key: \"shouldFlip\",\n    value: function shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n      var flip = false;\n\n      if (placement === 'right') {\n        if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n          flip = true;\n        }\n      }\n\n      if (placement === 'left') {\n        if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n          flip = true;\n        }\n      }\n\n      if (placement === 'top') {\n        if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n          flip = true;\n        }\n      }\n\n      if (placement === 'bottom') {\n        if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n          flip = true;\n        }\n      }\n\n      return flip;\n    }\n    /**\n     * Position caret\n     *\n     * @memberOf PositionHelper\n     */\n\n  }, {\n    key: \"positionCaret\",\n    value: function positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n      var top = 0;\n      var left = 0;\n\n      if (placement === PlacementTypes.right) {\n        left = -7;\n        top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n      } else if (placement === PlacementTypes.left) {\n        left = elmDim.width;\n        top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n      } else if (placement === PlacementTypes.top) {\n        top = elmDim.height;\n        left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n      } else if (placement === PlacementTypes.bottom) {\n        top = -7;\n        left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n      }\n\n      return {\n        top: top,\n        left: left\n      };\n    }\n    /**\n     * Position content\n     *\n     * @memberOf PositionHelper\n     */\n\n  }, {\n    key: \"positionContent\",\n    value: function positionContent(placement, elmDim, hostDim, spacing, alignment) {\n      var top = 0;\n      var left = 0;\n\n      if (placement === PlacementTypes.right) {\n        left = hostDim.left + hostDim.width + spacing;\n        top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n      } else if (placement === PlacementTypes.left) {\n        left = hostDim.left - elmDim.width - spacing;\n        top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n      } else if (placement === PlacementTypes.top) {\n        top = hostDim.top - elmDim.height - spacing;\n        left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n      } else if (placement === PlacementTypes.bottom) {\n        top = hostDim.top + hostDim.height + spacing;\n        left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n      }\n\n      return {\n        top: top,\n        left: left\n      };\n    }\n    /**\n     * Determine placement based on flip\n     *\n     * @memberOf PositionHelper\n     */\n\n  }, {\n    key: \"determinePlacement\",\n    value: function determinePlacement(placement, elmDim, hostDim, spacing) {\n      var shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n      if (shouldFlip) {\n        if (placement === PlacementTypes.right) {\n          return PlacementTypes.left;\n        } else if (placement === PlacementTypes.left) {\n          return PlacementTypes.right;\n        } else if (placement === PlacementTypes.top) {\n          return PlacementTypes.bottom;\n        } else if (placement === PlacementTypes.bottom) {\n          return PlacementTypes.top;\n        }\n      }\n\n      return placement;\n    }\n  }]);\n\n  return PositionHelper;\n}();\n\nvar TooltipContentComponent = /*#__PURE__*/function () {\n  function TooltipContentComponent(element, renderer) {\n    _classCallCheck(this, TooltipContentComponent);\n\n    this.element = element;\n    this.renderer = renderer;\n  }\n\n  _createClass(TooltipContentComponent, [{\n    key: \"cssClasses\",\n    get: function get() {\n      var clz = 'ngx-charts-tooltip-content';\n      clz += \" position-\".concat(this.placement);\n      clz += \" type-\".concat(this.type);\n      clz += \" \".concat(this.cssClass);\n      return clz;\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      setTimeout(this.position.bind(this));\n    }\n  }, {\n    key: \"position\",\n    value: function position() {\n      var _this = this;\n\n      var nativeElm = this.element.nativeElement;\n      var hostDim = this.host.nativeElement.getBoundingClientRect(); // if no dims were found, never show\n\n      if (!hostDim.height && !hostDim.width) return;\n      var elmDim = nativeElm.getBoundingClientRect();\n      this.checkFlip(hostDim, elmDim);\n      this.positionContent(nativeElm, hostDim, elmDim);\n\n      if (this.showCaret) {\n        this.positionCaret(hostDim, elmDim);\n      } // animate its entry\n\n\n      setTimeout(function () {\n        return _this.renderer.addClass(nativeElm, 'animate');\n      }, 1);\n    }\n  }, {\n    key: \"positionContent\",\n    value: function positionContent(nativeElm, hostDim, elmDim) {\n      var _PositionHelper$posit = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment),\n          top = _PositionHelper$posit.top,\n          left = _PositionHelper$posit.left;\n\n      this.renderer.setStyle(nativeElm, 'top', \"\".concat(top, \"px\"));\n      this.renderer.setStyle(nativeElm, 'left', \"\".concat(left, \"px\"));\n    }\n  }, {\n    key: \"positionCaret\",\n    value: function positionCaret(hostDim, elmDim) {\n      var caretElm = this.caretElm.nativeElement;\n      var caretDimensions = caretElm.getBoundingClientRect();\n\n      var _PositionHelper$posit2 = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment),\n          top = _PositionHelper$posit2.top,\n          left = _PositionHelper$posit2.left;\n\n      this.renderer.setStyle(caretElm, 'top', \"\".concat(top, \"px\"));\n      this.renderer.setStyle(caretElm, 'left', \"\".concat(left, \"px\"));\n    }\n  }, {\n    key: \"checkFlip\",\n    value: function checkFlip(hostDim, elmDim) {\n      this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n    }\n  }, {\n    key: \"onWindowResize\",\n    value: function onWindowResize() {\n      this.position();\n    }\n  }]);\n\n  return TooltipContentComponent;\n}();\n\nTooltipContentComponent.ɵfac = function TooltipContentComponent_Factory(t) {\n  return new (t || TooltipContentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nTooltipContentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TooltipContentComponent,\n  selectors: [[\"ngx-tooltip-content\"]],\n  viewQuery: function TooltipContentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.caretElm = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function TooltipContentComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"resize\", function TooltipContentComponent_resize_HostBindingHandler() {\n        return ctx.onWindowResize();\n      }, false, ɵngcc0.ɵɵresolveWindow);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.cssClasses);\n    }\n  },\n  inputs: {\n    placement: \"placement\",\n    host: \"host\",\n    showCaret: \"showCaret\",\n    type: \"type\",\n    alignment: \"alignment\",\n    spacing: \"spacing\",\n    cssClass: \"cssClass\",\n    title: \"title\",\n    template: \"template\",\n    context: \"context\"\n  },\n  decls: 6,\n  vars: 6,\n  consts: [[3, \"hidden\"], [\"caretElm\", \"\"], [1, \"tooltip-content\"], [4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]],\n  template: function TooltipContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵelement(1, \"span\", 0, 1);\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(4, TooltipContentComponent_span_4_Template, 2, 4, \"span\", 3);\n      ɵngcc0.ɵɵtemplate(5, TooltipContentComponent_span_5_Template, 1, 1, \"span\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassMapInterpolate1(\"tooltip-caret position-\", ctx.placement, \"\");\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.showCaret);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.title);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.title);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n  styles: [\".ngx-charts-tooltip-content{border-radius:3px;display:block;font-weight:400;opacity:0;pointer-events:none!important;position:fixed;z-index:5000}.ngx-charts-tooltip-content.type-popover{background:#fff;border:1px solid #72809b;box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);color:#060709;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{height:0;position:absolute;width:0;z-index:5001}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-bottom:7px solid transparent;border-left:7px solid #fff;border-top:7px solid transparent}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-bottom:7px solid transparent;border-right:7px solid #fff;border-top:7px solid transparent}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-bottom:7px solid #fff;border-left:7px solid transparent;border-right:7px solid transparent}.ngx-charts-tooltip-content.type-tooltip{background:rgba(0,0,0,.75);color:#fff;font-size:12px;padding:0 10px;pointer-events:auto;text-align:center}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75);border-top:7px solid transparent}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75);border-top:7px solid transparent}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-bottom:7px solid rgba(0,0,0,.75);border-left:7px solid transparent;border-right:7px solid transparent}.ngx-charts-tooltip-content .tooltip-label{display:block;font-size:1em;line-height:1em;padding:8px 5px 5px}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{height:0;position:absolute;width:0;z-index:5001}.ngx-charts-tooltip-content.position-right{transform:translate3d(10px,0,0)}.ngx-charts-tooltip-content.position-left{transform:translate3d(-10px,0,0)}.ngx-charts-tooltip-content.position-top{transform:translate3d(0,-10px,0)}.ngx-charts-tooltip-content.position-bottom{transform:translate3d(0,10px,0)}.ngx-charts-tooltip-content.animate{opacity:1;pointer-events:auto;transform:translateZ(0);transition:opacity .3s,transform .3s}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{line-height:1.2em;padding:5px 0;text-align:left}.tooltip-item .tooltip-item-color{border-radius:3px;color:#5b646b;display:inline-block;height:12px;margin-right:5px;width:12px}\"],\n  encapsulation: 2\n});\n\nTooltipContentComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }];\n};\n\nTooltipContentComponent.propDecorators = {\n  host: [{\n    type: Input\n  }],\n  showCaret: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  placement: [{\n    type: Input\n  }],\n  alignment: [{\n    type: Input\n  }],\n  spacing: [{\n    type: Input\n  }],\n  cssClass: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  template: [{\n    type: Input\n  }],\n  context: [{\n    type: Input\n  }],\n  caretElm: [{\n    type: ViewChild,\n    args: ['caretElm']\n  }],\n  cssClasses: [{\n    type: HostBinding,\n    args: ['class']\n  }],\n  onWindowResize: [{\n    type: HostListener,\n    args: ['window:resize']\n  }]\n};\n\n__decorate([throttleable(100)], TooltipContentComponent.prototype, \"onWindowResize\", null);\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(InjectionService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.ApplicationRef\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TooltipContentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-tooltip-content',\n      template: \"\\n    <div>\\n      <span #caretElm [hidden]=\\\"!showCaret\\\" class=\\\"tooltip-caret position-{{ this.placement }}\\\"> </span>\\n      <div class=\\\"tooltip-content\\\">\\n        <span *ngIf=\\\"!title\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"template\\\" [ngTemplateOutletContext]=\\\"{ model: context }\\\"> </ng-template>\\n        </span>\\n        <span *ngIf=\\\"title\\\" [innerHTML]=\\\"title\\\"> </span>\\n      </div>\\n    </div>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-tooltip-content{border-radius:3px;display:block;font-weight:400;opacity:0;pointer-events:none!important;position:fixed;z-index:5000}.ngx-charts-tooltip-content.type-popover{background:#fff;border:1px solid #72809b;box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);color:#060709;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{height:0;position:absolute;width:0;z-index:5001}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-bottom:7px solid transparent;border-left:7px solid #fff;border-top:7px solid transparent}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-bottom:7px solid transparent;border-right:7px solid #fff;border-top:7px solid transparent}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-bottom:7px solid #fff;border-left:7px solid transparent;border-right:7px solid transparent}.ngx-charts-tooltip-content.type-tooltip{background:rgba(0,0,0,.75);color:#fff;font-size:12px;padding:0 10px;pointer-events:auto;text-align:center}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75);border-top:7px solid transparent}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75);border-top:7px solid transparent}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-bottom:7px solid rgba(0,0,0,.75);border-left:7px solid transparent;border-right:7px solid transparent}.ngx-charts-tooltip-content .tooltip-label{display:block;font-size:1em;line-height:1em;padding:8px 5px 5px}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{height:0;position:absolute;width:0;z-index:5001}.ngx-charts-tooltip-content.position-right{transform:translate3d(10px,0,0)}.ngx-charts-tooltip-content.position-left{transform:translate3d(-10px,0,0)}.ngx-charts-tooltip-content.position-top{transform:translate3d(0,-10px,0)}.ngx-charts-tooltip-content.position-bottom{transform:translate3d(0,10px,0)}.ngx-charts-tooltip-content.animate{opacity:1;pointer-events:auto;transform:translateZ(0);transition:opacity .3s,transform .3s}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{line-height:1.2em;padding:5px 0;text-align:left}.tooltip-item .tooltip-item-color{border-radius:3px;color:#5b646b;display:inline-block;height:12px;margin-right:5px;width:12px}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    cssClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    placement: [{\n      type: Input\n    }],\n    onWindowResize: [{\n      type: HostListener,\n      args: ['window:resize']\n    }],\n    host: [{\n      type: Input\n    }],\n    showCaret: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    alignment: [{\n      type: Input\n    }],\n    spacing: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    caretElm: [{\n      type: ViewChild,\n      args: ['caretElm']\n    }]\n  });\n})();\n\nvar InjectionRegisteryService = /*#__PURE__*/function () {\n  function InjectionRegisteryService(injectionService) {\n    _classCallCheck(this, InjectionRegisteryService);\n\n    this.injectionService = injectionService;\n    this.defaults = {};\n    this.components = new Map();\n  }\n\n  _createClass(InjectionRegisteryService, [{\n    key: \"getByType\",\n    value: function getByType() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.type;\n      return this.components.get(type);\n    }\n  }, {\n    key: \"create\",\n    value: function create(bindings) {\n      return this.createByType(this.type, bindings);\n    }\n  }, {\n    key: \"createByType\",\n    value: function createByType(type, bindings) {\n      bindings = this.assignDefaults(bindings);\n      var component = this.injectComponent(type, bindings);\n      this.register(type, component);\n      return component;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(instance) {\n      var compsByType = this.components.get(instance.componentType);\n\n      if (compsByType && compsByType.length) {\n        var idx = compsByType.indexOf(instance);\n\n        if (idx > -1) {\n          var component = compsByType[idx];\n          component.destroy();\n          compsByType.splice(idx, 1);\n        }\n      }\n    }\n  }, {\n    key: \"destroyAll\",\n    value: function destroyAll() {\n      this.destroyByType(this.type);\n    }\n  }, {\n    key: \"destroyByType\",\n    value: function destroyByType(type) {\n      var comps = this.components.get(type);\n\n      if (comps && comps.length) {\n        var i = comps.length - 1;\n\n        while (i >= 0) {\n          this.destroy(comps[i--]);\n        }\n      }\n    }\n  }, {\n    key: \"injectComponent\",\n    value: function injectComponent(type, bindings) {\n      return this.injectionService.appendComponent(type, bindings);\n    }\n  }, {\n    key: \"assignDefaults\",\n    value: function assignDefaults(bindings) {\n      var inputs = Object.assign({}, this.defaults.inputs);\n      var outputs = Object.assign({}, this.defaults.outputs);\n\n      if (!bindings.inputs && !bindings.outputs) {\n        bindings = {\n          inputs: bindings\n        };\n      }\n\n      if (inputs) {\n        bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);\n      }\n\n      if (outputs) {\n        bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);\n      }\n\n      return bindings;\n    }\n  }, {\n    key: \"register\",\n    value: function register(type, component) {\n      if (!this.components.has(type)) {\n        this.components.set(type, []);\n      }\n\n      var types = this.components.get(type);\n      types.push(component);\n    }\n  }]);\n\n  return InjectionRegisteryService;\n}();\n\nvar TooltipService = /*#__PURE__*/function (_InjectionRegisterySe) {\n  _inherits(TooltipService, _InjectionRegisterySe);\n\n  var _super = _createSuper(TooltipService);\n\n  function TooltipService(injectionService) {\n    var _this2;\n\n    _classCallCheck(this, TooltipService);\n\n    _this2 = _super.call(this, injectionService);\n    _this2.type = TooltipContentComponent;\n    return _this2;\n  }\n\n  return TooltipService;\n}(InjectionRegisteryService);\n\nTooltipService.ɵfac = function TooltipService_Factory(t) {\n  return new (t || TooltipService)(ɵngcc0.ɵɵinject(InjectionService));\n};\n\nTooltipService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TooltipService,\n  factory: TooltipService.ɵfac\n});\n\nTooltipService.ctorParameters = function () {\n  return [{\n    type: InjectionService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TooltipService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: InjectionService\n    }];\n  }, null);\n})();\n\nvar ChartComponent = /*#__PURE__*/function () {\n  function ChartComponent() {\n    _classCallCheck(this, ChartComponent);\n\n    this.showLegend = false;\n    this.animations = true;\n    this.legendLabelClick = new EventEmitter();\n    this.legendLabelActivate = new EventEmitter();\n    this.legendLabelDeactivate = new EventEmitter();\n  }\n\n  _createClass(ChartComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var legendColumns = 0;\n\n      if (this.showLegend) {\n        this.legendType = this.getLegendType();\n\n        if (!this.legendOptions || this.legendOptions.position === 'right') {\n          if (this.legendType === 'scaleLegend') {\n            legendColumns = 1;\n          } else {\n            legendColumns = 2;\n          }\n        }\n      }\n\n      var chartColumns = 12 - legendColumns;\n      this.chartWidth = Math.floor(this.view[0] * chartColumns / 12.0);\n      this.legendWidth = !this.legendOptions || this.legendOptions.position === 'right' ? Math.floor(this.view[0] * legendColumns / 12.0) : this.chartWidth;\n    }\n  }, {\n    key: \"getLegendType\",\n    value: function getLegendType() {\n      if (this.legendOptions.scaleType === 'linear') {\n        return 'scaleLegend';\n      } else {\n        return 'legend';\n      }\n    }\n  }]);\n\n  return ChartComponent;\n}();\n\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)();\n};\n\nChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"ngx-charts-chart\"]],\n  inputs: {\n    showLegend: \"showLegend\",\n    animations: \"animations\",\n    legendType: \"legendType\",\n    view: \"view\",\n    legendOptions: \"legendOptions\",\n    data: \"data\",\n    legendData: \"legendData\",\n    colors: \"colors\",\n    activeEntries: \"activeEntries\"\n  },\n  outputs: {\n    legendLabelClick: \"legendLabelClick\",\n    legendLabelActivate: \"legendLabelActivate\",\n    legendLabelDeactivate: \"legendLabelDeactivate\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([TooltipService]), ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 5,\n  vars: 8,\n  consts: [[1, \"ngx-charts-outer\"], [1, \"ngx-charts\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\", 4, \"ngIf\"], [1, \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\"], [1, \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"svg\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, ChartComponent_ngx_charts_scale_legend_3_Template, 1, 5, \"ngx-charts-scale-legend\", 2);\n      ɵngcc0.ɵɵtemplate(4, ChartComponent_ngx_charts_legend_4_Template, 1, 7, \"ngx-charts-legend\", 3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.view[0], \"px\");\n      ɵngcc0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"width\", ctx.chartWidth)(\"height\", ctx.view[1]);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === \"scaleLegend\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === \"legend\");\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgIf, ScaleLegendComponent, LegendComponent];\n  },\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0\n    }), animate('500ms 100ms', style({\n      opacity: 1\n    }))])])]\n  },\n  changeDetection: 0\n});\nChartComponent.propDecorators = {\n  view: [{\n    type: Input\n  }],\n  showLegend: [{\n    type: Input\n  }],\n  legendOptions: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  legendData: [{\n    type: Input\n  }],\n  legendType: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  legendLabelClick: [{\n    type: Output\n  }],\n  legendLabelActivate: [{\n    type: Output\n  }],\n  legendLabelDeactivate: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ChartComponent, [{\n    type: Component,\n    args: [{\n      providers: [TooltipService],\n      selector: 'ngx-charts-chart',\n      template: \"\\n    <div class=\\\"ngx-charts-outer\\\" [style.width.px]=\\\"view[0]\\\" [@animationState]=\\\"'active'\\\" [@.disabled]=\\\"!animations\\\">\\n      <svg class=\\\"ngx-charts\\\" [attr.width]=\\\"chartWidth\\\" [attr.height]=\\\"view[1]\\\">\\n        <ng-content></ng-content>\\n      </svg>\\n      <ngx-charts-scale-legend\\n        *ngIf=\\\"showLegend && legendType === 'scaleLegend'\\\"\\n        class=\\\"chart-legend\\\"\\n        [horizontal]=\\\"legendOptions && legendOptions.position === 'below'\\\"\\n        [valueRange]=\\\"legendOptions.domain\\\"\\n        [colors]=\\\"legendOptions.colors\\\"\\n        [height]=\\\"view[1]\\\"\\n        [width]=\\\"legendWidth\\\"\\n      >\\n      </ngx-charts-scale-legend>\\n      <ngx-charts-legend\\n        *ngIf=\\\"showLegend && legendType === 'legend'\\\"\\n        class=\\\"chart-legend\\\"\\n        [horizontal]=\\\"legendOptions && legendOptions.position === 'below'\\\"\\n        [data]=\\\"legendOptions.domain\\\"\\n        [title]=\\\"legendOptions.title\\\"\\n        [colors]=\\\"legendOptions.colors\\\"\\n        [height]=\\\"view[1]\\\"\\n        [width]=\\\"legendWidth\\\"\\n        [activeEntries]=\\\"activeEntries\\\"\\n        (labelClick)=\\\"legendLabelClick.emit($event)\\\"\\n        (labelActivate)=\\\"legendLabelActivate.emit($event)\\\"\\n        (labelDeactivate)=\\\"legendLabelDeactivate.emit($event)\\\"\\n      >\\n      </ngx-charts-legend>\\n    </div>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0\n      }), animate('500ms 100ms', style({\n        opacity: 1\n      }))])])]\n    }]\n  }], function () {\n    return [];\n  }, {\n    showLegend: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    legendLabelClick: [{\n      type: Output\n    }],\n    legendLabelActivate: [{\n      type: Output\n    }],\n    legendLabelDeactivate: [{\n      type: Output\n    }],\n    legendType: [{\n      type: Input\n    }],\n    view: [{\n      type: Input\n    }],\n    legendOptions: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    legendData: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Visibility Observer\n */\n\n\nvar VisibilityObserver = /*#__PURE__*/function () {\n  function VisibilityObserver(element, zone) {\n    _classCallCheck(this, VisibilityObserver);\n\n    this.element = element;\n    this.zone = zone;\n    this.visible = new EventEmitter();\n    this.isVisible = false;\n    this.runCheck();\n  }\n\n  _createClass(VisibilityObserver, [{\n    key: \"destroy\",\n    value: function destroy() {\n      clearTimeout(this.timeout);\n    }\n  }, {\n    key: \"onVisibilityChange\",\n    value: function onVisibilityChange() {\n      var _this3 = this;\n\n      // trigger zone recalc for columns\n      this.zone.run(function () {\n        _this3.isVisible = true;\n\n        _this3.visible.emit(true);\n      });\n    }\n  }, {\n    key: \"runCheck\",\n    value: function runCheck() {\n      var _this4 = this;\n\n      var check = function check() {\n        if (!_this4.element) {\n          return;\n        } // https://davidwalsh.name/offsetheight-visibility\n\n\n        var _this4$element$native = _this4.element.nativeElement,\n            offsetHeight = _this4$element$native.offsetHeight,\n            offsetWidth = _this4$element$native.offsetWidth;\n\n        if (offsetHeight && offsetWidth) {\n          clearTimeout(_this4.timeout);\n\n          _this4.onVisibilityChange();\n        } else {\n          clearTimeout(_this4.timeout);\n\n          _this4.zone.runOutsideAngular(function () {\n            _this4.timeout = setTimeout(function () {\n              return check();\n            }, 100);\n          });\n        }\n      };\n\n      this.zone.runOutsideAngular(function () {\n        _this4.timeout = setTimeout(function () {\n          return check();\n        });\n      });\n    }\n  }]);\n\n  return VisibilityObserver;\n}();\n\nVisibilityObserver.ɵfac = function VisibilityObserver_Factory(t) {\n  return new (t || VisibilityObserver)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nVisibilityObserver.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: VisibilityObserver,\n  selectors: [[\"visibility-observer\"]],\n  outputs: {\n    visible: \"visible\"\n  }\n});\n\nVisibilityObserver.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nVisibilityObserver.propDecorators = {\n  visible: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(VisibilityObserver, [{\n    type: Directive,\n    args: [{\n      selector: 'visibility-observer'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    visible: [{\n      type: Output\n    }]\n  });\n})();\n\nvar BaseChartComponent = /*#__PURE__*/function () {\n  function BaseChartComponent(chartElement, zone, cd) {\n    _classCallCheck(this, BaseChartComponent);\n\n    this.chartElement = chartElement;\n    this.zone = zone;\n    this.cd = cd;\n    this.scheme = 'cool';\n    this.schemeType = 'ordinal';\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  _createClass(BaseChartComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.bindWindowResizeEvent(); // listen for visibility of the element for hidden by default scenario\n\n      this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n      this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unbindEvents();\n\n      if (this.visibilityObserver) {\n        this.visibilityObserver.visible.unsubscribe();\n        this.visibilityObserver.destroy();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.results) {\n        this.results = this.cloneData(this.results);\n      } else {\n        this.results = [];\n      }\n\n      if (this.view) {\n        this.width = this.view[0];\n        this.height = this.view[1];\n      } else {\n        var dims = this.getContainerDims();\n\n        if (dims) {\n          this.width = dims.width;\n          this.height = dims.height;\n        }\n      } // default values if width or height are 0 or undefined\n\n\n      if (!this.width) {\n        this.width = 600;\n      }\n\n      if (!this.height) {\n        this.height = 400;\n      }\n\n      this.width = Math.floor(this.width);\n      this.height = Math.floor(this.height);\n\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    }\n  }, {\n    key: \"getContainerDims\",\n    value: function getContainerDims() {\n      var width;\n      var height;\n      var hostElem = this.chartElement.nativeElement;\n\n      if (hostElem.parentNode !== null) {\n        // Get the container dimensions\n        var dims = hostElem.parentNode.getBoundingClientRect();\n        width = dims.width;\n        height = dims.height;\n      }\n\n      if (width && height) {\n        return {\n          width: width,\n          height: height\n        };\n      }\n\n      return null;\n    }\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n\n  }, {\n    key: \"formatDates\",\n    value: function formatDates() {\n      for (var i = 0; i < this.results.length; i++) {\n        var g = this.results[i];\n        g.label = g.name;\n\n        if (g.label instanceof Date) {\n          g.label = g.label.toLocaleDateString();\n        }\n\n        if (g.series) {\n          for (var j = 0; j < g.series.length; j++) {\n            var d = g.series[j];\n            d.label = d.name;\n\n            if (d.label instanceof Date) {\n              d.label = d.label.toLocaleDateString();\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      if (this.resizeSubscription) {\n        this.resizeSubscription.unsubscribe();\n      }\n    }\n  }, {\n    key: \"bindWindowResizeEvent\",\n    value: function bindWindowResizeEvent() {\n      var _this5 = this;\n\n      var source = fromEvent(window, 'resize');\n      var subscription = source.pipe(debounceTime(200)).subscribe(function (e) {\n        _this5.update();\n\n        if (_this5.cd) {\n          _this5.cd.markForCheck();\n        }\n      });\n      this.resizeSubscription = subscription;\n    }\n    /**\n     * Clones the data into a new object\n     *\n     * @memberOf BaseChart\n     */\n\n  }, {\n    key: \"cloneData\",\n    value: function cloneData(data) {\n      var results = [];\n\n      var _iterator3 = _createForOfIteratorHelper(data),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var item = _step3.value;\n          var copy = {\n            name: item['name']\n          };\n\n          if (item['value'] !== undefined) {\n            copy['value'] = item['value'];\n          }\n\n          if (item['series'] !== undefined) {\n            copy['series'] = [];\n\n            var _iterator4 = _createForOfIteratorHelper(item['series']),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var seriesItem = _step4.value;\n                var seriesItemCopy = Object.assign({}, seriesItem);\n                copy['series'].push(seriesItemCopy);\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n\n          if (item['extra'] !== undefined) {\n            copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n          }\n\n          results.push(copy);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return results;\n    }\n  }]);\n\n  return BaseChartComponent;\n}();\n\nBaseChartComponent.ɵfac = function BaseChartComponent_Factory(t) {\n  return new (t || BaseChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nBaseChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BaseChartComponent,\n  selectors: [[\"base-chart\"]],\n  inputs: {\n    scheme: \"scheme\",\n    schemeType: \"schemeType\",\n    animations: \"animations\",\n    results: \"results\",\n    view: \"view\",\n    customColors: \"customColors\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 0,\n  template: function BaseChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n\nBaseChartComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nBaseChartComponent.propDecorators = {\n  results: [{\n    type: Input\n  }],\n  view: [{\n    type: Input\n  }],\n  scheme: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  customColors: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BaseChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'base-chart',\n      template: \" <div></div> \"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    scheme: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    results: [{\n      type: Input\n    }],\n    view: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }]\n  });\n})();\n\nvar AxisLabelComponent = /*#__PURE__*/function () {\n  function AxisLabelComponent(element) {\n    _classCallCheck(this, AxisLabelComponent);\n\n    this.textHeight = 25;\n    this.margin = 5;\n    this.element = element.nativeElement;\n  }\n\n  _createClass(AxisLabelComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.strokeWidth = '0.01';\n      this.textAnchor = 'middle';\n      this.transform = '';\n\n      switch (this.orient) {\n        case 'top':\n          this.y = this.offset;\n          this.x = this.width / 2;\n          break;\n\n        case 'bottom':\n          this.y = this.offset;\n          this.x = this.width / 2;\n          break;\n\n        case 'left':\n          this.y = -(this.offset + this.textHeight + this.margin);\n          this.x = -this.height / 2;\n          this.transform = 'rotate(270)';\n          break;\n\n        case 'right':\n          this.y = this.offset + this.margin;\n          this.x = -this.height / 2;\n          this.transform = 'rotate(270)';\n          break;\n\n        default:\n      }\n    }\n  }]);\n\n  return AxisLabelComponent;\n}();\n\nAxisLabelComponent.ɵfac = function AxisLabelComponent_Factory(t) {\n  return new (t || AxisLabelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nAxisLabelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AxisLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-axis-label\", \"\"]],\n  inputs: {\n    orient: \"orient\",\n    label: \"label\",\n    offset: \"offset\",\n    width: \"width\",\n    height: \"height\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c3,\n  decls: 2,\n  vars: 6,\n  template: function AxisLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"text\");\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"stroke-width\", ctx.strokeWidth)(\"x\", ctx.x)(\"y\", ctx.y)(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nAxisLabelComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nAxisLabelComponent.propDecorators = {\n  orient: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  offset: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AxisLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-axis-label]',\n      template: \"\\n    <svg:text\\n      [attr.stroke-width]=\\\"strokeWidth\\\"\\n      [attr.x]=\\\"x\\\"\\n      [attr.y]=\\\"y\\\"\\n      [attr.text-anchor]=\\\"textAnchor\\\"\\n      [attr.transform]=\\\"transform\\\"\\n    >\\n      {{ label }}\\n    </svg:text>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    orient: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }]\n  });\n})();\n\nfunction trimLabel(s) {\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n\n  if (s.length <= max) {\n    return s;\n  } else {\n    return \"\".concat(s.slice(0, max), \"...\");\n  }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    var reduced = [];\n    var modulus = Math.floor(ticks.length / maxTicks);\n\n    for (var i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n\nvar XAxisTicksComponent = /*#__PURE__*/function () {\n  function XAxisTicksComponent() {\n    _classCallCheck(this, XAxisTicksComponent);\n\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.rotateTicks = true;\n    this.dimensionsChanged = new EventEmitter();\n    this.verticalSpacing = 20;\n    this.rotateLabels = false;\n    this.innerTickSize = 6;\n    this.outerTickSize = 6;\n    this.tickPadding = 3;\n    this.textAnchor = 'middle';\n    this.maxTicksLength = 0;\n    this.maxAllowedLength = 16;\n    this.height = 0;\n  }\n\n  _createClass(XAxisTicksComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this6 = this;\n\n      setTimeout(function () {\n        return _this6.updateDims();\n      });\n    }\n  }, {\n    key: \"updateDims\",\n    value: function updateDims() {\n      var _this7 = this;\n\n      var height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n\n      if (height !== this.height) {\n        this.height = height;\n        this.dimensionsChanged.emit({\n          height: height\n        });\n        setTimeout(function () {\n          return _this7.updateDims();\n        });\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this8 = this;\n\n      var scale = this.scale;\n      this.ticks = this.getTicks();\n\n      if (this.tickFormatting) {\n        this.tickFormat = this.tickFormatting;\n      } else if (scale.tickFormat) {\n        this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n      } else {\n        this.tickFormat = function (d) {\n          if (d.constructor.name === 'Date') {\n            return d.toLocaleDateString();\n          }\n\n          return d.toLocaleString();\n        };\n      }\n\n      var angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n      this.adjustedScale = this.scale.bandwidth ? function (d) {\n        return this.scale(d) + this.scale.bandwidth() * 0.5;\n      } : this.scale;\n      this.textTransform = '';\n\n      if (angle && angle !== 0) {\n        this.textTransform = \"rotate(\".concat(angle, \")\");\n        this.textAnchor = 'end';\n        this.verticalSpacing = 10;\n      } else {\n        this.textAnchor = 'middle';\n      }\n\n      setTimeout(function () {\n        return _this8.updateDims();\n      });\n    }\n  }, {\n    key: \"getRotationAngle\",\n    value: function getRotationAngle(ticks) {\n      var angle = 0;\n      this.maxTicksLength = 0;\n\n      for (var i = 0; i < ticks.length; i++) {\n        var tick = this.tickFormat(ticks[i]).toString();\n        var tickLength = tick.length;\n\n        if (this.trimTicks) {\n          tickLength = this.tickTrim(tick).length;\n        }\n\n        if (tickLength > this.maxTicksLength) {\n          this.maxTicksLength = tickLength;\n        }\n      }\n\n      var len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n      var charWidth = 8; // need to measure this\n\n      var wordWidth = len * charWidth;\n      var baseWidth = wordWidth;\n      var maxBaseWidth = Math.floor(this.width / ticks.length); // calculate optimal angle\n\n      while (baseWidth > maxBaseWidth && angle > -90) {\n        angle -= 30;\n        baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n      }\n\n      return angle;\n    }\n  }, {\n    key: \"getTicks\",\n    value: function getTicks() {\n      var ticks;\n      var maxTicks = this.getMaxTicks(20);\n      var maxScaleTicks = this.getMaxTicks(100);\n\n      if (this.tickValues) {\n        ticks = this.tickValues;\n      } else if (this.scale.ticks) {\n        ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n      } else {\n        ticks = this.scale.domain();\n        ticks = reduceTicks(ticks, maxTicks);\n      }\n\n      return ticks;\n    }\n  }, {\n    key: \"getMaxTicks\",\n    value: function getMaxTicks(tickWidth) {\n      return Math.floor(this.width / tickWidth);\n    }\n  }, {\n    key: \"tickTransform\",\n    value: function tickTransform(tick) {\n      return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    }\n  }, {\n    key: \"gridLineTransform\",\n    value: function gridLineTransform() {\n      return \"translate(0,\".concat(-this.verticalSpacing - 5, \")\");\n    }\n  }, {\n    key: \"tickTrim\",\n    value: function tickTrim(label) {\n      return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n  }]);\n\n  return XAxisTicksComponent;\n}();\n\nXAxisTicksComponent.ɵfac = function XAxisTicksComponent_Factory(t) {\n  return new (t || XAxisTicksComponent)();\n};\n\nXAxisTicksComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: XAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis-ticks\", \"\"]],\n  viewQuery: function XAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c4, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    tickArguments: \"tickArguments\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    showGridLines: \"showGridLines\",\n    rotateTicks: \"rotateTicks\",\n    scale: \"scale\",\n    orient: \"orient\",\n    tickValues: \"tickValues\",\n    tickFormatting: \"tickFormatting\",\n    gridLineHeight: \"gridLineHeight\",\n    width: \"width\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c5,\n  decls: 4,\n  vars: 2,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [\"stroke-width\", \"0.01\"], [4, \"ngIf\"], [\"y2\", \"0\", 1, \"gridline-path\", \"gridline-path-vertical\"]],\n  template: function XAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\", null, 0);\n      ɵngcc0.ɵɵtemplate(2, XAxisTicksComponent__svg_g_2_Template, 5, 7, \"g\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, XAxisTicksComponent__svg_g_3_Template, 2, 2, \"g\", 2);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\nXAxisTicksComponent.propDecorators = {\n  scale: [{\n    type: Input\n  }],\n  orient: [{\n    type: Input\n  }],\n  tickArguments: [{\n    type: Input\n  }],\n  tickValues: [{\n    type: Input\n  }],\n  tickStroke: [{\n    type: Input\n  }],\n  trimTicks: [{\n    type: Input\n  }],\n  maxTickLength: [{\n    type: Input\n  }],\n  tickFormatting: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  gridLineHeight: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  rotateTicks: [{\n    type: Input\n  }],\n  dimensionsChanged: [{\n    type: Output\n  }],\n  ticksElement: [{\n    type: ViewChild,\n    args: ['ticksel']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(XAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis-ticks]',\n      template: \"\\n    <svg:g #ticksel>\\n      <svg:g *ngFor=\\\"let tick of ticks\\\" class=\\\"tick\\\" [attr.transform]=\\\"tickTransform(tick)\\\">\\n        <title>{{ tickFormat(tick) }}</title>\\n        <svg:text\\n          stroke-width=\\\"0.01\\\"\\n          [attr.text-anchor]=\\\"textAnchor\\\"\\n          [attr.transform]=\\\"textTransform\\\"\\n          [style.font-size]=\\\"'12px'\\\"\\n        >\\n          {{ tickTrim(tickFormat(tick)) }}\\n        </svg:text>\\n      </svg:g>\\n    </svg:g>\\n\\n    <svg:g *ngFor=\\\"let tick of ticks\\\" [attr.transform]=\\\"tickTransform(tick)\\\">\\n      <svg:g *ngIf=\\\"showGridLines\\\" [attr.transform]=\\\"gridLineTransform()\\\">\\n        <svg:line class=\\\"gridline-path gridline-path-vertical\\\" [attr.y1]=\\\"-gridLineHeight\\\" y2=\\\"0\\\" />\\n      </svg:g>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    tickArguments: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    gridLineHeight: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\n\nvar XAxisComponent = /*#__PURE__*/function () {\n  function XAxisComponent() {\n    _classCallCheck(this, XAxisComponent);\n\n    this.rotateTicks = true;\n    this.showGridLines = false;\n    this.xOrient = 'bottom';\n    this.xAxisOffset = 0;\n    this.dimensionsChanged = new EventEmitter();\n    this.xAxisClassName = 'x axis';\n    this.labelOffset = 0;\n    this.fill = 'none';\n    this.stroke = 'stroke';\n    this.tickStroke = '#ccc';\n    this.strokeWidth = 'none';\n    this.padding = 5;\n  }\n\n  _createClass(XAxisComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.transform = \"translate(0,\".concat(this.xAxisOffset + this.padding + this.dims.height, \")\");\n\n      if (typeof this.xAxisTickCount !== 'undefined') {\n        this.tickArguments = [this.xAxisTickCount];\n      }\n    }\n  }, {\n    key: \"emitTicksHeight\",\n    value: function emitTicksHeight(_ref) {\n      var _this9 = this;\n\n      var height = _ref.height;\n      var newLabelOffset = height + 25 + 5;\n\n      if (newLabelOffset !== this.labelOffset) {\n        this.labelOffset = newLabelOffset;\n        setTimeout(function () {\n          _this9.dimensionsChanged.emit({\n            height: height\n          });\n        }, 0);\n      }\n    }\n  }]);\n\n  return XAxisComponent;\n}();\n\nXAxisComponent.ɵfac = function XAxisComponent_Factory(t) {\n  return new (t || XAxisComponent)();\n};\n\nXAxisComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: XAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis\", \"\"]],\n  viewQuery: function XAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(XAxisTicksComponent, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    rotateTicks: \"rotateTicks\",\n    showGridLines: \"showGridLines\",\n    xOrient: \"xOrient\",\n    xAxisOffset: \"xAxisOffset\",\n    xScale: \"xScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    ticks: \"ticks\",\n    xAxisTickInterval: \"xAxisTickInterval\",\n    xAxisTickCount: \"xAxisTickCount\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c6,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function XAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\");\n      ɵngcc0.ɵɵtemplate(1, XAxisComponent__svg_g_1_Template, 1, 12, \"g\", 0);\n      ɵngcc0.ɵɵtemplate(2, XAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"class\", ctx.xAxisClassName)(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xScale);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  directives: [ɵngcc1.NgIf, XAxisTicksComponent, AxisLabelComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\nXAxisComponent.propDecorators = {\n  xScale: [{\n    type: Input\n  }],\n  dims: [{\n    type: Input\n  }],\n  trimTicks: [{\n    type: Input\n  }],\n  rotateTicks: [{\n    type: Input\n  }],\n  maxTickLength: [{\n    type: Input\n  }],\n  tickFormatting: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  showLabel: [{\n    type: Input\n  }],\n  labelText: [{\n    type: Input\n  }],\n  ticks: [{\n    type: Input\n  }],\n  xAxisTickInterval: [{\n    type: Input\n  }],\n  xAxisTickCount: [{\n    type: Input\n  }],\n  xOrient: [{\n    type: Input\n  }],\n  xAxisOffset: [{\n    type: Input\n  }],\n  dimensionsChanged: [{\n    type: Output\n  }],\n  ticksComponent: [{\n    type: ViewChild,\n    args: [XAxisTicksComponent]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(XAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis]',\n      template: \"\\n    <svg:g [attr.class]=\\\"xAxisClassName\\\" [attr.transform]=\\\"transform\\\">\\n      <svg:g\\n        ngx-charts-x-axis-ticks\\n        *ngIf=\\\"xScale\\\"\\n        [trimTicks]=\\\"trimTicks\\\"\\n        [rotateTicks]=\\\"rotateTicks\\\"\\n        [maxTickLength]=\\\"maxTickLength\\\"\\n        [tickFormatting]=\\\"tickFormatting\\\"\\n        [tickArguments]=\\\"tickArguments\\\"\\n        [tickStroke]=\\\"tickStroke\\\"\\n        [scale]=\\\"xScale\\\"\\n        [orient]=\\\"xOrient\\\"\\n        [showGridLines]=\\\"showGridLines\\\"\\n        [gridLineHeight]=\\\"dims.height\\\"\\n        [width]=\\\"dims.width\\\"\\n        [tickValues]=\\\"ticks\\\"\\n        (dimensionsChanged)=\\\"emitTicksHeight($event)\\\"\\n      />\\n      <svg:g\\n        ngx-charts-axis-label\\n        *ngIf=\\\"showLabel\\\"\\n        [label]=\\\"labelText\\\"\\n        [offset]=\\\"labelOffset\\\"\\n        [orient]=\\\"'bottom'\\\"\\n        [height]=\\\"dims.height\\\"\\n        [width]=\\\"dims.width\\\"\\n      ></svg:g>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    rotateTicks: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    xOrient: [{\n      type: Input\n    }],\n    xAxisOffset: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    xScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    xAxisTickInterval: [{\n      type: Input\n    }],\n    xAxisTickCount: [{\n      type: Input\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [XAxisTicksComponent]\n    }]\n  });\n})();\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\n\n\nfunction roundedRect(x, y, w, h, r, _ref2) {\n  var _ref3 = _slicedToArray(_ref2, 4),\n      tl = _ref3[0],\n      tr = _ref3[1],\n      bl = _ref3[2],\n      br = _ref3[3];\n\n  var retval = '';\n  w = Math.floor(w);\n  h = Math.floor(h);\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n  retval = \"M\".concat([x + r, y]);\n  retval += \"h\".concat(w - 2 * r);\n\n  if (tr) {\n    retval += \"a\".concat([r, r], \" 0 0 1 \").concat([r, r]);\n  } else {\n    retval += \"h\".concat(r, \"v\").concat(r);\n  }\n\n  retval += \"v\".concat(h - 2 * r);\n\n  if (br) {\n    retval += \"a\".concat([r, r], \" 0 0 1 \").concat([-r, r]);\n  } else {\n    retval += \"v\".concat(r, \"h\").concat(-r);\n  }\n\n  retval += \"h\".concat(2 * r - w);\n\n  if (bl) {\n    retval += \"a\".concat([r, r], \" 0 0 1 \").concat([-r, -r]);\n  } else {\n    retval += \"h\".concat(-r, \"v\").concat(-r);\n  }\n\n  retval += \"v\".concat(2 * r - h);\n\n  if (tl) {\n    retval += \"a\".concat([r, r], \" 0 0 1 \").concat([r, -r]);\n  } else {\n    retval += \"v\".concat(-r, \"h\").concat(r);\n  }\n\n  retval += \"z\";\n  return retval;\n}\n\nvar YAxisTicksComponent = /*#__PURE__*/function () {\n  function YAxisTicksComponent() {\n    _classCallCheck(this, YAxisTicksComponent);\n\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.showRefLabels = false;\n    this.showRefLines = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.innerTickSize = 6;\n    this.tickPadding = 3;\n    this.verticalSpacing = 20;\n    this.textAnchor = 'middle';\n    this.width = 0;\n    this.outerTickSize = 6;\n    this.rotateLabels = false;\n    this.referenceLineLength = 0;\n  }\n\n  _createClass(YAxisTicksComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this10 = this;\n\n      setTimeout(function () {\n        return _this10.updateDims();\n      });\n    }\n  }, {\n    key: \"updateDims\",\n    value: function updateDims() {\n      var _this11 = this;\n\n      var width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n\n      if (width !== this.width) {\n        this.width = width;\n        this.dimensionsChanged.emit({\n          width: width\n        });\n        setTimeout(function () {\n          return _this11.updateDims();\n        });\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this12 = this;\n\n      var scale;\n      var sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\n      this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n      scale = this.scale;\n      this.ticks = this.getTicks();\n\n      if (this.tickFormatting) {\n        this.tickFormat = this.tickFormatting;\n      } else if (scale.tickFormat) {\n        this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n      } else {\n        this.tickFormat = function (d) {\n          if (d.constructor.name === 'Date') {\n            return d.toLocaleDateString();\n          }\n\n          return d.toLocaleString();\n        };\n      }\n\n      this.adjustedScale = scale.bandwidth ? function (d) {\n        return scale(d) + scale.bandwidth() * 0.5;\n      } : scale;\n\n      if (this.showRefLines && this.referenceLines) {\n        this.setReferencelines();\n      }\n\n      switch (this.orient) {\n        case 'top':\n          this.transform = function (tick) {\n            return 'translate(' + this.adjustedScale(tick) + ',0)';\n          };\n\n          this.textAnchor = 'middle';\n          this.y2 = this.innerTickSize * sign;\n          this.y1 = this.tickSpacing * sign;\n          this.dy = sign < 0 ? '0em' : '.71em';\n          break;\n\n        case 'bottom':\n          this.transform = function (tick) {\n            return 'translate(' + this.adjustedScale(tick) + ',0)';\n          };\n\n          this.textAnchor = 'middle';\n          this.y2 = this.innerTickSize * sign;\n          this.y1 = this.tickSpacing * sign;\n          this.dy = sign < 0 ? '0em' : '.71em';\n          break;\n\n        case 'left':\n          this.transform = function (tick) {\n            return 'translate(0,' + this.adjustedScale(tick) + ')';\n          };\n\n          this.textAnchor = 'end';\n          this.x2 = this.innerTickSize * -sign;\n          this.x1 = this.tickSpacing * -sign;\n          this.dy = '.32em';\n          break;\n\n        case 'right':\n          this.transform = function (tick) {\n            return 'translate(0,' + this.adjustedScale(tick) + ')';\n          };\n\n          this.textAnchor = 'start';\n          this.x2 = this.innerTickSize * -sign;\n          this.x1 = this.tickSpacing * -sign;\n          this.dy = '.32em';\n          break;\n\n        default:\n      }\n\n      setTimeout(function () {\n        return _this12.updateDims();\n      });\n    }\n  }, {\n    key: \"setReferencelines\",\n    value: function setReferencelines() {\n      this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(function (item) {\n        return item.value;\n      })));\n      this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(function (item) {\n        return item.value;\n      })));\n      this.referenceLineLength = this.referenceLines.length;\n      this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [false, false, false, false]);\n    }\n  }, {\n    key: \"getTicks\",\n    value: function getTicks() {\n      var ticks;\n      var maxTicks = this.getMaxTicks(20);\n      var maxScaleTicks = this.getMaxTicks(50);\n\n      if (this.tickValues) {\n        ticks = this.tickValues;\n      } else if (this.scale.ticks) {\n        ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n      } else {\n        ticks = this.scale.domain();\n        ticks = reduceTicks(ticks, maxTicks);\n      }\n\n      return ticks;\n    }\n  }, {\n    key: \"getMaxTicks\",\n    value: function getMaxTicks(tickHeight) {\n      return Math.floor(this.height / tickHeight);\n    }\n  }, {\n    key: \"tickTransform\",\n    value: function tickTransform(tick) {\n      return \"translate(\".concat(this.adjustedScale(tick), \",\").concat(this.verticalSpacing, \")\");\n    }\n  }, {\n    key: \"gridLineTransform\",\n    value: function gridLineTransform() {\n      return \"translate(5,0)\";\n    }\n  }, {\n    key: \"tickTrim\",\n    value: function tickTrim(label) {\n      return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n  }]);\n\n  return YAxisTicksComponent;\n}();\n\nYAxisTicksComponent.ɵfac = function YAxisTicksComponent_Factory(t) {\n  return new (t || YAxisTicksComponent)();\n};\n\nYAxisTicksComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: YAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis-ticks\", \"\"]],\n  viewQuery: function YAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c4, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    tickArguments: \"tickArguments\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    showGridLines: \"showGridLines\",\n    showRefLabels: \"showRefLabels\",\n    showRefLines: \"showRefLines\",\n    scale: \"scale\",\n    orient: \"orient\",\n    tickValues: \"tickValues\",\n    tickFormatting: \"tickFormatting\",\n    gridLineWidth: \"gridLineWidth\",\n    height: \"height\",\n    referenceLines: \"referenceLines\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c7,\n  decls: 6,\n  vars: 4,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"reference-area\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [\"stroke-width\", \"0.01\"], [1, \"reference-area\"], [4, \"ngIf\"], [\"class\", \"gridline-path gridline-path-horizontal\", \"x1\", \"0\", 4, \"ngIf\"], [\"x1\", \"0\", 1, \"gridline-path\", \"gridline-path-horizontal\"], [\"x1\", \"0\", 1, \"refline-path\", \"gridline-path-horizontal\"], [1, \"refline-label\"]],\n  template: function YAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\", null, 0);\n      ɵngcc0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_2_Template, 5, 9, \"g\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, YAxisTicksComponent__svg_path_3_Template, 1, 2, \"path\", 2);\n      ɵngcc0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_4_Template, 2, 2, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.referenceLineLength > 1 && ctx.refMax && ctx.refMin && ctx.showRefLines);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.referenceLines);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\nYAxisTicksComponent.propDecorators = {\n  scale: [{\n    type: Input\n  }],\n  orient: [{\n    type: Input\n  }],\n  tickArguments: [{\n    type: Input\n  }],\n  tickValues: [{\n    type: Input\n  }],\n  tickStroke: [{\n    type: Input\n  }],\n  trimTicks: [{\n    type: Input\n  }],\n  maxTickLength: [{\n    type: Input\n  }],\n  tickFormatting: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  gridLineWidth: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  referenceLines: [{\n    type: Input\n  }],\n  showRefLabels: [{\n    type: Input\n  }],\n  showRefLines: [{\n    type: Input\n  }],\n  dimensionsChanged: [{\n    type: Output\n  }],\n  ticksElement: [{\n    type: ViewChild,\n    args: ['ticksel']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(YAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis-ticks]',\n      template: \"\\n    <svg:g #ticksel>\\n      <svg:g *ngFor=\\\"let tick of ticks\\\" class=\\\"tick\\\" [attr.transform]=\\\"transform(tick)\\\">\\n        <title>{{ tickFormat(tick) }}</title>\\n        <svg:text\\n          stroke-width=\\\"0.01\\\"\\n          [attr.dy]=\\\"dy\\\"\\n          [attr.x]=\\\"x1\\\"\\n          [attr.y]=\\\"y1\\\"\\n          [attr.text-anchor]=\\\"textAnchor\\\"\\n          [style.font-size]=\\\"'12px'\\\"\\n        >\\n          {{ tickTrim(tickFormat(tick)) }}\\n        </svg:text>\\n      </svg:g>\\n    </svg:g>\\n\\n    <svg:path\\n      *ngIf=\\\"referenceLineLength > 1 && refMax && refMin && showRefLines\\\"\\n      class=\\\"reference-area\\\"\\n      [attr.d]=\\\"referenceAreaPath\\\"\\n      [attr.transform]=\\\"gridLineTransform()\\\"\\n    />\\n    <svg:g *ngFor=\\\"let tick of ticks\\\" [attr.transform]=\\\"transform(tick)\\\">\\n      <svg:g *ngIf=\\\"showGridLines\\\" [attr.transform]=\\\"gridLineTransform()\\\">\\n        <svg:line\\n          *ngIf=\\\"orient === 'left'\\\"\\n          class=\\\"gridline-path gridline-path-horizontal\\\"\\n          x1=\\\"0\\\"\\n          [attr.x2]=\\\"gridLineWidth\\\"\\n        />\\n        <svg:line\\n          *ngIf=\\\"orient === 'right'\\\"\\n          class=\\\"gridline-path gridline-path-horizontal\\\"\\n          x1=\\\"0\\\"\\n          [attr.x2]=\\\"-gridLineWidth\\\"\\n        />\\n      </svg:g>\\n    </svg:g>\\n\\n    <svg:g *ngFor=\\\"let refLine of referenceLines\\\">\\n      <svg:g *ngIf=\\\"showRefLines\\\" [attr.transform]=\\\"transform(refLine.value)\\\">\\n        <svg:line\\n          class=\\\"refline-path gridline-path-horizontal\\\"\\n          x1=\\\"0\\\"\\n          [attr.x2]=\\\"gridLineWidth\\\"\\n          [attr.transform]=\\\"gridLineTransform()\\\"\\n        />\\n        <svg:g *ngIf=\\\"showRefLabels\\\">\\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\\n          <svg:text\\n            class=\\\"refline-label\\\"\\n            [attr.dy]=\\\"dy\\\"\\n            [attr.y]=\\\"-6\\\"\\n            [attr.x]=\\\"gridLineWidth\\\"\\n            [attr.text-anchor]=\\\"textAnchor\\\"\\n          >\\n            {{ refLine.name }}\\n          </svg:text>\\n        </svg:g>\\n      </svg:g>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    tickArguments: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    gridLineWidth: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\n\nvar YAxisComponent = /*#__PURE__*/function () {\n  function YAxisComponent() {\n    _classCallCheck(this, YAxisComponent);\n\n    this.showGridLines = false;\n    this.yOrient = 'left';\n    this.yAxisOffset = 0;\n    this.dimensionsChanged = new EventEmitter();\n    this.yAxisClassName = 'y axis';\n    this.labelOffset = 15;\n    this.fill = 'none';\n    this.stroke = '#CCC';\n    this.tickStroke = '#CCC';\n    this.strokeWidth = 1;\n    this.padding = 5;\n  }\n\n  _createClass(YAxisComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.offset = -(this.yAxisOffset + this.padding);\n\n      if (this.yOrient === 'right') {\n        this.labelOffset = 65;\n        this.transform = \"translate(\".concat(this.offset + this.dims.width, \" , 0)\");\n      } else {\n        this.offset = this.offset;\n        this.transform = \"translate(\".concat(this.offset, \" , 0)\");\n      }\n\n      if (this.yAxisTickCount !== undefined) {\n        this.tickArguments = [this.yAxisTickCount];\n      }\n    }\n  }, {\n    key: \"emitTicksWidth\",\n    value: function emitTicksWidth(_ref4) {\n      var _this13 = this;\n\n      var width = _ref4.width;\n\n      if (width !== this.labelOffset && this.yOrient === 'right') {\n        this.labelOffset = width + this.labelOffset;\n        setTimeout(function () {\n          _this13.dimensionsChanged.emit({\n            width: width\n          });\n        }, 0);\n      } else if (width !== this.labelOffset) {\n        this.labelOffset = width;\n        setTimeout(function () {\n          _this13.dimensionsChanged.emit({\n            width: width\n          });\n        }, 0);\n      }\n    }\n  }]);\n\n  return YAxisComponent;\n}();\n\nYAxisComponent.ɵfac = function YAxisComponent_Factory(t) {\n  return new (t || YAxisComponent)();\n};\n\nYAxisComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: YAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis\", \"\"]],\n  viewQuery: function YAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(YAxisTicksComponent, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    showGridLines: \"showGridLines\",\n    yOrient: \"yOrient\",\n    yAxisOffset: \"yAxisOffset\",\n    yScale: \"yScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    ticks: \"ticks\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    yAxisTickInterval: \"yAxisTickInterval\",\n    yAxisTickCount: \"yAxisTickCount\",\n    referenceLines: \"referenceLines\",\n    showRefLines: \"showRefLines\",\n    showRefLabels: \"showRefLabels\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c8,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function YAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\");\n      ɵngcc0.ɵɵtemplate(1, YAxisComponent__svg_g_1_Template, 1, 14, \"g\", 0);\n      ɵngcc0.ɵɵtemplate(2, YAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"class\", ctx.yAxisClassName)(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yScale);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  directives: [ɵngcc1.NgIf, YAxisTicksComponent, AxisLabelComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\nYAxisComponent.propDecorators = {\n  yScale: [{\n    type: Input\n  }],\n  dims: [{\n    type: Input\n  }],\n  trimTicks: [{\n    type: Input\n  }],\n  maxTickLength: [{\n    type: Input\n  }],\n  tickFormatting: [{\n    type: Input\n  }],\n  ticks: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  showLabel: [{\n    type: Input\n  }],\n  labelText: [{\n    type: Input\n  }],\n  yAxisTickInterval: [{\n    type: Input\n  }],\n  yAxisTickCount: [{\n    type: Input\n  }],\n  yOrient: [{\n    type: Input\n  }],\n  referenceLines: [{\n    type: Input\n  }],\n  showRefLines: [{\n    type: Input\n  }],\n  showRefLabels: [{\n    type: Input\n  }],\n  yAxisOffset: [{\n    type: Input\n  }],\n  dimensionsChanged: [{\n    type: Output\n  }],\n  ticksComponent: [{\n    type: ViewChild,\n    args: [YAxisTicksComponent]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(YAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis]',\n      template: \"\\n    <svg:g [attr.class]=\\\"yAxisClassName\\\" [attr.transform]=\\\"transform\\\">\\n      <svg:g\\n        ngx-charts-y-axis-ticks\\n        *ngIf=\\\"yScale\\\"\\n        [trimTicks]=\\\"trimTicks\\\"\\n        [maxTickLength]=\\\"maxTickLength\\\"\\n        [tickFormatting]=\\\"tickFormatting\\\"\\n        [tickArguments]=\\\"tickArguments\\\"\\n        [tickValues]=\\\"ticks\\\"\\n        [tickStroke]=\\\"tickStroke\\\"\\n        [scale]=\\\"yScale\\\"\\n        [orient]=\\\"yOrient\\\"\\n        [showGridLines]=\\\"showGridLines\\\"\\n        [gridLineWidth]=\\\"dims.width\\\"\\n        [referenceLines]=\\\"referenceLines\\\"\\n        [showRefLines]=\\\"showRefLines\\\"\\n        [showRefLabels]=\\\"showRefLabels\\\"\\n        [height]=\\\"dims.height\\\"\\n        (dimensionsChanged)=\\\"emitTicksWidth($event)\\\"\\n      />\\n\\n      <svg:g\\n        ngx-charts-axis-label\\n        *ngIf=\\\"showLabel\\\"\\n        [label]=\\\"labelText\\\"\\n        [offset]=\\\"labelOffset\\\"\\n        [orient]=\\\"yOrient\\\"\\n        [height]=\\\"dims.height\\\"\\n        [width]=\\\"dims.width\\\"\\n      ></svg:g>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    showGridLines: [{\n      type: Input\n    }],\n    yOrient: [{\n      type: Input\n    }],\n    yAxisOffset: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    yScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    yAxisTickInterval: [{\n      type: Input\n    }],\n    yAxisTickCount: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [YAxisTicksComponent]\n    }]\n  });\n})();\n\nvar AxesModule = function AxesModule() {\n  _classCallCheck(this, AxesModule);\n};\n\nAxesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AxesModule\n});\nAxesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AxesModule_Factory(t) {\n    return new (t || AxesModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AxesModule, {\n    declarations: function declarations() {\n      return [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AxesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n      exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n    }]\n  }], null, null);\n})();\n\nvar StyleTypes;\n\n(function (StyleTypes) {\n  StyleTypes[StyleTypes[\"popover\"] = 'popover'] = \"popover\";\n  StyleTypes[StyleTypes[\"tooltip\"] = 'tooltip'] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar AlignmentTypes;\n\n(function (AlignmentTypes) {\n  AlignmentTypes[AlignmentTypes[\"left\"] = 'left'] = \"left\";\n  AlignmentTypes[AlignmentTypes[\"center\"] = 'center'] = \"center\";\n  AlignmentTypes[AlignmentTypes[\"right\"] = 'right'] = \"right\";\n})(AlignmentTypes || (AlignmentTypes = {}));\n\nvar ShowTypes;\n\n(function (ShowTypes) {\n  ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n  ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n  ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nvar TooltipDirective = /*#__PURE__*/function () {\n  function TooltipDirective(tooltipService, viewContainerRef, renderer) {\n    _classCallCheck(this, TooltipDirective);\n\n    this.tooltipService = tooltipService;\n    this.viewContainerRef = viewContainerRef;\n    this.renderer = renderer;\n    this.tooltipCssClass = '';\n    this.tooltipTitle = '';\n    this.tooltipAppendToBody = true;\n    this.tooltipSpacing = 10;\n    this.tooltipDisabled = false;\n    this.tooltipShowCaret = true;\n    this.tooltipPlacement = PlacementTypes.top;\n    this.tooltipAlignment = AlignmentTypes.center;\n    this.tooltipType = StyleTypes.popover;\n    this.tooltipCloseOnClickOutside = true;\n    this.tooltipCloseOnMouseLeave = true;\n    this.tooltipHideTimeout = 300;\n    this.tooltipShowTimeout = 100;\n    this.tooltipShowEvent = ShowTypes.all;\n    this.tooltipImmediateExit = false;\n    this.show = new EventEmitter();\n    this.hide = new EventEmitter();\n  }\n\n  _createClass(TooltipDirective, [{\n    key: \"listensForFocus\",\n    get: function get() {\n      return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n    }\n  }, {\n    key: \"listensForHover\",\n    get: function get() {\n      return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.hideTooltip(true);\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      if (this.listensForFocus) {\n        this.showTooltip();\n      }\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      if (this.listensForFocus) {\n        this.hideTooltip(true);\n      }\n    }\n  }, {\n    key: \"onMouseEnter\",\n    value: function onMouseEnter() {\n      if (this.listensForHover) {\n        this.showTooltip();\n      }\n    }\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave(target) {\n      if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n        clearTimeout(this.timeout);\n\n        if (this.component) {\n          var contentDom = this.component.instance.element.nativeElement;\n          var contains = contentDom.contains(target);\n          if (contains) return;\n        }\n\n        this.hideTooltip(this.tooltipImmediateExit);\n      }\n    }\n  }, {\n    key: \"onMouseClick\",\n    value: function onMouseClick() {\n      if (this.listensForHover) {\n        this.hideTooltip(true);\n      }\n    }\n  }, {\n    key: \"showTooltip\",\n    value: function showTooltip(immediate) {\n      var _this14 = this;\n\n      if (this.component || this.tooltipDisabled) return;\n      var time = immediate ? 0 : this.tooltipShowTimeout;\n      clearTimeout(this.timeout);\n      this.timeout = setTimeout(function () {\n        _this14.tooltipService.destroyAll();\n\n        var options = _this14.createBoundOptions();\n\n        _this14.component = _this14.tooltipService.create(options); // add a tiny timeout to avoid event re-triggers\n\n        setTimeout(function () {\n          if (_this14.component) {\n            _this14.addHideListeners(_this14.component.instance.element.nativeElement);\n          }\n        }, 10);\n\n        _this14.show.emit(true);\n      }, time);\n    }\n  }, {\n    key: \"addHideListeners\",\n    value: function addHideListeners(tooltip) {\n      var _this15 = this;\n\n      // on mouse enter, cancel the hide triggered by the leave\n      this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', function () {\n        clearTimeout(_this15.timeout);\n      }); // content mouse leave listener\n\n      if (this.tooltipCloseOnMouseLeave) {\n        this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', function () {\n          _this15.hideTooltip(_this15.tooltipImmediateExit);\n        });\n      } // content close on click outside\n\n\n      if (this.tooltipCloseOnClickOutside) {\n        this.documentClickEvent = this.renderer.listen(document, 'click', function (event) {\n          var contains = tooltip.contains(event.target);\n          if (!contains) _this15.hideTooltip();\n        });\n      }\n    }\n  }, {\n    key: \"hideTooltip\",\n    value: function hideTooltip() {\n      var _this16 = this;\n\n      var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.component) return;\n\n      var destroyFn = function destroyFn() {\n        // remove events\n        if (_this16.mouseLeaveContentEvent) _this16.mouseLeaveContentEvent();\n        if (_this16.mouseEnterContentEvent) _this16.mouseEnterContentEvent();\n        if (_this16.documentClickEvent) _this16.documentClickEvent(); // emit events\n\n        _this16.hide.emit(true); // destroy component\n\n\n        _this16.tooltipService.destroy(_this16.component);\n\n        _this16.component = undefined;\n      };\n\n      clearTimeout(this.timeout);\n\n      if (!immediate) {\n        this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n      } else {\n        destroyFn();\n      }\n    }\n  }, {\n    key: \"createBoundOptions\",\n    value: function createBoundOptions() {\n      return {\n        title: this.tooltipTitle,\n        template: this.tooltipTemplate,\n        host: this.viewContainerRef.element,\n        placement: this.tooltipPlacement,\n        alignment: this.tooltipAlignment,\n        type: this.tooltipType,\n        showCaret: this.tooltipShowCaret,\n        cssClass: this.tooltipCssClass,\n        spacing: this.tooltipSpacing,\n        context: this.tooltipContext\n      };\n    }\n  }]);\n\n  return TooltipDirective;\n}();\n\nTooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n  return new (t || TooltipDirective)(ɵngcc0.ɵɵdirectiveInject(TooltipService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nTooltipDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TooltipDirective,\n  selectors: [[\"\", \"ngx-tooltip\", \"\"]],\n  hostBindings: function TooltipDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focusin\", function TooltipDirective_focusin_HostBindingHandler() {\n        return ctx.onFocus();\n      })(\"blur\", function TooltipDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"mouseenter\", function TooltipDirective_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function TooltipDirective_mouseleave_HostBindingHandler($event) {\n        return ctx.onMouseLeave($event.target);\n      })(\"click\", function TooltipDirective_click_HostBindingHandler() {\n        return ctx.onMouseClick();\n      });\n    }\n  },\n  inputs: {\n    tooltipCssClass: \"tooltipCssClass\",\n    tooltipTitle: \"tooltipTitle\",\n    tooltipAppendToBody: \"tooltipAppendToBody\",\n    tooltipSpacing: \"tooltipSpacing\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipShowCaret: \"tooltipShowCaret\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipAlignment: \"tooltipAlignment\",\n    tooltipType: \"tooltipType\",\n    tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\",\n    tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\",\n    tooltipHideTimeout: \"tooltipHideTimeout\",\n    tooltipShowTimeout: \"tooltipShowTimeout\",\n    tooltipShowEvent: \"tooltipShowEvent\",\n    tooltipImmediateExit: \"tooltipImmediateExit\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipContext: \"tooltipContext\"\n  },\n  outputs: {\n    show: \"show\",\n    hide: \"hide\"\n  }\n});\n\nTooltipDirective.ctorParameters = function () {\n  return [{\n    type: TooltipService\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: Renderer2\n  }];\n};\n\nTooltipDirective.propDecorators = {\n  tooltipCssClass: [{\n    type: Input\n  }],\n  tooltipTitle: [{\n    type: Input\n  }],\n  tooltipAppendToBody: [{\n    type: Input\n  }],\n  tooltipSpacing: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipShowCaret: [{\n    type: Input\n  }],\n  tooltipPlacement: [{\n    type: Input\n  }],\n  tooltipAlignment: [{\n    type: Input\n  }],\n  tooltipType: [{\n    type: Input\n  }],\n  tooltipCloseOnClickOutside: [{\n    type: Input\n  }],\n  tooltipCloseOnMouseLeave: [{\n    type: Input\n  }],\n  tooltipHideTimeout: [{\n    type: Input\n  }],\n  tooltipShowTimeout: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  tooltipShowEvent: [{\n    type: Input\n  }],\n  tooltipContext: [{\n    type: Input\n  }],\n  tooltipImmediateExit: [{\n    type: Input\n  }],\n  show: [{\n    type: Output\n  }],\n  hide: [{\n    type: Output\n  }],\n  onFocus: [{\n    type: HostListener,\n    args: ['focusin']\n  }],\n  onBlur: [{\n    type: HostListener,\n    args: ['blur']\n  }],\n  onMouseEnter: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  onMouseLeave: [{\n    type: HostListener,\n    args: ['mouseleave', ['$event.target']]\n  }],\n  onMouseClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TooltipDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-tooltip]'\n    }]\n  }], function () {\n    return [{\n      type: TooltipService\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    tooltipCssClass: [{\n      type: Input\n    }],\n    tooltipTitle: [{\n      type: Input\n    }],\n    tooltipAppendToBody: [{\n      type: Input\n    }],\n    tooltipSpacing: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipShowCaret: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipAlignment: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    tooltipCloseOnClickOutside: [{\n      type: Input\n    }],\n    tooltipCloseOnMouseLeave: [{\n      type: Input\n    }],\n    tooltipHideTimeout: [{\n      type: Input\n    }],\n    tooltipShowTimeout: [{\n      type: Input\n    }],\n    tooltipShowEvent: [{\n      type: Input\n    }],\n    tooltipImmediateExit: [{\n      type: Input\n    }],\n    show: [{\n      type: Output\n    }],\n    hide: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focusin']\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave', ['$event.target']]\n    }],\n    onMouseClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipContext: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TooltipModule = function TooltipModule() {\n  _classCallCheck(this, TooltipModule);\n};\n\nTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TooltipModule\n});\nTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TooltipModule_Factory(t) {\n    return new (t || TooltipModule)();\n  },\n  providers: [InjectionService, TooltipService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TooltipModule, {\n    declarations: function declarations() {\n      return [TooltipContentComponent, TooltipDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [TooltipContentComponent, TooltipDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TooltipModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TooltipContentComponent, TooltipDirective],\n      providers: [InjectionService, TooltipService],\n      exports: [TooltipContentComponent, TooltipDirective],\n      imports: [CommonModule],\n      entryComponents: [TooltipContentComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\n\n\nfunction formatLabel(label) {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\n\n\nfunction escapeLabel(label) {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, function (match) {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n\nvar cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\n\nfunction id() {\n  var newId = ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4); // append a 'a' because neo gets mad\n\n  newId = \"a\".concat(newId); // ensure not already used\n\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n\nvar CircleSeriesComponent = /*#__PURE__*/function () {\n  function CircleSeriesComponent() {\n    _classCallCheck(this, CircleSeriesComponent);\n\n    this.type = 'standard';\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barVisible = false;\n  }\n\n  _createClass(CircleSeriesComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.gradientId = 'grad' + id().toString();\n      this.gradientFill = \"url(#\".concat(this.gradientId, \")\");\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.circle = this.getActiveCircle();\n    }\n  }, {\n    key: \"getActiveCircle\",\n    value: function getActiveCircle() {\n      var _this17 = this;\n\n      var indexActiveDataPoint = this.data.series.findIndex(function (d) {\n        var label = d.name;\n        return label && _this17.visibleValue && label.toString() === _this17.visibleValue.toString() && d.value !== undefined;\n      });\n\n      if (indexActiveDataPoint === -1) {\n        // No valid point is 'active/hovered over' at this moment.\n        return undefined;\n      }\n\n      return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n    }\n  }, {\n    key: \"mapDataPointToCircle\",\n    value: function mapDataPointToCircle(d, i) {\n      var seriesName = this.data.name;\n      var value = d.value;\n      var label = d.name;\n      var tooltipLabel = formatLabel(label);\n      var cx;\n\n      if (this.scaleType === 'time') {\n        cx = this.xScale(label);\n      } else if (this.scaleType === 'linear') {\n        cx = this.xScale(Number(label));\n      } else {\n        cx = this.xScale(label);\n      }\n\n      var cy = this.yScale(this.type === 'standard' ? value : d.d1);\n      var radius = 5;\n      var height = this.yScale.range()[0] - cy;\n      var opacity = 1;\n      var color;\n\n      if (this.colors.scaleType === 'linear') {\n        if (this.type === 'standard') {\n          color = this.colors.getColor(value);\n        } else {\n          color = this.colors.getColor(d.d1);\n        }\n      } else {\n        color = this.colors.getColor(seriesName);\n      }\n\n      var data = Object.assign({}, d, {\n        series: seriesName,\n        value: value,\n        name: label\n      });\n      return {\n        classNames: [\"circle-data-\".concat(i)],\n        value: value,\n        label: label,\n        data: data,\n        cx: cx,\n        cy: cy,\n        radius: radius,\n        height: height,\n        tooltipLabel: tooltipLabel,\n        color: color,\n        opacity: opacity,\n        seriesName: seriesName,\n        gradientStops: this.getGradientStops(color),\n        min: d.min,\n        max: d.max\n      };\n    }\n  }, {\n    key: \"getTooltipText\",\n    value: function getTooltipText(_ref5) {\n      var tooltipLabel = _ref5.tooltipLabel,\n          value = _ref5.value,\n          seriesName = _ref5.seriesName,\n          min = _ref5.min,\n          max = _ref5.max;\n      return \"\\n      <span class=\\\"tooltip-label\\\">\".concat(escapeLabel(seriesName), \" \\u2022 \").concat(escapeLabel(tooltipLabel), \"</span>\\n      <span class=\\\"tooltip-val\\\">\").concat(value.toLocaleString()).concat(this.getTooltipMinMaxText(min, max), \"</span>\\n    \");\n    }\n  }, {\n    key: \"getTooltipMinMaxText\",\n    value: function getTooltipMinMaxText(min, max) {\n      if (min !== undefined || max !== undefined) {\n        var result = ' (';\n\n        if (min !== undefined) {\n          if (max === undefined) {\n            result += '≥';\n          }\n\n          result += min.toLocaleString();\n\n          if (max !== undefined) {\n            result += ' - ';\n          }\n        } else if (max !== undefined) {\n          result += '≤';\n        }\n\n        if (max !== undefined) {\n          result += max.toLocaleString();\n        }\n\n        result += ')';\n        return result;\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: \"getGradientStops\",\n    value: function getGradientStops(color) {\n      return [{\n        offset: 0,\n        color: color,\n        opacity: 0.2\n      }, {\n        offset: 100,\n        color: color,\n        opacity: 1\n      }];\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(entry) {\n      if (!this.activeEntries) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name;\n      });\n      return item !== undefined;\n    }\n  }, {\n    key: \"activateCircle\",\n    value: function activateCircle() {\n      this.barVisible = true;\n      this.activate.emit({\n        name: this.data.name\n      });\n    }\n  }, {\n    key: \"deactivateCircle\",\n    value: function deactivateCircle() {\n      this.barVisible = false;\n      this.circle.opacity = 0;\n      this.deactivate.emit({\n        name: this.data.name\n      });\n    }\n  }]);\n\n  return CircleSeriesComponent;\n}();\n\nCircleSeriesComponent.ɵfac = function CircleSeriesComponent_Factory(t) {\n  return new (t || CircleSeriesComponent)();\n};\n\nCircleSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CircleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-circle-series\", \"\"]],\n  inputs: {\n    type: \"type\",\n    tooltipDisabled: \"tooltipDisabled\",\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c9,\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\"], [\"class\", \"tooltip-bar\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [1, \"tooltip-bar\"]],\n  template: function CircleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, CircleSeriesComponent__svg_g_0_Template, 5, 20, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.circle);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgIf, SvgLinearGradientComponent, CircleComponent, TooltipDirective];\n  },\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 1\n    }))])])]\n  },\n  changeDetection: 0\n});\nCircleSeriesComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  xScale: [{\n    type: Input\n  }],\n  yScale: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  scaleType: [{\n    type: Input\n  }],\n  visibleValue: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CircleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle-series]',\n      template: \"\\n    <svg:g *ngIf=\\\"circle\\\">\\n      <defs>\\n        <svg:g\\n          ngx-charts-svg-linear-gradient\\n          orientation=\\\"vertical\\\"\\n          [name]=\\\"gradientId\\\"\\n          [stops]=\\\"circle.gradientStops\\\"\\n        />\\n      </defs>\\n      <svg:rect\\n        *ngIf=\\\"barVisible && type === 'standard'\\\"\\n        [@animationState]=\\\"'active'\\\"\\n        [attr.x]=\\\"circle.cx - circle.radius\\\"\\n        [attr.y]=\\\"circle.cy\\\"\\n        [attr.width]=\\\"circle.radius * 2\\\"\\n        [attr.height]=\\\"circle.height\\\"\\n        [attr.fill]=\\\"gradientFill\\\"\\n        class=\\\"tooltip-bar\\\"\\n      />\\n      <svg:g\\n        ngx-charts-circle\\n        class=\\\"circle\\\"\\n        [cx]=\\\"circle.cx\\\"\\n        [cy]=\\\"circle.cy\\\"\\n        [r]=\\\"circle.radius\\\"\\n        [fill]=\\\"circle.color\\\"\\n        [class.active]=\\\"isActive({ name: circle.seriesName })\\\"\\n        [pointerEvents]=\\\"circle.value === 0 ? 'none' : 'all'\\\"\\n        [data]=\\\"circle.value\\\"\\n        [classNames]=\\\"circle.classNames\\\"\\n        (select)=\\\"onClick(circle.data)\\\"\\n        (activate)=\\\"activateCircle()\\\"\\n        (deactivate)=\\\"deactivateCircle()\\\"\\n        ngx-tooltip\\n        [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n        [tooltipPlacement]=\\\"'top'\\\"\\n        [tooltipType]=\\\"'tooltip'\\\"\\n        [tooltipTitle]=\\\"tooltipTemplate ? undefined : getTooltipText(circle)\\\"\\n        [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n        [tooltipContext]=\\\"circle.data\\\"\\n      />\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 1\n      }))])])]\n    }]\n  }], function () {\n    return [];\n  }, {\n    type: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nvar CircleComponent = /*#__PURE__*/function () {\n  function CircleComponent() {\n    _classCallCheck(this, CircleComponent);\n\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  _createClass(CircleComponent, [{\n    key: \"onClick\",\n    value: function onClick() {\n      this.select.emit(this.data);\n    }\n  }, {\n    key: \"onMouseEnter\",\n    value: function onMouseEnter() {\n      this.activate.emit(this.data);\n    }\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave() {\n      this.deactivate.emit(this.data);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n      this.classNames += 'circle';\n    }\n  }]);\n\n  return CircleComponent;\n}();\n\nCircleComponent.ɵfac = function CircleComponent_Factory(t) {\n  return new (t || CircleComponent)();\n};\n\nCircleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CircleComponent,\n  selectors: [[\"g\", \"ngx-charts-circle\", \"\"]],\n  hostBindings: function CircleComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CircleComponent_click_HostBindingHandler() {\n        return ctx.onClick();\n      })(\"mouseenter\", function CircleComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function CircleComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    classNames: \"classNames\",\n    cx: \"cx\",\n    cy: \"cy\",\n    r: \"r\",\n    fill: \"fill\",\n    stroke: \"stroke\",\n    data: \"data\",\n    circleOpacity: \"circleOpacity\",\n    pointerEvents: \"pointerEvents\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c11,\n  decls: 1,\n  vars: 8,\n  template: function CircleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelement(0, \"circle\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r)(\"fill\", ctx.fill)(\"stroke\", ctx.stroke)(\"opacity\", ctx.circleOpacity)(\"class\", ctx.classNames)(\"pointer-events\", ctx.pointerEvents);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\nCircleComponent.propDecorators = {\n  cx: [{\n    type: Input\n  }],\n  cy: [{\n    type: Input\n  }],\n  r: [{\n    type: Input\n  }],\n  fill: [{\n    type: Input\n  }],\n  stroke: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  classNames: [{\n    type: Input\n  }],\n  circleOpacity: [{\n    type: Input\n  }],\n  pointerEvents: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click']\n  }],\n  onMouseEnter: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  onMouseLeave: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CircleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle]',\n      template: \"\\n    <svg:circle\\n      [attr.cx]=\\\"cx\\\"\\n      [attr.cy]=\\\"cy\\\"\\n      [attr.r]=\\\"r\\\"\\n      [attr.fill]=\\\"fill\\\"\\n      [attr.stroke]=\\\"stroke\\\"\\n      [attr.opacity]=\\\"circleOpacity\\\"\\n      [attr.class]=\\\"classNames\\\"\\n      [attr.pointer-events]=\\\"pointerEvents\\\"\\n    />\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }],\n    classNames: [{\n      type: Input\n    }],\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    r: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    circleOpacity: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }]\n  });\n})();\n\nvar GridPanelComponent = function GridPanelComponent() {\n  _classCallCheck(this, GridPanelComponent);\n};\n\nGridPanelComponent.ɵfac = function GridPanelComponent_Factory(t) {\n  return new (t || GridPanelComponent)();\n};\n\nGridPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: GridPanelComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel\", \"\"]],\n  inputs: {\n    path: \"path\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\"\n  },\n  attrs: _c12,\n  decls: 1,\n  vars: 4,\n  consts: [[\"stroke\", \"none\", 1, \"gridpanel\"]],\n  template: function GridPanelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelement(0, \"rect\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"height\", ctx.height)(\"width\", ctx.width)(\"x\", ctx.x)(\"y\", ctx.y);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\nGridPanelComponent.propDecorators = {\n  path: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  x: [{\n    type: Input\n  }],\n  y: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GridPanelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel]',\n      template: \"\\n    <svg:rect [attr.height]=\\\"height\\\" [attr.width]=\\\"width\\\" [attr.x]=\\\"x\\\" [attr.y]=\\\"y\\\" stroke=\\\"none\\\" class=\\\"gridpanel\\\" />\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    path: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }]\n  });\n})();\n\nvar GridPanelSeriesComponent = /*#__PURE__*/function () {\n  function GridPanelSeriesComponent() {\n    _classCallCheck(this, GridPanelSeriesComponent);\n  }\n\n  _createClass(GridPanelSeriesComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.gridPanels = this.getGridPanels();\n    }\n  }, {\n    key: \"getGridPanels\",\n    value: function getGridPanels() {\n      var _this18 = this;\n\n      return this.data.map(function (d) {\n        var offset;\n        var width;\n        var height;\n        var x;\n        var y;\n        var className = 'odd';\n\n        if (_this18.orient === 'vertical') {\n          var position = _this18.xScale(d.name);\n\n          var positionIndex = Number.parseInt((position / _this18.xScale.step()).toString(), 10);\n\n          if (positionIndex % 2 === 1) {\n            className = 'even';\n          }\n\n          offset = _this18.xScale.bandwidth() * _this18.xScale.paddingInner();\n          width = _this18.xScale.bandwidth() + offset;\n          height = _this18.dims.height;\n          x = _this18.xScale(d.name) - offset / 2;\n          y = 0;\n        } else if (_this18.orient === 'horizontal') {\n          var _position = _this18.yScale(d.name);\n\n          var _positionIndex = Number.parseInt((_position / _this18.yScale.step()).toString(), 10);\n\n          if (_positionIndex % 2 === 1) {\n            className = 'even';\n          }\n\n          offset = _this18.yScale.bandwidth() * _this18.yScale.paddingInner();\n          width = _this18.dims.width;\n          height = _this18.yScale.bandwidth() + offset;\n          x = 0;\n          y = _this18.yScale(d.name) - offset / 2;\n        }\n\n        return {\n          name: d.name,\n          class: className,\n          height: height,\n          width: width,\n          x: x,\n          y: y\n        };\n      });\n    }\n  }]);\n\n  return GridPanelSeriesComponent;\n}();\n\nGridPanelSeriesComponent.ɵfac = function GridPanelSeriesComponent_Factory(t) {\n  return new (t || GridPanelSeriesComponent)();\n};\n\nGridPanelSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: GridPanelSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    orient: \"orient\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c13,\n  decls: 1,\n  vars: 1,\n  consts: [[\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\", \"grid-panel\", \"odd\", \"even\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\"]],\n  template: function GridPanelSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, GridPanelSeriesComponent__svg_g_0_Template, 1, 10, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.gridPanels);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, GridPanelComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\nGridPanelSeriesComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  dims: [{\n    type: Input\n  }],\n  xScale: [{\n    type: Input\n  }],\n  yScale: [{\n    type: Input\n  }],\n  orient: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GridPanelSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel-series]',\n      template: \"\\n    <svg:g\\n      ngx-charts-grid-panel\\n      *ngFor=\\\"let gridPanel of gridPanels\\\"\\n      [height]=\\\"gridPanel.height\\\"\\n      [width]=\\\"gridPanel.width\\\"\\n      [x]=\\\"gridPanel.x\\\"\\n      [y]=\\\"gridPanel.y\\\"\\n      [class.grid-panel]=\\\"true\\\"\\n      [class.odd]=\\\"gridPanel.class === 'odd'\\\"\\n      [class.even]=\\\"gridPanel.class === 'even'\\\"\\n    ></svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }]\n  });\n})();\n\nvar SvgLinearGradientComponent = /*#__PURE__*/function () {\n  function SvgLinearGradientComponent() {\n    _classCallCheck(this, SvgLinearGradientComponent);\n\n    this.orientation = 'vertical';\n  }\n\n  _createClass(SvgLinearGradientComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.x1 = '0%';\n      this.x2 = '0%';\n      this.y1 = '0%';\n      this.y2 = '0%';\n\n      if (this.orientation === 'horizontal') {\n        this.x2 = '100%';\n      } else if (this.orientation === 'vertical') {\n        this.y1 = '100%';\n      }\n    }\n  }]);\n\n  return SvgLinearGradientComponent;\n}();\n\nSvgLinearGradientComponent.ɵfac = function SvgLinearGradientComponent_Factory(t) {\n  return new (t || SvgLinearGradientComponent)();\n};\n\nSvgLinearGradientComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SvgLinearGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-linear-gradient\", \"\"]],\n  inputs: {\n    orientation: \"orientation\",\n    name: \"name\",\n    stops: \"stops\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c14,\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgLinearGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"linearGradient\", 0);\n      ɵngcc0.ɵɵtemplate(1, SvgLinearGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"id\", ctx.name);\n      ɵngcc0.ɵɵattribute(\"x1\", ctx.x1)(\"y1\", ctx.y1)(\"x2\", ctx.x2)(\"y2\", ctx.y2);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  directives: [ɵngcc1.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\nSvgLinearGradientComponent.propDecorators = {\n  orientation: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  stops: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SvgLinearGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-linear-gradient]',\n      template: \"\\n    <svg:linearGradient [id]=\\\"name\\\" [attr.x1]=\\\"x1\\\" [attr.y1]=\\\"y1\\\" [attr.x2]=\\\"x2\\\" [attr.y2]=\\\"y2\\\">\\n      <svg:stop\\n        *ngFor=\\\"let stop of stops\\\"\\n        [attr.offset]=\\\"stop.offset + '%'\\\"\\n        [style.stop-color]=\\\"stop.color\\\"\\n        [style.stop-opacity]=\\\"stop.opacity\\\"\\n      />\\n    </svg:linearGradient>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    orientation: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\n\nvar SvgRadialGradientComponent = /*#__PURE__*/function () {\n  function SvgRadialGradientComponent() {\n    _classCallCheck(this, SvgRadialGradientComponent);\n\n    this.endOpacity = 1;\n    this.cx = 0;\n    this.cy = 0;\n  }\n\n  _createClass(SvgRadialGradientComponent, [{\n    key: \"stops\",\n    get: function get() {\n      return this.stopsInput || this.stopsDefault;\n    },\n    set: function set(value) {\n      this.stopsInput = value;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.r = '30%';\n\n      if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n        this.stopsDefault = [{\n          offset: 0,\n          color: this.color,\n          opacity: this.startOpacity\n        }, {\n          offset: 100,\n          color: this.color,\n          opacity: this.endOpacity\n        }];\n      }\n    }\n  }]);\n\n  return SvgRadialGradientComponent;\n}();\n\nSvgRadialGradientComponent.ɵfac = function SvgRadialGradientComponent_Factory(t) {\n  return new (t || SvgRadialGradientComponent)();\n};\n\nSvgRadialGradientComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SvgRadialGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-radial-gradient\", \"\"]],\n  inputs: {\n    endOpacity: \"endOpacity\",\n    cx: \"cx\",\n    cy: \"cy\",\n    stops: \"stops\",\n    color: \"color\",\n    name: \"name\",\n    startOpacity: \"startOpacity\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c15,\n  decls: 2,\n  vars: 5,\n  consts: [[\"gradientUnits\", \"userSpaceOnUse\", 3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgRadialGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"radialGradient\", 0);\n      ɵngcc0.ɵɵtemplate(1, SvgRadialGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"id\", ctx.name);\n      ɵngcc0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  directives: [ɵngcc1.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\nSvgRadialGradientComponent.propDecorators = {\n  color: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  startOpacity: [{\n    type: Input\n  }],\n  endOpacity: [{\n    type: Input\n  }],\n  cx: [{\n    type: Input\n  }],\n  cy: [{\n    type: Input\n  }],\n  stops: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SvgRadialGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-radial-gradient]',\n      template: \"\\n    <svg:radialGradient [id]=\\\"name\\\" [attr.cx]=\\\"cx\\\" [attr.cy]=\\\"cy\\\" [attr.r]=\\\"r\\\" gradientUnits=\\\"userSpaceOnUse\\\">\\n      <svg:stop\\n        *ngFor=\\\"let stop of stops\\\"\\n        [attr.offset]=\\\"stop.offset + '%'\\\"\\n        [style.stop-color]=\\\"stop.color\\\"\\n        [style.stop-opacity]=\\\"stop.opacity\\\"\\n      />\\n    </svg:radialGradient>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    endOpacity: [{\n      type: Input\n    }],\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }]\n  });\n})();\n\nvar AreaComponent = /*#__PURE__*/function () {\n  function AreaComponent(element) {\n    _classCallCheck(this, AreaComponent);\n\n    this.opacity = 1;\n    this.startOpacity = 0.5;\n    this.endOpacity = 1;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.initialized = false;\n    this.hasGradient = false;\n    this.element = element.nativeElement;\n  }\n\n  _createClass(AreaComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this.initialized) {\n        this.loadAnimation();\n        this.initialized = true;\n      } else {\n        this.update();\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.gradientId = 'grad' + id().toString();\n      this.gradientFill = \"url(#\".concat(this.gradientId, \")\");\n\n      if (this.gradient || this.stops) {\n        this.gradientStops = this.getGradient();\n        this.hasGradient = true;\n      } else {\n        this.hasGradient = false;\n      }\n\n      this.updatePathEl();\n    }\n  }, {\n    key: \"loadAnimation\",\n    value: function loadAnimation() {\n      this.areaPath = this.startingPath;\n      setTimeout(this.update.bind(this), 100);\n    }\n  }, {\n    key: \"updatePathEl\",\n    value: function updatePathEl() {\n      var node = select(this.element).select('.area');\n\n      if (this.animations) {\n        node.transition().duration(750).attr('d', this.path);\n      } else {\n        node.attr('d', this.path);\n      }\n    }\n  }, {\n    key: \"getGradient\",\n    value: function getGradient() {\n      if (this.stops) {\n        return this.stops;\n      }\n\n      return [{\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      }, {\n        offset: 100,\n        color: this.fill,\n        opacity: this.endOpacity\n      }];\n    }\n  }]);\n\n  return AreaComponent;\n}();\n\nAreaComponent.ɵfac = function AreaComponent_Factory(t) {\n  return new (t || AreaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nAreaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AreaComponent,\n  selectors: [[\"g\", \"ngx-charts-area\", \"\"]],\n  inputs: {\n    opacity: \"opacity\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    gradient: \"gradient\",\n    animations: \"animations\",\n    data: \"data\",\n    path: \"path\",\n    startingPath: \"startingPath\",\n    fill: \"fill\",\n    activeLabel: \"activeLabel\",\n    stops: \"stops\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c16,\n  decls: 2,\n  vars: 5,\n  consts: [[4, \"ngIf\"], [1, \"area\"], [\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\"]],\n  template: function AreaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, AreaComponent__svg_defs_0_Template, 2, 2, \"defs\", 0);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelement(1, \"path\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"opacity\", ctx.opacity);\n      ɵngcc0.ɵɵattribute(\"d\", ctx.areaPath)(\"fill\", ctx.gradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  directives: [ɵngcc1.NgIf, SvgLinearGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nAreaComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nAreaComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  path: [{\n    type: Input\n  }],\n  startingPath: [{\n    type: Input\n  }],\n  fill: [{\n    type: Input\n  }],\n  opacity: [{\n    type: Input\n  }],\n  startOpacity: [{\n    type: Input\n  }],\n  endOpacity: [{\n    type: Input\n  }],\n  activeLabel: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  stops: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AreaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area]',\n      template: \"\\n    <svg:defs *ngIf=\\\"gradient\\\">\\n      <svg:g ngx-charts-svg-linear-gradient orientation=\\\"vertical\\\" [name]=\\\"gradientId\\\" [stops]=\\\"gradientStops\\\" />\\n    </svg:defs>\\n    <svg:path class=\\\"area\\\" [attr.d]=\\\"areaPath\\\" [attr.fill]=\\\"gradient ? gradientFill : fill\\\" [style.opacity]=\\\"opacity\\\" />\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    opacity: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    data: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }],\n    startingPath: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    activeLabel: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})(); // Robert Penner's easeOutExpo\n\n\nfunction easeOutExpo(t, b, c, d) {\n  return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\n\n\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n  var startVal = Number(countFrom);\n  var endVal = Number(countTo);\n  var countDown = startVal > endVal;\n  var decimals = Math.max(0, countDecimals);\n  var dec = Math.pow(10, decimals);\n  var duration = Number(countDuration) * 1000;\n  var startTime;\n\n  function runCount(timestamp) {\n    var frameVal;\n    var progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n    var tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress: progress,\n      timestamp: timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(function (val) {\n        return runCount(val);\n      });\n    }\n  }\n\n  return requestAnimationFrame(function (timestamp) {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\n\n\nfunction decimalChecker(countTo) {\n  var endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n\n\nvar CountUpDirective = /*#__PURE__*/function () {\n  function CountUpDirective(cd, element) {\n    _classCallCheck(this, CountUpDirective);\n\n    this.cd = cd;\n    this.countDuration = 1;\n    this.countPrefix = '';\n    this.countSuffix = '';\n    this.countChange = new EventEmitter();\n    this.countFinish = new EventEmitter();\n    this.value = '';\n    this._countDecimals = 0;\n    this._countTo = 0;\n    this._countFrom = 0;\n    this.nativeElement = element.nativeElement;\n  }\n\n  _createClass(CountUpDirective, [{\n    key: \"countDecimals\",\n    get: function get() {\n      if (this._countDecimals) return this._countDecimals;\n      return decimalChecker(this.countTo);\n    },\n    set: function set(val) {\n      this._countDecimals = val;\n    }\n  }, {\n    key: \"countTo\",\n    get: function get() {\n      return this._countTo;\n    },\n    set: function set(val) {\n      this._countTo = parseFloat(val);\n      this.start();\n    }\n  }, {\n    key: \"countFrom\",\n    get: function get() {\n      return this._countFrom;\n    },\n    set: function set(val) {\n      this._countFrom = parseFloat(val);\n      this.start();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      cancelAnimationFrame(this.animationReq);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this19 = this;\n\n      cancelAnimationFrame(this.animationReq);\n\n      var valueFormatting = this.valueFormatting || function (value) {\n        return \"\".concat(_this19.countPrefix).concat(value.toLocaleString()).concat(_this19.countSuffix);\n      };\n\n      var callback = function callback(_ref6) {\n        var value = _ref6.value,\n            progress = _ref6.progress,\n            finished = _ref6.finished;\n        _this19.value = valueFormatting(value);\n\n        _this19.cd.markForCheck();\n\n        if (!finished) _this19.countChange.emit({\n          value: _this19.value,\n          progress: progress\n        });\n        if (finished) _this19.countFinish.emit({\n          value: _this19.value,\n          progress: progress\n        });\n      };\n\n      this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n    }\n  }]);\n\n  return CountUpDirective;\n}();\n\nCountUpDirective.ɵfac = function CountUpDirective_Factory(t) {\n  return new (t || CountUpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCountUpDirective.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CountUpDirective,\n  selectors: [[\"\", \"ngx-charts-count-up\", \"\"]],\n  inputs: {\n    countDuration: \"countDuration\",\n    countPrefix: \"countPrefix\",\n    countSuffix: \"countSuffix\",\n    countDecimals: \"countDecimals\",\n    countTo: \"countTo\",\n    countFrom: \"countFrom\",\n    valueFormatting: \"valueFormatting\"\n  },\n  outputs: {\n    countChange: \"countChange\",\n    countFinish: \"countFinish\"\n  },\n  attrs: _c17,\n  decls: 1,\n  vars: 1,\n  template: function CountUpDirective_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtext(0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  encapsulation: 2\n});\n\nCountUpDirective.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }];\n};\n\nCountUpDirective.propDecorators = {\n  countDuration: [{\n    type: Input\n  }],\n  countPrefix: [{\n    type: Input\n  }],\n  countSuffix: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  countDecimals: [{\n    type: Input\n  }],\n  countTo: [{\n    type: Input\n  }],\n  countFrom: [{\n    type: Input\n  }],\n  countChange: [{\n    type: Output\n  }],\n  countFinish: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CountUpDirective, [{\n    type: Component,\n    args: [{\n      selector: '[ngx-charts-count-up]',\n      template: \" {{ value }} \"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    countDuration: [{\n      type: Input\n    }],\n    countPrefix: [{\n      type: Input\n    }],\n    countSuffix: [{\n      type: Input\n    }],\n    countChange: [{\n      type: Output\n    }],\n    countFinish: [{\n      type: Output\n    }],\n    countDecimals: [{\n      type: Input\n    }],\n    countTo: [{\n      type: Input\n    }],\n    countFrom: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }]\n  });\n})(); // If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\n\n\nvar root;\n\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} // tslint:disable-next-line:variable-name\n\n\nvar MouseEvent = root.MouseEvent;\n\nfunction createMouseEvent(name) {\n  var bubbles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, {\n      bubbles: bubbles,\n      cancelable: cancelable\n    });\n  } else {\n    // IE\n    var _event = document.createEvent('MouseEvent');\n\n    _event.initEvent(name, bubbles, cancelable);\n\n    return _event;\n  }\n}\n\nvar TooltipArea = /*#__PURE__*/function () {\n  function TooltipArea() {\n    _classCallCheck(this, TooltipArea);\n\n    this.anchorOpacity = 0;\n    this.anchorPos = -1;\n    this.anchorValues = [];\n    this.showPercentage = false;\n    this.tooltipDisabled = false;\n    this.hover = new EventEmitter();\n  }\n\n  _createClass(TooltipArea, [{\n    key: \"getValues\",\n    value: function getValues(xVal) {\n      var results = [];\n\n      var _iterator5 = _createForOfIteratorHelper(this.results),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var group = _step5.value;\n          var item = group.series.find(function (d) {\n            return d.name.toString() === xVal.toString();\n          });\n          var groupName = group.name;\n\n          if (groupName instanceof Date) {\n            groupName = groupName.toLocaleDateString();\n          }\n\n          if (item) {\n            var label = item.name;\n            var val = item.value;\n\n            if (this.showPercentage) {\n              val = (item.d1 - item.d0).toFixed(2) + '%';\n            }\n\n            var color = void 0;\n\n            if (this.colors.scaleType === 'linear') {\n              var v = val;\n\n              if (item.d1) {\n                v = item.d1;\n              }\n\n              color = this.colors.getColor(v);\n            } else {\n              color = this.colors.getColor(group.name);\n            }\n\n            var data = Object.assign({}, item, {\n              value: val,\n              name: label,\n              series: groupName,\n              min: item.min,\n              max: item.max,\n              color: color\n            });\n            results.push(data);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return results;\n    }\n  }, {\n    key: \"mouseMove\",\n    value: function mouseMove(event) {\n      var xPos = event.pageX - event.target.getBoundingClientRect().left;\n      var closestIndex = this.findClosestPointIndex(xPos);\n      var closestPoint = this.xSet[closestIndex];\n      this.anchorPos = this.xScale(closestPoint);\n      this.anchorPos = Math.max(0, this.anchorPos);\n      this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n      this.anchorValues = this.getValues(closestPoint);\n\n      if (this.anchorPos !== this.lastAnchorPos) {\n        var ev = createMouseEvent('mouseleave');\n        this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n        this.anchorOpacity = 0.7;\n        this.hover.emit({\n          value: closestPoint\n        });\n        this.showTooltip();\n        this.lastAnchorPos = this.anchorPos;\n      }\n    }\n  }, {\n    key: \"findClosestPointIndex\",\n    value: function findClosestPointIndex(xPos) {\n      var minIndex = 0;\n      var maxIndex = this.xSet.length - 1;\n      var minDiff = Number.MAX_VALUE;\n      var closestIndex = 0;\n\n      while (minIndex <= maxIndex) {\n        var currentIndex = (minIndex + maxIndex) / 2 | 0;\n        var currentElement = this.xScale(this.xSet[currentIndex]);\n        var curDiff = Math.abs(currentElement - xPos);\n\n        if (curDiff < minDiff) {\n          minDiff = curDiff;\n          closestIndex = currentIndex;\n        }\n\n        if (currentElement < xPos) {\n          minIndex = currentIndex + 1;\n        } else if (currentElement > xPos) {\n          maxIndex = currentIndex - 1;\n        } else {\n          minDiff = 0;\n          closestIndex = currentIndex;\n          break;\n        }\n      }\n\n      return closestIndex;\n    }\n  }, {\n    key: \"showTooltip\",\n    value: function showTooltip() {\n      var event = createMouseEvent('mouseenter');\n      this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    }\n  }, {\n    key: \"hideTooltip\",\n    value: function hideTooltip() {\n      var event = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(event);\n      this.anchorOpacity = 0;\n      this.lastAnchorPos = -1;\n    }\n  }, {\n    key: \"getToolTipText\",\n    value: function getToolTipText(tooltipItem) {\n      var result = '';\n\n      if (tooltipItem.series !== undefined) {\n        result += tooltipItem.series;\n      } else {\n        result += '???';\n      }\n\n      result += ': ';\n\n      if (tooltipItem.value !== undefined) {\n        result += tooltipItem.value.toLocaleString();\n      }\n\n      if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n        result += ' (';\n\n        if (tooltipItem.min !== undefined) {\n          if (tooltipItem.max === undefined) {\n            result += '≥';\n          }\n\n          result += tooltipItem.min.toLocaleString();\n\n          if (tooltipItem.max !== undefined) {\n            result += ' - ';\n          }\n        } else if (tooltipItem.max !== undefined) {\n          result += '≤';\n        }\n\n        if (tooltipItem.max !== undefined) {\n          result += tooltipItem.max.toLocaleString();\n        }\n\n        result += ')';\n      }\n\n      return result;\n    }\n  }]);\n\n  return TooltipArea;\n}();\n\nTooltipArea.ɵfac = function TooltipArea_Factory(t) {\n  return new (t || TooltipArea)();\n};\n\nTooltipArea.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TooltipArea,\n  selectors: [[\"g\", \"ngx-charts-tooltip-area\", \"\"]],\n  viewQuery: function TooltipArea_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c18, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipAnchor = _t.first);\n    }\n  },\n  inputs: {\n    showPercentage: \"showPercentage\",\n    tooltipDisabled: \"tooltipDisabled\",\n    dims: \"dims\",\n    xSet: \"xSet\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    results: \"results\",\n    colors: \"colors\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    hover: \"hover\"\n  },\n  attrs: _c19,\n  decls: 6,\n  vars: 18,\n  consts: [[\"y\", \"0\", 1, \"tooltip-area\", 2, \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mousemove\", \"mouseleave\"], [\"defaultTooltipTemplate\", \"\"], [\"y\", \"0\", \"ngx-tooltip\", \"\", 1, \"tooltip-anchor\", 3, \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipSpacing\", \"tooltipTemplate\", \"tooltipContext\", \"tooltipImmediateExit\"], [\"tooltipAnchor\", \"\"], [1, \"area-tooltip-container\"], [\"class\", \"tooltip-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"tooltip-item\"], [1, \"tooltip-item-color\"]],\n  template: function TooltipArea_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\");\n      ɵngcc0.ɵɵelementStart(1, \"rect\", 0);\n      ɵngcc0.ɵɵlistener(\"mousemove\", function TooltipArea_Template__svg_rect_mousemove_1_listener($event) {\n        return ctx.mouseMove($event);\n      })(\"mouseleave\", function TooltipArea_Template__svg_rect_mouseleave_1_listener() {\n        return ctx.hideTooltip();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(2, TooltipArea__svg_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵelement(4, \"rect\", 2, 3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(3);\n\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"x\", 0)(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵstyleProp(\"opacity\", ctx.anchorOpacity)(\"pointer-events\", \"none\");\n      ɵngcc0.ɵɵproperty(\"@animationState\", ctx.anchorOpacity !== 0 ? \"active\" : \"inactive\")(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", \"right\")(\"tooltipType\", \"tooltip\")(\"tooltipSpacing\", 15)(\"tooltipTemplate\", ctx.tooltipTemplate ? ctx.tooltipTemplate : _r0)(\"tooltipContext\", ctx.anchorValues)(\"tooltipImmediateExit\", true);\n      ɵngcc0.ɵɵattribute(\"x\", ctx.anchorPos)(\"width\", 1)(\"height\", ctx.dims.height);\n    }\n  },\n  directives: [TooltipDirective, ɵngcc1.NgForOf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition('inactive => active', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 0.7\n    }))]), transition('active => inactive', [style({\n      opacity: 0.7\n    }), animate(250, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\nTooltipArea.propDecorators = {\n  dims: [{\n    type: Input\n  }],\n  xSet: [{\n    type: Input\n  }],\n  xScale: [{\n    type: Input\n  }],\n  yScale: [{\n    type: Input\n  }],\n  results: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  showPercentage: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  hover: [{\n    type: Output\n  }],\n  tooltipAnchor: [{\n    type: ViewChild,\n    args: ['tooltipAnchor', {\n      static: false\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TooltipArea, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tooltip-area]',\n      template: \"\\n    <svg:g>\\n      <svg:rect\\n        class=\\\"tooltip-area\\\"\\n        [attr.x]=\\\"0\\\"\\n        y=\\\"0\\\"\\n        [attr.width]=\\\"dims.width\\\"\\n        [attr.height]=\\\"dims.height\\\"\\n        style=\\\"opacity: 0; cursor: 'auto';\\\"\\n        (mousemove)=\\\"mouseMove($event)\\\"\\n        (mouseleave)=\\\"hideTooltip()\\\"\\n      />\\n      <ng-template #defaultTooltipTemplate let-model=\\\"model\\\">\\n        <xhtml:div class=\\\"area-tooltip-container\\\">\\n          <xhtml:div *ngFor=\\\"let tooltipItem of model\\\" class=\\\"tooltip-item\\\">\\n            <xhtml:span class=\\\"tooltip-item-color\\\" [style.background-color]=\\\"tooltipItem.color\\\"></xhtml:span>\\n            {{ getToolTipText(tooltipItem) }}\\n          </xhtml:div>\\n        </xhtml:div>\\n      </ng-template>\\n      <svg:rect\\n        #tooltipAnchor\\n        [@animationState]=\\\"anchorOpacity !== 0 ? 'active' : 'inactive'\\\"\\n        class=\\\"tooltip-anchor\\\"\\n        [attr.x]=\\\"anchorPos\\\"\\n        y=\\\"0\\\"\\n        [attr.width]=\\\"1\\\"\\n        [attr.height]=\\\"dims.height\\\"\\n        [style.opacity]=\\\"anchorOpacity\\\"\\n        [style.pointer-events]=\\\"'none'\\\"\\n        ngx-tooltip\\n        [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n        [tooltipPlacement]=\\\"'right'\\\"\\n        [tooltipType]=\\\"'tooltip'\\\"\\n        [tooltipSpacing]=\\\"15\\\"\\n        [tooltipTemplate]=\\\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\\\"\\n        [tooltipContext]=\\\"anchorValues\\\"\\n        [tooltipImmediateExit]=\\\"true\\\"\\n      />\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition('inactive => active', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 0.7\n      }))]), transition('active => inactive', [style({\n        opacity: 0.7\n      }), animate(250, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [];\n  }, {\n    showPercentage: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    hover: [{\n      type: Output\n    }],\n    dims: [{\n      type: Input\n    }],\n    xSet: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipAnchor: [{\n      type: ViewChild,\n      args: ['tooltipAnchor', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nvar Timeline = /*#__PURE__*/function () {\n  function Timeline(element, cd) {\n    _classCallCheck(this, Timeline);\n\n    this.cd = cd;\n    this.height = 50;\n    this.select = new EventEmitter();\n    this.onDomainChange = new EventEmitter();\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  _createClass(Timeline, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n\n      if (!this.initialized) {\n        this.addBrush();\n        this.initialized = true;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.dims = this.getDims();\n      this.height = this.dims.height;\n      var offsetY = this.view[1] - this.height;\n      this.xDomain = this.getXDomain();\n      this.xScale = this.getXScale();\n\n      if (this.brush) {\n        this.updateBrush();\n      }\n\n      this.transform = \"translate(0 , \".concat(offsetY, \")\");\n      this.filterId = 'filter' + id().toString();\n      this.filter = \"url(#\".concat(this.filterId, \")\");\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"getXDomain\",\n    value: function getXDomain() {\n      var values = [];\n\n      var _iterator6 = _createForOfIteratorHelper(this.results),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var results = _step6.value;\n\n          var _iterator7 = _createForOfIteratorHelper(results.series),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var d = _step7.value;\n\n              if (!values.includes(d.name)) {\n                values.push(d.name);\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var domain = [];\n\n      if (this.scaleType === 'time') {\n        var _min = Math.min.apply(Math, _toConsumableArray(values));\n\n        var _max = Math.max.apply(Math, _toConsumableArray(values));\n\n        domain = [_min, _max];\n      } else if (this.scaleType === 'linear') {\n        values = values.map(function (v) {\n          return Number(v);\n        });\n\n        var _min2 = Math.min.apply(Math, _toConsumableArray(values));\n\n        var _max2 = Math.max.apply(Math, _toConsumableArray(values));\n\n        domain = [_min2, _max2];\n      } else {\n        domain = values;\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale() {\n      var scale;\n\n      if (this.scaleType === 'time') {\n        scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n      } else if (this.scaleType === 'linear') {\n        scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n      } else if (this.scaleType === 'ordinal') {\n        scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n      }\n\n      return scale;\n    }\n  }, {\n    key: \"addBrush\",\n    value: function addBrush() {\n      var _this20 = this;\n\n      if (this.brush) return;\n      var height = this.height;\n      var width = this.view[0];\n      this.brush = brushX().extent([[0, 0], [width, height]]).on('brush end', function () {\n        var selection = event.selection || _this20.xScale.range();\n\n        var newDomain = selection.map(_this20.xScale.invert);\n\n        _this20.onDomainChange.emit(newDomain);\n\n        _this20.cd.markForCheck();\n      });\n      select(this.element).select('.brush').call(this.brush);\n    }\n  }, {\n    key: \"updateBrush\",\n    value: function updateBrush() {\n      if (!this.brush) return;\n      var height = this.height;\n      var width = this.view[0];\n      this.brush.extent([[0, 0], [width, height]]);\n      select(this.element).select('.brush').call(this.brush); // clear hardcoded properties so they can be defined by CSS\n\n      select(this.element).select('.selection').attr('fill', undefined).attr('stroke', undefined).attr('fill-opacity', undefined);\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"getDims\",\n    value: function getDims() {\n      var width = this.view[0];\n      var dims = {\n        width: width,\n        height: this.height\n      };\n      return dims;\n    }\n  }]);\n\n  return Timeline;\n}();\n\nTimeline.ɵfac = function Timeline_Factory(t) {\n  return new (t || Timeline)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nTimeline.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: Timeline,\n  selectors: [[\"g\", \"ngx-charts-timeline\", \"\"]],\n  inputs: {\n    height: \"height\",\n    view: \"view\",\n    state: \"state\",\n    results: \"results\",\n    scheme: \"scheme\",\n    customColors: \"customColors\",\n    legend: \"legend\",\n    miniChart: \"miniChart\",\n    autoScale: \"autoScale\",\n    scaleType: \"scaleType\"\n  },\n  outputs: {\n    select: \"select\",\n    onDomainChange: \"onDomainChange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c20,\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[1, \"timeline\"], [\"in\", \"SourceGraphic\", \"type\", \"matrix\", \"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"], [1, \"embedded-chart\"], [\"x\", \"0\", \"y\", \"0\", 1, \"brush-background\"], [1, \"brush\"]],\n  template: function Timeline_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"filter\");\n      ɵngcc0.ɵɵelement(2, \"feColorMatrix\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"g\", 2);\n      ɵngcc0.ɵɵprojection(4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(5, \"rect\", 3);\n      ɵngcc0.ɵɵelement(6, \"g\", 4);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.filterId);\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵattribute(\"width\", ctx.view[0])(\"height\", ctx.height);\n    }\n  },\n  styles: [\".timeline .brush-background{fill:rgba(0,0,0,.05)}.timeline .brush .selection{fill:rgba(0,0,0,.1);stroke:#888;stroke-width:1px}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nTimeline.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nTimeline.propDecorators = {\n  view: [{\n    type: Input\n  }],\n  state: [{\n    type: Input\n  }],\n  results: [{\n    type: Input\n  }],\n  scheme: [{\n    type: Input\n  }],\n  customColors: [{\n    type: Input\n  }],\n  legend: [{\n    type: Input\n  }],\n  miniChart: [{\n    type: Input\n  }],\n  autoScale: [{\n    type: Input\n  }],\n  scaleType: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  onDomainChange: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Timeline, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-timeline]',\n      template: \"\\n    <svg:g class=\\\"timeline\\\" [attr.transform]=\\\"transform\\\">\\n      <svg:filter [attr.id]=\\\"filterId\\\">\\n        <svg:feColorMatrix\\n          in=\\\"SourceGraphic\\\"\\n          type=\\\"matrix\\\"\\n          values=\\\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\\\"\\n        />\\n      </svg:filter>\\n      <svg:g class=\\\"embedded-chart\\\">\\n        <ng-content></ng-content>\\n      </svg:g>\\n      <svg:rect x=\\\"0\\\" [attr.width]=\\\"view[0]\\\" y=\\\"0\\\" [attr.height]=\\\"height\\\" class=\\\"brush-background\\\" />\\n      <svg:g class=\\\"brush\\\"></svg:g>\\n    </svg:g>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".timeline .brush-background{fill:rgba(0,0,0,.05)}.timeline .brush .selection{fill:rgba(0,0,0,.1);stroke:#888;stroke-width:1px}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    height: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    onDomainChange: [{\n      type: Output\n    }],\n    view: [{\n      type: Input\n    }],\n    state: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    miniChart: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }]\n  });\n})();\n\nvar LegendComponent = /*#__PURE__*/function () {\n  function LegendComponent(cd) {\n    _classCallCheck(this, LegendComponent);\n\n    this.cd = cd;\n    this.horizontal = false;\n    this.labelClick = new EventEmitter();\n    this.labelActivate = new EventEmitter();\n    this.labelDeactivate = new EventEmitter();\n    this.legendEntries = [];\n  }\n\n  _createClass(LegendComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.cd.markForCheck();\n      this.legendEntries = this.getLegendEntries();\n    }\n  }, {\n    key: \"getLegendEntries\",\n    value: function getLegendEntries() {\n      var _this21 = this;\n\n      var items = [];\n\n      var _iterator8 = _createForOfIteratorHelper(this.data),\n          _step8;\n\n      try {\n        var _loop = function _loop() {\n          var label = _step8.value;\n          var formattedLabel = formatLabel(label);\n          var idx = items.findIndex(function (i) {\n            return i.label === formattedLabel;\n          });\n\n          if (idx === -1) {\n            items.push({\n              label: label,\n              formattedLabel: formattedLabel,\n              color: _this21.colors.getColor(label)\n            });\n          }\n        };\n\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return items;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(entry) {\n      if (!this.activeEntries) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.label === d.name;\n      });\n      return item !== undefined;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(item) {\n      this.labelActivate.emit(item);\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate(item) {\n      this.labelDeactivate.emit(item);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.label;\n    }\n  }]);\n\n  return LegendComponent;\n}();\n\nLegendComponent.ɵfac = function LegendComponent_Factory(t) {\n  return new (t || LegendComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nLegendComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: LegendComponent,\n  selectors: [[\"ngx-charts-legend\"]],\n  inputs: {\n    horizontal: \"horizontal\",\n    data: \"data\",\n    title: \"title\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    activeEntries: \"activeEntries\"\n  },\n  outputs: {\n    labelClick: \"labelClick\",\n    labelActivate: \"labelActivate\",\n    labelDeactivate: \"labelDeactivate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 9,\n  consts: [[\"class\", \"legend-title\", 4, \"ngIf\"], [1, \"legend-wrap\"], [1, \"legend-labels\"], [\"class\", \"legend-label\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"legend-title\"], [1, \"legend-title-text\"], [1, \"legend-label\"], [3, \"label\", \"formattedLabel\", \"color\", \"isActive\", \"select\", \"activate\", \"deactivate\"]],\n  template: function LegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵtemplate(1, LegendComponent_header_1_Template, 3, 1, \"header\", 0);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(3, \"ul\", 2);\n      ɵngcc0.ɵɵtemplate(4, LegendComponent_li_4_Template, 2, 4, \"li\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", (ctx.title == null ? null : ctx.title.length) > 0);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵstyleProp(\"max-height\", ctx.height - 45, \"px\");\n      ɵngcc0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.legendEntries)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgIf, ɵngcc1.NgForOf, LegendEntryComponent];\n  },\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{font-size:14px;font-weight:700;margin-bottom:5px;margin-left:10px;overflow:hidden;white-space:nowrap}.chart-legend li,.chart-legend ul{list-style:none;margin:0;padding:0}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{background:rgba(0,0,0,.05);border-radius:3px;float:left;line-height:85%;list-style:none;overflow-x:hidden;overflow-y:auto;text-align:left;white-space:nowrap;width:100%}.chart-legend .legend-label{color:#afb7c8;cursor:pointer;font-size:90%;margin:8px}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{border-radius:3px;color:#5b646b;display:inline-block;height:15px;margin-right:5px;width:15px}.chart-legend .legend-label-text{font-size:12px;line-height:15px;vertical-align:top;width:calc(100% - 20px)}.chart-legend .legend-label-text,.chart-legend .legend-title-text{display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.chart-legend .legend-title-text{line-height:16px;vertical-align:bottom}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nLegendComponent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\nLegendComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  horizontal: [{\n    type: Input\n  }],\n  labelClick: [{\n    type: Output\n  }],\n  labelActivate: [{\n    type: Output\n  }],\n  labelDeactivate: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend',\n      template: \"\\n    <div [style.width.px]=\\\"width\\\">\\n      <header class=\\\"legend-title\\\" *ngIf=\\\"title?.length > 0\\\">\\n        <span class=\\\"legend-title-text\\\">{{ title }}</span>\\n      </header>\\n      <div class=\\\"legend-wrap\\\">\\n        <ul class=\\\"legend-labels\\\" [class.horizontal-legend]=\\\"horizontal\\\" [style.max-height.px]=\\\"height - 45\\\">\\n          <li *ngFor=\\\"let entry of legendEntries; trackBy: trackBy\\\" class=\\\"legend-label\\\">\\n            <ngx-charts-legend-entry\\n              [label]=\\\"entry.label\\\"\\n              [formattedLabel]=\\\"entry.formattedLabel\\\"\\n              [color]=\\\"entry.color\\\"\\n              [isActive]=\\\"isActive(entry)\\\"\\n              (select)=\\\"labelClick.emit($event)\\\"\\n              (activate)=\\\"activate($event)\\\"\\n              (deactivate)=\\\"deactivate($event)\\\"\\n            >\\n            </ngx-charts-legend-entry>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{font-size:14px;font-weight:700;margin-bottom:5px;margin-left:10px;overflow:hidden;white-space:nowrap}.chart-legend li,.chart-legend ul{list-style:none;margin:0;padding:0}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{background:rgba(0,0,0,.05);border-radius:3px;float:left;line-height:85%;list-style:none;overflow-x:hidden;overflow-y:auto;text-align:left;white-space:nowrap;width:100%}.chart-legend .legend-label{color:#afb7c8;cursor:pointer;font-size:90%;margin:8px}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{border-radius:3px;color:#5b646b;display:inline-block;height:15px;margin-right:5px;width:15px}.chart-legend .legend-label-text{font-size:12px;line-height:15px;vertical-align:top;width:calc(100% - 20px)}.chart-legend .legend-label-text,.chart-legend .legend-title-text{display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.chart-legend .legend-title-text{line-height:16px;vertical-align:bottom}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    horizontal: [{\n      type: Input\n    }],\n    labelClick: [{\n      type: Output\n    }],\n    labelActivate: [{\n      type: Output\n    }],\n    labelDeactivate: [{\n      type: Output\n    }],\n    data: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }]\n  });\n})();\n\nvar LegendEntryComponent = /*#__PURE__*/function () {\n  function LegendEntryComponent() {\n    _classCallCheck(this, LegendEntryComponent);\n\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.toggle = new EventEmitter();\n  }\n\n  _createClass(LegendEntryComponent, [{\n    key: \"trimmedLabel\",\n    get: function get() {\n      return this.formattedLabel || '(empty)';\n    }\n  }, {\n    key: \"onMouseEnter\",\n    value: function onMouseEnter() {\n      this.activate.emit({\n        name: this.label\n      });\n    }\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave() {\n      this.deactivate.emit({\n        name: this.label\n      });\n    }\n  }]);\n\n  return LegendEntryComponent;\n}();\n\nLegendEntryComponent.ɵfac = function LegendEntryComponent_Factory(t) {\n  return new (t || LegendEntryComponent)();\n};\n\nLegendEntryComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: LegendEntryComponent,\n  selectors: [[\"ngx-charts-legend-entry\"]],\n  hostBindings: function LegendEntryComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mouseenter\", function LegendEntryComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function LegendEntryComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    isActive: \"isActive\",\n    color: \"color\",\n    label: \"label\",\n    formattedLabel: \"formattedLabel\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    toggle: \"toggle\"\n  },\n  decls: 4,\n  vars: 6,\n  consts: [[\"tabindex\", \"-1\", 3, \"title\", \"click\"], [1, \"legend-label-color\", 3, \"click\"], [1, \"legend-label-text\"]],\n  template: function LegendEntryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_0_listener() {\n        return ctx.select.emit(ctx.formattedLabel);\n      });\n      ɵngcc0.ɵɵelementStart(1, \"span\", 1);\n      ɵngcc0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_1_listener() {\n        return ctx.toggle.emit(ctx.formattedLabel);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n      ɵngcc0.ɵɵtext(3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive);\n      ɵngcc0.ɵɵproperty(\"title\", ctx.formattedLabel);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"background-color\", ctx.color);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.trimmedLabel, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\nLegendEntryComponent.propDecorators = {\n  color: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  formattedLabel: [{\n    type: Input\n  }],\n  isActive: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  toggle: [{\n    type: Output\n  }],\n  onMouseEnter: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  onMouseLeave: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LegendEntryComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend-entry',\n      template: \"\\n    <span [title]=\\\"formattedLabel\\\" tabindex=\\\"-1\\\" [class.active]=\\\"isActive\\\" (click)=\\\"select.emit(formattedLabel)\\\">\\n      <span class=\\\"legend-label-color\\\" [style.background-color]=\\\"color\\\" (click)=\\\"toggle.emit(formattedLabel)\\\"> </span>\\n      <span class=\\\"legend-label-text\\\">\\n        {{ trimmedLabel }}\\n      </span>\\n    </span>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    toggle: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }],\n    color: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    formattedLabel: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ScaleLegendComponent = /*#__PURE__*/function () {\n  function ScaleLegendComponent(sanitizer) {\n    _classCallCheck(this, ScaleLegendComponent);\n\n    this.sanitizer = sanitizer;\n    this.horizontal = false;\n  }\n\n  _createClass(ScaleLegendComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n      var direction = this.horizontal ? 'right' : 'bottom';\n      this.gradient = this.sanitizer.bypassSecurityTrustStyle(\"linear-gradient(to \".concat(direction, \", \").concat(gradientValues, \")\"));\n    }\n    /**\n     * Generates the string used in the gradient stylesheet properties\n     * @param colors array of colors\n     * @param splits array of splits on a scale of (0, 1)\n     */\n\n  }, {\n    key: \"gradientString\",\n    value: function gradientString(colors, splits) {\n      // add the 100%\n      splits.push(1);\n      var pairs = [];\n      colors.reverse().forEach(function (c, i) {\n        pairs.push(\"\".concat(c, \" \").concat(Math.round(splits[i] * 100), \"%\"));\n      });\n      return pairs.join(', ');\n    }\n  }]);\n\n  return ScaleLegendComponent;\n}();\n\nScaleLegendComponent.ɵfac = function ScaleLegendComponent_Factory(t) {\n  return new (t || ScaleLegendComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomSanitizer));\n};\n\nScaleLegendComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ScaleLegendComponent,\n  selectors: [[\"ngx-charts-scale-legend\"]],\n  inputs: {\n    horizontal: \"horizontal\",\n    valueRange: \"valueRange\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 10,\n  consts: [[1, \"scale-legend\"], [1, \"scale-legend-label\"], [1, \"scale-legend-wrap\"]],\n  template: function ScaleLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"span\");\n      ɵngcc0.ɵɵtext(3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(4, \"div\", 2);\n      ɵngcc0.ɵɵelementStart(5, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(6, \"span\");\n      ɵngcc0.ɵɵtext(7);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"height\", ctx.horizontal ? undefined : ctx.height, \"px\")(\"width\", ctx.width, \"px\");\n      ɵngcc0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵtextInterpolate(ctx.valueRange[1].toLocaleString());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"background\", ctx.gradient);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵtextInterpolate(ctx.valueRange[0].toLocaleString());\n    }\n  },\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{display:flex;flex-direction:column;text-align:center}.chart-legend .scale-legend-wrap{border-radius:5px;display:inline-block;flex:1;margin:0 auto;width:30px}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{height:30px;margin:0 16px;width:auto}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nScaleLegendComponent.ctorParameters = function () {\n  return [{\n    type: DomSanitizer\n  }];\n};\n\nScaleLegendComponent.propDecorators = {\n  valueRange: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  horizontal: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ScaleLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-scale-legend',\n      template: \"\\n    <div\\n      class=\\\"scale-legend\\\"\\n      [class.horizontal-legend]=\\\"horizontal\\\"\\n      [style.height.px]=\\\"horizontal ? undefined : height\\\"\\n      [style.width.px]=\\\"width\\\"\\n    >\\n      <div class=\\\"scale-legend-label\\\">\\n        <span>{{ valueRange[1].toLocaleString() }}</span>\\n      </div>\\n      <div class=\\\"scale-legend-wrap\\\" [style.background]=\\\"gradient\\\"></div>\\n      <div class=\\\"scale-legend-label\\\">\\n        <span>{{ valueRange[0].toLocaleString() }}</span>\\n      </div>\\n    </div>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{display:flex;flex-direction:column;text-align:center}.chart-legend .scale-legend-wrap{border-radius:5px;display:inline-block;flex:1;margin:0 auto;width:30px}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{height:30px;margin:0 16px;width:auto}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc2.DomSanitizer\n    }];\n  }, {\n    horizontal: [{\n      type: Input\n    }],\n    valueRange: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }]\n  });\n})();\n\nvar AdvancedLegendComponent = /*#__PURE__*/function () {\n  function AdvancedLegendComponent() {\n    _classCallCheck(this, AdvancedLegendComponent);\n\n    this.label = 'Total';\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.legendItems = [];\n\n    this.labelFormatting = function (label) {\n      return label;\n    };\n\n    this.percentageFormatting = function (percentage) {\n      return percentage;\n    };\n\n    this.defaultValueFormatting = function (value) {\n      return value.toLocaleString();\n    };\n  }\n\n  _createClass(AdvancedLegendComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"getTotal\",\n    value: function getTotal() {\n      return this.data.map(function (d) {\n        return d.value;\n      }).reduce(function (sum, d) {\n        return sum + d;\n      }, 0);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.total = this.getTotal();\n      this.roundedTotal = this.total;\n      this.legendItems = this.getLegendItems();\n    }\n  }, {\n    key: \"getLegendItems\",\n    value: function getLegendItems() {\n      var _this22 = this;\n\n      return this.data.map(function (d) {\n        var label = formatLabel(d.name);\n        var value = d.value;\n\n        var color = _this22.colors.getColor(label);\n\n        var percentage = _this22.total > 0 ? value / _this22.total * 100 : 0;\n        var formattedLabel = typeof _this22.labelFormatting === 'function' ? _this22.labelFormatting(label) : label;\n        return {\n          _value: value,\n          data: d,\n          value: value,\n          color: color,\n          label: formattedLabel,\n          displayLabel: trimLabel(formattedLabel, 20),\n          origialLabel: d.name,\n          percentage: _this22.percentageFormatting ? _this22.percentageFormatting(percentage) : percentage.toLocaleString()\n        };\n      });\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(item) {\n      return item.formattedLabel;\n    }\n  }]);\n\n  return AdvancedLegendComponent;\n}();\n\nAdvancedLegendComponent.ɵfac = function AdvancedLegendComponent_Factory(t) {\n  return new (t || AdvancedLegendComponent)();\n};\n\nAdvancedLegendComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AdvancedLegendComponent,\n  selectors: [[\"ngx-charts-advanced-legend\"]],\n  inputs: {\n    label: \"label\",\n    animations: \"animations\",\n    labelFormatting: \"labelFormatting\",\n    percentageFormatting: \"percentageFormatting\",\n    width: \"width\",\n    data: \"data\",\n    colors: \"colors\",\n    valueFormatting: \"valueFormatting\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 7,\n  consts: [[1, \"advanced-pie-legend\"], [\"class\", \"total-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"total-value\", 4, \"ngIf\"], [1, \"total-label\"], [1, \"legend-items-container\"], [1, \"legend-items\"], [\"tabindex\", \"-1\", \"class\", \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-count-up\", \"\", 1, \"total-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"total-value\"], [\"tabindex\", \"-1\", 1, \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\"], [1, \"item-color\"], [\"class\", \"item-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"item-value\", 4, \"ngIf\"], [1, \"item-label\"], [\"class\", \"item-percent\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"item-percent\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"item-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"item-value\"], [\"ngx-charts-count-up\", \"\", 1, \"item-percent\", 3, \"countTo\", \"countSuffix\"], [1, \"item-percent\"]],\n  template: function AdvancedLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵtemplate(1, AdvancedLegendComponent_div_1_Template, 1, 2, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(2, AdvancedLegendComponent_div_2_Template, 2, 1, \"div\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n      ɵngcc0.ɵɵtext(4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n      ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n      ɵngcc0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_Template, 8, 7, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.animations);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.legendItems)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, CountUpDirective],\n  styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{overflow:auto;white-space:nowrap}.advanced-pie-legend .legend-items-container .legend-items .legend-item{cursor:pointer;display:inline-block;margin-right:20px}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;margin-left:11px;margin-top:-6px;opacity:.7}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;margin-left:11px;opacity:.7}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;float:left;height:42px;margin-right:7px;width:4px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nAdvancedLegendComponent.propDecorators = {\n  width: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  labelFormatting: [{\n    type: Input\n  }],\n  percentageFormatting: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AdvancedLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-legend',\n      template: \"\\n    <div class=\\\"advanced-pie-legend\\\" [style.width.px]=\\\"width\\\">\\n      <div\\n        *ngIf=\\\"animations\\\"\\n        class=\\\"total-value\\\"\\n        ngx-charts-count-up\\n        [countTo]=\\\"roundedTotal\\\"\\n        [valueFormatting]=\\\"valueFormatting\\\"\\n      ></div>\\n      <div class=\\\"total-value\\\" *ngIf=\\\"!animations\\\">\\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\\n      </div>\\n      <div class=\\\"total-label\\\">\\n        {{ label }}\\n      </div>\\n      <div class=\\\"legend-items-container\\\">\\n        <div class=\\\"legend-items\\\">\\n          <div\\n            *ngFor=\\\"let legendItem of legendItems; trackBy: trackBy\\\"\\n            tabindex=\\\"-1\\\"\\n            class=\\\"legend-item\\\"\\n            (mouseenter)=\\\"activate.emit(legendItem.data)\\\"\\n            (mouseleave)=\\\"deactivate.emit(legendItem.data)\\\"\\n            (click)=\\\"select.emit(legendItem.data)\\\"\\n          >\\n            <div class=\\\"item-color\\\" [style.border-left-color]=\\\"legendItem.color\\\"></div>\\n            <div\\n              *ngIf=\\\"animations\\\"\\n              class=\\\"item-value\\\"\\n              ngx-charts-count-up\\n              [countTo]=\\\"legendItem._value\\\"\\n              [valueFormatting]=\\\"valueFormatting\\\"\\n            ></div>\\n            <div *ngIf=\\\"!animations\\\" class=\\\"item-value\\\">\\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\\n            </div>\\n            <div class=\\\"item-label\\\">{{ legendItem.displayLabel }}</div>\\n            <div\\n              *ngIf=\\\"animations\\\"\\n              class=\\\"item-percent\\\"\\n              ngx-charts-count-up\\n              [countTo]=\\\"legendItem.percentage\\\"\\n              [countSuffix]=\\\"'%'\\\"\\n            ></div>\\n            <div *ngIf=\\\"!animations\\\" class=\\\"item-percent\\\">{{ legendItem.percentage.toLocaleString() }}%</div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{overflow:auto;white-space:nowrap}.advanced-pie-legend .legend-items-container .legend-items .legend-item{cursor:pointer;display:inline-block;margin-right:20px}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;margin-left:11px;margin-top:-6px;opacity:.7}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;margin-left:11px;opacity:.7}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;float:left;height:42px;margin-right:7px;width:4px}\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    label: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nvar COMPONENTS = [AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent];\n\nvar ChartCommonModule = function ChartCommonModule() {\n  _classCallCheck(this, ChartCommonModule);\n};\n\nChartCommonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ChartCommonModule\n});\nChartCommonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ChartCommonModule_Factory(t) {\n    return new (t || ChartCommonModule)();\n  },\n  imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChartCommonModule, {\n    declarations: function declarations() {\n      return [AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent, VisibilityObserver];\n    },\n    imports: function imports() {\n      return [CommonModule, AxesModule, TooltipModule];\n    },\n    exports: function exports() {\n      return [CommonModule, AxesModule, TooltipModule, AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent, VisibilityObserver];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ChartCommonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, AxesModule, TooltipModule],\n      declarations: [].concat(COMPONENTS, [VisibilityObserver]),\n      exports: [CommonModule, AxesModule, TooltipModule].concat(COMPONENTS, [VisibilityObserver])\n    }]\n  }], null, null);\n})();\n\nfunction calculateViewDimensions(_ref7) {\n  var width = _ref7.width,\n      height = _ref7.height,\n      margins = _ref7.margins,\n      _ref7$showXAxis = _ref7.showXAxis,\n      showXAxis = _ref7$showXAxis === void 0 ? false : _ref7$showXAxis,\n      _ref7$showYAxis = _ref7.showYAxis,\n      showYAxis = _ref7$showYAxis === void 0 ? false : _ref7$showYAxis,\n      _ref7$xAxisHeight = _ref7.xAxisHeight,\n      xAxisHeight = _ref7$xAxisHeight === void 0 ? 0 : _ref7$xAxisHeight,\n      _ref7$yAxisWidth = _ref7.yAxisWidth,\n      yAxisWidth = _ref7$yAxisWidth === void 0 ? 0 : _ref7$yAxisWidth,\n      _ref7$showXLabel = _ref7.showXLabel,\n      showXLabel = _ref7$showXLabel === void 0 ? false : _ref7$showXLabel,\n      _ref7$showYLabel = _ref7.showYLabel,\n      showYLabel = _ref7$showYLabel === void 0 ? false : _ref7$showYLabel,\n      _ref7$showLegend = _ref7.showLegend,\n      showLegend = _ref7$showLegend === void 0 ? false : _ref7$showLegend,\n      _ref7$legendType = _ref7.legendType,\n      legendType = _ref7$legendType === void 0 ? 'ordinal' : _ref7$legendType,\n      _ref7$legendPosition = _ref7.legendPosition,\n      legendPosition = _ref7$legendPosition === void 0 ? 'right' : _ref7$legendPosition,\n      _ref7$columns = _ref7.columns,\n      columns = _ref7$columns === void 0 ? 12 : _ref7$columns;\n  var xOffset = margins[3];\n  var chartWidth = width;\n  var chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === 'right') {\n    if (legendType === 'ordinal') {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = chartWidth * columns / 12;\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      var offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      var _offset = 25 + 5;\n\n      chartWidth -= _offset;\n      xOffset += _offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n\nvar colorSets = [{\n  name: 'vivid',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#647c8a', '#3f51b5', '#2196f3', '#00b862', '#afdf0a', '#a7b61a', '#f3e562', '#ff9800', '#ff5722', '#ff4514']\n}, {\n  name: 'natural',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#bf9d76', '#e99450', '#d89f59', '#f2dfa7', '#a5d7c6', '#7794b1', '#afafaf', '#707160', '#ba9383', '#d9d5c3']\n}, {\n  name: 'cool',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#a8385d', '#7aa3e5', '#a27ea8', '#aae3f5', '#adcded', '#a95963', '#8796c0', '#7ed3ed', '#50abcc', '#ad6886']\n}, {\n  name: 'fire',\n  selectable: true,\n  group: 'Ordinal',\n  domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n}, {\n  name: 'solar',\n  selectable: true,\n  group: 'Continuous',\n  domain: ['#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00']\n}, {\n  name: 'air',\n  selectable: true,\n  group: 'Continuous',\n  domain: ['#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b']\n}, {\n  name: 'aqua',\n  selectable: true,\n  group: 'Continuous',\n  domain: ['#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064']\n}, {\n  name: 'flame',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#A10A28', '#D3342D', '#EF6D49', '#FAAD67', '#FDDE90', '#DBED91', '#A9D770', '#6CBA67', '#2C9653', '#146738']\n}, {\n  name: 'ocean',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#1D68FB', '#33C0FC', '#4AFFFE', '#AFFFFF', '#FFFC63', '#FDBD2D', '#FC8A25', '#FA4F1E', '#FA141B', '#BA38D1']\n}, {\n  name: 'forest',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#55C22D', '#C1F33D', '#3CC099', '#AFFFFF', '#8CFC9D', '#76CFFA', '#BA60FB', '#EE6490', '#C42A1C', '#FC9F32']\n}, {\n  name: 'horizon',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#2597FB', '#65EBFD', '#99FDD0', '#FCEE4B', '#FEFCFA', '#FDD6E3', '#FCB1A8', '#EF6F7B', '#CB96E8', '#EFDEE0']\n}, {\n  name: 'neons',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#FF3333', '#FF33FF', '#CC33FF', '#0000FF', '#33CCFF', '#33FFFF', '#33FF66', '#CCFF33', '#FFCC00', '#FF6600']\n}, {\n  name: 'picnic',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#FAC51D', '#66BD6D', '#FAA026', '#29BB9C', '#E96B56', '#55ACD2', '#B7332F', '#2C83C9', '#9166B8', '#92E7E8']\n}, {\n  name: 'night',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#2B1B5A', '#501356', '#183356', '#28203F', '#391B3C', '#1E2B3C', '#120634', '#2D0432', '#051932', '#453080', '#75267D', '#2C507D', '#4B3880', '#752F7D', '#35547D']\n}, {\n  name: 'nightLights',\n  selectable: false,\n  group: 'Ordinal',\n  domain: ['#4e31a5', '#9c25a7', '#3065ab', '#57468b', '#904497', '#46648b', '#32118d', '#a00fb3', '#1052a2', '#6e51bd', '#b63cc3', '#6c97cb', '#8671c1', '#b455be', '#7496c3']\n}];\n\nvar ColorHelper = /*#__PURE__*/function () {\n  function ColorHelper(scheme, type, domain, customColors) {\n    _classCallCheck(this, ColorHelper);\n\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(function (cs) {\n        return cs.name === scheme;\n      });\n    }\n\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  _createClass(ColorHelper, [{\n    key: \"generateColorScheme\",\n    value: function generateColorScheme(scheme, type, domain) {\n      if (typeof scheme === 'string') {\n        scheme = colorSets.find(function (cs) {\n          return cs.name === scheme;\n        });\n      }\n\n      var colorScale;\n\n      if (type === 'quantile') {\n        colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n      } else if (type === 'ordinal') {\n        colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n      } else if (type === 'linear') {\n        // linear schemes must have at least 2 colors\n        var colorDomain = _toConsumableArray(scheme.domain);\n\n        if (colorDomain.length === 1) {\n          colorDomain.push(colorDomain[0]);\n          this.colorDomain = colorDomain;\n        }\n\n        var points = range(0, 1, 1.0 / colorDomain.length);\n        colorScale = scaleLinear().domain(points).range(colorDomain);\n      }\n\n      return colorScale;\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor(value) {\n      if (value === undefined || value === null) {\n        throw new Error('Value can not be null');\n      }\n\n      if (this.scaleType === 'linear') {\n        var valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n        return this.scale(valueScale(value));\n      } else {\n        if (typeof this.customColors === 'function') {\n          return this.customColors(value);\n        }\n\n        var formattedValue = value.toString();\n        var found; // todo type customColors\n\n        if (this.customColors && this.customColors.length > 0) {\n          found = this.customColors.find(function (mapping) {\n            return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n          });\n        }\n\n        if (found) {\n          return found.value;\n        } else {\n          return this.scale(value);\n        }\n      }\n    }\n  }, {\n    key: \"getLinearGradientStops\",\n    value: function getLinearGradientStops(value, start) {\n      if (start === undefined) {\n        start = this.domain[0];\n      }\n\n      var valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n      var colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n      var endColor = this.getColor(value); // generate the stops\n\n      var startVal = valueScale(start);\n      var startColor = this.getColor(start);\n      var endVal = valueScale(value);\n      var i = 1;\n      var currentVal = startVal;\n      var stops = [];\n      stops.push({\n        color: startColor,\n        offset: startVal,\n        originalOffset: startVal,\n        opacity: 1\n      });\n\n      while (currentVal < endVal && i < this.colorDomain.length) {\n        var color = this.colorDomain[i];\n        var offset = colorValueScale(color);\n\n        if (offset <= startVal) {\n          i++;\n          continue;\n        }\n\n        if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n          break;\n        }\n\n        stops.push({\n          color: color,\n          offset: offset,\n          opacity: 1\n        });\n        currentVal = offset;\n        i++;\n      }\n\n      if (stops[stops.length - 1].offset < 100) {\n        stops.push({\n          color: endColor,\n          offset: endVal,\n          opacity: 1\n        });\n      }\n\n      if (endVal === startVal) {\n        stops[0].offset = 0;\n        stops[1].offset = 100;\n      } else {\n        // normalize the offsets into percentages\n        if (stops[stops.length - 1].offset !== 100) {\n          var _iterator9 = _createForOfIteratorHelper(stops),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var s = _step9.value;\n              s.offset = (s.offset - startVal) / (endVal - startVal) * 100;\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n      }\n\n      return stops;\n    }\n  }]);\n\n  return ColorHelper;\n}();\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\n\n\nfunction getUniqueXDomainValues(results) {\n  var valueSet = new Set();\n\n  var _iterator10 = _createForOfIteratorHelper(results),\n      _step10;\n\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var result = _step10.value;\n\n      var _iterator11 = _createForOfIteratorHelper(result.series),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var d = _step11.value;\n          valueSet.add(d.name);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\n\n\nfunction getScaleType(values) {\n  var checkDateType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (checkDateType) {\n    var allDates = values.every(function (value) {\n      return value instanceof Date;\n    });\n\n    if (allDates) {\n      return 'time';\n    }\n  }\n\n  var allNumbers = values.every(function (value) {\n    return typeof value === 'number';\n  });\n\n  if (allNumbers) {\n    return 'linear';\n  }\n\n  return 'ordinal';\n}\n\nvar AreaChartComponent = /*#__PURE__*/function (_BaseChartComponent) {\n  _inherits(AreaChartComponent, _BaseChartComponent);\n\n  var _super2 = _createSuper(AreaChartComponent);\n\n  function AreaChartComponent() {\n    var _this23;\n\n    _classCallCheck(this, AreaChartComponent);\n\n    _this23 = _super2.apply(this, arguments);\n    _this23.legendTitle = 'Legend';\n    _this23.legendPosition = 'right';\n    _this23.baseValue = 'auto';\n    _this23.showGridLines = true;\n    _this23.curve = curveLinear;\n    _this23.activeEntries = [];\n    _this23.trimXAxisTicks = true;\n    _this23.trimYAxisTicks = true;\n    _this23.rotateXAxisTicks = true;\n    _this23.maxXAxisTickLength = 16;\n    _this23.maxYAxisTickLength = 16;\n    _this23.roundDomains = false;\n    _this23.tooltipDisabled = false;\n    _this23.activate = new EventEmitter();\n    _this23.deactivate = new EventEmitter();\n    _this23.margin = [10, 20, 10, 20];\n    _this23.xAxisHeight = 0;\n    _this23.yAxisWidth = 0;\n    _this23.timelineHeight = 50;\n    _this23.timelinePadding = 10;\n    return _this23;\n  }\n\n  _createClass(AreaChartComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(AreaChartComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.timeline) {\n        this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n      }\n\n      this.xDomain = this.getXDomain();\n\n      if (this.filteredDomain) {\n        this.xDomain = this.filteredDomain;\n      }\n\n      this.yDomain = this.getYDomain();\n      this.seriesDomain = this.getSeriesDomain();\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n      this.yScale = this.getYScale(this.yDomain, this.dims.height);\n      this.updateTimeline();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \", \").concat(this.margin[0], \")\");\n      this.clipPathId = 'clip' + id().toString();\n      this.clipPath = \"url(#\".concat(this.clipPathId, \")\");\n    }\n  }, {\n    key: \"updateTimeline\",\n    value: function updateTimeline() {\n      if (this.timeline) {\n        this.timelineWidth = this.dims.width;\n        this.timelineXDomain = this.getXDomain();\n        this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n        this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n        this.timelineTransform = \"translate(\".concat(this.dims.xOffset, \", \").concat(-this.margin[2], \")\");\n      }\n    }\n  }, {\n    key: \"getXDomain\",\n    value: function getXDomain() {\n      var values = getUniqueXDomainValues(this.results);\n      this.scaleType = getScaleType(values);\n      var domain = [];\n\n      if (this.scaleType === 'linear') {\n        values = values.map(function (v) {\n          return Number(v);\n        });\n      }\n\n      var min;\n      var max;\n\n      if (this.scaleType === 'time' || this.scaleType === 'linear') {\n        min = this.xScaleMin ? this.xScaleMin : Math.min.apply(Math, _toConsumableArray(values));\n        max = this.xScaleMax ? this.xScaleMax : Math.max.apply(Math, _toConsumableArray(values));\n      }\n\n      if (this.scaleType === 'time') {\n        domain = [new Date(min), new Date(max)];\n        this.xSet = _toConsumableArray(values).sort(function (a, b) {\n          var aDate = a.getTime();\n          var bDate = b.getTime();\n          if (aDate > bDate) return 1;\n          if (bDate > aDate) return -1;\n          return 0;\n        });\n      } else if (this.scaleType === 'linear') {\n        domain = [min, max]; // Use compare function to sort numbers numerically\n\n        this.xSet = _toConsumableArray(values).sort(function (a, b) {\n          return a - b;\n        });\n      } else {\n        domain = values;\n        this.xSet = values;\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getYDomain\",\n    value: function getYDomain() {\n      var domain = [];\n\n      var _iterator12 = _createForOfIteratorHelper(this.results),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var results = _step12.value;\n\n          var _iterator13 = _createForOfIteratorHelper(results.series),\n              _step13;\n\n          try {\n            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n              var d = _step13.value;\n\n              if (!domain.includes(d.value)) {\n                domain.push(d.value);\n              }\n            }\n          } catch (err) {\n            _iterator13.e(err);\n          } finally {\n            _iterator13.f();\n          }\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      var values = [].concat(domain);\n\n      if (!this.autoScale) {\n        values.push(0);\n      }\n\n      if (this.baseValue !== 'auto') {\n        values.push(this.baseValue);\n      }\n\n      var min = this.yScaleMin ? this.yScaleMin : Math.min.apply(Math, _toConsumableArray(values));\n      var max = this.yScaleMax ? this.yScaleMax : Math.max.apply(Math, _toConsumableArray(values));\n      return [min, max];\n    }\n  }, {\n    key: \"getSeriesDomain\",\n    value: function getSeriesDomain() {\n      return this.results.map(function (d) {\n        return d.name;\n      });\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale(domain, width) {\n      var scale;\n\n      if (this.scaleType === 'time') {\n        scale = scaleTime();\n      } else if (this.scaleType === 'linear') {\n        scale = scaleLinear();\n      } else if (this.scaleType === 'ordinal') {\n        scale = scalePoint().padding(0.1);\n      }\n\n      scale.range([0, width]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale(domain, height) {\n      var scale = scaleLinear().range([height, 0]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"getScaleType\",\n    value: function getScaleType(values) {\n      var date = true;\n      var num = true;\n\n      var _iterator14 = _createForOfIteratorHelper(values),\n          _step14;\n\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var value = _step14.value;\n\n          if (!this.isDate(value)) {\n            date = false;\n          }\n\n          if (typeof value !== 'number') {\n            num = false;\n          }\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n\n      if (date) {\n        return 'time';\n      }\n\n      if (num) {\n        return 'linear';\n      }\n\n      return 'ordinal';\n    }\n  }, {\n    key: \"isDate\",\n    value: function isDate(value) {\n      if (value instanceof Date) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateDomain\",\n    value: function updateDomain(domain) {\n      this.filteredDomain = domain;\n      this.xDomain = this.filteredDomain;\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n  }, {\n    key: \"updateHoveredVertical\",\n    value: function updateHoveredVertical(item) {\n      this.hoveredVertical = item.value;\n      this.deactivateAll();\n    }\n  }, {\n    key: \"hideCircles\",\n    value: function hideCircles() {\n      this.hoveredVertical = null;\n      this.deactivateAll();\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, series) {\n      if (series) {\n        data.series = series.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.seriesDomain;\n      } else {\n        domain = this.yDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.seriesDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref8) {\n      var width = _ref8.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref9) {\n      var height = _ref9.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item].concat(_toConsumableArray(this.activeEntries));\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"deactivateAll\",\n    value: function deactivateAll() {\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n\n      var _iterator15 = _createForOfIteratorHelper(this.activeEntries),\n          _step15;\n\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var entry = _step15.value;\n          this.deactivate.emit({\n            value: entry,\n            entries: []\n          });\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n\n      this.activeEntries = [];\n    }\n  }]);\n\n  return AreaChartComponent;\n}(BaseChartComponent);\n\nAreaChartComponent.ɵfac = function AreaChartComponent_Factory(t) {\n  return ɵAreaChartComponent_BaseFactory(t || AreaChartComponent);\n};\n\nAreaChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AreaChartComponent,\n  selectors: [[\"ngx-charts-area-chart\"]],\n  contentQueries: function AreaChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    baseValue: \"baseValue\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    legend: \"legend\",\n    state: \"state\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    autoScale: \"autoScale\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"gradient\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n  template: function AreaChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelClick\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"defs\");\n      ɵngcc0.ɵɵelementStart(2, \"clipPath\");\n      ɵngcc0.ɵɵelement(3, \"rect\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(5, AreaChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(6, AreaChartComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵelementStart(7, \"g\");\n      ɵngcc0.ɵɵtemplate(8, AreaChartComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      ɵngcc0.ɵɵtemplate(9, AreaChartComponent__svg_g_9_Template, 3, 9, \"g\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(10, AreaChartComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.clipPathId);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  changeDetection: 0\n});\nAreaChartComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  state: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  baseValue: [{\n    type: Input\n  }],\n  autoScale: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  timeline: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  curve: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  xScaleMin: [{\n    type: Input\n  }],\n  xScaleMax: [{\n    type: Input\n  }],\n  yScaleMin: [{\n    type: Input\n  }],\n  yScaleMax: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }],\n  seriesTooltipTemplate: [{\n    type: ContentChild,\n    args: ['seriesTooltipTemplate']\n  }],\n  hideCircles: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\nvar ɵAreaChartComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AreaChartComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AreaChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:defs>\\n        <svg:clipPath [attr.id]=\\\"clipPathId\\\">\\n          <svg:rect\\n            [attr.width]=\\\"dims.width + 10\\\"\\n            [attr.height]=\\\"dims.height + 10\\\"\\n            [attr.transform]=\\\"'translate(-5, -5)'\\\"\\n          />\\n        </svg:clipPath>\\n      </svg:defs>\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"area-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g [attr.clip-path]=\\\"clipPath\\\">\\n          <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n            <svg:g\\n              ngx-charts-area-series\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [baseValue]=\\\"baseValue\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [scaleType]=\\\"scaleType\\\"\\n              [gradient]=\\\"gradient\\\"\\n              [curve]=\\\"curve\\\"\\n              [animations]=\\\"animations\\\"\\n            />\\n          </svg:g>\\n\\n          <svg:g *ngIf=\\\"!tooltipDisabled\\\" (mouseleave)=\\\"hideCircles()\\\">\\n            <svg:g\\n              ngx-charts-tooltip-area\\n              [dims]=\\\"dims\\\"\\n              [xSet]=\\\"xSet\\\"\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [results]=\\\"results\\\"\\n              [colors]=\\\"colors\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"seriesTooltipTemplate\\\"\\n              (hover)=\\\"updateHoveredVertical($event)\\\"\\n            />\\n\\n            <svg:g *ngFor=\\\"let series of results\\\">\\n              <svg:g\\n                ngx-charts-circle-series\\n                [xScale]=\\\"xScale\\\"\\n                [yScale]=\\\"yScale\\\"\\n                [colors]=\\\"colors\\\"\\n                [activeEntries]=\\\"activeEntries\\\"\\n                [data]=\\\"series\\\"\\n                [scaleType]=\\\"scaleType\\\"\\n                [visibleValue]=\\\"hoveredVertical\\\"\\n                [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n                [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n                (select)=\\\"onClick($event, series)\\\"\\n                (activate)=\\\"onActivate($event)\\\"\\n                (deactivate)=\\\"onDeactivate($event)\\\"\\n              />\\n            </svg:g>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n      <svg:g\\n        ngx-charts-timeline\\n        *ngIf=\\\"timeline && scaleType != 'ordinal'\\\"\\n        [attr.transform]=\\\"timelineTransform\\\"\\n        [results]=\\\"results\\\"\\n        [view]=\\\"[timelineWidth, height]\\\"\\n        [height]=\\\"timelineHeight\\\"\\n        [scheme]=\\\"scheme\\\"\\n        [customColors]=\\\"customColors\\\"\\n        [legend]=\\\"legend\\\"\\n        [scaleType]=\\\"scaleType\\\"\\n        (onDomainChange)=\\\"updateDomain($event)\\\"\\n      >\\n        <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n          <svg:g\\n            ngx-charts-area-series\\n            [xScale]=\\\"timelineXScale\\\"\\n            [yScale]=\\\"timelineYScale\\\"\\n            [baseValue]=\\\"baseValue\\\"\\n            [colors]=\\\"colors\\\"\\n            [data]=\\\"series\\\"\\n            [scaleType]=\\\"scaleType\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [curve]=\\\"curve\\\"\\n            [animations]=\\\"animations\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }],\n    legend: [{\n      type: Input\n    }],\n    state: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }]\n  });\n})();\n\nvar AreaChartNormalizedComponent = /*#__PURE__*/function (_BaseChartComponent2) {\n  _inherits(AreaChartNormalizedComponent, _BaseChartComponent2);\n\n  var _super3 = _createSuper(AreaChartNormalizedComponent);\n\n  function AreaChartNormalizedComponent() {\n    var _this24;\n\n    _classCallCheck(this, AreaChartNormalizedComponent);\n\n    _this24 = _super3.apply(this, arguments);\n    _this24.legend = false;\n    _this24.legendTitle = 'Legend';\n    _this24.legendPosition = 'right';\n    _this24.showGridLines = true;\n    _this24.curve = curveLinear;\n    _this24.activeEntries = [];\n    _this24.trimXAxisTicks = true;\n    _this24.trimYAxisTicks = true;\n    _this24.rotateXAxisTicks = true;\n    _this24.maxXAxisTickLength = 16;\n    _this24.maxYAxisTickLength = 16;\n    _this24.roundDomains = false;\n    _this24.tooltipDisabled = false;\n    _this24.activate = new EventEmitter();\n    _this24.deactivate = new EventEmitter();\n    _this24.margin = [10, 20, 10, 20];\n    _this24.xAxisHeight = 0;\n    _this24.yAxisWidth = 0;\n    _this24.timelineHeight = 50;\n    _this24.timelinePadding = 10;\n    return _this24;\n  }\n\n  _createClass(AreaChartNormalizedComponent, [{\n    key: \"update\",\n    value: function update() {\n      var _this25 = this;\n\n      _get(_getPrototypeOf(AreaChartNormalizedComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.timeline) {\n        this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n      }\n\n      this.xDomain = this.getXDomain();\n\n      if (this.filteredDomain) {\n        this.xDomain = this.filteredDomain;\n      }\n\n      this.yDomain = this.getYDomain();\n      this.seriesDomain = this.getSeriesDomain();\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n      this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n      var _loop2 = function _loop2(i) {\n        var val = _this25.xSet[i];\n        var d0 = 0;\n        var total = 0;\n\n        var _iterator16 = _createForOfIteratorHelper(_this25.results),\n            _step16;\n\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var group = _step16.value;\n            var d = group.series.find(function (item) {\n              var a = item.name;\n              var b = val;\n\n              if (_this25.scaleType === 'time') {\n                a = a.valueOf();\n                b = b.valueOf();\n              }\n\n              return a === b;\n            });\n\n            if (d) {\n              total += d.value;\n            }\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n\n        var _iterator17 = _createForOfIteratorHelper(_this25.results),\n            _step17;\n\n        try {\n          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n            var _group = _step17.value;\n\n            var _d = _group.series.find(function (item) {\n              var a = item.name;\n              var b = val;\n\n              if (_this25.scaleType === 'time') {\n                a = a.valueOf();\n                b = b.valueOf();\n              }\n\n              return a === b;\n            });\n\n            if (_d) {\n              _d.d0 = d0;\n              _d.d1 = d0 + _d.value;\n              d0 += _d.value;\n            } else {\n              _d = {\n                name: val,\n                value: 0,\n                d0: d0,\n                d1: d0\n              };\n\n              _group.series.push(_d);\n            }\n\n            if (total > 0) {\n              _d.d0 = _d.d0 * 100 / total;\n              _d.d1 = _d.d1 * 100 / total;\n            } else {\n              _d.d0 = 0;\n              _d.d1 = 0;\n            }\n          }\n        } catch (err) {\n          _iterator17.e(err);\n        } finally {\n          _iterator17.f();\n        }\n      };\n\n      for (var i = 0; i < this.xSet.length; i++) {\n        _loop2(i);\n      }\n\n      this.updateTimeline();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n      this.clipPathId = 'clip' + id().toString();\n      this.clipPath = \"url(#\".concat(this.clipPathId, \")\");\n    }\n  }, {\n    key: \"updateTimeline\",\n    value: function updateTimeline() {\n      if (this.timeline) {\n        this.timelineWidth = this.dims.width;\n        this.timelineXDomain = this.getXDomain();\n        this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n        this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n        this.timelineTransform = \"translate(\".concat(this.dims.xOffset, \", \").concat(-this.margin[2], \")\");\n      }\n    }\n  }, {\n    key: \"getXDomain\",\n    value: function getXDomain() {\n      var values = getUniqueXDomainValues(this.results);\n      this.scaleType = getScaleType(values);\n      var domain = [];\n\n      if (this.scaleType === 'time') {\n        var _min3 = Math.min.apply(Math, _toConsumableArray(values));\n\n        var _max3 = Math.max.apply(Math, _toConsumableArray(values));\n\n        domain = [new Date(_min3), new Date(_max3)];\n        this.xSet = _toConsumableArray(values).sort(function (a, b) {\n          var aDate = a.getTime();\n          var bDate = b.getTime();\n          if (aDate > bDate) return 1;\n          if (bDate > aDate) return -1;\n          return 0;\n        });\n      } else if (this.scaleType === 'linear') {\n        values = values.map(function (v) {\n          return Number(v);\n        });\n\n        var _min4 = Math.min.apply(Math, _toConsumableArray(values));\n\n        var _max4 = Math.max.apply(Math, _toConsumableArray(values));\n\n        domain = [_min4, _max4]; // Use compare function to sort numbers numerically\n\n        this.xSet = _toConsumableArray(values).sort(function (a, b) {\n          return a - b;\n        });\n      } else {\n        domain = values;\n        this.xSet = values;\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getYDomain\",\n    value: function getYDomain() {\n      return [0, 100];\n    }\n  }, {\n    key: \"getSeriesDomain\",\n    value: function getSeriesDomain() {\n      return this.results.map(function (d) {\n        return d.name;\n      });\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale(domain, width) {\n      var scale;\n\n      if (this.scaleType === 'time') {\n        scale = scaleTime();\n      } else if (this.scaleType === 'linear') {\n        scale = scaleLinear();\n      } else if (this.scaleType === 'ordinal') {\n        scale = scalePoint().padding(0.1);\n      }\n\n      scale.range([0, width]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale(domain, height) {\n      var scale = scaleLinear().range([height, 0]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"updateDomain\",\n    value: function updateDomain(domain) {\n      this.filteredDomain = domain;\n      this.xDomain = this.filteredDomain;\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n  }, {\n    key: \"updateHoveredVertical\",\n    value: function updateHoveredVertical(item) {\n      this.hoveredVertical = item.value;\n      this.deactivateAll();\n    }\n  }, {\n    key: \"hideCircles\",\n    value: function hideCircles() {\n      this.hoveredVertical = null;\n      this.deactivateAll();\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, series) {\n      if (series) {\n        data.series = series.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.seriesDomain;\n      } else {\n        domain = this.yDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.seriesDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref10) {\n      var width = _ref10.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref11) {\n      var height = _ref11.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item].concat(_toConsumableArray(this.activeEntries));\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"deactivateAll\",\n    value: function deactivateAll() {\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n\n      var _iterator18 = _createForOfIteratorHelper(this.activeEntries),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var entry = _step18.value;\n          this.deactivate.emit({\n            value: entry,\n            entries: []\n          });\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n\n      this.activeEntries = [];\n    }\n  }]);\n\n  return AreaChartNormalizedComponent;\n}(BaseChartComponent);\n\nAreaChartNormalizedComponent.ɵfac = function AreaChartNormalizedComponent_Factory(t) {\n  return ɵAreaChartNormalizedComponent_BaseFactory(t || AreaChartNormalizedComponent);\n};\n\nAreaChartNormalizedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AreaChartNormalizedComponent,\n  selectors: [[\"ngx-charts-area-chart-normalized\"]],\n  contentQueries: function AreaChartNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartNormalizedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", \"normalized\", \"true\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"activeEntries\", \"gradient\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", \"type\", \"stacked\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", \"normalized\", \"true\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n  template: function AreaChartNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelClick\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"defs\");\n      ɵngcc0.ɵɵelementStart(2, \"clipPath\");\n      ɵngcc0.ɵɵelement(3, \"rect\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(5, AreaChartNormalizedComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(6, AreaChartNormalizedComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵelementStart(7, \"g\");\n      ɵngcc0.ɵɵtemplate(8, AreaChartNormalizedComponent__svg_g_8_Template, 2, 9, \"g\", 4);\n      ɵngcc0.ɵɵtemplate(9, AreaChartNormalizedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(10, AreaChartNormalizedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.clipPathId);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  changeDetection: 0\n});\nAreaChartNormalizedComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  timeline: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  curve: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }],\n  seriesTooltipTemplate: [{\n    type: ContentChild,\n    args: ['seriesTooltipTemplate']\n  }],\n  hideCircles: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\nvar ɵAreaChartNormalizedComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AreaChartNormalizedComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AreaChartNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-normalized',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:defs>\\n        <svg:clipPath [attr.id]=\\\"clipPathId\\\">\\n          <svg:rect\\n            [attr.width]=\\\"dims.width + 10\\\"\\n            [attr.height]=\\\"dims.height + 10\\\"\\n            [attr.transform]=\\\"'translate(-5, -5)'\\\"\\n          />\\n        </svg:clipPath>\\n      </svg:defs>\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"area-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g [attr.clip-path]=\\\"clipPath\\\">\\n          <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n            <svg:g\\n              ngx-charts-area-series\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [scaleType]=\\\"scaleType\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [gradient]=\\\"gradient\\\"\\n              normalized=\\\"true\\\"\\n              [curve]=\\\"curve\\\"\\n              [animations]=\\\"animations\\\"\\n            />\\n          </svg:g>\\n\\n          <svg:g *ngIf=\\\"!tooltipDisabled\\\" (mouseleave)=\\\"hideCircles()\\\">\\n            <svg:g\\n              ngx-charts-tooltip-area\\n              [dims]=\\\"dims\\\"\\n              [xSet]=\\\"xSet\\\"\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [results]=\\\"results\\\"\\n              [colors]=\\\"colors\\\"\\n              [showPercentage]=\\\"true\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"seriesTooltipTemplate\\\"\\n              (hover)=\\\"updateHoveredVertical($event)\\\"\\n            />\\n\\n            <svg:g *ngFor=\\\"let series of results\\\">\\n              <svg:g\\n                ngx-charts-circle-series\\n                type=\\\"stacked\\\"\\n                [xScale]=\\\"xScale\\\"\\n                [yScale]=\\\"yScale\\\"\\n                [colors]=\\\"colors\\\"\\n                [activeEntries]=\\\"activeEntries\\\"\\n                [data]=\\\"series\\\"\\n                [scaleType]=\\\"scaleType\\\"\\n                [visibleValue]=\\\"hoveredVertical\\\"\\n                [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n                [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n                (select)=\\\"onClick($event, series)\\\"\\n                (activate)=\\\"onActivate($event)\\\"\\n                (deactivate)=\\\"onDeactivate($event)\\\"\\n              />\\n            </svg:g>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n      <svg:g\\n        ngx-charts-timeline\\n        *ngIf=\\\"timeline && scaleType != 'ordinal'\\\"\\n        [attr.transform]=\\\"timelineTransform\\\"\\n        [results]=\\\"results\\\"\\n        [view]=\\\"[timelineWidth, height]\\\"\\n        [height]=\\\"timelineHeight\\\"\\n        [scheme]=\\\"scheme\\\"\\n        [customColors]=\\\"customColors\\\"\\n        [legend]=\\\"legend\\\"\\n        [scaleType]=\\\"scaleType\\\"\\n        (onDomainChange)=\\\"updateDomain($event)\\\"\\n      >\\n        <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n          <svg:g\\n            ngx-charts-area-series\\n            [xScale]=\\\"timelineXScale\\\"\\n            [yScale]=\\\"timelineYScale\\\"\\n            [colors]=\\\"colors\\\"\\n            [data]=\\\"series\\\"\\n            [scaleType]=\\\"scaleType\\\"\\n            [gradient]=\\\"gradient\\\"\\n            normalized=\\\"true\\\"\\n            [curve]=\\\"curve\\\"\\n            [animations]=\\\"animations\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }]\n  });\n})();\n\nvar AreaChartStackedComponent = /*#__PURE__*/function (_BaseChartComponent3) {\n  _inherits(AreaChartStackedComponent, _BaseChartComponent3);\n\n  var _super4 = _createSuper(AreaChartStackedComponent);\n\n  function AreaChartStackedComponent() {\n    var _this26;\n\n    _classCallCheck(this, AreaChartStackedComponent);\n\n    _this26 = _super4.apply(this, arguments);\n    _this26.legend = false;\n    _this26.legendTitle = 'Legend';\n    _this26.legendPosition = 'right';\n    _this26.showGridLines = true;\n    _this26.curve = curveLinear;\n    _this26.activeEntries = [];\n    _this26.trimXAxisTicks = true;\n    _this26.trimYAxisTicks = true;\n    _this26.rotateXAxisTicks = true;\n    _this26.maxXAxisTickLength = 16;\n    _this26.maxYAxisTickLength = 16;\n    _this26.roundDomains = false;\n    _this26.tooltipDisabled = false;\n    _this26.activate = new EventEmitter();\n    _this26.deactivate = new EventEmitter();\n    _this26.margin = [10, 20, 10, 20];\n    _this26.xAxisHeight = 0;\n    _this26.yAxisWidth = 0;\n    _this26.timelineHeight = 50;\n    _this26.timelinePadding = 10;\n    return _this26;\n  }\n\n  _createClass(AreaChartStackedComponent, [{\n    key: \"update\",\n    value: function update() {\n      var _this27 = this;\n\n      _get(_getPrototypeOf(AreaChartStackedComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.timeline) {\n        this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n      }\n\n      this.xDomain = this.getXDomain();\n\n      if (this.filteredDomain) {\n        this.xDomain = this.filteredDomain;\n      }\n\n      this.yDomain = this.getYDomain();\n      this.seriesDomain = this.getSeriesDomain();\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n      this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n      var _loop3 = function _loop3(i) {\n        var val = _this27.xSet[i];\n        var d0 = 0;\n\n        var _iterator19 = _createForOfIteratorHelper(_this27.results),\n            _step19;\n\n        try {\n          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n            var group = _step19.value;\n            var d = group.series.find(function (item) {\n              var a = item.name;\n              var b = val;\n\n              if (_this27.scaleType === 'time') {\n                a = a.valueOf();\n                b = b.valueOf();\n              }\n\n              return a === b;\n            });\n\n            if (d) {\n              d.d0 = d0;\n              d.d1 = d0 + d.value;\n              d0 += d.value;\n            } else {\n              d = {\n                name: val,\n                value: 0,\n                d0: d0,\n                d1: d0\n              };\n              group.series.push(d);\n            }\n          }\n        } catch (err) {\n          _iterator19.e(err);\n        } finally {\n          _iterator19.f();\n        }\n      };\n\n      for (var i = 0; i < this.xSet.length; i++) {\n        _loop3(i);\n      }\n\n      this.updateTimeline();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n      this.clipPathId = 'clip' + id().toString();\n      this.clipPath = \"url(#\".concat(this.clipPathId, \")\");\n    }\n  }, {\n    key: \"updateTimeline\",\n    value: function updateTimeline() {\n      if (this.timeline) {\n        this.timelineWidth = this.dims.width;\n        this.timelineXDomain = this.getXDomain();\n        this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n        this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n        this.timelineTransform = \"translate(\".concat(this.dims.xOffset, \", \").concat(-this.margin[2], \")\");\n      }\n    }\n  }, {\n    key: \"getXDomain\",\n    value: function getXDomain() {\n      var values = getUniqueXDomainValues(this.results);\n      this.scaleType = getScaleType(values);\n      var domain = [];\n\n      if (this.scaleType === 'linear') {\n        values = values.map(function (v) {\n          return Number(v);\n        });\n      }\n\n      var min;\n      var max;\n\n      if (this.scaleType === 'time' || this.scaleType === 'linear') {\n        min = this.xScaleMin ? this.xScaleMin : Math.min.apply(Math, _toConsumableArray(values));\n        max = this.xScaleMax ? this.xScaleMax : Math.max.apply(Math, _toConsumableArray(values));\n      }\n\n      if (this.scaleType === 'time') {\n        domain = [new Date(min), new Date(max)];\n        this.xSet = _toConsumableArray(values).sort(function (a, b) {\n          var aDate = a.getTime();\n          var bDate = b.getTime();\n          if (aDate > bDate) return 1;\n          if (bDate > aDate) return -1;\n          return 0;\n        });\n      } else if (this.scaleType === 'linear') {\n        domain = [min, max]; // Use compare function to sort numbers numerically\n\n        this.xSet = _toConsumableArray(values).sort(function (a, b) {\n          return a - b;\n        });\n      } else {\n        domain = values;\n        this.xSet = values;\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getYDomain\",\n    value: function getYDomain() {\n      var _this28 = this;\n\n      var domain = [];\n\n      var _loop4 = function _loop4(i) {\n        var val = _this28.xSet[i];\n        var sum = 0;\n\n        var _iterator20 = _createForOfIteratorHelper(_this28.results),\n            _step20;\n\n        try {\n          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n            var group = _step20.value;\n            var d = group.series.find(function (item) {\n              var a = item.name;\n              var b = val;\n\n              if (_this28.scaleType === 'time') {\n                a = a.valueOf();\n                b = b.valueOf();\n              }\n\n              return a === b;\n            });\n\n            if (d) {\n              sum += d.value;\n            }\n          }\n        } catch (err) {\n          _iterator20.e(err);\n        } finally {\n          _iterator20.f();\n        }\n\n        domain.push(sum);\n      };\n\n      for (var i = 0; i < this.xSet.length; i++) {\n        _loop4(i);\n      }\n\n      var min = this.yScaleMin ? this.yScaleMin : Math.min.apply(Math, [0].concat(domain));\n      var max = this.yScaleMax ? this.yScaleMax : Math.max.apply(Math, domain);\n      return [min, max];\n    }\n  }, {\n    key: \"getSeriesDomain\",\n    value: function getSeriesDomain() {\n      return this.results.map(function (d) {\n        return d.name;\n      });\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale(domain, width) {\n      var scale;\n\n      if (this.scaleType === 'time') {\n        scale = scaleTime();\n      } else if (this.scaleType === 'linear') {\n        scale = scaleLinear();\n      } else if (this.scaleType === 'ordinal') {\n        scale = scalePoint().padding(0.1);\n      }\n\n      scale.range([0, width]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale(domain, height) {\n      var scale = scaleLinear().range([height, 0]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"updateDomain\",\n    value: function updateDomain(domain) {\n      this.filteredDomain = domain;\n      this.xDomain = this.filteredDomain;\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n  }, {\n    key: \"updateHoveredVertical\",\n    value: function updateHoveredVertical(item) {\n      this.hoveredVertical = item.value;\n      this.deactivateAll();\n    }\n  }, {\n    key: \"hideCircles\",\n    value: function hideCircles() {\n      this.hoveredVertical = null;\n      this.deactivateAll();\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, series) {\n      if (series) {\n        data.series = series.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.seriesDomain;\n      } else {\n        domain = this.yDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.seriesDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref12) {\n      var width = _ref12.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref13) {\n      var height = _ref13.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item].concat(_toConsumableArray(this.activeEntries));\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"deactivateAll\",\n    value: function deactivateAll() {\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n\n      var _iterator21 = _createForOfIteratorHelper(this.activeEntries),\n          _step21;\n\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var entry = _step21.value;\n          this.deactivate.emit({\n            value: entry,\n            entries: []\n          });\n        }\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n\n      this.activeEntries = [];\n    }\n  }]);\n\n  return AreaChartStackedComponent;\n}(BaseChartComponent);\n\nAreaChartStackedComponent.ɵfac = function AreaChartStackedComponent_Factory(t) {\n  return ɵAreaChartStackedComponent_BaseFactory(t || AreaChartStackedComponent);\n};\n\nAreaChartStackedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AreaChartStackedComponent,\n  selectors: [[\"ngx-charts-area-chart-stacked\"]],\n  contentQueries: function AreaChartStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartStackedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", \"stacked\", \"true\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"activeEntries\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [\"ngx-charts-circle-series\", \"\", \"type\", \"stacked\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", \"stacked\", \"true\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n  template: function AreaChartStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelClick\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"defs\");\n      ɵngcc0.ɵɵelementStart(2, \"clipPath\");\n      ɵngcc0.ɵɵelement(3, \"rect\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(5, AreaChartStackedComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(6, AreaChartStackedComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵelementStart(7, \"g\");\n      ɵngcc0.ɵɵtemplate(8, AreaChartStackedComponent__svg_g_8_Template, 2, 9, \"g\", 4);\n      ɵngcc0.ɵɵtemplate(9, AreaChartStackedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(10, AreaChartStackedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.clipPathId);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  changeDetection: 0\n});\nAreaChartStackedComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  timeline: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  curve: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  xScaleMin: [{\n    type: Input\n  }],\n  xScaleMax: [{\n    type: Input\n  }],\n  yScaleMin: [{\n    type: Input\n  }],\n  yScaleMax: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }],\n  seriesTooltipTemplate: [{\n    type: ContentChild,\n    args: ['seriesTooltipTemplate']\n  }],\n  hideCircles: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\nvar ɵAreaChartStackedComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AreaChartStackedComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AreaChartStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-stacked',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:defs>\\n        <svg:clipPath [attr.id]=\\\"clipPathId\\\">\\n          <svg:rect\\n            [attr.width]=\\\"dims.width + 10\\\"\\n            [attr.height]=\\\"dims.height + 10\\\"\\n            [attr.transform]=\\\"'translate(-5, -5)'\\\"\\n          />\\n        </svg:clipPath>\\n      </svg:defs>\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"area-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g [attr.clip-path]=\\\"clipPath\\\">\\n          <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n            <svg:g\\n              ngx-charts-area-series\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [scaleType]=\\\"scaleType\\\"\\n              [gradient]=\\\"gradient\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              stacked=\\\"true\\\"\\n              [curve]=\\\"curve\\\"\\n              [animations]=\\\"animations\\\"\\n            />\\n          </svg:g>\\n\\n          <svg:g *ngIf=\\\"!tooltipDisabled\\\" (mouseleave)=\\\"hideCircles()\\\">\\n            <svg:g\\n              ngx-charts-tooltip-area\\n              [dims]=\\\"dims\\\"\\n              [xSet]=\\\"xSet\\\"\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [results]=\\\"results\\\"\\n              [colors]=\\\"colors\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"seriesTooltipTemplate\\\"\\n              (hover)=\\\"updateHoveredVertical($event)\\\"\\n            />\\n\\n            <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n              <svg:g\\n                ngx-charts-circle-series\\n                type=\\\"stacked\\\"\\n                [xScale]=\\\"xScale\\\"\\n                [yScale]=\\\"yScale\\\"\\n                [colors]=\\\"colors\\\"\\n                [activeEntries]=\\\"activeEntries\\\"\\n                [data]=\\\"series\\\"\\n                [scaleType]=\\\"scaleType\\\"\\n                [visibleValue]=\\\"hoveredVertical\\\"\\n                [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n                [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n                (select)=\\\"onClick($event, series)\\\"\\n                (activate)=\\\"onActivate($event)\\\"\\n                (deactivate)=\\\"onDeactivate($event)\\\"\\n              />\\n            </svg:g>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n      <svg:g\\n        ngx-charts-timeline\\n        *ngIf=\\\"timeline && scaleType != 'ordinal'\\\"\\n        [attr.transform]=\\\"timelineTransform\\\"\\n        [results]=\\\"results\\\"\\n        [view]=\\\"[timelineWidth, height]\\\"\\n        [height]=\\\"timelineHeight\\\"\\n        [scheme]=\\\"scheme\\\"\\n        [customColors]=\\\"customColors\\\"\\n        [legend]=\\\"legend\\\"\\n        [scaleType]=\\\"scaleType\\\"\\n        (onDomainChange)=\\\"updateDomain($event)\\\"\\n      >\\n        <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n          <svg:g\\n            ngx-charts-area-series\\n            [xScale]=\\\"timelineXScale\\\"\\n            [yScale]=\\\"timelineYScale\\\"\\n            [colors]=\\\"colors\\\"\\n            [data]=\\\"series\\\"\\n            [scaleType]=\\\"scaleType\\\"\\n            [gradient]=\\\"gradient\\\"\\n            stacked=\\\"true\\\"\\n            [curve]=\\\"curve\\\"\\n            [animations]=\\\"animations\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }]\n  });\n})();\n\nfunction sortLinear(data, property) {\n  var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'asc';\n  return data.sort(function (a, b) {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nfunction sortByDomain(data, property) {\n  var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'asc';\n  var domain = arguments.length > 3 ? arguments[3] : undefined;\n  return data.sort(function (a, b) {\n    var aVal = a[property];\n    var bVal = b[property];\n    var aIdx = domain.indexOf(aVal);\n    var bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nfunction sortByTime(data, property) {\n  var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'asc';\n  return data.sort(function (a, b) {\n    var aDate = a[property].getTime();\n    var bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n\nvar AreaSeriesComponent = /*#__PURE__*/function () {\n  function AreaSeriesComponent() {\n    _classCallCheck(this, AreaSeriesComponent);\n\n    this.baseValue = 'auto';\n    this.stacked = false;\n    this.normalized = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  _createClass(AreaSeriesComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this29 = this;\n\n      this.updateGradient();\n      var currentArea;\n      var startingArea;\n\n      var xProperty = function xProperty(d) {\n        var label = d.name;\n        return _this29.xScale(label);\n      };\n\n      if (this.stacked || this.normalized) {\n        currentArea = area().x(xProperty).y0(function (d, i) {\n          return _this29.yScale(d.d0);\n        }).y1(function (d, i) {\n          return _this29.yScale(d.d1);\n        });\n        startingArea = area().x(xProperty).y0(function (d) {\n          return _this29.yScale.range()[0];\n        }).y1(function (d) {\n          return _this29.yScale.range()[0];\n        });\n      } else {\n        currentArea = area().x(xProperty).y0(function () {\n          return _this29.baseValue === 'auto' ? _this29.yScale.range()[0] : _this29.yScale(_this29.baseValue);\n        }).y1(function (d) {\n          return _this29.yScale(d.value);\n        });\n        startingArea = area().x(xProperty).y0(function (d) {\n          return _this29.baseValue === 'auto' ? _this29.yScale.range()[0] : _this29.yScale(_this29.baseValue);\n        }).y1(function (d) {\n          return _this29.baseValue === 'auto' ? _this29.yScale.range()[0] : _this29.yScale(_this29.baseValue);\n        });\n      }\n\n      currentArea.curve(this.curve);\n      startingArea.curve(this.curve);\n      this.opacity = 0.8;\n      var data = this.data.series;\n\n      if (this.scaleType === 'linear') {\n        data = sortLinear(data, 'name');\n      } else if (this.scaleType === 'time') {\n        data = sortByTime(data, 'name');\n      } else {\n        data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n      }\n\n      this.path = currentArea(data);\n      this.startingPath = startingArea(data);\n    }\n  }, {\n    key: \"updateGradient\",\n    value: function updateGradient() {\n      if (this.colors.scaleType === 'linear') {\n        this.hasGradient = true;\n\n        if (this.stacked || this.normalized) {\n          var d0values = this.data.series.map(function (d) {\n            return d.d0;\n          });\n          var d1values = this.data.series.map(function (d) {\n            return d.d1;\n          });\n\n          var _max5 = Math.max.apply(Math, _toConsumableArray(d1values));\n\n          var _min5 = Math.min.apply(Math, _toConsumableArray(d0values));\n\n          this.gradientStops = this.colors.getLinearGradientStops(_max5, _min5);\n        } else {\n          var values = this.data.series.map(function (d) {\n            return d.value;\n          });\n\n          var _max6 = Math.max.apply(Math, _toConsumableArray(values));\n\n          this.gradientStops = this.colors.getLinearGradientStops(_max6);\n        }\n      } else {\n        this.hasGradient = false;\n        this.gradientStops = undefined;\n      }\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(entry) {\n      if (!this.activeEntries) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name;\n      });\n      return item !== undefined;\n    }\n  }, {\n    key: \"isInactive\",\n    value: function isInactive(entry) {\n      if (!this.activeEntries || this.activeEntries.length === 0) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name;\n      });\n      return item === undefined;\n    }\n  }]);\n\n  return AreaSeriesComponent;\n}();\n\nAreaSeriesComponent.ɵfac = function AreaSeriesComponent_Factory(t) {\n  return new (t || AreaSeriesComponent)();\n};\n\nAreaSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AreaSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-area-series\", \"\"]],\n  inputs: {\n    baseValue: \"baseValue\",\n    stacked: \"stacked\",\n    normalized: \"normalized\",\n    animations: \"animations\",\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    gradient: \"gradient\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c25,\n  decls: 1,\n  vars: 12,\n  consts: [[\"ngx-charts-area\", \"\", 1, \"area-series\", 3, \"data\", \"path\", \"fill\", \"stops\", \"startingPath\", \"opacity\", \"gradient\", \"animations\"]],\n  template: function AreaSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelement(0, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      ɵngcc0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"fill\", ctx.colors.getColor(ctx.data.name))(\"stops\", ctx.gradientStops)(\"startingPath\", ctx.startingPath)(\"opacity\", ctx.opacity)(\"gradient\", ctx.gradient || ctx.hasGradient)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [AreaComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\nAreaSeriesComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  xScale: [{\n    type: Input\n  }],\n  yScale: [{\n    type: Input\n  }],\n  baseValue: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  scaleType: [{\n    type: Input\n  }],\n  stacked: [{\n    type: Input\n  }],\n  normalized: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  curve: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AreaSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area-series]',\n      template: \"\\n    <svg:g\\n      ngx-charts-area\\n      class=\\\"area-series\\\"\\n      [data]=\\\"data\\\"\\n      [path]=\\\"path\\\"\\n      [fill]=\\\"colors.getColor(data.name)\\\"\\n      [stops]=\\\"gradientStops\\\"\\n      [startingPath]=\\\"startingPath\\\"\\n      [opacity]=\\\"opacity\\\"\\n      [gradient]=\\\"gradient || hasGradient\\\"\\n      [animations]=\\\"animations\\\"\\n      [class.active]=\\\"isActive(data)\\\"\\n      [class.inactive]=\\\"isInactive(data)\\\"\\n    />\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    baseValue: [{\n      type: Input\n    }],\n    stacked: [{\n      type: Input\n    }],\n    normalized: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }]\n  });\n})();\n\nvar AreaChartModule = function AreaChartModule() {\n  _classCallCheck(this, AreaChartModule);\n};\n\nAreaChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AreaChartModule\n});\nAreaChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AreaChartModule_Factory(t) {\n    return new (t || AreaChartModule)();\n  },\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AreaChartModule, {\n    declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n    imports: [ChartCommonModule],\n    exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AreaChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n      exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nvar BarComponent = /*#__PURE__*/function () {\n  function BarComponent(element) {\n    _classCallCheck(this, BarComponent);\n\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.element = element.nativeElement;\n  }\n\n  _createClass(BarComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.roundEdges) {\n        this.loadAnimation();\n      }\n\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.gradientId = 'grad' + id().toString();\n      this.gradientFill = \"url(#\".concat(this.gradientId, \")\");\n\n      if (this.gradient || this.stops) {\n        this.gradientStops = this.getGradient();\n        this.hasGradient = true;\n      } else {\n        this.hasGradient = false;\n      }\n\n      this.updatePathEl();\n      this.checkToHideBar();\n    }\n  }, {\n    key: \"loadAnimation\",\n    value: function loadAnimation() {\n      this.path = this.getStartingPath();\n      setTimeout(this.update.bind(this), 100);\n    }\n  }, {\n    key: \"updatePathEl\",\n    value: function updatePathEl() {\n      var node = select(this.element).select('.bar');\n      var path = this.getPath();\n\n      if (this.animations) {\n        node.transition().duration(500).attr('d', path);\n      } else {\n        node.attr('d', path);\n      }\n    }\n  }, {\n    key: \"getGradient\",\n    value: function getGradient() {\n      if (this.stops) {\n        return this.stops;\n      }\n\n      return [{\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      }, {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }];\n    }\n  }, {\n    key: \"getStartingPath\",\n    value: function getStartingPath() {\n      if (!this.animations) {\n        return this.getPath();\n      }\n\n      var radius = this.getRadius();\n      var path;\n\n      if (this.roundEdges) {\n        if (this.orientation === 'vertical') {\n          radius = Math.min(this.height, radius);\n          path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n        } else if (this.orientation === 'horizontal') {\n          radius = Math.min(this.width, radius);\n          path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n        }\n      } else {\n        if (this.orientation === 'vertical') {\n          path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n        } else if (this.orientation === 'horizontal') {\n          path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n        }\n      }\n\n      return path;\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      var radius = this.getRadius();\n      var path;\n\n      if (this.roundEdges) {\n        if (this.orientation === 'vertical') {\n          radius = Math.min(this.height, radius);\n          path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        } else if (this.orientation === 'horizontal') {\n          radius = Math.min(this.width, radius);\n          path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        }\n      } else {\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n\n      return path;\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      var radius = 0;\n\n      if (this.roundEdges && this.height > 5 && this.width > 5) {\n        radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n      }\n\n      return radius;\n    }\n  }, {\n    key: \"getStartOpacity\",\n    value: function getStartOpacity() {\n      if (this.roundEdges) {\n        return 0.2;\n      } else {\n        return 0.5;\n      }\n    }\n  }, {\n    key: \"edges\",\n    get: function get() {\n      var edges = [false, false, false, false];\n\n      if (this.roundEdges) {\n        if (this.orientation === 'vertical') {\n          if (this.data.value > 0) {\n            edges = [true, true, false, false];\n          } else {\n            edges = [false, false, true, true];\n          }\n        } else if (this.orientation === 'horizontal') {\n          if (this.data.value > 0) {\n            edges = [false, true, false, true];\n          } else {\n            edges = [true, false, true, false];\n          }\n        }\n      }\n\n      return edges;\n    }\n  }, {\n    key: \"onMouseEnter\",\n    value: function onMouseEnter() {\n      this.activate.emit(this.data);\n    }\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave() {\n      this.deactivate.emit(this.data);\n    }\n  }, {\n    key: \"checkToHideBar\",\n    value: function checkToHideBar() {\n      this.hideBar = this.noBarWhenZero && (this.orientation === 'vertical' && this.height === 0 || this.orientation === 'horizontal' && this.width === 0);\n    }\n  }]);\n\n  return BarComponent;\n}();\n\nBarComponent.ɵfac = function BarComponent_Factory(t) {\n  return new (t || BarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarComponent,\n  selectors: [[\"g\", \"ngx-charts-bar\", \"\"]],\n  hostBindings: function BarComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mouseenter\", function BarComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BarComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    animations: \"animations\",\n    noBarWhenZero: \"noBarWhenZero\",\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    orientation: \"orientation\",\n    stops: \"stops\",\n    ariaLabel: \"ariaLabel\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c26,\n  decls: 2,\n  vars: 8,\n  consts: [[4, \"ngIf\"], [\"stroke\", \"none\", \"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function BarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, BarComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"path\", 1);\n      ɵngcc0.ɵɵlistener(\"click\", function BarComponent_Template__svg_path_click_1_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      ɵngcc0.ɵɵattribute(\"d\", ctx.path)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  directives: [ɵngcc1.NgIf, SvgLinearGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nBarComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nBarComponent.propDecorators = {\n  fill: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  x: [{\n    type: Input\n  }],\n  y: [{\n    type: Input\n  }],\n  orientation: [{\n    type: Input\n  }],\n  roundEdges: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  offset: [{\n    type: Input\n  }],\n  isActive: [{\n    type: Input\n  }],\n  stops: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  onMouseEnter: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  onMouseLeave: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar]',\n      template: \"\\n    <svg:defs *ngIf=\\\"hasGradient\\\">\\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\\\"orientation\\\" [name]=\\\"gradientId\\\" [stops]=\\\"gradientStops\\\" />\\n    </svg:defs>\\n    <svg:path\\n      class=\\\"bar\\\"\\n      stroke=\\\"none\\\"\\n      role=\\\"img\\\"\\n      tabIndex=\\\"-1\\\"\\n      [class.active]=\\\"isActive\\\"\\n      [class.hidden]=\\\"hideBar\\\"\\n      [attr.d]=\\\"path\\\"\\n      [attr.aria-label]=\\\"ariaLabel\\\"\\n      [attr.fill]=\\\"hasGradient ? gradientFill : fill\\\"\\n      (click)=\\\"select.emit(data)\\\"\\n    />\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }],\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }]\n  });\n})();\n\nvar BarHorizontalComponent = /*#__PURE__*/function (_BaseChartComponent4) {\n  _inherits(BarHorizontalComponent, _BaseChartComponent4);\n\n  var _super5 = _createSuper(BarHorizontalComponent);\n\n  function BarHorizontalComponent() {\n    var _this30;\n\n    _classCallCheck(this, BarHorizontalComponent);\n\n    _this30 = _super5.apply(this, arguments);\n    _this30.legend = false;\n    _this30.legendTitle = 'Legend';\n    _this30.legendPosition = 'right';\n    _this30.tooltipDisabled = false;\n    _this30.showGridLines = true;\n    _this30.activeEntries = [];\n    _this30.trimXAxisTicks = true;\n    _this30.trimYAxisTicks = true;\n    _this30.rotateXAxisTicks = true;\n    _this30.maxXAxisTickLength = 16;\n    _this30.maxYAxisTickLength = 16;\n    _this30.barPadding = 8;\n    _this30.roundDomains = false;\n    _this30.roundEdges = true;\n    _this30.showDataLabel = false;\n    _this30.noBarWhenZero = true;\n    _this30.activate = new EventEmitter();\n    _this30.deactivate = new EventEmitter();\n    _this30.margin = [10, 20, 10, 20];\n    _this30.xAxisHeight = 0;\n    _this30.yAxisWidth = 0;\n    _this30.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    return _this30;\n  }\n\n  _createClass(BarHorizontalComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(BarHorizontalComponent.prototype), \"update\", this).call(this);\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxWidth = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale() {\n      this.xDomain = this.getXDomain();\n      var scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale() {\n      this.yDomain = this.getYDomain();\n      var spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n    }\n  }, {\n    key: \"getXDomain\",\n    value: function getXDomain() {\n      var values = this.results.map(function (d) {\n        return d.value;\n      });\n      var min = this.xScaleMin ? Math.min.apply(Math, [this.xScaleMin].concat(_toConsumableArray(values))) : Math.min.apply(Math, [0].concat(_toConsumableArray(values)));\n      var max = this.xScaleMax ? Math.max.apply(Math, [this.xScaleMax].concat(_toConsumableArray(values))) : Math.max.apply(Math, [0].concat(_toConsumableArray(values)));\n      return [min, max];\n    }\n  }, {\n    key: \"getYDomain\",\n    value: function getYDomain() {\n      return this.results.map(function (d) {\n        return d.label;\n      });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.yDomain;\n      } else {\n        domain = this.xDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.xDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref14) {\n      var width = _ref14.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref15) {\n      var height = _ref15.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onDataLabelMaxWidthChanged\",\n    value: function onDataLabelMaxWidthChanged(event) {\n      var _this31 = this;\n\n      if (event.size.negative) {\n        this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n      } else {\n        this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n      }\n\n      if (event.index === this.results.length - 1) {\n        setTimeout(function () {\n          return _this31.update();\n        });\n      }\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var fromLegend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      item = this.results.find(function (d) {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item].concat(_toConsumableArray(this.activeEntries));\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var fromLegend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      item = this.results.find(function (d) {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return BarHorizontalComponent;\n}(BaseChartComponent);\n\nBarHorizontalComponent.ɵfac = function BarHorizontalComponent_Factory(t) {\n  return ɵBarHorizontalComponent_BaseFactory(t || BarHorizontalComponent);\n};\n\nBarHorizontalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarHorizontalComponent,\n  selectors: [[\"ngx-charts-bar-horizontal\"]],\n  contentQueries: function BarHorizontalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    showDataLabel: \"showDataLabel\",\n    noBarWhenZero: \"noBarWhenZero\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    xScaleMax: \"xScaleMax\",\n    xScaleMin: \"xScaleMin\",\n    dataLabelFormatting: \"dataLabelFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"activeEntries\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"]],\n  template: function BarHorizontalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelClick\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(2, BarHorizontalComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(3, BarHorizontalComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵelementStart(4, \"g\", 4);\n      ɵngcc0.ɵɵlistener(\"select\", function BarHorizontalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BarHorizontalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarHorizontalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"dataLabelWidthChanged\", function BarHorizontalComponent_Template__svg_g_dataLabelWidthChanged_4_listener($event) {\n        return ctx.onDataLabelMaxWidthChanged($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(22, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, SeriesHorizontal, XAxisComponent, YAxisComponent];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  changeDetection: 0\n});\nBarHorizontalComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  barPadding: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  roundEdges: [{\n    type: Input\n  }],\n  xScaleMax: [{\n    type: Input\n  }],\n  xScaleMin: [{\n    type: Input\n  }],\n  showDataLabel: [{\n    type: Input\n  }],\n  dataLabelFormatting: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵBarHorizontalComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(BarHorizontalComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarHorizontalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, true)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          [yAxisOffset]=\\\"dataLabelMaxWidth.negative\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-series-horizontal\\n          [xScale]=\\\"xScale\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [colors]=\\\"colors\\\"\\n          [series]=\\\"results\\\"\\n          [dims]=\\\"dims\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [activeEntries]=\\\"activeEntries\\\"\\n          [roundEdges]=\\\"roundEdges\\\"\\n          [animations]=\\\"animations\\\"\\n          [showDataLabel]=\\\"showDataLabel\\\"\\n          [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n          [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n          (select)=\\\"onClick($event)\\\"\\n          (activate)=\\\"onActivate($event)\\\"\\n          (deactivate)=\\\"onDeactivate($event)\\\"\\n          (dataLabelWidthChanged)=\\\"onDataLabelMaxWidthChanged($event)\\\"\\n        ></svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar BarHorizontal2DComponent = /*#__PURE__*/function (_BaseChartComponent5) {\n  _inherits(BarHorizontal2DComponent, _BaseChartComponent5);\n\n  var _super6 = _createSuper(BarHorizontal2DComponent);\n\n  function BarHorizontal2DComponent() {\n    var _this32;\n\n    _classCallCheck(this, BarHorizontal2DComponent);\n\n    _this32 = _super6.apply(this, arguments);\n    _this32.legend = false;\n    _this32.legendTitle = 'Legend';\n    _this32.legendPosition = 'right';\n    _this32.tooltipDisabled = false;\n    _this32.showGridLines = true;\n    _this32.activeEntries = [];\n    _this32.trimXAxisTicks = true;\n    _this32.trimYAxisTicks = true;\n    _this32.rotateXAxisTicks = true;\n    _this32.maxXAxisTickLength = 16;\n    _this32.maxYAxisTickLength = 16;\n    _this32.groupPadding = 16;\n    _this32.barPadding = 8;\n    _this32.roundDomains = false;\n    _this32.roundEdges = true;\n    _this32.showDataLabel = false;\n    _this32.noBarWhenZero = true;\n    _this32.activate = new EventEmitter();\n    _this32.deactivate = new EventEmitter();\n    _this32.margin = [10, 20, 10, 20];\n    _this32.xAxisHeight = 0;\n    _this32.yAxisWidth = 0;\n    _this32.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    return _this32;\n  }\n\n  _createClass(BarHorizontal2DComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(BarHorizontal2DComponent.prototype), \"update\", this).call(this);\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxWidth = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valuesDomain = this.getValueDomain();\n      this.groupScale = this.getGroupScale();\n      this.innerScale = this.getInnerScale();\n      this.valueScale = this.getValueScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n    }\n  }, {\n    key: \"getGroupScale\",\n    value: function getGroupScale() {\n      var spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n    }\n  }, {\n    key: \"getInnerScale\",\n    value: function getInnerScale() {\n      var height = this.groupScale.bandwidth();\n      var spacing = this.innerDomain.length / (height / this.barPadding + 1);\n      return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n    }\n  }, {\n    key: \"getValueScale\",\n    value: function getValueScale() {\n      var scale = scaleLinear().range([0, this.dims.width]).domain(this.valuesDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"getGroupDomain\",\n    value: function getGroupDomain() {\n      var domain = [];\n\n      var _iterator22 = _createForOfIteratorHelper(this.results),\n          _step22;\n\n      try {\n        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n          var group = _step22.value;\n\n          if (!domain.includes(group.label)) {\n            domain.push(group.label);\n          }\n        }\n      } catch (err) {\n        _iterator22.e(err);\n      } finally {\n        _iterator22.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getInnerDomain\",\n    value: function getInnerDomain() {\n      var domain = [];\n\n      var _iterator23 = _createForOfIteratorHelper(this.results),\n          _step23;\n\n      try {\n        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n          var group = _step23.value;\n\n          var _iterator24 = _createForOfIteratorHelper(group.series),\n              _step24;\n\n          try {\n            for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n              var d = _step24.value;\n\n              if (!domain.includes(d.label)) {\n                domain.push(d.label);\n              }\n            }\n          } catch (err) {\n            _iterator24.e(err);\n          } finally {\n            _iterator24.f();\n          }\n        }\n      } catch (err) {\n        _iterator23.e(err);\n      } finally {\n        _iterator23.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      var domain = [];\n\n      var _iterator25 = _createForOfIteratorHelper(this.results),\n          _step25;\n\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var group = _step25.value;\n\n          var _iterator26 = _createForOfIteratorHelper(group.series),\n              _step26;\n\n          try {\n            for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n              var d = _step26.value;\n\n              if (!domain.includes(d.value)) {\n                domain.push(d.value);\n              }\n            }\n          } catch (err) {\n            _iterator26.e(err);\n          } finally {\n            _iterator26.f();\n          }\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n\n      var min = Math.min.apply(Math, [0].concat(domain));\n      var max = this.xScaleMax ? Math.max.apply(Math, [this.xScaleMax].concat(domain)) : Math.max.apply(Math, [0].concat(domain));\n      return [min, max];\n    }\n  }, {\n    key: \"groupTransform\",\n    value: function groupTransform(group) {\n      return \"translate(0, \".concat(this.groupScale(group.label), \")\");\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valuesDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valuesDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref16) {\n      var width = _ref16.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref17) {\n      var height = _ref17.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onDataLabelMaxWidthChanged\",\n    value: function onDataLabelMaxWidthChanged(event, groupIndex) {\n      var _this33 = this;\n\n      if (event.size.negative) {\n        this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n      } else {\n        this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n      }\n\n      if (groupIndex === this.results.length - 1) {\n        setTimeout(function () {\n          return _this33.update();\n        });\n      }\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      var items = this.results.map(function (g) {\n        return g.series;\n      }).flat().filter(function (i) {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = _toConsumableArray(items);\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(function (i) {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return BarHorizontal2DComponent;\n}(BaseChartComponent);\n\nBarHorizontal2DComponent.ɵfac = function BarHorizontal2DComponent_Factory(t) {\n  return ɵBarHorizontal2DComponent_BaseFactory(t || BarHorizontal2DComponent);\n};\n\nBarHorizontal2DComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarHorizontal2DComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-2d\"]],\n  contentQueries: function BarHorizontal2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    showDataLabel: \"showDataLabel\",\n    noBarWhenZero: \"noBarWhenZero\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    xScaleMax: \"xScaleMax\",\n    dataLabelFormatting: \"dataLabelFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 17,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", \"orient\", \"horizontal\", 3, \"xScale\", \"yScale\", \"data\", \"dims\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"activeEntries\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontal2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵelement(2, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(3, BarHorizontal2DComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(4, BarHorizontal2DComponent__svg_g_4_Template, 1, 9, \"g\", 4);\n      ɵngcc0.ɵɵtemplate(5, BarHorizontal2DComponent__svg_g_5_Template, 2, 17, \"g\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(14, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"xScale\", ctx.valueScale)(\"yScale\", ctx.groupScale)(\"data\", ctx.results)(\"dims\", ctx.dims);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, GridPanelSeriesComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesHorizontal];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\nBarHorizontal2DComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  groupPadding: [{\n    type: Input\n  }],\n  barPadding: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  roundEdges: [{\n    type: Input\n  }],\n  xScaleMax: [{\n    type: Input\n  }],\n  showDataLabel: [{\n    type: Input\n  }],\n  dataLabelFormatting: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵBarHorizontal2DComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(BarHorizontal2DComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarHorizontal2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-2d',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-grid-panel-series\\n          [xScale]=\\\"valueScale\\\"\\n          [yScale]=\\\"groupScale\\\"\\n          [data]=\\\"results\\\"\\n          [dims]=\\\"dims\\\"\\n          orient=\\\"horizontal\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"valueScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"groupScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          [yAxisOffset]=\\\"dataLabelMaxWidth.negative\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          *ngFor=\\\"let group of results; let index = index; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n        >\\n          <svg:g\\n            ngx-charts-series-horizontal\\n            [xScale]=\\\"valueScale\\\"\\n            [activeEntries]=\\\"activeEntries\\\"\\n            [yScale]=\\\"innerScale\\\"\\n            [colors]=\\\"colors\\\"\\n            [series]=\\\"group.series\\\"\\n            [dims]=\\\"dims\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [seriesName]=\\\"group.name\\\"\\n            [roundEdges]=\\\"roundEdges\\\"\\n            [animations]=\\\"animations\\\"\\n            [showDataLabel]=\\\"showDataLabel\\\"\\n            [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n            [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n            (select)=\\\"onClick($event, group)\\\"\\n            (activate)=\\\"onActivate($event, group)\\\"\\n            (deactivate)=\\\"onDeactivate($event, group)\\\"\\n            (dataLabelWidthChanged)=\\\"onDataLabelMaxWidthChanged($event, index)\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar BarHorizontalNormalizedComponent = /*#__PURE__*/function (_BaseChartComponent6) {\n  _inherits(BarHorizontalNormalizedComponent, _BaseChartComponent6);\n\n  var _super7 = _createSuper(BarHorizontalNormalizedComponent);\n\n  function BarHorizontalNormalizedComponent() {\n    var _this34;\n\n    _classCallCheck(this, BarHorizontalNormalizedComponent);\n\n    _this34 = _super7.apply(this, arguments);\n    _this34.legend = false;\n    _this34.legendTitle = 'Legend';\n    _this34.legendPosition = 'right';\n    _this34.tooltipDisabled = false;\n    _this34.showGridLines = true;\n    _this34.activeEntries = [];\n    _this34.trimXAxisTicks = true;\n    _this34.trimYAxisTicks = true;\n    _this34.rotateXAxisTicks = true;\n    _this34.maxXAxisTickLength = 16;\n    _this34.maxYAxisTickLength = 16;\n    _this34.barPadding = 8;\n    _this34.roundDomains = false;\n    _this34.noBarWhenZero = true;\n    _this34.activate = new EventEmitter();\n    _this34.deactivate = new EventEmitter();\n    _this34.margin = [10, 20, 10, 20];\n    _this34.xAxisHeight = 0;\n    _this34.yAxisWidth = 0;\n    return _this34;\n  }\n\n  _createClass(BarHorizontalNormalizedComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(BarHorizontalNormalizedComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valueDomain = this.getValueDomain();\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n    }\n  }, {\n    key: \"getGroupDomain\",\n    value: function getGroupDomain() {\n      var domain = [];\n\n      var _iterator27 = _createForOfIteratorHelper(this.results),\n          _step27;\n\n      try {\n        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n          var group = _step27.value;\n\n          if (!domain.includes(group.label)) {\n            domain.push(group.label);\n          }\n        }\n      } catch (err) {\n        _iterator27.e(err);\n      } finally {\n        _iterator27.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getInnerDomain\",\n    value: function getInnerDomain() {\n      var domain = [];\n\n      var _iterator28 = _createForOfIteratorHelper(this.results),\n          _step28;\n\n      try {\n        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n          var group = _step28.value;\n\n          var _iterator29 = _createForOfIteratorHelper(group.series),\n              _step29;\n\n          try {\n            for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n              var d = _step29.value;\n\n              if (!domain.includes(d.label)) {\n                domain.push(d.label);\n              }\n            }\n          } catch (err) {\n            _iterator29.e(err);\n          } finally {\n            _iterator29.f();\n          }\n        }\n      } catch (err) {\n        _iterator28.e(err);\n      } finally {\n        _iterator28.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      return [0, 100];\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale() {\n      var spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale() {\n      var scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"groupTransform\",\n    value: function groupTransform(group) {\n      return \"translate(0, \".concat(this.yScale(group.name), \")\");\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valueDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valueDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref18) {\n      var width = _ref18.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref19) {\n      var height = _ref19.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      var items = this.results.map(function (g) {\n        return g.series;\n      }).flat().filter(function (i) {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = _toConsumableArray(items);\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(function (i) {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return BarHorizontalNormalizedComponent;\n}(BaseChartComponent);\n\nBarHorizontalNormalizedComponent.ɵfac = function BarHorizontalNormalizedComponent_Factory(t) {\n  return ɵBarHorizontalNormalizedComponent_BaseFactory(t || BarHorizontalNormalizedComponent);\n};\n\nBarHorizontalNormalizedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarHorizontalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-normalized\"]],\n  contentQueries: function BarHorizontalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-horizontal\", \"\", \"type\", \"normalized\", 3, \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarHorizontalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(2, BarHorizontalNormalizedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(3, BarHorizontalNormalizedComponent__svg_g_3_Template, 1, 8, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(4, BarHorizontalNormalizedComponent__svg_g_4_Template, 2, 14, \"g\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesHorizontal];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\nBarHorizontalNormalizedComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  barPadding: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵBarHorizontalNormalizedComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(BarHorizontalNormalizedComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarHorizontalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-normalized',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          *ngFor=\\\"let group of results; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n        >\\n          <svg:g\\n            ngx-charts-series-horizontal\\n            type=\\\"normalized\\\"\\n            [xScale]=\\\"xScale\\\"\\n            [yScale]=\\\"yScale\\\"\\n            [activeEntries]=\\\"activeEntries\\\"\\n            [colors]=\\\"colors\\\"\\n            [series]=\\\"group.series\\\"\\n            [dims]=\\\"dims\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [seriesName]=\\\"group.name\\\"\\n            [animations]=\\\"animations\\\"\\n            (select)=\\\"onClick($event, group)\\\"\\n            (activate)=\\\"onActivate($event, group)\\\"\\n            (deactivate)=\\\"onDeactivate($event, group)\\\"\\n            [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar BarHorizontalStackedComponent = /*#__PURE__*/function (_BaseChartComponent7) {\n  _inherits(BarHorizontalStackedComponent, _BaseChartComponent7);\n\n  var _super8 = _createSuper(BarHorizontalStackedComponent);\n\n  function BarHorizontalStackedComponent() {\n    var _this35;\n\n    _classCallCheck(this, BarHorizontalStackedComponent);\n\n    _this35 = _super8.apply(this, arguments);\n    _this35.legend = false;\n    _this35.legendTitle = 'Legend';\n    _this35.legendPosition = 'right';\n    _this35.tooltipDisabled = false;\n    _this35.showGridLines = true;\n    _this35.activeEntries = [];\n    _this35.trimXAxisTicks = true;\n    _this35.trimYAxisTicks = true;\n    _this35.rotateXAxisTicks = true;\n    _this35.maxXAxisTickLength = 16;\n    _this35.maxYAxisTickLength = 16;\n    _this35.barPadding = 8;\n    _this35.roundDomains = false;\n    _this35.showDataLabel = false;\n    _this35.noBarWhenZero = true;\n    _this35.activate = new EventEmitter();\n    _this35.deactivate = new EventEmitter();\n    _this35.margin = [10, 20, 10, 20];\n    _this35.xAxisHeight = 0;\n    _this35.yAxisWidth = 0;\n    _this35.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    return _this35;\n  }\n\n  _createClass(BarHorizontalStackedComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(BarHorizontalStackedComponent.prototype), \"update\", this).call(this);\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxWidth = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valueDomain = this.getValueDomain();\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n    }\n  }, {\n    key: \"getGroupDomain\",\n    value: function getGroupDomain() {\n      var domain = [];\n\n      var _iterator30 = _createForOfIteratorHelper(this.results),\n          _step30;\n\n      try {\n        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n          var group = _step30.value;\n\n          if (!domain.includes(group.label)) {\n            domain.push(group.label);\n          }\n        }\n      } catch (err) {\n        _iterator30.e(err);\n      } finally {\n        _iterator30.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getInnerDomain\",\n    value: function getInnerDomain() {\n      var domain = [];\n\n      var _iterator31 = _createForOfIteratorHelper(this.results),\n          _step31;\n\n      try {\n        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n          var group = _step31.value;\n\n          var _iterator32 = _createForOfIteratorHelper(group.series),\n              _step32;\n\n          try {\n            for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n              var d = _step32.value;\n\n              if (!domain.includes(d.label)) {\n                domain.push(d.label);\n              }\n            }\n          } catch (err) {\n            _iterator32.e(err);\n          } finally {\n            _iterator32.f();\n          }\n        }\n      } catch (err) {\n        _iterator31.e(err);\n      } finally {\n        _iterator31.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      var domain = [];\n      var smallest = 0;\n      var biggest = 0;\n\n      var _iterator33 = _createForOfIteratorHelper(this.results),\n          _step33;\n\n      try {\n        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n          var group = _step33.value;\n          var smallestSum = 0;\n          var biggestSum = 0;\n\n          var _iterator34 = _createForOfIteratorHelper(group.series),\n              _step34;\n\n          try {\n            for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n              var d = _step34.value;\n\n              if (d.value < 0) {\n                smallestSum += d.value;\n              } else {\n                biggestSum += d.value;\n              }\n\n              smallest = d.value < smallest ? d.value : smallest;\n              biggest = d.value > biggest ? d.value : biggest;\n            }\n          } catch (err) {\n            _iterator34.e(err);\n          } finally {\n            _iterator34.f();\n          }\n\n          domain.push(smallestSum);\n          domain.push(biggestSum);\n        }\n      } catch (err) {\n        _iterator33.e(err);\n      } finally {\n        _iterator33.f();\n      }\n\n      domain.push(smallest);\n      domain.push(biggest);\n      var min = Math.min.apply(Math, [0].concat(domain));\n      var max = this.xScaleMax ? Math.max.apply(Math, [this.xScaleMax].concat(domain)) : Math.max.apply(Math, domain);\n      return [min, max];\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale() {\n      var spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale() {\n      var scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"groupTransform\",\n    value: function groupTransform(group) {\n      return \"translate(0, \".concat(this.yScale(group.name), \")\");\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valueDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valueDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref20) {\n      var width = _ref20.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref21) {\n      var height = _ref21.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onDataLabelMaxWidthChanged\",\n    value: function onDataLabelMaxWidthChanged(event, groupIndex) {\n      var _this36 = this;\n\n      if (event.size.negative) {\n        this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n      } else {\n        this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n      }\n\n      if (groupIndex === this.results.length - 1) {\n        setTimeout(function () {\n          return _this36.update();\n        });\n      }\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      var items = this.results.map(function (g) {\n        return g.series;\n      }).flat().filter(function (i) {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = _toConsumableArray(items);\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(function (i) {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return BarHorizontalStackedComponent;\n}(BaseChartComponent);\n\nBarHorizontalStackedComponent.ɵfac = function BarHorizontalStackedComponent_Factory(t) {\n  return ɵBarHorizontalStackedComponent_BaseFactory(t || BarHorizontalStackedComponent);\n};\n\nBarHorizontalStackedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarHorizontalStackedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-stacked\"]],\n  contentQueries: function BarHorizontalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    showDataLabel: \"showDataLabel\",\n    noBarWhenZero: \"noBarWhenZero\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    xScaleMax: \"xScaleMax\",\n    dataLabelFormatting: \"dataLabelFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-series-horizontal\", \"\", \"type\", \"stacked\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"activeEntries\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(2, BarHorizontalStackedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(3, BarHorizontalStackedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(4, BarHorizontalStackedComponent__svg_g_4_Template, 2, 16, \"g\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesHorizontal];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\nBarHorizontalStackedComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  barPadding: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  xScaleMax: [{\n    type: Input\n  }],\n  showDataLabel: [{\n    type: Input\n  }],\n  dataLabelFormatting: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵBarHorizontalStackedComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(BarHorizontalStackedComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarHorizontalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-stacked',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          [yAxisOffset]=\\\"dataLabelMaxWidth.negative\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          *ngFor=\\\"let group of results; let index = index; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n        >\\n          <svg:g\\n            ngx-charts-series-horizontal\\n            type=\\\"stacked\\\"\\n            [xScale]=\\\"xScale\\\"\\n            [yScale]=\\\"yScale\\\"\\n            [colors]=\\\"colors\\\"\\n            [series]=\\\"group.series\\\"\\n            [activeEntries]=\\\"activeEntries\\\"\\n            [dims]=\\\"dims\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [seriesName]=\\\"group.name\\\"\\n            [animations]=\\\"animations\\\"\\n            [showDataLabel]=\\\"showDataLabel\\\"\\n            [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n            [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n            (select)=\\\"onClick($event, group)\\\"\\n            (activate)=\\\"onActivate($event, group)\\\"\\n            (deactivate)=\\\"onDeactivate($event, group)\\\"\\n            (dataLabelWidthChanged)=\\\"onDataLabelMaxWidthChanged($event, index)\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar BarVerticalComponent = /*#__PURE__*/function (_BaseChartComponent8) {\n  _inherits(BarVerticalComponent, _BaseChartComponent8);\n\n  var _super9 = _createSuper(BarVerticalComponent);\n\n  function BarVerticalComponent() {\n    var _this37;\n\n    _classCallCheck(this, BarVerticalComponent);\n\n    _this37 = _super9.apply(this, arguments);\n    _this37.legend = false;\n    _this37.legendTitle = 'Legend';\n    _this37.legendPosition = 'right';\n    _this37.tooltipDisabled = false;\n    _this37.showGridLines = true;\n    _this37.activeEntries = [];\n    _this37.trimXAxisTicks = true;\n    _this37.trimYAxisTicks = true;\n    _this37.rotateXAxisTicks = true;\n    _this37.maxXAxisTickLength = 16;\n    _this37.maxYAxisTickLength = 16;\n    _this37.barPadding = 8;\n    _this37.roundDomains = false;\n    _this37.roundEdges = true;\n    _this37.showDataLabel = false;\n    _this37.noBarWhenZero = true;\n    _this37.activate = new EventEmitter();\n    _this37.deactivate = new EventEmitter();\n    _this37.margin = [10, 20, 10, 20];\n    _this37.xAxisHeight = 0;\n    _this37.yAxisWidth = 0;\n    _this37.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    return _this37;\n  }\n\n  _createClass(BarVerticalComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(BarVerticalComponent.prototype), \"update\", this).call(this);\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxHeight = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n\n      if (this.showDataLabel) {\n        this.dims.height -= this.dataLabelMaxHeight.negative;\n      }\n\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0] + this.dataLabelMaxHeight.negative, \")\");\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale() {\n      this.xDomain = this.getXDomain();\n      var spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n      return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale() {\n      this.yDomain = this.getYDomain();\n      var scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"getXDomain\",\n    value: function getXDomain() {\n      return this.results.map(function (d) {\n        return d.label;\n      });\n    }\n  }, {\n    key: \"getYDomain\",\n    value: function getYDomain() {\n      var values = this.results.map(function (d) {\n        return d.value;\n      });\n      var min = this.yScaleMin ? Math.min.apply(Math, [this.yScaleMin].concat(_toConsumableArray(values))) : Math.min.apply(Math, [0].concat(_toConsumableArray(values)));\n\n      if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n        min = Math.min.apply(Math, [min].concat(_toConsumableArray(this.yAxisTicks)));\n      }\n\n      var max = this.yScaleMax ? Math.max.apply(Math, [this.yScaleMax].concat(_toConsumableArray(values))) : Math.max.apply(Math, [0].concat(_toConsumableArray(values)));\n\n      if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n        max = Math.max.apply(Math, [max].concat(_toConsumableArray(this.yAxisTicks)));\n      }\n\n      return [min, max];\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.xDomain;\n      } else {\n        domain = this.yDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.xDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref22) {\n      var width = _ref22.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref23) {\n      var height = _ref23.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onDataLabelMaxHeightChanged\",\n    value: function onDataLabelMaxHeightChanged(event) {\n      var _this38 = this;\n\n      if (event.size.negative) {\n        this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n      } else {\n        this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n      }\n\n      if (event.index === this.results.length - 1) {\n        setTimeout(function () {\n          return _this38.update();\n        });\n      }\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var fromLegend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      item = this.results.find(function (d) {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item].concat(_toConsumableArray(this.activeEntries));\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var fromLegend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      item = this.results.find(function (d) {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return BarVerticalComponent;\n}(BaseChartComponent);\n\nBarVerticalComponent.ɵfac = function BarVerticalComponent_Factory(t) {\n  return ɵBarVerticalComponent_BaseFactory(t || BarVerticalComponent);\n};\n\nBarVerticalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarVerticalComponent,\n  selectors: [[\"ngx-charts-bar-vertical\"]],\n  contentQueries: function BarVerticalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    showDataLabel: \"showDataLabel\",\n    noBarWhenZero: \"noBarWhenZero\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    yScaleMax: \"yScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    dataLabelFormatting: \"dataLabelFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-vertical\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"activeEntries\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"activate\", \"deactivate\", \"select\", \"dataLabelHeightChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"]],\n  template: function BarVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelClick\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(2, BarVerticalComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(3, BarVerticalComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵelementStart(4, \"g\", 4);\n      ɵngcc0.ɵɵlistener(\"activate\", function BarVerticalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarVerticalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"select\", function BarVerticalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"dataLabelHeightChanged\", function BarVerticalComponent_Template__svg_g_dataLabelHeightChanged_4_listener($event) {\n        return ctx.onDataLabelMaxHeightChanged($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(22, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, SeriesVerticalComponent, XAxisComponent, YAxisComponent];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  changeDetection: 0\n});\nBarVerticalComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  barPadding: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  roundEdges: [{\n    type: Input\n  }],\n  yScaleMax: [{\n    type: Input\n  }],\n  yScaleMin: [{\n    type: Input\n  }],\n  showDataLabel: [{\n    type: Input\n  }],\n  dataLabelFormatting: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵBarVerticalComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(BarVerticalComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, true)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          [xAxisOffset]=\\\"dataLabelMaxHeight.negative\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-series-vertical\\n          [xScale]=\\\"xScale\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [colors]=\\\"colors\\\"\\n          [series]=\\\"results\\\"\\n          [dims]=\\\"dims\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [showDataLabel]=\\\"showDataLabel\\\"\\n          [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n          [activeEntries]=\\\"activeEntries\\\"\\n          [roundEdges]=\\\"roundEdges\\\"\\n          [animations]=\\\"animations\\\"\\n          [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n          (activate)=\\\"onActivate($event)\\\"\\n          (deactivate)=\\\"onDeactivate($event)\\\"\\n          (select)=\\\"onClick($event)\\\"\\n          (dataLabelHeightChanged)=\\\"onDataLabelMaxHeightChanged($event)\\\"\\n        ></svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar BarVertical2DComponent = /*#__PURE__*/function (_BaseChartComponent9) {\n  _inherits(BarVertical2DComponent, _BaseChartComponent9);\n\n  var _super10 = _createSuper(BarVertical2DComponent);\n\n  function BarVertical2DComponent() {\n    var _this39;\n\n    _classCallCheck(this, BarVertical2DComponent);\n\n    _this39 = _super10.apply(this, arguments);\n    _this39.legend = false;\n    _this39.legendTitle = 'Legend';\n    _this39.legendPosition = 'right';\n    _this39.tooltipDisabled = false;\n    _this39.scaleType = 'ordinal';\n    _this39.showGridLines = true;\n    _this39.activeEntries = [];\n    _this39.trimXAxisTicks = true;\n    _this39.trimYAxisTicks = true;\n    _this39.rotateXAxisTicks = true;\n    _this39.maxXAxisTickLength = 16;\n    _this39.maxYAxisTickLength = 16;\n    _this39.groupPadding = 16;\n    _this39.barPadding = 8;\n    _this39.roundDomains = false;\n    _this39.roundEdges = true;\n    _this39.showDataLabel = false;\n    _this39.noBarWhenZero = true;\n    _this39.activate = new EventEmitter();\n    _this39.deactivate = new EventEmitter();\n    _this39.margin = [10, 20, 10, 20];\n    _this39.xAxisHeight = 0;\n    _this39.yAxisWidth = 0;\n    _this39.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    return _this39;\n  }\n\n  _createClass(BarVertical2DComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(BarVertical2DComponent.prototype), \"update\", this).call(this);\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxHeight = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.showDataLabel) {\n        this.dims.height -= this.dataLabelMaxHeight.negative;\n      }\n\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valuesDomain = this.getValueDomain();\n      this.groupScale = this.getGroupScale();\n      this.innerScale = this.getInnerScale();\n      this.valueScale = this.getValueScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0] + this.dataLabelMaxHeight.negative, \")\");\n    }\n  }, {\n    key: \"onDataLabelMaxHeightChanged\",\n    value: function onDataLabelMaxHeightChanged(event, groupIndex) {\n      var _this40 = this;\n\n      if (event.size.negative) {\n        this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n      } else {\n        this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n      }\n\n      if (groupIndex === this.results.length - 1) {\n        setTimeout(function () {\n          return _this40.update();\n        });\n      }\n    }\n  }, {\n    key: \"getGroupScale\",\n    value: function getGroupScale() {\n      var spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n    }\n  }, {\n    key: \"getInnerScale\",\n    value: function getInnerScale() {\n      var width = this.groupScale.bandwidth();\n      var spacing = this.innerDomain.length / (width / this.barPadding + 1);\n      return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n    }\n  }, {\n    key: \"getValueScale\",\n    value: function getValueScale() {\n      var scale = scaleLinear().range([this.dims.height, 0]).domain(this.valuesDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"getGroupDomain\",\n    value: function getGroupDomain() {\n      var domain = [];\n\n      var _iterator35 = _createForOfIteratorHelper(this.results),\n          _step35;\n\n      try {\n        for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n          var group = _step35.value;\n\n          if (!domain.includes(group.label)) {\n            domain.push(group.label);\n          }\n        }\n      } catch (err) {\n        _iterator35.e(err);\n      } finally {\n        _iterator35.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getInnerDomain\",\n    value: function getInnerDomain() {\n      var domain = [];\n\n      var _iterator36 = _createForOfIteratorHelper(this.results),\n          _step36;\n\n      try {\n        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n          var group = _step36.value;\n\n          var _iterator37 = _createForOfIteratorHelper(group.series),\n              _step37;\n\n          try {\n            for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {\n              var d = _step37.value;\n\n              if (!domain.includes(d.label)) {\n                domain.push(d.label);\n              }\n            }\n          } catch (err) {\n            _iterator37.e(err);\n          } finally {\n            _iterator37.f();\n          }\n        }\n      } catch (err) {\n        _iterator36.e(err);\n      } finally {\n        _iterator36.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      var domain = [];\n\n      var _iterator38 = _createForOfIteratorHelper(this.results),\n          _step38;\n\n      try {\n        for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {\n          var group = _step38.value;\n\n          var _iterator39 = _createForOfIteratorHelper(group.series),\n              _step39;\n\n          try {\n            for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {\n              var d = _step39.value;\n\n              if (!domain.includes(d.value)) {\n                domain.push(d.value);\n              }\n            }\n          } catch (err) {\n            _iterator39.e(err);\n          } finally {\n            _iterator39.f();\n          }\n        }\n      } catch (err) {\n        _iterator38.e(err);\n      } finally {\n        _iterator38.f();\n      }\n\n      var min = Math.min.apply(Math, [0].concat(domain));\n      var max = this.yScaleMax ? Math.max.apply(Math, [this.yScaleMax].concat(domain)) : Math.max.apply(Math, [0].concat(domain));\n      return [min, max];\n    }\n  }, {\n    key: \"groupTransform\",\n    value: function groupTransform(group) {\n      return \"translate(\".concat(this.groupScale(group.label), \", 0)\");\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valuesDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valuesDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref24) {\n      var width = _ref24.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref25) {\n      var height = _ref25.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      var items = this.results.map(function (g) {\n        return g.series;\n      }).flat().filter(function (i) {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = _toConsumableArray(items);\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(function (i) {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return BarVertical2DComponent;\n}(BaseChartComponent);\n\nBarVertical2DComponent.ɵfac = function BarVertical2DComponent_Factory(t) {\n  return ɵBarVertical2DComponent_BaseFactory(t || BarVertical2DComponent);\n};\n\nBarVertical2DComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarVertical2DComponent,\n  selectors: [[\"ngx-charts-bar-vertical-2d\"]],\n  contentQueries: function BarVertical2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    tooltipDisabled: \"tooltipDisabled\",\n    scaleType: \"scaleType\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    showDataLabel: \"showDataLabel\",\n    noBarWhenZero: \"noBarWhenZero\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    yScaleMax: \"yScaleMax\",\n    dataLabelFormatting: \"dataLabelFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 17,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", \"orient\", \"vertical\", 3, \"xScale\", \"yScale\", \"data\", \"dims\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVertical2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵelement(2, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(3, BarVertical2DComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(4, BarVertical2DComponent__svg_g_4_Template, 1, 9, \"g\", 4);\n      ɵngcc0.ɵɵtemplate(5, BarVertical2DComponent__svg_g_5_Template, 1, 17, \"g\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(14, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"xScale\", ctx.groupScale)(\"yScale\", ctx.valueScale)(\"data\", ctx.results)(\"dims\", ctx.dims);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, GridPanelSeriesComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesVerticalComponent];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\nBarVertical2DComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  scaleType: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  groupPadding: [{\n    type: Input\n  }],\n  barPadding: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  roundEdges: [{\n    type: Input\n  }],\n  yScaleMax: [{\n    type: Input\n  }],\n  showDataLabel: [{\n    type: Input\n  }],\n  dataLabelFormatting: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵBarVertical2DComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(BarVertical2DComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarVertical2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-2d',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-grid-panel-series\\n          [xScale]=\\\"groupScale\\\"\\n          [yScale]=\\\"valueScale\\\"\\n          [data]=\\\"results\\\"\\n          [dims]=\\\"dims\\\"\\n          orient=\\\"vertical\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"groupScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          [xAxisOffset]=\\\"dataLabelMaxHeight.negative\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"valueScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-series-vertical\\n          *ngFor=\\\"let group of results; let index = index; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n          [activeEntries]=\\\"activeEntries\\\"\\n          [xScale]=\\\"innerScale\\\"\\n          [yScale]=\\\"valueScale\\\"\\n          [colors]=\\\"colors\\\"\\n          [series]=\\\"group.series\\\"\\n          [dims]=\\\"dims\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [showDataLabel]=\\\"showDataLabel\\\"\\n          [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n          [seriesName]=\\\"group.name\\\"\\n          [roundEdges]=\\\"roundEdges\\\"\\n          [animations]=\\\"animations\\\"\\n          [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n          (select)=\\\"onClick($event, group)\\\"\\n          (activate)=\\\"onActivate($event, group)\\\"\\n          (deactivate)=\\\"onDeactivate($event, group)\\\"\\n          (dataLabelHeightChanged)=\\\"onDataLabelMaxHeightChanged($event, index)\\\"\\n        />\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar BarVerticalNormalizedComponent = /*#__PURE__*/function (_BaseChartComponent10) {\n  _inherits(BarVerticalNormalizedComponent, _BaseChartComponent10);\n\n  var _super11 = _createSuper(BarVerticalNormalizedComponent);\n\n  function BarVerticalNormalizedComponent() {\n    var _this41;\n\n    _classCallCheck(this, BarVerticalNormalizedComponent);\n\n    _this41 = _super11.apply(this, arguments);\n    _this41.legend = false;\n    _this41.legendTitle = 'Legend';\n    _this41.legendPosition = 'right';\n    _this41.tooltipDisabled = false;\n    _this41.showGridLines = true;\n    _this41.activeEntries = [];\n    _this41.trimXAxisTicks = true;\n    _this41.trimYAxisTicks = true;\n    _this41.rotateXAxisTicks = true;\n    _this41.maxXAxisTickLength = 16;\n    _this41.maxYAxisTickLength = 16;\n    _this41.barPadding = 8;\n    _this41.roundDomains = false;\n    _this41.noBarWhenZero = true;\n    _this41.activate = new EventEmitter();\n    _this41.deactivate = new EventEmitter();\n    _this41.margin = [10, 20, 10, 20];\n    _this41.xAxisHeight = 0;\n    _this41.yAxisWidth = 0;\n    return _this41;\n  }\n\n  _createClass(BarVerticalNormalizedComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(BarVerticalNormalizedComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valueDomain = this.getValueDomain();\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n    }\n  }, {\n    key: \"getGroupDomain\",\n    value: function getGroupDomain() {\n      var domain = [];\n\n      var _iterator40 = _createForOfIteratorHelper(this.results),\n          _step40;\n\n      try {\n        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {\n          var group = _step40.value;\n\n          if (!domain.includes(group.label)) {\n            domain.push(group.label);\n          }\n        }\n      } catch (err) {\n        _iterator40.e(err);\n      } finally {\n        _iterator40.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getInnerDomain\",\n    value: function getInnerDomain() {\n      var domain = [];\n\n      var _iterator41 = _createForOfIteratorHelper(this.results),\n          _step41;\n\n      try {\n        for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n          var group = _step41.value;\n\n          var _iterator42 = _createForOfIteratorHelper(group.series),\n              _step42;\n\n          try {\n            for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {\n              var d = _step42.value;\n\n              if (!domain.includes(d.label)) {\n                domain.push(d.label);\n              }\n            }\n          } catch (err) {\n            _iterator42.e(err);\n          } finally {\n            _iterator42.f();\n          }\n        }\n      } catch (err) {\n        _iterator41.e(err);\n      } finally {\n        _iterator41.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      return [0, 100];\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale() {\n      var spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale() {\n      var scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"groupTransform\",\n    value: function groupTransform(group) {\n      return \"translate(\".concat(this.xScale(group.name), \", 0)\");\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valueDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valueDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref26) {\n      var width = _ref26.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref27) {\n      var height = _ref27.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      var items = this.results.map(function (g) {\n        return g.series;\n      }).flat().filter(function (i) {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = _toConsumableArray(items);\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(function (i) {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return BarVerticalNormalizedComponent;\n}(BaseChartComponent);\n\nBarVerticalNormalizedComponent.ɵfac = function BarVerticalNormalizedComponent_Factory(t) {\n  return ɵBarVerticalNormalizedComponent_BaseFactory(t || BarVerticalNormalizedComponent);\n};\n\nBarVerticalNormalizedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarVerticalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-normalized\"]],\n  contentQueries: function BarVerticalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", \"type\", \"normalized\", 3, \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarVerticalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(2, BarVerticalNormalizedComponent__svg_g_2_Template, 1, 9, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(3, BarVerticalNormalizedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(4, BarVerticalNormalizedComponent__svg_g_4_Template, 2, 14, \"g\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesVerticalComponent];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\nBarVerticalNormalizedComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  barPadding: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵBarVerticalNormalizedComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(BarVerticalNormalizedComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarVerticalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-normalized',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          *ngFor=\\\"let group of results; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n        >\\n          <svg:g\\n            ngx-charts-series-vertical\\n            type=\\\"normalized\\\"\\n            [xScale]=\\\"xScale\\\"\\n            [yScale]=\\\"yScale\\\"\\n            [activeEntries]=\\\"activeEntries\\\"\\n            [colors]=\\\"colors\\\"\\n            [series]=\\\"group.series\\\"\\n            [dims]=\\\"dims\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [seriesName]=\\\"group.name\\\"\\n            [animations]=\\\"animations\\\"\\n            [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n            (select)=\\\"onClick($event, group)\\\"\\n            (activate)=\\\"onActivate($event, group)\\\"\\n            (deactivate)=\\\"onDeactivate($event, group)\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar BarVerticalStackedComponent = /*#__PURE__*/function (_BaseChartComponent11) {\n  _inherits(BarVerticalStackedComponent, _BaseChartComponent11);\n\n  var _super12 = _createSuper(BarVerticalStackedComponent);\n\n  function BarVerticalStackedComponent() {\n    var _this42;\n\n    _classCallCheck(this, BarVerticalStackedComponent);\n\n    _this42 = _super12.apply(this, arguments);\n    _this42.legend = false;\n    _this42.legendTitle = 'Legend';\n    _this42.legendPosition = 'right';\n    _this42.tooltipDisabled = false;\n    _this42.showGridLines = true;\n    _this42.activeEntries = [];\n    _this42.trimXAxisTicks = true;\n    _this42.trimYAxisTicks = true;\n    _this42.rotateXAxisTicks = true;\n    _this42.maxXAxisTickLength = 16;\n    _this42.maxYAxisTickLength = 16;\n    _this42.barPadding = 8;\n    _this42.roundDomains = false;\n    _this42.showDataLabel = false;\n    _this42.noBarWhenZero = true;\n    _this42.activate = new EventEmitter();\n    _this42.deactivate = new EventEmitter();\n    _this42.margin = [10, 20, 10, 20];\n    _this42.xAxisHeight = 0;\n    _this42.yAxisWidth = 0;\n    _this42.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    return _this42;\n  }\n\n  _createClass(BarVerticalStackedComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(BarVerticalStackedComponent.prototype), \"update\", this).call(this);\n\n      if (!this.showDataLabel) {\n        this.dataLabelMaxHeight = {\n          negative: 0,\n          positive: 0\n        };\n      }\n\n      this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.showDataLabel) {\n        this.dims.height -= this.dataLabelMaxHeight.negative;\n      }\n\n      this.formatDates();\n      this.groupDomain = this.getGroupDomain();\n      this.innerDomain = this.getInnerDomain();\n      this.valueDomain = this.getValueDomain();\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0] + this.dataLabelMaxHeight.negative, \")\");\n    }\n  }, {\n    key: \"getGroupDomain\",\n    value: function getGroupDomain() {\n      var domain = [];\n\n      var _iterator43 = _createForOfIteratorHelper(this.results),\n          _step43;\n\n      try {\n        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {\n          var group = _step43.value;\n\n          if (!domain.includes(group.label)) {\n            domain.push(group.label);\n          }\n        }\n      } catch (err) {\n        _iterator43.e(err);\n      } finally {\n        _iterator43.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getInnerDomain\",\n    value: function getInnerDomain() {\n      var domain = [];\n\n      var _iterator44 = _createForOfIteratorHelper(this.results),\n          _step44;\n\n      try {\n        for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {\n          var group = _step44.value;\n\n          var _iterator45 = _createForOfIteratorHelper(group.series),\n              _step45;\n\n          try {\n            for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {\n              var d = _step45.value;\n\n              if (!domain.includes(d.label)) {\n                domain.push(d.label);\n              }\n            }\n          } catch (err) {\n            _iterator45.e(err);\n          } finally {\n            _iterator45.f();\n          }\n        }\n      } catch (err) {\n        _iterator44.e(err);\n      } finally {\n        _iterator44.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      var domain = [];\n      var smallest = 0;\n      var biggest = 0;\n\n      var _iterator46 = _createForOfIteratorHelper(this.results),\n          _step46;\n\n      try {\n        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {\n          var group = _step46.value;\n          var smallestSum = 0;\n          var biggestSum = 0;\n\n          var _iterator47 = _createForOfIteratorHelper(group.series),\n              _step47;\n\n          try {\n            for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {\n              var d = _step47.value;\n\n              if (d.value < 0) {\n                smallestSum += d.value;\n              } else {\n                biggestSum += d.value;\n              }\n\n              smallest = d.value < smallest ? d.value : smallest;\n              biggest = d.value > biggest ? d.value : biggest;\n            }\n          } catch (err) {\n            _iterator47.e(err);\n          } finally {\n            _iterator47.f();\n          }\n\n          domain.push(smallestSum);\n          domain.push(biggestSum);\n        }\n      } catch (err) {\n        _iterator46.e(err);\n      } finally {\n        _iterator46.f();\n      }\n\n      domain.push(smallest);\n      domain.push(biggest);\n      var min = Math.min.apply(Math, [0].concat(domain));\n      var max = this.yScaleMax ? Math.max.apply(Math, [this.yScaleMax].concat(domain)) : Math.max.apply(Math, domain);\n      return [min, max];\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale() {\n      var spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n      return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale() {\n      var scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"onDataLabelMaxHeightChanged\",\n    value: function onDataLabelMaxHeightChanged(event, groupIndex) {\n      var _this43 = this;\n\n      if (event.size.negative) {\n        this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n      } else {\n        this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n      }\n\n      if (groupIndex === this.results.length - 1) {\n        setTimeout(function () {\n          return _this43.update();\n        });\n      }\n    }\n  }, {\n    key: \"groupTransform\",\n    value: function groupTransform(group) {\n      return \"translate(\".concat(this.xScale(group.name) || 0, \", 0)\");\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, group) {\n      if (group) {\n        data.series = group.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.innerDomain;\n      } else {\n        domain = this.valueDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.innerDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.valueDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref28) {\n      var width = _ref28.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref29) {\n      var height = _ref29.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      var items = this.results.map(function (g) {\n        return g.series;\n      }).flat().filter(function (i) {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = _toConsumableArray(items);\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(function (i) {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return BarVerticalStackedComponent;\n}(BaseChartComponent);\n\nBarVerticalStackedComponent.ɵfac = function BarVerticalStackedComponent_Factory(t) {\n  return ɵBarVerticalStackedComponent_BaseFactory(t || BarVerticalStackedComponent);\n};\n\nBarVerticalStackedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarVerticalStackedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-stacked\"]],\n  contentQueries: function BarVerticalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    showDataLabel: \"showDataLabel\",\n    noBarWhenZero: \"noBarWhenZero\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    yScaleMax: \"yScaleMax\",\n    dataLabelFormatting: \"dataLabelFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", \"type\", \"stacked\", 3, \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVerticalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(2, BarVerticalStackedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(3, BarVerticalStackedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(4, BarVerticalStackedComponent__svg_g_4_Template, 2, 16, \"g\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesVerticalComponent];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\nBarVerticalStackedComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  barPadding: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  yScaleMax: [{\n    type: Input\n  }],\n  showDataLabel: [{\n    type: Input\n  }],\n  dataLabelFormatting: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵBarVerticalStackedComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(BarVerticalStackedComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarVerticalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-stacked',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, undefined, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, undefined, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bar-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          [xAxisOffset]=\\\"dataLabelMaxHeight.negative\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          *ngFor=\\\"let group of results; let index = index; trackBy: trackBy\\\"\\n          [@animationState]=\\\"'active'\\\"\\n          [attr.transform]=\\\"groupTransform(group)\\\"\\n        >\\n          <svg:g\\n            ngx-charts-series-vertical\\n            type=\\\"stacked\\\"\\n            [xScale]=\\\"xScale\\\"\\n            [yScale]=\\\"yScale\\\"\\n            [activeEntries]=\\\"activeEntries\\\"\\n            [colors]=\\\"colors\\\"\\n            [series]=\\\"group.series\\\"\\n            [dims]=\\\"dims\\\"\\n            [gradient]=\\\"gradient\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [showDataLabel]=\\\"showDataLabel\\\"\\n            [dataLabelFormatting]=\\\"dataLabelFormatting\\\"\\n            [seriesName]=\\\"group.name\\\"\\n            [animations]=\\\"animations\\\"\\n            [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n            (select)=\\\"onClick($event, group)\\\"\\n            (activate)=\\\"onActivate($event, group)\\\"\\n            (deactivate)=\\\"onDeactivate($event, group)\\\"\\n            (dataLabelHeightChanged)=\\\"onDataLabelMaxHeightChanged($event, index)\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar D0Types;\n\n(function (D0Types) {\n  D0Types[\"positive\"] = \"positive\";\n  D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nvar SeriesVerticalComponent = /*#__PURE__*/function () {\n  function SeriesVerticalComponent() {\n    _classCallCheck(this, SeriesVerticalComponent);\n\n    this.type = 'standard';\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelHeightChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n  }\n\n  _createClass(SeriesVerticalComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _d2,\n          _this44 = this;\n\n      this.updateTooltipSettings();\n      var width;\n\n      if (this.series.length) {\n        width = this.xScale.bandwidth();\n      }\n\n      width = Math.round(width);\n      var yScaleMin = Math.max(this.yScale.domain()[0], 0);\n      var d0 = (_d2 = {}, _defineProperty(_d2, D0Types.positive, 0), _defineProperty(_d2, D0Types.negative, 0), _d2);\n      var d0Type = D0Types.positive;\n      var total;\n\n      if (this.type === 'normalized') {\n        total = this.series.map(function (d) {\n          return d.value;\n        }).reduce(function (sum, d) {\n          return sum + d;\n        }, 0);\n      }\n\n      this.bars = this.series.map(function (d, index) {\n        var value = d.value;\n\n        var label = _this44.getLabel(d);\n\n        var formattedLabel = formatLabel(label);\n        var roundEdges = _this44.roundEdges;\n        d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n        var bar = {\n          value: value,\n          label: label,\n          roundEdges: roundEdges,\n          data: d,\n          width: width,\n          formattedLabel: formattedLabel,\n          height: 0,\n          x: 0,\n          y: 0\n        };\n\n        if (_this44.type === 'standard') {\n          bar.height = Math.abs(_this44.yScale(value) - _this44.yScale(yScaleMin));\n          bar.x = _this44.xScale(label);\n\n          if (value < 0) {\n            bar.y = _this44.yScale(0);\n          } else {\n            bar.y = _this44.yScale(value);\n          }\n        } else if (_this44.type === 'stacked') {\n          var offset0 = d0[d0Type];\n          var offset1 = offset0 + value;\n          d0[d0Type] += value;\n          bar.height = _this44.yScale(offset0) - _this44.yScale(offset1);\n          bar.x = 0;\n          bar.y = _this44.yScale(offset1);\n          bar.offset0 = offset0;\n          bar.offset1 = offset1;\n        } else if (_this44.type === 'normalized') {\n          var _offset2 = d0[d0Type];\n\n          var _offset3 = _offset2 + value;\n\n          d0[d0Type] += value;\n\n          if (total > 0) {\n            _offset2 = _offset2 * 100 / total;\n            _offset3 = _offset3 * 100 / total;\n          } else {\n            _offset2 = 0;\n            _offset3 = 0;\n          }\n\n          bar.height = _this44.yScale(_offset2) - _this44.yScale(_offset3);\n          bar.x = 0;\n          bar.y = _this44.yScale(_offset3);\n          bar.offset0 = _offset2;\n          bar.offset1 = _offset3;\n          value = (_offset3 - _offset2).toFixed(2) + '%';\n        }\n\n        if (_this44.colors.scaleType === 'ordinal') {\n          bar.color = _this44.colors.getColor(label);\n        } else {\n          if (_this44.type === 'standard') {\n            bar.color = _this44.colors.getColor(value);\n            bar.gradientStops = _this44.colors.getLinearGradientStops(value);\n          } else {\n            bar.color = _this44.colors.getColor(bar.offset1);\n            bar.gradientStops = _this44.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n          }\n        }\n\n        var tooltipLabel = formattedLabel;\n        bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n        if (_this44.seriesName) {\n          tooltipLabel = \"\".concat(_this44.seriesName, \" \\u2022 \").concat(formattedLabel);\n          bar.data.series = _this44.seriesName;\n          bar.ariaLabel = _this44.seriesName + ' ' + bar.ariaLabel;\n        }\n\n        bar.tooltipText = _this44.tooltipDisabled ? undefined : \"\\n        <span class=\\\"tooltip-label\\\">\".concat(escapeLabel(tooltipLabel), \"</span>\\n        <span class=\\\"tooltip-val\\\">\").concat(_this44.dataLabelFormatting ? _this44.dataLabelFormatting(value) : value.toLocaleString(), \"</span>\\n      \");\n        return bar;\n      });\n      this.updateDataLabels();\n    }\n  }, {\n    key: \"updateDataLabels\",\n    value: function updateDataLabels() {\n      var _this45 = this;\n\n      if (this.type === 'stacked') {\n        this.barsForDataLabels = [];\n        var section = {};\n        section.series = this.seriesName;\n        var totalPositive = this.series.map(function (d) {\n          return d.value;\n        }).reduce(function (sum, d) {\n          return d > 0 ? sum + d : sum;\n        }, 0);\n        var totalNegative = this.series.map(function (d) {\n          return d.value;\n        }).reduce(function (sum, d) {\n          return d < 0 ? sum + d : sum;\n        }, 0);\n        section.total = totalPositive + totalNegative;\n        section.x = 0;\n        section.y = 0;\n\n        if (section.total > 0) {\n          section.height = this.yScale(totalPositive);\n        } else {\n          section.height = this.yScale(totalNegative);\n        }\n\n        section.width = this.xScale.bandwidth();\n        this.barsForDataLabels.push(section);\n      } else {\n        this.barsForDataLabels = this.series.map(function (d) {\n          var section = {};\n          section.series = _this45.seriesName ? _this45.seriesName : d.label;\n          section.total = d.value;\n          section.x = _this45.xScale(d.label);\n          section.y = _this45.yScale(0);\n          section.height = _this45.yScale(section.total) - _this45.yScale(0);\n          section.width = _this45.xScale.bandwidth();\n          return section;\n        });\n      }\n    }\n  }, {\n    key: \"updateTooltipSettings\",\n    value: function updateTooltipSettings() {\n      this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n      this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(entry) {\n      if (!this.activeEntries) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name && entry.series === d.series;\n      });\n      return item !== undefined;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(dataItem) {\n      if (dataItem.label) {\n        return dataItem.label;\n      }\n\n      return dataItem.name;\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, bar) {\n      return bar.label;\n    }\n  }, {\n    key: \"trackDataLabelBy\",\n    value: function trackDataLabelBy(index, barLabel) {\n      return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n  }]);\n\n  return SeriesVerticalComponent;\n}();\n\nSeriesVerticalComponent.ɵfac = function SeriesVerticalComponent_Factory(t) {\n  return new (t || SeriesVerticalComponent)();\n};\n\nSeriesVerticalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SeriesVerticalComponent,\n  selectors: [[\"g\", \"ngx-charts-series-vertical\", \"\"]],\n  inputs: {\n    type: \"type\",\n    tooltipDisabled: \"tooltipDisabled\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    noBarWhenZero: \"noBarWhenZero\",\n    dims: \"dims\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    dataLabelFormatting: \"dataLabelFormatting\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelHeightChanged: \"dataLabelHeightChanged\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c27,\n  decls: 2,\n  vars: 3,\n  consts: [[\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, SeriesVerticalComponent__svg_g_0_Template, 1, 22, \"g\", 0);\n      ɵngcc0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1_Template, 2, 2, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.bars)(\"ngForTrackBy\", ctx.trackBy);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgForOf, ɵngcc1.NgIf, BarComponent, TooltipDirective, BarLabelComponent];\n  },\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\nSeriesVerticalComponent.propDecorators = {\n  dims: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  series: [{\n    type: Input\n  }],\n  xScale: [{\n    type: Input\n  }],\n  yScale: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  seriesName: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  roundEdges: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  showDataLabel: [{\n    type: Input\n  }],\n  dataLabelFormatting: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  dataLabelHeightChanged: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SeriesVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-vertical]',\n      template: \"\\n    <svg:g\\n      ngx-charts-bar\\n      *ngFor=\\\"let bar of bars; trackBy: trackBy\\\"\\n      [@animationState]=\\\"'active'\\\"\\n      [@.disabled]=\\\"!animations\\\"\\n      [width]=\\\"bar.width\\\"\\n      [height]=\\\"bar.height\\\"\\n      [x]=\\\"bar.x\\\"\\n      [y]=\\\"bar.y\\\"\\n      [fill]=\\\"bar.color\\\"\\n      [stops]=\\\"bar.gradientStops\\\"\\n      [data]=\\\"bar.data\\\"\\n      [orientation]=\\\"'vertical'\\\"\\n      [roundEdges]=\\\"bar.roundEdges\\\"\\n      [gradient]=\\\"gradient\\\"\\n      [ariaLabel]=\\\"bar.ariaLabel\\\"\\n      [isActive]=\\\"isActive(bar.data)\\\"\\n      (select)=\\\"onClick($event)\\\"\\n      (activate)=\\\"activate.emit($event)\\\"\\n      (deactivate)=\\\"deactivate.emit($event)\\\"\\n      ngx-tooltip\\n      [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n      [tooltipPlacement]=\\\"tooltipPlacement\\\"\\n      [tooltipType]=\\\"tooltipType\\\"\\n      [tooltipTitle]=\\\"tooltipTemplate ? undefined : bar.tooltipText\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipContext]=\\\"bar.data\\\"\\n      [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n      [animations]=\\\"animations\\\"\\n    ></svg:g>\\n    <svg:g *ngIf=\\\"showDataLabel\\\">\\n      <svg:g\\n        ngx-charts-bar-label\\n        *ngFor=\\\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\\\"\\n        [barX]=\\\"b.x\\\"\\n        [barY]=\\\"b.y\\\"\\n        [barWidth]=\\\"b.width\\\"\\n        [barHeight]=\\\"b.height\\\"\\n        [value]=\\\"b.total\\\"\\n        [valueFormatting]=\\\"dataLabelFormatting\\\"\\n        [orientation]=\\\"'vertical'\\\"\\n        (dimensionsChanged)=\\\"dataLabelHeightChanged.emit({ size: $event, index: i })\\\"\\n      />\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [];\n  }, {\n    type: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelHeightChanged: [{\n      type: Output\n    }],\n    dims: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nvar SeriesHorizontal = /*#__PURE__*/function () {\n  function SeriesHorizontal() {\n    _classCallCheck(this, SeriesHorizontal);\n\n    this.barsForDataLabels = [];\n    this.type = 'standard';\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelWidthChanged = new EventEmitter();\n  }\n\n  _createClass(SeriesHorizontal, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _d3,\n          _this46 = this;\n\n      this.updateTooltipSettings();\n      var d0 = (_d3 = {}, _defineProperty(_d3, D0Types.positive, 0), _defineProperty(_d3, D0Types.negative, 0), _d3);\n      var d0Type;\n      d0Type = D0Types.positive;\n      var total;\n\n      if (this.type === 'normalized') {\n        total = this.series.map(function (d) {\n          return d.value;\n        }).reduce(function (sum, d) {\n          return sum + d;\n        }, 0);\n      }\n\n      var xScaleMin = Math.max(this.xScale.domain()[0], 0);\n      this.bars = this.series.map(function (d, index) {\n        var value = d.value;\n\n        var label = _this46.getLabel(d);\n\n        var formattedLabel = formatLabel(label);\n        var roundEdges = _this46.roundEdges;\n        d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n        var bar = {\n          value: value,\n          label: label,\n          roundEdges: roundEdges,\n          data: d,\n          formattedLabel: formattedLabel\n        };\n        bar.height = _this46.yScale.bandwidth();\n\n        if (_this46.type === 'standard') {\n          bar.width = Math.abs(_this46.xScale(value) - _this46.xScale(xScaleMin));\n\n          if (value < 0) {\n            bar.x = _this46.xScale(value);\n          } else {\n            bar.x = _this46.xScale(xScaleMin);\n          }\n\n          bar.y = _this46.yScale(label);\n        } else if (_this46.type === 'stacked') {\n          var offset0 = d0[d0Type];\n          var offset1 = offset0 + value;\n          d0[d0Type] += value;\n          bar.width = _this46.xScale(offset1) - _this46.xScale(offset0);\n          bar.x = _this46.xScale(offset0);\n          bar.y = 0;\n          bar.offset0 = offset0;\n          bar.offset1 = offset1;\n        } else if (_this46.type === 'normalized') {\n          var _offset4 = d0[d0Type];\n\n          var _offset5 = _offset4 + value;\n\n          d0[d0Type] += value;\n\n          if (total > 0) {\n            _offset4 = _offset4 * 100 / total;\n            _offset5 = _offset5 * 100 / total;\n          } else {\n            _offset4 = 0;\n            _offset5 = 0;\n          }\n\n          bar.width = _this46.xScale(_offset5) - _this46.xScale(_offset4);\n          bar.x = _this46.xScale(_offset4);\n          bar.y = 0;\n          bar.offset0 = _offset4;\n          bar.offset1 = _offset5;\n          value = (_offset5 - _offset4).toFixed(2) + '%';\n        }\n\n        if (_this46.colors.scaleType === 'ordinal') {\n          bar.color = _this46.colors.getColor(label);\n        } else {\n          if (_this46.type === 'standard') {\n            bar.color = _this46.colors.getColor(value);\n            bar.gradientStops = _this46.colors.getLinearGradientStops(value);\n          } else {\n            bar.color = _this46.colors.getColor(bar.offset1);\n            bar.gradientStops = _this46.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n          }\n        }\n\n        var tooltipLabel = formattedLabel;\n        bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n        if (_this46.seriesName) {\n          tooltipLabel = \"\".concat(_this46.seriesName, \" \\u2022 \").concat(formattedLabel);\n          bar.data.series = _this46.seriesName;\n          bar.ariaLabel = _this46.seriesName + ' ' + bar.ariaLabel;\n        }\n\n        bar.tooltipText = _this46.tooltipDisabled ? undefined : \"\\n        <span class=\\\"tooltip-label\\\">\".concat(escapeLabel(tooltipLabel), \"</span>\\n        <span class=\\\"tooltip-val\\\">\").concat(_this46.dataLabelFormatting ? _this46.dataLabelFormatting(value) : value.toLocaleString(), \"</span>\\n      \");\n        return bar;\n      });\n      this.updateDataLabels();\n    }\n  }, {\n    key: \"updateDataLabels\",\n    value: function updateDataLabels() {\n      var _this47 = this;\n\n      if (this.type === 'stacked') {\n        this.barsForDataLabels = [];\n        var section = {};\n        section.series = this.seriesName;\n        var totalPositive = this.series.map(function (d) {\n          return d.value;\n        }).reduce(function (sum, d) {\n          return d > 0 ? sum + d : sum;\n        }, 0);\n        var totalNegative = this.series.map(function (d) {\n          return d.value;\n        }).reduce(function (sum, d) {\n          return d < 0 ? sum + d : sum;\n        }, 0);\n        section.total = totalPositive + totalNegative;\n        section.x = 0;\n        section.y = 0; // if total is positive then we show it on the right, otherwise on the left\n\n        if (section.total > 0) {\n          section.width = this.xScale(totalPositive);\n        } else {\n          section.width = this.xScale(totalNegative);\n        }\n\n        section.height = this.yScale.bandwidth();\n        this.barsForDataLabels.push(section);\n      } else {\n        this.barsForDataLabels = this.series.map(function (d) {\n          var section = {};\n          section.series = _this47.seriesName ? _this47.seriesName : d.label;\n          section.total = d.value;\n          section.x = _this47.xScale(0);\n          section.y = _this47.yScale(d.label);\n          section.width = _this47.xScale(section.total) - _this47.xScale(0);\n          section.height = _this47.yScale.bandwidth();\n          return section;\n        });\n      }\n    }\n  }, {\n    key: \"updateTooltipSettings\",\n    value: function updateTooltipSettings() {\n      this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n      this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(entry) {\n      if (!this.activeEntries) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name && entry.series === d.series;\n      });\n      return item !== undefined;\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(dataItem) {\n      if (dataItem.label) {\n        return dataItem.label;\n      }\n\n      return dataItem.name;\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, bar) {\n      return bar.label;\n    }\n  }, {\n    key: \"trackDataLabelBy\",\n    value: function trackDataLabelBy(index, barLabel) {\n      return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n  }, {\n    key: \"click\",\n    value: function click(data) {\n      this.select.emit(data);\n    }\n  }]);\n\n  return SeriesHorizontal;\n}();\n\nSeriesHorizontal.ɵfac = function SeriesHorizontal_Factory(t) {\n  return new (t || SeriesHorizontal)();\n};\n\nSeriesHorizontal.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SeriesHorizontal,\n  selectors: [[\"g\", \"ngx-charts-series-horizontal\", \"\"]],\n  inputs: {\n    type: \"type\",\n    tooltipDisabled: \"tooltipDisabled\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    noBarWhenZero: \"noBarWhenZero\",\n    dims: \"dims\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    dataLabelFormatting: \"dataLabelFormatting\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelWidthChanged: \"dataLabelWidthChanged\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c28,\n  decls: 2,\n  vars: 3,\n  consts: [[\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesHorizontal_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, SeriesHorizontal__svg_g_0_Template, 1, 21, \"g\", 0);\n      ɵngcc0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1_Template, 2, 2, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.bars)(\"ngForTrackBy\", ctx.trackBy);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgForOf, ɵngcc1.NgIf, BarComponent, TooltipDirective, BarLabelComponent];\n  },\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\nSeriesHorizontal.propDecorators = {\n  dims: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  series: [{\n    type: Input\n  }],\n  xScale: [{\n    type: Input\n  }],\n  yScale: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  seriesName: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  roundEdges: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  showDataLabel: [{\n    type: Input\n  }],\n  dataLabelFormatting: [{\n    type: Input\n  }],\n  noBarWhenZero: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  dataLabelWidthChanged: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SeriesHorizontal, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-horizontal]',\n      template: \"\\n    <svg:g\\n      ngx-charts-bar\\n      *ngFor=\\\"let bar of bars; trackBy: trackBy\\\"\\n      [@animationState]=\\\"'active'\\\"\\n      [width]=\\\"bar.width\\\"\\n      [height]=\\\"bar.height\\\"\\n      [x]=\\\"bar.x\\\"\\n      [y]=\\\"bar.y\\\"\\n      [fill]=\\\"bar.color\\\"\\n      [stops]=\\\"bar.gradientStops\\\"\\n      [data]=\\\"bar.data\\\"\\n      [orientation]=\\\"'horizontal'\\\"\\n      [roundEdges]=\\\"bar.roundEdges\\\"\\n      (select)=\\\"click($event)\\\"\\n      [gradient]=\\\"gradient\\\"\\n      [isActive]=\\\"isActive(bar.data)\\\"\\n      [ariaLabel]=\\\"bar.ariaLabel\\\"\\n      [animations]=\\\"animations\\\"\\n      (activate)=\\\"activate.emit($event)\\\"\\n      (deactivate)=\\\"deactivate.emit($event)\\\"\\n      ngx-tooltip\\n      [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n      [tooltipPlacement]=\\\"tooltipPlacement\\\"\\n      [tooltipType]=\\\"tooltipType\\\"\\n      [tooltipTitle]=\\\"tooltipTemplate ? undefined : bar.tooltipText\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipContext]=\\\"bar.data\\\"\\n      [noBarWhenZero]=\\\"noBarWhenZero\\\"\\n    ></svg:g>\\n    <svg:g *ngIf=\\\"showDataLabel\\\">\\n      <svg:g\\n        ngx-charts-bar-label\\n        *ngFor=\\\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\\\"\\n        [barX]=\\\"b.x\\\"\\n        [barY]=\\\"b.y\\\"\\n        [barWidth]=\\\"b.width\\\"\\n        [barHeight]=\\\"b.height\\\"\\n        [value]=\\\"b.total\\\"\\n        [valueFormatting]=\\\"dataLabelFormatting\\\"\\n        [orientation]=\\\"'horizontal'\\\"\\n        (dimensionsChanged)=\\\"dataLabelWidthChanged.emit({ size: $event, index: i })\\\"\\n      />\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [];\n  }, {\n    type: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelWidthChanged: [{\n      type: Output\n    }],\n    dims: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nvar BarLabelComponent = /*#__PURE__*/function () {\n  function BarLabelComponent(element) {\n    _classCallCheck(this, BarLabelComponent);\n\n    this.dimensionsChanged = new EventEmitter();\n    this.horizontalPadding = 2;\n    this.verticalPadding = 5;\n    this.element = element.nativeElement;\n  }\n\n  _createClass(BarLabelComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      var h = this.element.getBoundingClientRect().height;\n      var w = this.element.getBoundingClientRect().width;\n      return {\n        height: h,\n        width: w,\n        negative: this.value < 0\n      };\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.dimensionsChanged.emit(this.getSize());\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.valueFormatting) {\n        this.formatedValue = this.valueFormatting(this.value);\n      } else {\n        this.formatedValue = formatLabel(this.value);\n      }\n\n      if (this.orientation === 'horizontal') {\n        this.x = this.barX + this.barWidth; // if the value is negative then it's on the left of the x0.\n        // we need to put the data label in front of the bar\n\n        if (this.value < 0) {\n          this.x = this.x - this.horizontalPadding;\n          this.textAnchor = 'end';\n        } else {\n          this.x = this.x + this.horizontalPadding;\n          this.textAnchor = 'start';\n        }\n\n        this.y = this.barY + this.barHeight / 2;\n      } else {\n        // orientation must be \"vertical\"\n        this.x = this.barX + this.barWidth / 2;\n        this.y = this.barY + this.barHeight;\n\n        if (this.value < 0) {\n          this.y = this.y + this.verticalPadding;\n          this.textAnchor = 'end';\n        } else {\n          this.y = this.y - this.verticalPadding;\n          this.textAnchor = 'start';\n        }\n\n        this.transform = \"rotate(-45, \".concat(this.x, \" , \").concat(this.y, \")\");\n      }\n    }\n  }]);\n\n  return BarLabelComponent;\n}();\n\nBarLabelComponent.ɵfac = function BarLabelComponent_Factory(t) {\n  return new (t || BarLabelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nBarLabelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BarLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-bar-label\", \"\"]],\n  inputs: {\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    barX: \"barX\",\n    barY: \"barY\",\n    barWidth: \"barWidth\",\n    barHeight: \"barHeight\",\n    orientation: \"orientation\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c29,\n  decls: 2,\n  vars: 5,\n  consts: [[\"alignment-baseline\", \"middle\", 1, \"textDataLabel\"]],\n  template: function BarLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"text\", 0);\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform)(\"x\", ctx.x)(\"y\", ctx.y);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.formatedValue, \" \");\n    }\n  },\n  styles: [\".textDataLabel[_ngcontent-%COMP%]{font-size:11px}\"],\n  changeDetection: 0\n});\n\nBarLabelComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nBarLabelComponent.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  barX: [{\n    type: Input\n  }],\n  barY: [{\n    type: Input\n  }],\n  barWidth: [{\n    type: Input\n  }],\n  barHeight: [{\n    type: Input\n  }],\n  orientation: [{\n    type: Input\n  }],\n  dimensionsChanged: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar-label]',\n      template: \"\\n    <svg:text\\n      class=\\\"textDataLabel\\\"\\n      alignment-baseline=\\\"middle\\\"\\n      [attr.text-anchor]=\\\"textAnchor\\\"\\n      [attr.transform]=\\\"transform\\\"\\n      [attr.x]=\\\"x\\\"\\n      [attr.y]=\\\"y\\\"\\n    >\\n      {{ formatedValue }}\\n    </svg:text>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".textDataLabel{font-size:11px}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    dimensionsChanged: [{\n      type: Output\n    }],\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    barX: [{\n      type: Input\n    }],\n    barY: [{\n      type: Input\n    }],\n    barWidth: [{\n      type: Input\n    }],\n    barHeight: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }]\n  });\n})();\n\nvar BarChartModule = function BarChartModule() {\n  _classCallCheck(this, BarChartModule);\n};\n\nBarChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: BarChartModule\n});\nBarChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function BarChartModule_Factory(t) {\n    return new (t || BarChartModule)();\n  },\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BarChartModule, {\n    declarations: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent],\n    imports: [ChartCommonModule],\n    exports: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent],\n      exports: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent]\n    }]\n  }], null, null);\n})();\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n  var domain = [];\n\n  if (scaleType === 'linear') {\n    values = values.map(function (v) {\n      return Number(v);\n    });\n\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === 'time' || scaleType === 'linear') {\n    var _min6 = minVal ? minVal : Math.min.apply(Math, _toConsumableArray(values));\n\n    var _max7 = maxVal ? maxVal : Math.max.apply(Math, _toConsumableArray(values));\n\n    domain = [_min6, _max7];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nfunction getScale(domain, range, scaleType, roundDomains) {\n  var scale;\n\n  if (scaleType === 'time') {\n    scale = scaleTime().range(range).domain(domain);\n  } else if (scaleType === 'linear') {\n    scale = scaleLinear().range(range).domain(domain);\n\n    if (roundDomains) {\n      scale = scale.nice();\n    }\n  } else if (scaleType === 'ordinal') {\n    scale = scalePoint().range([range[0], range[1]]).domain(domain);\n  }\n\n  return scale;\n}\n\nvar BubbleChartComponent = /*#__PURE__*/function (_BaseChartComponent12) {\n  _inherits(BubbleChartComponent, _BaseChartComponent12);\n\n  var _super13 = _createSuper(BubbleChartComponent);\n\n  function BubbleChartComponent() {\n    var _this48;\n\n    _classCallCheck(this, BubbleChartComponent);\n\n    _this48 = _super13.apply(this, arguments);\n    _this48.showGridLines = true;\n    _this48.legend = false;\n    _this48.legendTitle = 'Legend';\n    _this48.legendPosition = 'right';\n    _this48.xAxis = true;\n    _this48.yAxis = true;\n    _this48.trimXAxisTicks = true;\n    _this48.trimYAxisTicks = true;\n    _this48.rotateXAxisTicks = true;\n    _this48.maxXAxisTickLength = 16;\n    _this48.maxYAxisTickLength = 16;\n    _this48.roundDomains = false;\n    _this48.maxRadius = 10;\n    _this48.minRadius = 3;\n    _this48.schemeType = 'ordinal';\n    _this48.tooltipDisabled = false;\n    _this48.activate = new EventEmitter();\n    _this48.deactivate = new EventEmitter();\n    _this48.scaleType = 'linear';\n    _this48.margin = [10, 20, 10, 20];\n    _this48.bubblePadding = [0, 0, 0, 0];\n    _this48.xAxisHeight = 0;\n    _this48.yAxisWidth = 0;\n    _this48.activeEntries = [];\n    return _this48;\n  }\n\n  _createClass(BubbleChartComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(BubbleChartComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      this.seriesDomain = this.results.map(function (d) {\n        return d.name;\n      });\n      this.rDomain = this.getRDomain();\n      this.xDomain = this.getXDomain();\n      this.yDomain = this.getYDomain();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \",\").concat(this.margin[0], \")\");\n      var colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\n      this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n      this.data = this.results;\n      this.minRadius = Math.max(this.minRadius, 1);\n      this.maxRadius = Math.max(this.maxRadius, 1);\n      this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n      this.bubblePadding = [0, 0, 0, 0];\n      this.setScales();\n      this.bubblePadding = this.getBubblePadding();\n      this.setScales();\n      this.legendOptions = this.getLegendOptions();\n      this.clipPathId = 'clip' + id().toString();\n      this.clipPath = \"url(#\".concat(this.clipPathId, \")\");\n    }\n  }, {\n    key: \"hideCircles\",\n    value: function hideCircles() {\n      this.deactivateAll();\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, series) {\n      if (series) {\n        data.series = series.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"getBubblePadding\",\n    value: function getBubblePadding() {\n      var yMin = 0;\n      var xMin = 0;\n      var yMax = this.dims.height;\n      var xMax = this.dims.width;\n\n      var _iterator48 = _createForOfIteratorHelper(this.data),\n          _step48;\n\n      try {\n        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {\n          var s = _step48.value;\n\n          var _iterator49 = _createForOfIteratorHelper(s.series),\n              _step49;\n\n          try {\n            for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {\n              var d = _step49.value;\n              var r = this.rScale(d.r);\n              var cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\n              var cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\n              xMin = Math.max(r - cx, xMin);\n              yMin = Math.max(r - cy, yMin);\n              yMax = Math.max(cy + r, yMax);\n              xMax = Math.max(cx + r, xMax);\n            }\n          } catch (err) {\n            _iterator49.e(err);\n          } finally {\n            _iterator49.f();\n          }\n        }\n      } catch (err) {\n        _iterator48.e(err);\n      } finally {\n        _iterator48.f();\n      }\n\n      xMax = Math.max(xMax - this.dims.width, 0);\n      yMax = Math.max(yMax - this.dims.height, 0);\n      return [yMin, xMax, yMax, xMin];\n    }\n  }, {\n    key: \"setScales\",\n    value: function setScales() {\n      var width = this.dims.width;\n\n      if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n        width = width - this.bubblePadding[1];\n      }\n\n      var height = this.dims.height;\n\n      if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n        height = height - this.bubblePadding[2];\n      }\n\n      this.xScale = this.getXScale(this.xDomain, width);\n      this.yScale = this.getYScale(this.yDomain, height);\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale(domain, height) {\n      return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale(domain, width) {\n      return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n    }\n  }, {\n    key: \"getRScale\",\n    value: function getRScale(domain, range) {\n      var scale = scaleLinear().range(range).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        position: this.legendPosition,\n        title: undefined\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.seriesDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.rDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"getXDomain\",\n    value: function getXDomain() {\n      var values = [];\n\n      var _iterator50 = _createForOfIteratorHelper(this.results),\n          _step50;\n\n      try {\n        for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {\n          var results = _step50.value;\n\n          var _iterator51 = _createForOfIteratorHelper(results.series),\n              _step51;\n\n          try {\n            for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {\n              var d = _step51.value;\n\n              if (!values.includes(d.x)) {\n                values.push(d.x);\n              }\n            }\n          } catch (err) {\n            _iterator51.e(err);\n          } finally {\n            _iterator51.f();\n          }\n        }\n      } catch (err) {\n        _iterator50.e(err);\n      } finally {\n        _iterator50.f();\n      }\n\n      this.xScaleType = getScaleType(values);\n      return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n    }\n  }, {\n    key: \"getYDomain\",\n    value: function getYDomain() {\n      var values = [];\n\n      var _iterator52 = _createForOfIteratorHelper(this.results),\n          _step52;\n\n      try {\n        for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {\n          var results = _step52.value;\n\n          var _iterator53 = _createForOfIteratorHelper(results.series),\n              _step53;\n\n          try {\n            for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {\n              var d = _step53.value;\n\n              if (!values.includes(d.y)) {\n                values.push(d.y);\n              }\n            }\n          } catch (err) {\n            _iterator53.e(err);\n          } finally {\n            _iterator53.f();\n          }\n        }\n      } catch (err) {\n        _iterator52.e(err);\n      } finally {\n        _iterator52.f();\n      }\n\n      this.yScaleType = getScaleType(values);\n      return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n    }\n  }, {\n    key: \"getRDomain\",\n    value: function getRDomain() {\n      var min = Infinity;\n      var max = -Infinity;\n\n      var _iterator54 = _createForOfIteratorHelper(this.results),\n          _step54;\n\n      try {\n        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {\n          var results = _step54.value;\n\n          var _iterator55 = _createForOfIteratorHelper(results.series),\n              _step55;\n\n          try {\n            for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {\n              var d = _step55.value;\n              var value = Number(d.r) || 1;\n              min = Math.min(min, value);\n              max = Math.max(max, value);\n            }\n          } catch (err) {\n            _iterator55.e(err);\n          } finally {\n            _iterator55.f();\n          }\n        }\n      } catch (err) {\n        _iterator54.e(err);\n      } finally {\n        _iterator54.f();\n      }\n\n      return [min, max];\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref30) {\n      var width = _ref30.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref31) {\n      var height = _ref31.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item].concat(_toConsumableArray(this.activeEntries));\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"deactivateAll\",\n    value: function deactivateAll() {\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n\n      var _iterator56 = _createForOfIteratorHelper(this.activeEntries),\n          _step56;\n\n      try {\n        for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {\n          var entry = _step56.value;\n          this.deactivate.emit({\n            value: entry,\n            entries: []\n          });\n        }\n      } catch (err) {\n        _iterator56.e(err);\n      } finally {\n        _iterator56.f();\n      }\n\n      this.activeEntries = [];\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }]);\n\n  return BubbleChartComponent;\n}(BaseChartComponent);\n\nBubbleChartComponent.ɵfac = function BubbleChartComponent_Factory(t) {\n  return ɵBubbleChartComponent_BaseFactory(t || BubbleChartComponent);\n};\n\nBubbleChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BubbleChartComponent,\n  selectors: [[\"ngx-charts-bubble-chart\"]],\n  contentQueries: function BubbleChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function BubbleChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mouseleave\", function BubbleChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    showGridLines: \"showGridLines\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    roundDomains: \"roundDomains\",\n    maxRadius: \"maxRadius\",\n    minRadius: \"minRadius\",\n    schemeType: \"schemeType\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    autoScale: \"autoScale\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"activeEntries\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bubble-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"x\", \"0\", \"y\", \"0\", 1, \"bubble-chart-area\", 2, \"fill\", \"rgb(255, 0, 0)\", \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mouseenter\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-bubble-series\", \"\", 3, \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"xAxisLabel\", \"yAxisLabel\", \"colors\", \"data\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelClick\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"defs\");\n      ɵngcc0.ɵɵelementStart(2, \"clipPath\");\n      ɵngcc0.ɵɵelement(3, \"rect\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(5, BubbleChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(6, BubbleChartComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵelementStart(7, \"rect\", 4);\n      ɵngcc0.ɵɵlistener(\"mouseenter\", function BubbleChartComponent_Template__svg_rect_mouseenter_7_listener() {\n        return ctx.deactivateAll();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(8, \"g\");\n      ɵngcc0.ɵɵtemplate(9, BubbleChartComponent__svg_g_9_Template, 2, 13, \"g\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"activeEntries\", ctx.activeEntries)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.clipPathId);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, BubbleSeriesComponent];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\nBubbleChartComponent.propDecorators = {\n  showGridLines: [{\n    type: Input\n  }],\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  maxRadius: [{\n    type: Input\n  }],\n  minRadius: [{\n    type: Input\n  }],\n  autoScale: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  xScaleMin: [{\n    type: Input\n  }],\n  xScaleMax: [{\n    type: Input\n  }],\n  yScaleMin: [{\n    type: Input\n  }],\n  yScaleMax: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }],\n  hideCircles: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\nvar ɵBubbleChartComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(BubbleChartComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BubbleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bubble-chart',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:defs>\\n        <svg:clipPath [attr.id]=\\\"clipPathId\\\">\\n          <svg:rect\\n            [attr.width]=\\\"dims.width + 10\\\"\\n            [attr.height]=\\\"dims.height + 10\\\"\\n            [attr.transform]=\\\"'translate(-5, -5)'\\\"\\n          />\\n        </svg:clipPath>\\n      </svg:defs>\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"bubble-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [dims]=\\\"dims\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        />\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        />\\n        <svg:rect\\n          class=\\\"bubble-chart-area\\\"\\n          x=\\\"0\\\"\\n          y=\\\"0\\\"\\n          [attr.width]=\\\"dims.width\\\"\\n          [attr.height]=\\\"dims.height\\\"\\n          style=\\\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\\\"\\n          (mouseenter)=\\\"deactivateAll()\\\"\\n        />\\n        <svg:g [attr.clip-path]=\\\"clipPath\\\">\\n          <svg:g *ngFor=\\\"let series of data; trackBy: trackBy\\\" [@animationState]=\\\"'active'\\\">\\n            <svg:g\\n              ngx-charts-bubble-series\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [rScale]=\\\"rScale\\\"\\n              [xScaleType]=\\\"xScaleType\\\"\\n              [yScaleType]=\\\"yScaleType\\\"\\n              [xAxisLabel]=\\\"xAxisLabel\\\"\\n              [yAxisLabel]=\\\"yAxisLabel\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n              (select)=\\\"onClick($event, series)\\\"\\n              (activate)=\\\"onActivate($event)\\\"\\n              (deactivate)=\\\"onDeactivate($event)\\\"\\n            />\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    showGridLines: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    maxRadius: [{\n      type: Input\n    }],\n    minRadius: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar BubbleSeriesComponent = /*#__PURE__*/function () {\n  function BubbleSeriesComponent() {\n    _classCallCheck(this, BubbleSeriesComponent);\n\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  _createClass(BubbleSeriesComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.circles = this.getCircles();\n    }\n  }, {\n    key: \"getCircles\",\n    value: function getCircles() {\n      var _this49 = this;\n\n      var seriesName = this.data.name;\n      return this.data.series.map(function (d, i) {\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n          var y = d.y;\n          var x = d.x;\n          var r = d.r;\n\n          var radius = _this49.rScale(r || 1);\n\n          var tooltipLabel = formatLabel(d.name);\n          var cx = _this49.xScaleType === 'linear' ? _this49.xScale(Number(x)) : _this49.xScale(x);\n          var cy = _this49.yScaleType === 'linear' ? _this49.yScale(Number(y)) : _this49.yScale(y);\n          var color = _this49.colors.scaleType === 'linear' ? _this49.colors.getColor(r) : _this49.colors.getColor(seriesName);\n          var isActive = !_this49.activeEntries.length ? true : _this49.isActive({\n            name: seriesName\n          });\n          var opacity = isActive ? 1 : 0.3;\n          var data = Object.assign({}, d, {\n            series: seriesName,\n            name: d.name,\n            value: d.y,\n            x: d.x,\n            radius: d.r\n          });\n          return {\n            data: data,\n            x: x,\n            y: y,\n            r: r,\n            classNames: [\"circle-data-\".concat(i)],\n            value: y,\n            label: x,\n            cx: cx,\n            cy: cy,\n            radius: radius,\n            tooltipLabel: tooltipLabel,\n            color: color,\n            opacity: opacity,\n            seriesName: seriesName,\n            isActive: isActive,\n            transform: \"translate(\".concat(cx, \",\").concat(cy, \")\")\n          };\n        }\n      }).filter(function (circle) {\n        return circle !== undefined;\n      });\n    }\n  }, {\n    key: \"getTooltipText\",\n    value: function getTooltipText(circle) {\n      var hasRadius = typeof circle.r !== 'undefined';\n      var hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n      var hasSeriesName = circle.seriesName && circle.seriesName.length;\n      var radiusValue = hasRadius ? formatLabel(circle.r) : '';\n      var xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? \"\".concat(this.xAxisLabel, \":\") : '';\n      var yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? \"\".concat(this.yAxisLabel, \":\") : '';\n      var x = formatLabel(circle.x);\n      var y = formatLabel(circle.y);\n      var name = hasSeriesName && hasTooltipLabel ? \"\".concat(circle.seriesName, \" \\u2022 \").concat(circle.tooltipLabel) : circle.seriesName + circle.tooltipLabel;\n      var tooltipTitle = hasSeriesName || hasTooltipLabel ? \"<span class=\\\"tooltip-label\\\">\".concat(escapeLabel(name), \"</span>\") : '';\n      return \"\\n      \".concat(tooltipTitle, \"\\n      <span class=\\\"tooltip-label\\\">\\n        <label>\").concat(escapeLabel(xAxisLabel), \"</label> \").concat(escapeLabel(x), \"<br />\\n        <label>\").concat(escapeLabel(yAxisLabel), \"</label> \").concat(escapeLabel(y), \"\\n      </span>\\n      <span class=\\\"tooltip-val\\\">\\n        \").concat(escapeLabel(radiusValue), \"\\n      </span>\\n    \");\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(entry) {\n      if (!this.activeEntries) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name;\n      });\n      return item !== undefined;\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible(circle) {\n      if (this.activeEntries.length > 0) {\n        return this.isActive({\n          name: circle.seriesName\n        });\n      }\n\n      return circle.opacity !== 0;\n    }\n  }, {\n    key: \"activateCircle\",\n    value: function activateCircle(circle) {\n      circle.barVisible = true;\n      this.activate.emit({\n        name: this.data.name\n      });\n    }\n  }, {\n    key: \"deactivateCircle\",\n    value: function deactivateCircle(circle) {\n      circle.barVisible = false;\n      this.deactivate.emit({\n        name: this.data.name\n      });\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, circle) {\n      return \"\".concat(circle.data.series, \" \").concat(circle.data.name);\n    }\n  }]);\n\n  return BubbleSeriesComponent;\n}();\n\nBubbleSeriesComponent.ɵfac = function BubbleSeriesComponent_Factory(t) {\n  return new (t || BubbleSeriesComponent)();\n};\n\nBubbleSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BubbleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-bubble-series\", \"\"]],\n  inputs: {\n    tooltipDisabled: \"tooltipDisabled\",\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    rScale: \"rScale\",\n    xScaleType: \"xScaleType\",\n    yScaleType: \"yScaleType\",\n    colors: \"colors\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c30,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, BubbleSeriesComponent__svg_g_0_Template, 3, 19, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.circles)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, CircleComponent, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }), animate(250, style({\n      opacity: 1,\n      transform: 'scale(1)'\n    }))])])]\n  },\n  changeDetection: 0\n});\nBubbleSeriesComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  xScale: [{\n    type: Input\n  }],\n  yScale: [{\n    type: Input\n  }],\n  rScale: [{\n    type: Input\n  }],\n  xScaleType: [{\n    type: Input\n  }],\n  yScaleType: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  visibleValue: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BubbleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bubble-series]',\n      template: \"\\n    <svg:g *ngFor=\\\"let circle of circles; trackBy: trackBy\\\">\\n      <svg:g [attr.transform]=\\\"circle.transform\\\">\\n        <svg:g\\n          ngx-charts-circle\\n          [@animationState]=\\\"'active'\\\"\\n          class=\\\"circle\\\"\\n          [cx]=\\\"0\\\"\\n          [cy]=\\\"0\\\"\\n          [r]=\\\"circle.radius\\\"\\n          [fill]=\\\"circle.color\\\"\\n          [style.opacity]=\\\"circle.opacity\\\"\\n          [class.active]=\\\"circle.isActive\\\"\\n          [pointerEvents]=\\\"'all'\\\"\\n          [data]=\\\"circle.value\\\"\\n          [classNames]=\\\"circle.classNames\\\"\\n          (select)=\\\"onClick(circle.data)\\\"\\n          (activate)=\\\"activateCircle(circle)\\\"\\n          (deactivate)=\\\"deactivateCircle(circle)\\\"\\n          ngx-tooltip\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipPlacement]=\\\"'top'\\\"\\n          [tooltipType]=\\\"'tooltip'\\\"\\n          [tooltipTitle]=\\\"tooltipTemplate ? undefined : getTooltipText(circle)\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [tooltipContext]=\\\"circle.data\\\"\\n        />\\n      </svg:g>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }), animate(250, style({\n        opacity: 1,\n        transform: 'scale(1)'\n      }))])])]\n    }]\n  }], function () {\n    return [];\n  }, {\n    tooltipDisabled: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    rScale: [{\n      type: Input\n    }],\n    xScaleType: [{\n      type: Input\n    }],\n    yScaleType: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nvar BubbleChartModule = function BubbleChartModule() {\n  _classCallCheck(this, BubbleChartModule);\n};\n\nBubbleChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: BubbleChartModule\n});\nBubbleChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function BubbleChartModule_Factory(t) {\n    return new (t || BubbleChartModule)();\n  },\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BubbleChartModule, {\n    declarations: [BubbleChartComponent, BubbleSeriesComponent],\n    imports: [ChartCommonModule],\n    exports: [BubbleChartComponent, BubbleSeriesComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BubbleChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BubbleChartComponent, BubbleSeriesComponent],\n      exports: [BubbleChartComponent, BubbleSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nvar HeatMapCellComponent = /*#__PURE__*/function () {\n  function HeatMapCellComponent(element) {\n    _classCallCheck(this, HeatMapCellComponent);\n\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.element = element.nativeElement;\n  }\n\n  _createClass(HeatMapCellComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.transform = \"translate(\".concat(this.x, \" , \").concat(this.y, \")\");\n      this.startOpacity = 0.3;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = \"url(#\".concat(this.gradientId, \")\");\n      this.gradientStops = this.getGradientStops();\n\n      if (this.animations) {\n        this.loadAnimation();\n      }\n    }\n  }, {\n    key: \"getGradientStops\",\n    value: function getGradientStops() {\n      return [{\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      }, {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }];\n    }\n  }, {\n    key: \"loadAnimation\",\n    value: function loadAnimation() {\n      var node = select(this.element).select('.cell');\n      node.attr('opacity', 0);\n      this.animateToCurrentForm();\n    }\n  }, {\n    key: \"animateToCurrentForm\",\n    value: function animateToCurrentForm() {\n      var node = select(this.element).select('.cell');\n      node.transition().duration(750).attr('opacity', 1);\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      this.select.emit(this.data);\n    }\n  }, {\n    key: \"onMouseEnter\",\n    value: function onMouseEnter() {\n      this.activate.emit(this.data);\n    }\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave() {\n      this.deactivate.emit(this.data);\n    }\n  }]);\n\n  return HeatMapCellComponent;\n}();\n\nHeatMapCellComponent.ɵfac = function HeatMapCellComponent_Factory(t) {\n  return new (t || HeatMapCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nHeatMapCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: HeatMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell\", \"\"]],\n  hostBindings: function HeatMapCellComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mouseenter\", function HeatMapCellComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function HeatMapCellComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    gradient: \"gradient\",\n    animations: \"animations\",\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    data: \"data\",\n    label: \"label\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c31,\n  decls: 3,\n  vars: 5,\n  consts: [[1, \"cell\"], [4, \"ngIf\"], [\"rx\", \"3\", 1, \"cell\", 2, \"cursor\", \"pointer\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\"]],\n  template: function HeatMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\", 0);\n      ɵngcc0.ɵɵtemplate(1, HeatMapCellComponent__svg_defs_1_Template, 2, 2, \"defs\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"rect\", 2);\n      ɵngcc0.ɵɵlistener(\"click\", function HeatMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height);\n    }\n  },\n  directives: [ɵngcc1.NgIf, SvgLinearGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nHeatMapCellComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nHeatMapCellComponent.propDecorators = {\n  fill: [{\n    type: Input\n  }],\n  x: [{\n    type: Input\n  }],\n  y: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  onMouseEnter: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  onMouseLeave: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(HeatMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell]',\n      template: \"\\n    <svg:g [attr.transform]=\\\"transform\\\" class=\\\"cell\\\">\\n      <defs *ngIf=\\\"gradient\\\">\\n        <svg:g ngx-charts-svg-linear-gradient orientation=\\\"vertical\\\" [name]=\\\"gradientId\\\" [stops]=\\\"gradientStops\\\" />\\n      </defs>\\n      <svg:rect\\n        [attr.fill]=\\\"gradient ? gradientUrl : fill\\\"\\n        rx=\\\"3\\\"\\n        [attr.width]=\\\"width\\\"\\n        [attr.height]=\\\"height\\\"\\n        class=\\\"cell\\\"\\n        style=\\\"cursor: pointer\\\"\\n        (click)=\\\"onClick()\\\"\\n      />\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }],\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }]\n  });\n})();\n\nvar HeatCellSeriesComponent = /*#__PURE__*/function () {\n  function HeatCellSeriesComponent() {\n    _classCallCheck(this, HeatCellSeriesComponent);\n\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  _createClass(HeatCellSeriesComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (!this.tooltipText) {\n        this.tooltipText = this.getTooltipText;\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.cells = this.getCells();\n    }\n  }, {\n    key: \"getCells\",\n    value: function getCells() {\n      var _this50 = this;\n\n      var cells = [];\n      this.data.map(function (row) {\n        row.series.map(function (cell) {\n          var value = cell.value;\n          cell.series = row.name;\n          cells.push({\n            row: row,\n            cell: cell,\n            x: _this50.xScale(row.name),\n            y: _this50.yScale(cell.name),\n            width: _this50.xScale.bandwidth(),\n            height: _this50.yScale.bandwidth(),\n            fill: _this50.colors.getColor(value),\n            data: value,\n            label: formatLabel(cell.name),\n            series: row.name\n          });\n        });\n      });\n      return cells;\n    }\n  }, {\n    key: \"getTooltipText\",\n    value: function getTooltipText(_ref32) {\n      var label = _ref32.label,\n          data = _ref32.data,\n          series = _ref32.series;\n      return \"\\n      <span class=\\\"tooltip-label\\\">\".concat(escapeLabel(series), \" \\u2022 \").concat(escapeLabel(label), \"</span>\\n      <span class=\\\"tooltip-val\\\">\").concat(data.toLocaleString(), \"</span>\\n    \");\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.tooltipText;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }]);\n\n  return HeatCellSeriesComponent;\n}();\n\nHeatCellSeriesComponent.ɵfac = function HeatCellSeriesComponent_Factory(t) {\n  return new (t || HeatCellSeriesComponent)();\n};\n\nHeatCellSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: HeatCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell-series\", \"\"]],\n  inputs: {\n    tooltipDisabled: \"tooltipDisabled\",\n    animations: \"animations\",\n    tooltipText: \"tooltipText\",\n    data: \"data\",\n    colors: \"colors\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    gradient: \"gradient\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c32,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function HeatCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, HeatCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, HeatMapCellComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\nHeatCellSeriesComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  xScale: [{\n    type: Input\n  }],\n  yScale: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipText: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(HeatCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell-series]',\n      template: \"\\n    <svg:g\\n      ngx-charts-heat-map-cell\\n      *ngFor=\\\"let c of cells; trackBy: trackBy\\\"\\n      [x]=\\\"c.x\\\"\\n      [y]=\\\"c.y\\\"\\n      [width]=\\\"c.width\\\"\\n      [height]=\\\"c.height\\\"\\n      [fill]=\\\"c.fill\\\"\\n      [data]=\\\"c.data\\\"\\n      (select)=\\\"onClick(c.cell)\\\"\\n      (activate)=\\\"activate.emit(c.cell)\\\"\\n      (deactivate)=\\\"deactivate.emit(c.cell)\\\"\\n      [gradient]=\\\"gradient\\\"\\n      [animations]=\\\"animations\\\"\\n      ngx-tooltip\\n      [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n      [tooltipPlacement]=\\\"'top'\\\"\\n      [tooltipType]=\\\"'tooltip'\\\"\\n      [tooltipTitle]=\\\"tooltipTemplate ? undefined : tooltipText(c)\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipContext]=\\\"{ series: c.series, name: c.label, value: c.data }\\\"\\n    ></svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    tooltipDisabled: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nvar HeatMapComponent = /*#__PURE__*/function (_BaseChartComponent13) {\n  _inherits(HeatMapComponent, _BaseChartComponent13);\n\n  var _super14 = _createSuper(HeatMapComponent);\n\n  function HeatMapComponent() {\n    var _this51;\n\n    _classCallCheck(this, HeatMapComponent);\n\n    _this51 = _super14.apply(this, arguments);\n    _this51.legendTitle = 'Legend';\n    _this51.legendPosition = 'right';\n    _this51.innerPadding = 8;\n    _this51.trimXAxisTicks = true;\n    _this51.trimYAxisTicks = true;\n    _this51.rotateXAxisTicks = true;\n    _this51.maxXAxisTickLength = 16;\n    _this51.maxYAxisTickLength = 16;\n    _this51.tooltipDisabled = false;\n    _this51.activeEntries = [];\n    _this51.activate = new EventEmitter();\n    _this51.deactivate = new EventEmitter();\n    _this51.margin = [10, 20, 10, 20];\n    _this51.xAxisHeight = 0;\n    _this51.yAxisWidth = 0;\n    _this51.scaleType = 'linear';\n    return _this51;\n  }\n\n  _createClass(HeatMapComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(HeatMapComponent.prototype), \"update\", this).call(this);\n\n      this.formatDates();\n      this.xDomain = this.getXDomain();\n      this.yDomain = this.getYDomain();\n      this.valueDomain = this.getValueDomain();\n      this.scaleType = getScaleType(this.valueDomain, false);\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.scaleType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.scaleType === 'linear') {\n        var _min7 = this.min;\n        var _max8 = this.max;\n\n        if (!this.min) {\n          _min7 = Math.min.apply(Math, [0].concat(_toConsumableArray(this.valueDomain)));\n        }\n\n        if (!this.max) {\n          _max8 = Math.max.apply(Math, _toConsumableArray(this.valueDomain));\n        }\n\n        this.valueDomain = [_min7, _max8];\n      }\n\n      this.xScale = this.getXScale();\n      this.yScale = this.getYScale();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n      this.rects = this.getRects();\n    }\n  }, {\n    key: \"getXDomain\",\n    value: function getXDomain() {\n      var domain = [];\n\n      var _iterator57 = _createForOfIteratorHelper(this.results),\n          _step57;\n\n      try {\n        for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {\n          var group = _step57.value;\n\n          if (!domain.includes(group.name)) {\n            domain.push(group.name);\n          }\n        }\n      } catch (err) {\n        _iterator57.e(err);\n      } finally {\n        _iterator57.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getYDomain\",\n    value: function getYDomain() {\n      var domain = [];\n\n      var _iterator58 = _createForOfIteratorHelper(this.results),\n          _step58;\n\n      try {\n        for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {\n          var group = _step58.value;\n\n          var _iterator59 = _createForOfIteratorHelper(group.series),\n              _step59;\n\n          try {\n            for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {\n              var d = _step59.value;\n\n              if (!domain.includes(d.name)) {\n                domain.push(d.name);\n              }\n            }\n          } catch (err) {\n            _iterator59.e(err);\n          } finally {\n            _iterator59.f();\n          }\n        }\n      } catch (err) {\n        _iterator58.e(err);\n      } finally {\n        _iterator58.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      var domain = [];\n\n      var _iterator60 = _createForOfIteratorHelper(this.results),\n          _step60;\n\n      try {\n        for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {\n          var group = _step60.value;\n\n          var _iterator61 = _createForOfIteratorHelper(group.series),\n              _step61;\n\n          try {\n            for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {\n              var d = _step61.value;\n\n              if (!domain.includes(d.value)) {\n                domain.push(d.value);\n              }\n            }\n          } catch (err) {\n            _iterator61.e(err);\n          } finally {\n            _iterator61.f();\n          }\n        }\n      } catch (err) {\n        _iterator60.e(err);\n      } finally {\n        _iterator60.f();\n      }\n\n      return domain;\n    }\n    /**\n     * Converts the input to gap paddingInner in fraction\n     * Supports the following inputs:\n     *    Numbers: 8\n     *    Strings: \"8\", \"8px\", \"8%\"\n     *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n     *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n     *\n     * @memberOf HeatMapComponent\n     */\n\n  }, {\n    key: \"getDimension\",\n    value: function getDimension(value) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var N = arguments.length > 2 ? arguments[2] : undefined;\n      var L = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (typeof value === 'string') {\n        value = value.replace('[', '').replace(']', '').replace('px', '') // tslint:disable-next-line: quotemark\n        .replace(\"'\", '');\n\n        if (value.includes(',')) {\n          value = value.split(',');\n        }\n      }\n\n      if (Array.isArray(value) && typeof index === 'number') {\n        return this.getDimension(value[index], null, N, L);\n      }\n\n      if (typeof value === 'string' && value.includes('%')) {\n        return +value.replace('%', '') / 100;\n      }\n\n      return N / (L / +value + 1);\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale() {\n      var f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n      return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale() {\n      var f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n      return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n    }\n  }, {\n    key: \"getRects\",\n    value: function getRects() {\n      var _this52 = this;\n\n      var rects = [];\n      this.xDomain.map(function (xVal) {\n        _this52.yDomain.map(function (yVal) {\n          rects.push({\n            x: _this52.xScale(xVal),\n            y: _this52.yScale(yVal),\n            rx: 3,\n            width: _this52.xScale.bandwidth(),\n            height: _this52.yScale.bandwidth(),\n            fill: 'rgba(200,200,200,0.03)'\n          });\n        });\n      });\n      return rects;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      return {\n        scaleType: this.scaleType,\n        domain: this.valueDomain,\n        colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\n        title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\n        position: this.legendPosition\n      };\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref33) {\n      var width = _ref33.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref34) {\n      var height = _ref34.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      var items = this.results.map(function (g) {\n        return g.series;\n      }).flat().filter(function (i) {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n      this.activeEntries = _toConsumableArray(items);\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(event, group) {\n      var fromLegend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var item = Object.assign({}, event);\n\n      if (group) {\n        item.series = group.name;\n      }\n\n      this.activeEntries = this.activeEntries.filter(function (i) {\n        if (fromLegend) {\n          return i.label !== item.name;\n        } else {\n          return !(i.name === item.name && i.series === item.series);\n        }\n      });\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return HeatMapComponent;\n}(BaseChartComponent);\n\nHeatMapComponent.ɵfac = function HeatMapComponent_Factory(t) {\n  return ɵHeatMapComponent_BaseFactory(t || HeatMapComponent);\n};\n\nHeatMapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: HeatMapComponent,\n  selectors: [[\"ngx-charts-heat-map\"]],\n  contentQueries: function HeatMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    innerPadding: \"innerPadding\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    tooltipDisabled: \"tooltipDisabled\",\n    activeEntries: \"activeEntries\",\n    legend: \"legend\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    tooltipText: \"tooltipText\",\n    min: \"min\",\n    max: \"max\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"legendOptions\", \"legendLabelClick\"], [1, \"heat-map\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-heat-map-cell-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"]],\n  template: function HeatMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelClick\", function HeatMapComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(2, HeatMapComponent__svg_g_2_Template, 1, 9, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(3, HeatMapComponent__svg_g_3_Template, 1, 8, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(4, HeatMapComponent__svg_rect_4_Template, 1, 6, \"rect\", 4);\n      ɵngcc0.ɵɵelementStart(5, \"g\", 5);\n      ɵngcc0.ɵɵlistener(\"select\", function HeatMapComponent_Template__svg_g_select_5_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function HeatMapComponent_Template__svg_g_activate_5_listener($event) {\n        return ctx.onActivate($event, undefined);\n      })(\"deactivate\", function HeatMapComponent_Template__svg_g_deactivate_5_listener($event) {\n        return ctx.onDeactivate($event, undefined);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"animations\", ctx.animations)(\"legendOptions\", ctx.legendOptions);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.rects);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"data\", ctx.results)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  directives: [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, HeatCellSeriesComponent, XAxisComponent, YAxisComponent],\n  styles: [_c24],\n  encapsulation: 2,\n  changeDetection: 0\n});\nHeatMapComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  innerPadding: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipText: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵHeatMapComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(HeatMapComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(HeatMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-heat-map',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [animations]=\\\"animations\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"heat-map chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:rect\\n          *ngFor=\\\"let rect of rects\\\"\\n          [attr.x]=\\\"rect.x\\\"\\n          [attr.y]=\\\"rect.y\\\"\\n          [attr.rx]=\\\"rect.rx\\\"\\n          [attr.width]=\\\"rect.width\\\"\\n          [attr.height]=\\\"rect.height\\\"\\n          [attr.fill]=\\\"rect.fill\\\"\\n        />\\n        <svg:g\\n          ngx-charts-heat-map-cell-series\\n          [xScale]=\\\"xScale\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [colors]=\\\"colors\\\"\\n          [data]=\\\"results\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [animations]=\\\"animations\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [tooltipText]=\\\"tooltipText\\\"\\n          (select)=\\\"onClick($event)\\\"\\n          (activate)=\\\"onActivate($event, undefined)\\\"\\n          (deactivate)=\\\"onDeactivate($event, undefined)\\\"\\n        />\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    legend: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar HeatMapModule = function HeatMapModule() {\n  _classCallCheck(this, HeatMapModule);\n};\n\nHeatMapModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: HeatMapModule\n});\nHeatMapModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function HeatMapModule_Factory(t) {\n    return new (t || HeatMapModule)();\n  },\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HeatMapModule, {\n    declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n    imports: [ChartCommonModule],\n    exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(HeatMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n      exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n    }]\n  }], null, null);\n})();\n\nvar LineComponent = /*#__PURE__*/function () {\n  function LineComponent(element) {\n    _classCallCheck(this, LineComponent);\n\n    this.element = element;\n    this.fill = 'none';\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.initialized = false;\n  }\n\n  _createClass(LineComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this.initialized) {\n        this.initialized = true;\n        this.initialPath = this.path;\n      } else {\n        this.updatePathEl();\n      }\n    }\n  }, {\n    key: \"updatePathEl\",\n    value: function updatePathEl() {\n      var node = select(this.element.nativeElement).select('.line');\n\n      if (this.animations) {\n        node.transition().duration(750).attr('d', this.path);\n      } else {\n        node.attr('d', this.path);\n      }\n    }\n  }]);\n\n  return LineComponent;\n}();\n\nLineComponent.ɵfac = function LineComponent_Factory(t) {\n  return new (t || LineComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nLineComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: LineComponent,\n  selectors: [[\"g\", \"ngx-charts-line\", \"\"]],\n  inputs: {\n    fill: \"fill\",\n    animations: \"animations\",\n    path: \"path\",\n    stroke: \"stroke\",\n    data: \"data\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c34,\n  decls: 1,\n  vars: 4,\n  consts: [[\"stroke-width\", \"1.5px\", 1, \"line\"]],\n  template: function LineComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelement(0, \"path\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"@animationState\", \"active\");\n      ɵngcc0.ɵɵattribute(\"d\", ctx.initialPath)(\"fill\", ctx.fill)(\"stroke\", ctx.stroke);\n    }\n  },\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      strokeDasharray: 2000,\n      strokeDashoffset: 2000\n    }), animate(1000, style({\n      strokeDashoffset: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\nLineComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nLineComponent.propDecorators = {\n  path: [{\n    type: Input\n  }],\n  stroke: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  fill: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LineComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line]',\n      template: \"\\n    <svg:path\\n      [@animationState]=\\\"'active'\\\"\\n      class=\\\"line\\\"\\n      [attr.d]=\\\"initialPath\\\"\\n      [attr.fill]=\\\"fill\\\"\\n      [attr.stroke]=\\\"stroke\\\"\\n      stroke-width=\\\"1.5px\\\"\\n    />\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        strokeDasharray: 2000,\n        strokeDashoffset: 2000\n      }), animate(1000, style({\n        strokeDashoffset: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    path: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\nvar LineChartComponent = /*#__PURE__*/function (_BaseChartComponent14) {\n  _inherits(LineChartComponent, _BaseChartComponent14);\n\n  var _super15 = _createSuper(LineChartComponent);\n\n  function LineChartComponent() {\n    var _this53;\n\n    _classCallCheck(this, LineChartComponent);\n\n    _this53 = _super15.apply(this, arguments);\n    _this53.legendTitle = 'Legend';\n    _this53.legendPosition = 'right';\n    _this53.showGridLines = true;\n    _this53.curve = curveLinear;\n    _this53.activeEntries = [];\n    _this53.trimXAxisTicks = true;\n    _this53.trimYAxisTicks = true;\n    _this53.rotateXAxisTicks = true;\n    _this53.maxXAxisTickLength = 16;\n    _this53.maxYAxisTickLength = 16;\n    _this53.roundDomains = false;\n    _this53.tooltipDisabled = false;\n    _this53.showRefLines = false;\n    _this53.showRefLabels = true;\n    _this53.activate = new EventEmitter();\n    _this53.deactivate = new EventEmitter();\n    _this53.margin = [10, 20, 10, 20];\n    _this53.xAxisHeight = 0;\n    _this53.yAxisWidth = 0;\n    _this53.timelineHeight = 50;\n    _this53.timelinePadding = 10;\n    return _this53;\n  }\n\n  _createClass(LineChartComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(LineChartComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n\n      if (this.timeline) {\n        this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n      }\n\n      this.xDomain = this.getXDomain();\n\n      if (this.filteredDomain) {\n        this.xDomain = this.filteredDomain;\n      }\n\n      this.yDomain = this.getYDomain();\n      this.seriesDomain = this.getSeriesDomain();\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n      this.yScale = this.getYScale(this.yDomain, this.dims.height);\n      this.updateTimeline();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n      this.clipPathId = 'clip' + id().toString();\n      this.clipPath = \"url(#\".concat(this.clipPathId, \")\");\n    }\n  }, {\n    key: \"updateTimeline\",\n    value: function updateTimeline() {\n      if (this.timeline) {\n        this.timelineWidth = this.dims.width;\n        this.timelineXDomain = this.getXDomain();\n        this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n        this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n        this.timelineTransform = \"translate(\".concat(this.dims.xOffset, \", \").concat(-this.margin[2], \")\");\n      }\n    }\n  }, {\n    key: \"getXDomain\",\n    value: function getXDomain() {\n      var values = getUniqueXDomainValues(this.results);\n      this.scaleType = getScaleType(values);\n      var domain = [];\n\n      if (this.scaleType === 'linear') {\n        values = values.map(function (v) {\n          return Number(v);\n        });\n      }\n\n      var min;\n      var max;\n\n      if (this.scaleType === 'time' || this.scaleType === 'linear') {\n        min = this.xScaleMin ? this.xScaleMin : Math.min.apply(Math, _toConsumableArray(values));\n        max = this.xScaleMax ? this.xScaleMax : Math.max.apply(Math, _toConsumableArray(values));\n      }\n\n      if (this.scaleType === 'time') {\n        domain = [new Date(min), new Date(max)];\n        this.xSet = _toConsumableArray(values).sort(function (a, b) {\n          var aDate = a.getTime();\n          var bDate = b.getTime();\n          if (aDate > bDate) return 1;\n          if (bDate > aDate) return -1;\n          return 0;\n        });\n      } else if (this.scaleType === 'linear') {\n        domain = [min, max]; // Use compare function to sort numbers numerically\n\n        this.xSet = _toConsumableArray(values).sort(function (a, b) {\n          return a - b;\n        });\n      } else {\n        domain = values;\n        this.xSet = values;\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getYDomain\",\n    value: function getYDomain() {\n      var domain = [];\n\n      var _iterator62 = _createForOfIteratorHelper(this.results),\n          _step62;\n\n      try {\n        for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {\n          var results = _step62.value;\n\n          var _iterator63 = _createForOfIteratorHelper(results.series),\n              _step63;\n\n          try {\n            for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {\n              var d = _step63.value;\n\n              if (domain.indexOf(d.value) < 0) {\n                domain.push(d.value);\n              }\n\n              if (d.min !== undefined) {\n                this.hasRange = true;\n\n                if (domain.indexOf(d.min) < 0) {\n                  domain.push(d.min);\n                }\n              }\n\n              if (d.max !== undefined) {\n                this.hasRange = true;\n\n                if (domain.indexOf(d.max) < 0) {\n                  domain.push(d.max);\n                }\n              }\n            }\n          } catch (err) {\n            _iterator63.e(err);\n          } finally {\n            _iterator63.f();\n          }\n        }\n      } catch (err) {\n        _iterator62.e(err);\n      } finally {\n        _iterator62.f();\n      }\n\n      var values = [].concat(domain);\n\n      if (!this.autoScale) {\n        values.push(0);\n      }\n\n      var min = this.yScaleMin ? this.yScaleMin : Math.min.apply(Math, _toConsumableArray(values));\n      var max = this.yScaleMax ? this.yScaleMax : Math.max.apply(Math, _toConsumableArray(values));\n      return [min, max];\n    }\n  }, {\n    key: \"getSeriesDomain\",\n    value: function getSeriesDomain() {\n      return this.results.map(function (d) {\n        return d.name;\n      });\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale(domain, width) {\n      var scale;\n\n      if (this.scaleType === 'time') {\n        scale = scaleTime().range([0, width]).domain(domain);\n      } else if (this.scaleType === 'linear') {\n        scale = scaleLinear().range([0, width]).domain(domain);\n\n        if (this.roundDomains) {\n          scale = scale.nice();\n        }\n      } else if (this.scaleType === 'ordinal') {\n        scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n      }\n\n      return scale;\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale(domain, height) {\n      var scale = scaleLinear().range([height, 0]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"updateDomain\",\n    value: function updateDomain(domain) {\n      this.filteredDomain = domain;\n      this.xDomain = this.filteredDomain;\n      this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n  }, {\n    key: \"updateHoveredVertical\",\n    value: function updateHoveredVertical(item) {\n      this.hoveredVertical = item.value;\n      this.deactivateAll();\n    }\n  }, {\n    key: \"hideCircles\",\n    value: function hideCircles() {\n      this.hoveredVertical = null;\n      this.deactivateAll();\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain;\n\n      if (this.schemeType === 'ordinal') {\n        domain = this.seriesDomain;\n      } else {\n        domain = this.yDomain;\n      }\n\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      var opts = {\n        scaleType: this.schemeType,\n        colors: undefined,\n        domain: [],\n        title: undefined,\n        position: this.legendPosition\n      };\n\n      if (opts.scaleType === 'ordinal') {\n        opts.domain = this.seriesDomain;\n        opts.colors = this.colors;\n        opts.title = this.legendTitle;\n      } else {\n        opts.domain = this.yDomain;\n        opts.colors = this.colors.scale;\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref35) {\n      var width = _ref35.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref36) {\n      var height = _ref36.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      this.deactivateAll();\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item];\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"deactivateAll\",\n    value: function deactivateAll() {\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n\n      var _iterator64 = _createForOfIteratorHelper(this.activeEntries),\n          _step64;\n\n      try {\n        for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {\n          var entry = _step64.value;\n          this.deactivate.emit({\n            value: entry,\n            entries: []\n          });\n        }\n      } catch (err) {\n        _iterator64.e(err);\n      } finally {\n        _iterator64.f();\n      }\n\n      this.activeEntries = [];\n    }\n  }]);\n\n  return LineChartComponent;\n}(BaseChartComponent);\n\nLineChartComponent.ɵfac = function LineChartComponent_Factory(t) {\n  return ɵLineChartComponent_BaseFactory(t || LineChartComponent);\n};\n\nLineChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: LineChartComponent,\n  selectors: [[\"ngx-charts-line-chart\"]],\n  contentQueries: function LineChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function LineChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mouseleave\", function LineChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showRefLines: \"showRefLines\",\n    showRefLabels: \"showRefLabels\",\n    legend: \"legend\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    referenceLines: \"referenceLines\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"line-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"dimensionsChanged\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"hasRange\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"curve\", \"hasRange\", \"animations\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelClick\", function LineChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"defs\");\n      ɵngcc0.ɵɵelementStart(2, \"clipPath\");\n      ɵngcc0.ɵɵelement(3, \"rect\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(5, LineChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(6, LineChartComponent__svg_g_6_Template, 1, 12, \"g\", 3);\n      ɵngcc0.ɵɵelementStart(7, \"g\");\n      ɵngcc0.ɵɵtemplate(8, LineChartComponent__svg_g_8_Template, 2, 11, \"g\", 4);\n      ɵngcc0.ɵɵtemplate(9, LineChartComponent__svg_g_9_Template, 3, 9, \"g\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(10, LineChartComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.clipPathId);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, LineSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline];\n  },\n  styles: [_c24],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\nLineChartComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  autoScale: [{\n    type: Input\n  }],\n  timeline: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  curve: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  rangeFillOpacity: [{\n    type: Input\n  }],\n  trimXAxisTicks: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  rotateXAxisTicks: [{\n    type: Input\n  }],\n  maxXAxisTickLength: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  xAxisTicks: [{\n    type: Input\n  }],\n  yAxisTicks: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  showRefLines: [{\n    type: Input\n  }],\n  referenceLines: [{\n    type: Input\n  }],\n  showRefLabels: [{\n    type: Input\n  }],\n  xScaleMin: [{\n    type: Input\n  }],\n  xScaleMax: [{\n    type: Input\n  }],\n  yScaleMin: [{\n    type: Input\n  }],\n  yScaleMax: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }],\n  seriesTooltipTemplate: [{\n    type: ContentChild,\n    args: ['seriesTooltipTemplate']\n  }],\n  hideCircles: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\nvar ɵLineChartComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(LineChartComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LineChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-line-chart',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:defs>\\n        <svg:clipPath [attr.id]=\\\"clipPathId\\\">\\n          <svg:rect\\n            [attr.width]=\\\"dims.width + 10\\\"\\n            [attr.height]=\\\"dims.height + 10\\\"\\n            [attr.transform]=\\\"'translate(-5, -5)'\\\"\\n          />\\n        </svg:clipPath>\\n      </svg:defs>\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"line-chart chart\\\">\\n        <svg:g\\n          ngx-charts-x-axis\\n          *ngIf=\\\"xAxis\\\"\\n          [xScale]=\\\"xScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showXAxisLabel\\\"\\n          [labelText]=\\\"xAxisLabel\\\"\\n          [trimTicks]=\\\"trimXAxisTicks\\\"\\n          [rotateTicks]=\\\"rotateXAxisTicks\\\"\\n          [maxTickLength]=\\\"maxXAxisTickLength\\\"\\n          [tickFormatting]=\\\"xAxisTickFormatting\\\"\\n          [ticks]=\\\"xAxisTicks\\\"\\n          (dimensionsChanged)=\\\"updateXAxisHeight($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yScale\\\"\\n          [dims]=\\\"dims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          [ticks]=\\\"yAxisTicks\\\"\\n          [referenceLines]=\\\"referenceLines\\\"\\n          [showRefLines]=\\\"showRefLines\\\"\\n          [showRefLabels]=\\\"showRefLabels\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g [attr.clip-path]=\\\"clipPath\\\">\\n          <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\" [@animationState]=\\\"'active'\\\">\\n            <svg:g\\n              ngx-charts-line-series\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [scaleType]=\\\"scaleType\\\"\\n              [curve]=\\\"curve\\\"\\n              [rangeFillOpacity]=\\\"rangeFillOpacity\\\"\\n              [hasRange]=\\\"hasRange\\\"\\n              [animations]=\\\"animations\\\"\\n            />\\n          </svg:g>\\n\\n          <svg:g *ngIf=\\\"!tooltipDisabled\\\" (mouseleave)=\\\"hideCircles()\\\">\\n            <svg:g\\n              ngx-charts-tooltip-area\\n              [dims]=\\\"dims\\\"\\n              [xSet]=\\\"xSet\\\"\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [results]=\\\"results\\\"\\n              [colors]=\\\"colors\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"seriesTooltipTemplate\\\"\\n              (hover)=\\\"updateHoveredVertical($event)\\\"\\n            />\\n\\n            <svg:g *ngFor=\\\"let series of results\\\">\\n              <svg:g\\n                ngx-charts-circle-series\\n                [xScale]=\\\"xScale\\\"\\n                [yScale]=\\\"yScale\\\"\\n                [colors]=\\\"colors\\\"\\n                [data]=\\\"series\\\"\\n                [scaleType]=\\\"scaleType\\\"\\n                [visibleValue]=\\\"hoveredVertical\\\"\\n                [activeEntries]=\\\"activeEntries\\\"\\n                [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n                [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n                (select)=\\\"onClick($event)\\\"\\n                (activate)=\\\"onActivate($event)\\\"\\n                (deactivate)=\\\"onDeactivate($event)\\\"\\n              />\\n            </svg:g>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n      <svg:g\\n        ngx-charts-timeline\\n        *ngIf=\\\"timeline && scaleType != 'ordinal'\\\"\\n        [attr.transform]=\\\"timelineTransform\\\"\\n        [results]=\\\"results\\\"\\n        [view]=\\\"[timelineWidth, height]\\\"\\n        [height]=\\\"timelineHeight\\\"\\n        [scheme]=\\\"scheme\\\"\\n        [customColors]=\\\"customColors\\\"\\n        [scaleType]=\\\"scaleType\\\"\\n        [legend]=\\\"legend\\\"\\n        (onDomainChange)=\\\"updateDomain($event)\\\"\\n      >\\n        <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\">\\n          <svg:g\\n            ngx-charts-line-series\\n            [xScale]=\\\"timelineXScale\\\"\\n            [yScale]=\\\"timelineYScale\\\"\\n            [colors]=\\\"colors\\\"\\n            [data]=\\\"series\\\"\\n            [scaleType]=\\\"scaleType\\\"\\n            [curve]=\\\"curve\\\"\\n            [hasRange]=\\\"hasRange\\\"\\n            [animations]=\\\"animations\\\"\\n          />\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\"]\n    }]\n  }], null, {\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }],\n    legend: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }]\n  });\n})();\n\nvar LineSeriesComponent = /*#__PURE__*/function () {\n  function LineSeriesComponent() {\n    _classCallCheck(this, LineSeriesComponent);\n\n    this.animations = true;\n  }\n\n  _createClass(LineSeriesComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.updateGradients();\n      var data = this.sortData(this.data.series);\n      var lineGen = this.getLineGenerator();\n      this.path = lineGen(data) || '';\n      var areaGen = this.getAreaGenerator();\n      this.areaPath = areaGen(data) || '';\n\n      if (this.hasRange) {\n        var _range = this.getRangeGenerator();\n\n        this.outerPath = _range(data) || '';\n      }\n\n      if (this.hasGradient) {\n        this.stroke = this.gradientUrl;\n        var values = this.data.series.map(function (d) {\n          return d.value;\n        });\n\n        var _max9 = Math.max.apply(Math, _toConsumableArray(values));\n\n        var _min8 = Math.min.apply(Math, _toConsumableArray(values));\n\n        if (_max9 === _min8) {\n          this.stroke = this.colors.getColor(_max9);\n        }\n      } else {\n        this.stroke = this.colors.getColor(this.data.name);\n      }\n    }\n  }, {\n    key: \"getLineGenerator\",\n    value: function getLineGenerator() {\n      var _this54 = this;\n\n      return line().x(function (d) {\n        var label = d.name;\n        var value;\n\n        if (_this54.scaleType === 'time') {\n          value = _this54.xScale(label);\n        } else if (_this54.scaleType === 'linear') {\n          value = _this54.xScale(Number(label));\n        } else {\n          value = _this54.xScale(label);\n        }\n\n        return value;\n      }).y(function (d) {\n        return _this54.yScale(d.value);\n      }).curve(this.curve);\n    }\n  }, {\n    key: \"getRangeGenerator\",\n    value: function getRangeGenerator() {\n      var _this55 = this;\n\n      return area().x(function (d) {\n        var label = d.name;\n        var value;\n\n        if (_this55.scaleType === 'time') {\n          value = _this55.xScale(label);\n        } else if (_this55.scaleType === 'linear') {\n          value = _this55.xScale(Number(label));\n        } else {\n          value = _this55.xScale(label);\n        }\n\n        return value;\n      }).y0(function (d) {\n        return _this55.yScale(typeof d.min === 'number' ? d.min : d.value);\n      }).y1(function (d) {\n        return _this55.yScale(typeof d.max === 'number' ? d.max : d.value);\n      }).curve(this.curve);\n    }\n  }, {\n    key: \"getAreaGenerator\",\n    value: function getAreaGenerator() {\n      var _this56 = this;\n\n      var xProperty = function xProperty(d) {\n        var label = d.name;\n        return _this56.xScale(label);\n      };\n\n      return area().x(xProperty).y0(function () {\n        return _this56.yScale.range()[0];\n      }).y1(function (d) {\n        return _this56.yScale(d.value);\n      }).curve(this.curve);\n    }\n  }, {\n    key: \"sortData\",\n    value: function sortData(data) {\n      if (this.scaleType === 'linear') {\n        data = sortLinear(data, 'name');\n      } else if (this.scaleType === 'time') {\n        data = sortByTime(data, 'name');\n      } else {\n        data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n      }\n\n      return data;\n    }\n  }, {\n    key: \"updateGradients\",\n    value: function updateGradients() {\n      if (this.colors.scaleType === 'linear') {\n        this.hasGradient = true;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = \"url(#\".concat(this.gradientId, \")\");\n        var values = this.data.series.map(function (d) {\n          return d.value;\n        });\n\n        var _max10 = Math.max.apply(Math, _toConsumableArray(values));\n\n        var _min9 = Math.min.apply(Math, _toConsumableArray(values));\n\n        this.gradientStops = this.colors.getLinearGradientStops(_max10, _min9);\n        this.areaGradientStops = this.colors.getLinearGradientStops(_max10);\n      } else {\n        this.hasGradient = false;\n        this.gradientStops = undefined;\n        this.areaGradientStops = undefined;\n      }\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(entry) {\n      if (!this.activeEntries) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name;\n      });\n      return item !== undefined;\n    }\n  }, {\n    key: \"isInactive\",\n    value: function isInactive(entry) {\n      if (!this.activeEntries || this.activeEntries.length === 0) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name;\n      });\n      return item === undefined;\n    }\n  }]);\n\n  return LineSeriesComponent;\n}();\n\nLineSeriesComponent.ɵfac = function LineSeriesComponent_Factory(t) {\n  return new (t || LineSeriesComponent)();\n};\n\nLineSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: LineSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-line-series\", \"\"]],\n  inputs: {\n    animations: \"animations\",\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    hasRange: \"hasRange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c35,\n  decls: 6,\n  vars: 22,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-area\", \"\", 1, \"line-highlight\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"startOpacity\", \"gradient\", \"stops\", \"animations\"], [\"ngx-charts-line\", \"\", 1, \"line-series\", 3, \"data\", \"path\", \"stroke\", \"animations\"], [\"ngx-charts-area\", \"\", \"class\", \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"active\", \"inactive\", \"opacity\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\"], [\"ngx-charts-area\", \"\", 1, \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"animations\"]],\n  template: function LineSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\");\n      ɵngcc0.ɵɵelementStart(1, \"defs\");\n      ɵngcc0.ɵɵtemplate(2, LineSeriesComponent__svg_g_2_Template, 1, 2, \"g\", 0);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(3, \"g\", 1);\n      ɵngcc0.ɵɵelement(4, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(5, LineSeriesComponent__svg_g_5_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      ɵngcc0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.areaPath)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.colors.getColor(ctx.data.name))(\"opacity\", 0.25)(\"startOpacity\", 0)(\"gradient\", true)(\"stops\", ctx.areaGradientStops)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      ɵngcc0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"stroke\", ctx.stroke)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasRange);\n    }\n  },\n  directives: [ɵngcc1.NgIf, AreaComponent, LineComponent, SvgLinearGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\nLineSeriesComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  xScale: [{\n    type: Input\n  }],\n  yScale: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  scaleType: [{\n    type: Input\n  }],\n  curve: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  rangeFillOpacity: [{\n    type: Input\n  }],\n  hasRange: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LineSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line-series]',\n      template: \"\\n    <svg:g>\\n      <defs>\\n        <svg:g\\n          ngx-charts-svg-linear-gradient\\n          *ngIf=\\\"hasGradient\\\"\\n          orientation=\\\"vertical\\\"\\n          [name]=\\\"gradientId\\\"\\n          [stops]=\\\"gradientStops\\\"\\n        />\\n      </defs>\\n      <svg:g\\n        ngx-charts-area\\n        class=\\\"line-highlight\\\"\\n        [data]=\\\"data\\\"\\n        [path]=\\\"areaPath\\\"\\n        [fill]=\\\"hasGradient ? gradientUrl : colors.getColor(data.name)\\\"\\n        [opacity]=\\\"0.25\\\"\\n        [startOpacity]=\\\"0\\\"\\n        [gradient]=\\\"true\\\"\\n        [stops]=\\\"areaGradientStops\\\"\\n        [class.active]=\\\"isActive(data)\\\"\\n        [class.inactive]=\\\"isInactive(data)\\\"\\n        [animations]=\\\"animations\\\"\\n      />\\n      <svg:g\\n        ngx-charts-line\\n        class=\\\"line-series\\\"\\n        [data]=\\\"data\\\"\\n        [path]=\\\"path\\\"\\n        [stroke]=\\\"stroke\\\"\\n        [animations]=\\\"animations\\\"\\n        [class.active]=\\\"isActive(data)\\\"\\n        [class.inactive]=\\\"isInactive(data)\\\"\\n      />\\n      <svg:g\\n        ngx-charts-area\\n        *ngIf=\\\"hasRange\\\"\\n        class=\\\"line-series-range\\\"\\n        [data]=\\\"data\\\"\\n        [path]=\\\"outerPath\\\"\\n        [fill]=\\\"hasGradient ? gradientUrl : colors.getColor(data.name)\\\"\\n        [class.active]=\\\"isActive(data)\\\"\\n        [class.inactive]=\\\"isInactive(data)\\\"\\n        [opacity]=\\\"rangeFillOpacity\\\"\\n        [animations]=\\\"animations\\\"\\n      />\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    animations: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    hasRange: [{\n      type: Input\n    }]\n  });\n})();\n\nvar LineChartModule = function LineChartModule() {\n  _classCallCheck(this, LineChartModule);\n};\n\nLineChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: LineChartModule\n});\nLineChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function LineChartModule_Factory(t) {\n    return new (t || LineChartModule)();\n  },\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LineChartModule, {\n    declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n    imports: [ChartCommonModule],\n    exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LineChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n      exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nfunction isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nvar twoPI = 2 * Math.PI;\n\nvar PolarChartComponent = /*#__PURE__*/function (_BaseChartComponent15) {\n  _inherits(PolarChartComponent, _BaseChartComponent15);\n\n  var _super16 = _createSuper(PolarChartComponent);\n\n  function PolarChartComponent() {\n    var _this57;\n\n    _classCallCheck(this, PolarChartComponent);\n\n    _this57 = _super16.apply(this, arguments);\n    _this57.legendTitle = 'Legend';\n    _this57.legendPosition = 'right';\n    _this57.showGridLines = true;\n    _this57.curve = curveCardinalClosed;\n    _this57.activeEntries = [];\n    _this57.rangeFillOpacity = 0.15;\n    _this57.trimYAxisTicks = true;\n    _this57.maxYAxisTickLength = 16;\n    _this57.roundDomains = false;\n    _this57.tooltipDisabled = false;\n    _this57.showSeriesOnHover = true;\n    _this57.gradient = false;\n    _this57.yAxisMinScale = 0;\n    _this57.labelTrim = true;\n    _this57.labelTrimSize = 10;\n    _this57.activate = new EventEmitter();\n    _this57.deactivate = new EventEmitter();\n    _this57.margin = [10, 20, 10, 20];\n    _this57.xAxisHeight = 0;\n    _this57.yAxisWidth = 0;\n    return _this57;\n  }\n\n  _createClass(PolarChartComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(PolarChartComponent.prototype), \"update\", this).call(this);\n\n      this.setDims();\n      this.setScales();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      this.setTicks();\n    }\n  }, {\n    key: \"setDims\",\n    value: function setDims() {\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showXAxis: this.xAxis,\n        showYAxis: this.yAxis,\n        xAxisHeight: this.xAxisHeight,\n        yAxisWidth: this.yAxisWidth,\n        showXLabel: this.showXAxisLabel,\n        showYLabel: this.showYAxisLabel,\n        showLegend: this.legend,\n        legendType: this.schemeType,\n        legendPosition: this.legendPosition\n      });\n      var halfWidth = Math.floor(this.dims.width / 2);\n      var halfHeight = Math.floor(this.dims.height / 2);\n      var outerRadius = this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5);\n      var yOffset = Math.max(0, halfHeight - outerRadius);\n      this.yAxisDims = Object.assign(Object.assign({}, this.dims), {\n        width: halfWidth\n      });\n      this.transform = \"translate(\".concat(this.dims.xOffset, \", \").concat(this.margin[0], \")\");\n      this.transformYAxis = \"translate(0, \".concat(yOffset, \")\");\n      this.labelOffset = this.dims.height + 40;\n      this.transformPlot = \"translate(\".concat(halfWidth, \", \").concat(halfHeight, \")\");\n    }\n  }, {\n    key: \"setScales\",\n    value: function setScales() {\n      var xValues = this.getXValues();\n      this.scaleType = getScaleType(xValues);\n      this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n      this.yDomain = this.getYDomain();\n      this.seriesDomain = this.getSeriesDomain();\n      this.xScale = this.getXScale(this.xDomain, twoPI);\n      this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n      this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n    }\n  }, {\n    key: \"setTicks\",\n    value: function setTicks() {\n      var _this58 = this;\n\n      var tickFormat;\n\n      if (this.xAxisTickFormatting) {\n        tickFormat = this.xAxisTickFormatting;\n      } else if (this.xScale.tickFormat) {\n        tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n      } else {\n        tickFormat = function tickFormat(d) {\n          if (isDate(d)) {\n            return d.toLocaleDateString();\n          }\n\n          return d.toLocaleString();\n        };\n      }\n\n      var outerRadius = this.outerRadius;\n      var s = 1.1;\n      this.thetaTicks = this.xDomain.map(function (d) {\n        var startAngle = _this58.xScale(d);\n\n        var dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n        var label = tickFormat(d);\n        var startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n        var pos = [dd, s * startPos[1]];\n        return {\n          innerRadius: 0,\n          outerRadius: outerRadius,\n          startAngle: startAngle,\n          endAngle: startAngle,\n          value: outerRadius,\n          label: label,\n          startPos: startPos,\n          pos: pos\n        };\n      });\n      var minDistance = 10;\n      /* from pie chart, abstract out -*/\n\n      for (var i = 0; i < this.thetaTicks.length - 1; i++) {\n        var a = this.thetaTicks[i];\n\n        for (var j = i + 1; j < this.thetaTicks.length; j++) {\n          var b = this.thetaTicks[j]; // if they're on the same side\n\n          if (b.pos[0] * a.pos[0] > 0) {\n            // if they're overlapping\n            var o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n            if (o > 0) {\n              // push the second up or down\n              b.pos[1] += Math.sign(b.pos[0]) * o;\n            }\n          }\n        }\n      }\n\n      this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(function (d) {\n        return _this58.yScale(d);\n      });\n    }\n  }, {\n    key: \"getXValues\",\n    value: function getXValues() {\n      var values = [];\n\n      var _iterator65 = _createForOfIteratorHelper(this.results),\n          _step65;\n\n      try {\n        for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {\n          var results = _step65.value;\n\n          var _iterator66 = _createForOfIteratorHelper(results.series),\n              _step66;\n\n          try {\n            for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {\n              var d = _step66.value;\n\n              if (!values.includes(d.name)) {\n                values.push(d.name);\n              }\n            }\n          } catch (err) {\n            _iterator66.e(err);\n          } finally {\n            _iterator66.f();\n          }\n        }\n      } catch (err) {\n        _iterator65.e(err);\n      } finally {\n        _iterator65.f();\n      }\n\n      return values;\n    }\n  }, {\n    key: \"getXDomain\",\n    value: function getXDomain() {\n      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getXValues();\n\n      if (this.scaleType === 'time') {\n        var _min10 = Math.min.apply(Math, _toConsumableArray(values));\n\n        var _max11 = Math.max.apply(Math, _toConsumableArray(values));\n\n        return [_min10, _max11];\n      } else if (this.scaleType === 'linear') {\n        values = values.map(function (v) {\n          return Number(v);\n        });\n\n        var _min11 = Math.min.apply(Math, _toConsumableArray(values));\n\n        var _max12 = Math.max.apply(Math, _toConsumableArray(values));\n\n        return [_min11, _max12];\n      }\n\n      return values;\n    }\n  }, {\n    key: \"getYValues\",\n    value: function getYValues() {\n      var domain = [];\n\n      var _iterator67 = _createForOfIteratorHelper(this.results),\n          _step67;\n\n      try {\n        for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {\n          var results = _step67.value;\n\n          var _iterator68 = _createForOfIteratorHelper(results.series),\n              _step68;\n\n          try {\n            for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {\n              var d = _step68.value;\n\n              if (domain.indexOf(d.value) < 0) {\n                domain.push(d.value);\n              }\n\n              if (d.min !== undefined) {\n                if (domain.indexOf(d.min) < 0) {\n                  domain.push(d.min);\n                }\n              }\n\n              if (d.max !== undefined) {\n                if (domain.indexOf(d.max) < 0) {\n                  domain.push(d.max);\n                }\n              }\n            }\n          } catch (err) {\n            _iterator68.e(err);\n          } finally {\n            _iterator68.f();\n          }\n        }\n      } catch (err) {\n        _iterator67.e(err);\n      } finally {\n        _iterator67.f();\n      }\n\n      return domain;\n    }\n  }, {\n    key: \"getYDomain\",\n    value: function getYDomain() {\n      var domain = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getYValues();\n      var min = Math.min.apply(Math, _toConsumableArray(domain));\n      var max = Math.max.apply(Math, [this.yAxisMinScale].concat(_toConsumableArray(domain)));\n      min = Math.max(0, min);\n\n      if (!this.autoScale) {\n        min = Math.min(0, min);\n      }\n\n      return [min, max];\n    }\n  }, {\n    key: \"getSeriesDomain\",\n    value: function getSeriesDomain() {\n      return this.results.map(function (d) {\n        return d.name;\n      });\n    }\n  }, {\n    key: \"getXScale\",\n    value: function getXScale(domain, width) {\n      switch (this.scaleType) {\n        case 'time':\n          return scaleTime().range([0, width]).domain(domain);\n\n        case 'linear':\n          var scale = scaleLinear().range([0, width]).domain(domain);\n          return this.roundDomains ? scale.nice() : scale;\n\n        default:\n          return scalePoint().range([0, width - twoPI / domain.length]).padding(0).domain(domain);\n      }\n    }\n  }, {\n    key: \"getYScale\",\n    value: function getYScale(domain, height) {\n      var scale = scaleLinear().range([0, height]).domain(domain);\n      return this.roundDomains ? scale.nice() : scale;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data, series) {\n      if (series) {\n        data.series = series.name;\n      }\n\n      this.select.emit(data);\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      var domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\n      this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      if (this.schemeType === 'ordinal') {\n        return {\n          scaleType: this.schemeType,\n          colors: this.colors,\n          domain: this.seriesDomain,\n          title: this.legendTitle,\n          position: this.legendPosition\n        };\n      }\n\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors.scale,\n        domain: this.yDomain,\n        title: undefined,\n        position: this.legendPosition\n      };\n    }\n  }, {\n    key: \"updateYAxisWidth\",\n    value: function updateYAxisWidth(_ref37) {\n      var width = _ref37.width;\n      this.yAxisWidth = width;\n      this.update();\n    }\n  }, {\n    key: \"updateXAxisHeight\",\n    value: function updateXAxisHeight(_ref38) {\n      var height = _ref38.height;\n      this.xAxisHeight = height;\n      this.update();\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = this.showSeriesOnHover ? [item].concat(_toConsumableArray(this.activeEntries)) : this.activeEntries;\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"deactivateAll\",\n    value: function deactivateAll() {\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n\n      var _iterator69 = _createForOfIteratorHelper(this.activeEntries),\n          _step69;\n\n      try {\n        for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {\n          var entry = _step69.value;\n          this.deactivate.emit({\n            value: entry,\n            entries: []\n          });\n        }\n      } catch (err) {\n        _iterator69.e(err);\n      } finally {\n        _iterator69.f();\n      }\n\n      this.activeEntries = [];\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.name;\n    }\n  }]);\n\n  return PolarChartComponent;\n}(BaseChartComponent);\n\nPolarChartComponent.ɵfac = function PolarChartComponent_Factory(t) {\n  return ɵPolarChartComponent_BaseFactory(t || PolarChartComponent);\n};\n\nPolarChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PolarChartComponent,\n  selectors: [[\"ngx-charts-polar-chart\"]],\n  contentQueries: function PolarChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showSeriesOnHover: \"showSeriesOnHover\",\n    gradient: \"gradient\",\n    yAxisMinScale: \"yAxisMinScale\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\",\n    legend: \"legend\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    schemeType: \"schemeType\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"polar-chart\", \"chart\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"polar-chart-background\"], [4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"gridline-path radial-gridline-path\", \"cx\", \"0\", \"cy\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"gridline-path\", \"radial-gridline-path\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"], [\"ngx-charts-polar-series\", \"\", 3, \"gradient\", \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelClick\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"g\");\n      ɵngcc0.ɵɵelement(3, \"circle\", 2);\n      ɵngcc0.ɵɵtemplate(4, PolarChartComponent__svg_g_4_Template, 2, 1, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(5, PolarChartComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, PolarChartComponent__svg_g_6_Template, 1, 9, \"g\", 4);\n      ɵngcc0.ɵɵtemplate(7, PolarChartComponent__svg_g_7_Template, 1, 5, \"g\", 5);\n      ɵngcc0.ɵɵelementStart(8, \"g\");\n      ɵngcc0.ɵɵtemplate(9, PolarChartComponent__svg_g_9_Template, 2, 13, \"g\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(15, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transformPlot);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"r\", ctx.outerRadius);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showGridLines);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.xAxis && ctx.showXAxisLabel);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transformPlot);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, PieLabelComponent, YAxisComponent, AxisLabelComponent, PolarSeriesComponent];\n  },\n  styles: [_c24, _c39, \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{fill:none;stroke-dasharray:10 10}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\nPolarChartComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  xAxis: [{\n    type: Input\n  }],\n  yAxis: [{\n    type: Input\n  }],\n  showXAxisLabel: [{\n    type: Input\n  }],\n  showYAxisLabel: [{\n    type: Input\n  }],\n  xAxisLabel: [{\n    type: Input\n  }],\n  yAxisLabel: [{\n    type: Input\n  }],\n  autoScale: [{\n    type: Input\n  }],\n  showGridLines: [{\n    type: Input\n  }],\n  curve: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  schemeType: [{\n    type: Input\n  }],\n  rangeFillOpacity: [{\n    type: Input\n  }],\n  trimYAxisTicks: [{\n    type: Input\n  }],\n  maxYAxisTickLength: [{\n    type: Input\n  }],\n  xAxisTickFormatting: [{\n    type: Input\n  }],\n  yAxisTickFormatting: [{\n    type: Input\n  }],\n  roundDomains: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  showSeriesOnHover: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  yAxisMinScale: [{\n    type: Input\n  }],\n  labelTrim: [{\n    type: Input\n  }],\n  labelTrimSize: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵPolarChartComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(PolarChartComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PolarChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-polar-chart',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:g class=\\\"polar-chart chart\\\" [attr.transform]=\\\"transform\\\">\\n        <svg:g [attr.transform]=\\\"transformPlot\\\">\\n          <svg:circle class=\\\"polar-chart-background\\\" cx=\\\"0\\\" cy=\\\"0\\\" [attr.r]=\\\"this.outerRadius\\\" />\\n          <svg:g *ngIf=\\\"showGridLines\\\">\\n            <svg:circle\\n              *ngFor=\\\"let r of radiusTicks\\\"\\n              class=\\\"gridline-path radial-gridline-path\\\"\\n              cx=\\\"0\\\"\\n              cy=\\\"0\\\"\\n              [attr.r]=\\\"r\\\"\\n            />\\n          </svg:g>\\n          <svg:g *ngIf=\\\"xAxis\\\">\\n            <svg:g\\n              ngx-charts-pie-label\\n              *ngFor=\\\"let tick of thetaTicks\\\"\\n              [data]=\\\"tick\\\"\\n              [radius]=\\\"outerRadius\\\"\\n              [label]=\\\"tick.label\\\"\\n              [max]=\\\"outerRadius\\\"\\n              [value]=\\\"showGridLines ? 1 : outerRadius\\\"\\n              [explodeSlices]=\\\"true\\\"\\n              [animations]=\\\"animations\\\"\\n              [labelTrim]=\\\"labelTrim\\\"\\n              [labelTrimSize]=\\\"labelTrimSize\\\"\\n            ></svg:g>\\n          </svg:g>\\n        </svg:g>\\n        <svg:g\\n          ngx-charts-y-axis\\n          [attr.transform]=\\\"transformYAxis\\\"\\n          *ngIf=\\\"yAxis\\\"\\n          [yScale]=\\\"yAxisScale\\\"\\n          [dims]=\\\"yAxisDims\\\"\\n          [showGridLines]=\\\"showGridLines\\\"\\n          [showLabel]=\\\"showYAxisLabel\\\"\\n          [labelText]=\\\"yAxisLabel\\\"\\n          [trimTicks]=\\\"trimYAxisTicks\\\"\\n          [maxTickLength]=\\\"maxYAxisTickLength\\\"\\n          [tickFormatting]=\\\"yAxisTickFormatting\\\"\\n          (dimensionsChanged)=\\\"updateYAxisWidth($event)\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-axis-label\\n          *ngIf=\\\"xAxis && showXAxisLabel\\\"\\n          [label]=\\\"xAxisLabel\\\"\\n          [offset]=\\\"labelOffset\\\"\\n          [orient]=\\\"'bottom'\\\"\\n          [height]=\\\"dims.height\\\"\\n          [width]=\\\"dims.width\\\"\\n        ></svg:g>\\n        <svg:g [attr.transform]=\\\"transformPlot\\\">\\n          <svg:g *ngFor=\\\"let series of results; trackBy: trackBy\\\" [@animationState]=\\\"'active'\\\">\\n            <svg:g\\n              ngx-charts-polar-series\\n              [gradient]=\\\"gradient\\\"\\n              [xScale]=\\\"xScale\\\"\\n              [yScale]=\\\"yScale\\\"\\n              [colors]=\\\"colors\\\"\\n              [data]=\\\"series\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [scaleType]=\\\"scaleType\\\"\\n              [curve]=\\\"curve\\\"\\n              [rangeFillOpacity]=\\\"rangeFillOpacity\\\"\\n              [animations]=\\\"animations\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n              (select)=\\\"onClick($event)\\\"\\n              (activate)=\\\"onActivate($event)\\\"\\n              (deactivate)=\\\"onDeactivate($event)\\\"\\n            />\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:fadeIn .75s ease-in;animation:fadeIn .75s ease-in}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:drawOut 3s linear;animation:drawOut 3s linear;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{fill:none;stroke-dasharray:10 10}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\"]\n    }]\n  }], null, {\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showSeriesOnHover: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    yAxisMinScale: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    legend: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar PolarSeriesComponent = /*#__PURE__*/function () {\n  function PolarSeriesComponent() {\n    _classCallCheck(this, PolarSeriesComponent);\n\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.circleRadius = 3;\n  }\n\n  _createClass(PolarSeriesComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this59 = this;\n\n      this.updateGradients();\n      var line = this.getLineGenerator();\n      var data = this.sortData(this.data.series);\n      var seriesName = this.data.name;\n      var linearScaleType = this.colors.scaleType === 'linear';\n      var min = this.yScale.domain()[0];\n      this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n      this.path = line(data) || '';\n      this.circles = data.map(function (d) {\n        var a = _this59.getAngle(d);\n\n        var r = _this59.getRadius(d);\n\n        var value = d.value;\n\n        var color = _this59.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n\n        var cData = Object.assign({}, d, {\n          series: seriesName,\n          value: value,\n          name: d.name\n        });\n        return {\n          data: cData,\n          cx: r * Math.sin(a),\n          cy: -r * Math.cos(a),\n          value: value,\n          color: color,\n          label: d.name\n        };\n      });\n      this.active = this.isActive(this.data);\n      this.inactive = this.isInactive(this.data);\n\n      this.tooltipText = this.tooltipText || function (c) {\n        return _this59.defaultTooltipText(c);\n      };\n    }\n  }, {\n    key: \"getAngle\",\n    value: function getAngle(d) {\n      var label = d.name;\n\n      if (this.scaleType === 'time') {\n        return this.xScale(label);\n      } else if (this.scaleType === 'linear') {\n        return this.xScale(Number(label));\n      }\n\n      return this.xScale(label);\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius(d) {\n      return this.yScale(d.value);\n    }\n  }, {\n    key: \"getLineGenerator\",\n    value: function getLineGenerator() {\n      var _this60 = this;\n\n      return lineRadial().angle(function (d) {\n        return _this60.getAngle(d);\n      }).radius(function (d) {\n        return _this60.getRadius(d);\n      }).curve(this.curve);\n    }\n  }, {\n    key: \"sortData\",\n    value: function sortData(data) {\n      if (this.scaleType === 'linear') {\n        return sortLinear(data, 'name');\n      } else if (this.scaleType === 'time') {\n        return sortByTime(data, 'name');\n      }\n\n      return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(entry) {\n      if (!this.activeEntries) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name;\n      });\n      return item !== undefined;\n    }\n  }, {\n    key: \"isInactive\",\n    value: function isInactive(entry) {\n      if (!this.activeEntries || this.activeEntries.length === 0) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name;\n      });\n      return item === undefined;\n    }\n  }, {\n    key: \"defaultTooltipText\",\n    value: function defaultTooltipText(_ref39) {\n      var label = _ref39.label,\n          value = _ref39.value;\n      return \"\\n      <span class=\\\"tooltip-label\\\">\".concat(escapeLabel(this.data.name), \" \\u2022 \").concat(escapeLabel(label), \"</span>\\n      <span class=\\\"tooltip-val\\\">\").concat(value.toLocaleString(), \"</span>\\n    \");\n    }\n  }, {\n    key: \"updateGradients\",\n    value: function updateGradients() {\n      this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\n\n      if (!this.hasGradient) {\n        return;\n      }\n\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = \"url(#\".concat(this.gradientId, \")\");\n\n      if (this.colors.scaleType === 'linear') {\n        var values = this.data.series.map(function (d) {\n          return d.value;\n        });\n\n        var _max13 = Math.max.apply(Math, _toConsumableArray(values));\n\n        var _min12 = Math.min.apply(Math, _toConsumableArray(values));\n\n        this.gradientStops = this.colors.getLinearGradientStops(_max13, _min12);\n      } else {\n        this.gradientStops = undefined;\n      }\n    }\n  }]);\n\n  return PolarSeriesComponent;\n}();\n\nPolarSeriesComponent.ɵfac = function PolarSeriesComponent_Factory(t) {\n  return new (t || PolarSeriesComponent)();\n};\n\nPolarSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PolarSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-polar-series\", \"\"]],\n  inputs: {\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    animations: \"animations\",\n    tooltipText: \"tooltipText\",\n    name: \"name\",\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c36,\n  decls: 5,\n  vars: 11,\n  consts: [[1, \"polar-charts-series\"], [\"ngx-charts-svg-radial-gradient\", \"\", \"orientation\", \"vertical\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-line\", \"\", 1, \"polar-series-path\", 3, \"path\", \"stroke\", \"fill\", \"animations\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", \"tooltipType\", \"tooltip\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-radial-gradient\", \"\", \"orientation\", \"vertical\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", \"tooltipType\", \"tooltip\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"defs\");\n      ɵngcc0.ɵɵtemplate(2, PolarSeriesComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(3, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(4, PolarSeriesComponent__svg_g_4_Template, 1, 11, \"g\", 3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"active\", ctx.active)(\"inactive\", ctx.inactive);\n      ɵngcc0.ɵɵproperty(\"path\", ctx.path)(\"stroke\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵattribute(\"fill-opacity\", ctx.rangeFillOpacity);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.circles);\n    }\n  },\n  directives: [ɵngcc1.NgIf, LineComponent, ɵngcc1.NgForOf, SvgRadialGradientComponent, CircleComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\nPolarSeriesComponent.propDecorators = {\n  name: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  xScale: [{\n    type: Input\n  }],\n  yScale: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  scaleType: [{\n    type: Input\n  }],\n  curve: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  rangeFillOpacity: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipText: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PolarSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-polar-series]',\n      template: \"\\n    <svg:g class=\\\"polar-charts-series\\\">\\n      <defs>\\n        <svg:g\\n          ngx-charts-svg-radial-gradient\\n          *ngIf=\\\"hasGradient\\\"\\n          orientation=\\\"vertical\\\"\\n          [color]=\\\"seriesColor\\\"\\n          [name]=\\\"gradientId\\\"\\n          [startOpacity]=\\\"0.25\\\"\\n          [endOpacity]=\\\"1\\\"\\n          [stops]=\\\"gradientStops\\\"\\n        />\\n      </defs>\\n      <svg:g\\n        ngx-charts-line\\n        class=\\\"polar-series-path\\\"\\n        [path]=\\\"path\\\"\\n        [stroke]=\\\"hasGradient ? gradientUrl : seriesColor\\\"\\n        [class.active]=\\\"active\\\"\\n        [class.inactive]=\\\"inactive\\\"\\n        [attr.fill-opacity]=\\\"rangeFillOpacity\\\"\\n        [fill]=\\\"hasGradient ? gradientUrl : seriesColor\\\"\\n        [animations]=\\\"animations\\\"\\n      />\\n      <svg:g\\n        ngx-charts-circle\\n        *ngFor=\\\"let circle of circles\\\"\\n        class=\\\"circle\\\"\\n        [cx]=\\\"circle.cx\\\"\\n        [cy]=\\\"circle.cy\\\"\\n        [r]=\\\"circleRadius\\\"\\n        [fill]=\\\"circle.color\\\"\\n        [style.opacity]=\\\"inactive ? 0.2 : 1\\\"\\n        ngx-tooltip\\n        [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n        [tooltipPlacement]=\\\"'top'\\\"\\n        tooltipType=\\\"tooltip\\\"\\n        [tooltipTitle]=\\\"tooltipTemplate ? undefined : tooltipText(circle)\\\"\\n        [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n        [tooltipContext]=\\\"circle.data\\\"\\n        (select)=\\\"select.emit(circle.data)\\\"\\n        (activate)=\\\"activate.emit({ name: circle.data.series })\\\"\\n        (deactivate)=\\\"deactivate.emit({ name: circle.data.series })\\\"\\n      ></svg:g>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nvar AdvancedPieChartComponent = /*#__PURE__*/function (_BaseChartComponent16) {\n  _inherits(AdvancedPieChartComponent, _BaseChartComponent16);\n\n  var _super17 = _createSuper(AdvancedPieChartComponent);\n\n  function AdvancedPieChartComponent() {\n    var _this61;\n\n    _classCallCheck(this, AdvancedPieChartComponent);\n\n    _this61 = _super17.apply(this, arguments);\n    _this61.activeEntries = [];\n    _this61.tooltipDisabled = false;\n    _this61.label = 'Total';\n    _this61.activate = new EventEmitter();\n    _this61.deactivate = new EventEmitter();\n    _this61.margin = [20, 20, 20, 20];\n    return _this61;\n  }\n\n  _createClass(AdvancedPieChartComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(AdvancedPieChartComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width * 4 / 12.0,\n        height: this.height,\n        margins: this.margin\n      });\n      this.formatDates();\n      this.domain = this.getDomain();\n      this.setColors();\n      var xOffset = this.dims.width / 2;\n      var yOffset = this.margin[0] + this.dims.height / 2;\n      this.legendWidth = this.width - this.dims.width - this.margin[1];\n      this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n      this.innerRadius = this.outerRadius * 0.75;\n      this.transform = \"translate(\".concat(xOffset, \" , \").concat(yOffset, \")\");\n    }\n  }, {\n    key: \"getDomain\",\n    value: function getDomain() {\n      return this.results.map(function (d) {\n        return d.label;\n      });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var fromLegend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      item = this.results.find(function (d) {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item].concat(_toConsumableArray(this.activeEntries));\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var fromLegend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      item = this.results.find(function (d) {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return AdvancedPieChartComponent;\n}(BaseChartComponent);\n\nAdvancedPieChartComponent.ɵfac = function AdvancedPieChartComponent_Factory(t) {\n  return ɵAdvancedPieChartComponent_BaseFactory(t || AdvancedPieChartComponent);\n};\n\nAdvancedPieChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: AdvancedPieChartComponent,\n  selectors: [[\"ngx-charts-advanced-pie-chart\"]],\n  contentQueries: function AdvancedPieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    label: \"label\",\n    gradient: \"gradient\",\n    tooltipText: \"tooltipText\",\n    valueFormatting: \"valueFormatting\",\n    nameFormatting: \"nameFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 37,\n  consts: [[1, \"advanced-pie\", \"chart\"], [3, \"view\", \"showLegend\", \"animations\"], [1, \"pie\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"innerRadius\", \"activeEntries\", \"outerRadius\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"animations\", \"select\", \"activate\", \"deactivate\"], [1, \"advanced-pie-legend-wrapper\"], [3, \"data\", \"colors\", \"width\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\", \"select\", \"activate\", \"deactivate\"]],\n  template: function AdvancedPieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(2, \"ngx-charts-chart\", 1);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(3, \"g\", 2);\n      ɵngcc0.ɵɵelementStart(4, \"g\", 3);\n      ɵngcc0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n      ɵngcc0.ɵɵelementStart(6, \"ngx-charts-advanced-legend\", 5);\n      ɵngcc0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_select_6_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_activate_6_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_deactivate_6_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.width, \"px\")(\"height\", ctx.height, \"px\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.dims.width, \"px\")(\"height\", ctx.dims.height, \"px\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(34, _c23, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.results)(\"innerRadius\", ctx.innerRadius)(\"activeEntries\", ctx.activeEntries)(\"outerRadius\", ctx.outerRadius)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.width - ctx.dims.width, \"px\")(\"height\", ctx.height, \"px\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"data\", ctx.results)(\"colors\", ctx.colors)(\"width\", ctx.width - ctx.dims.width - ctx.margin[1])(\"label\", ctx.label)(\"animations\", ctx.animations)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.nameFormatting)(\"percentageFormatting\", ctx.percentageFormatting);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, PieSeriesComponent, AdvancedLegendComponent];\n  },\n  styles: [_c24, \".advanced-pie{float:left}.advanced-pie,.advanced-pie-legend-wrapper{display:inline-block}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nAdvancedPieChartComponent.propDecorators = {\n  gradient: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipText: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  nameFormatting: [{\n    type: Input\n  }],\n  percentageFormatting: [{\n    type: Input\n  }]\n};\nvar ɵAdvancedPieChartComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(AdvancedPieChartComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AdvancedPieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-pie-chart',\n      template: \"\\n    <div [style.width.px]=\\\"width\\\" [style.height.px]=\\\"height\\\">\\n      <div class=\\\"advanced-pie chart\\\" [style.width.px]=\\\"dims.width\\\" [style.height.px]=\\\"dims.height\\\">\\n        <ngx-charts-chart [view]=\\\"[width, height]\\\" [showLegend]=\\\"false\\\" [animations]=\\\"animations\\\">\\n          <svg:g [attr.transform]=\\\"transform\\\" class=\\\"pie chart\\\">\\n            <svg:g\\n              ngx-charts-pie-series\\n              [colors]=\\\"colors\\\"\\n              [series]=\\\"results\\\"\\n              [innerRadius]=\\\"innerRadius\\\"\\n              [activeEntries]=\\\"activeEntries\\\"\\n              [outerRadius]=\\\"outerRadius\\\"\\n              [gradient]=\\\"gradient\\\"\\n              [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n              [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n              [tooltipText]=\\\"tooltipText\\\"\\n              (select)=\\\"onClick($event)\\\"\\n              (activate)=\\\"onActivate($event)\\\"\\n              (deactivate)=\\\"onDeactivate($event)\\\"\\n              [animations]=\\\"animations\\\"\\n            ></svg:g>\\n          </svg:g>\\n        </ngx-charts-chart>\\n      </div>\\n      <div class=\\\"advanced-pie-legend-wrapper\\\" [style.width.px]=\\\"width - dims.width\\\" [style.height.px]=\\\"height\\\">\\n        <ngx-charts-advanced-legend\\n          [data]=\\\"results\\\"\\n          [colors]=\\\"colors\\\"\\n          [width]=\\\"width - dims.width - margin[1]\\\"\\n          [label]=\\\"label\\\"\\n          [animations]=\\\"animations\\\"\\n          [valueFormatting]=\\\"valueFormatting\\\"\\n          [labelFormatting]=\\\"nameFormatting\\\"\\n          [percentageFormatting]=\\\"percentageFormatting\\\"\\n          (select)=\\\"onClick($event)\\\"\\n          (activate)=\\\"onActivate($event, true)\\\"\\n          (deactivate)=\\\"onDeactivate($event, true)\\\"\\n        >\\n        </ngx-charts-advanced-legend>\\n      </div>\\n    </div>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".advanced-pie{float:left}.advanced-pie,.advanced-pie-legend-wrapper{display:inline-block}\"]\n    }]\n  }], null, {\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    nameFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nvar PieLabelComponent = /*#__PURE__*/function () {\n  function PieLabelComponent() {\n    _classCallCheck(this, PieLabelComponent);\n\n    this.animations = true;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n    this.trimLabel = trimLabel;\n  }\n\n  _createClass(PieLabelComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var startRadius = this.radius;\n\n      if (this.explodeSlices) {\n        startRadius = this.radius * this.value / this.max;\n      }\n\n      var innerArc = arc().innerRadius(startRadius).outerRadius(startRadius); // Calculate innerPos then scale outer position to match label position\n\n      var innerPos = innerArc.centroid(this.data);\n      var scale = this.data.pos[1] / innerPos[1];\n\n      if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n        scale = 1;\n      }\n\n      var outerPos = [scale * innerPos[0], scale * innerPos[1]];\n      this.line = \"M\".concat(innerPos, \"L\").concat(outerPos, \"L\").concat(this.data.pos);\n    }\n  }, {\n    key: \"textX\",\n    get: function get() {\n      return this.data.pos[0];\n    }\n  }, {\n    key: \"textY\",\n    get: function get() {\n      return this.data.pos[1];\n    }\n  }, {\n    key: \"styleTransform\",\n    get: function get() {\n      return this.isIE ? null : \"translate3d(\".concat(this.textX, \"px,\").concat(this.textY, \"px, 0)\");\n    }\n  }, {\n    key: \"attrTransform\",\n    get: function get() {\n      return !this.isIE ? null : \"translate(\".concat(this.textX, \",\").concat(this.textY, \")\");\n    }\n  }, {\n    key: \"textTransition\",\n    get: function get() {\n      return this.isIE || !this.animations ? null : 'transform 0.75s';\n    }\n  }, {\n    key: \"textAnchor\",\n    value: function textAnchor() {\n      return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\n    }\n  }, {\n    key: \"midAngle\",\n    value: function midAngle(d) {\n      return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n  }]);\n\n  return PieLabelComponent;\n}();\n\nPieLabelComponent.ɵfac = function PieLabelComponent_Factory(t) {\n  return new (t || PieLabelComponent)();\n};\n\nPieLabelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PieLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-label\", \"\"]],\n  inputs: {\n    animations: \"animations\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\",\n    data: \"data\",\n    radius: \"radius\",\n    label: \"label\",\n    color: \"color\",\n    max: \"max\",\n    value: \"value\",\n    explodeSlices: \"explodeSlices\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c37,\n  decls: 6,\n  vars: 17,\n  consts: [[\"dy\", \".35em\", 1, \"pie-label\"], [\"fill\", \"none\", 1, \"pie-label-line\", \"line\"]],\n  template: function PieLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"title\");\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(2, \"g\");\n      ɵngcc0.ɵɵelementStart(3, \"text\", 0);\n      ɵngcc0.ɵɵtext(4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(5, \"path\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.label);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"transform\", ctx.styleTransform)(\"transition\", ctx.textTransition);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.attrTransform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"text-anchor\", ctx.textAnchor())(\"shape-rendering\", \"crispEdges\");\n      ɵngcc0.ɵɵclassProp(\"animation\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.labelTrim ? ctx.trimLabel(ctx.label, ctx.labelTrimSize) : ctx.label, \" \");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"animation\", ctx.animations);\n      ɵngcc0.ɵɵattribute(\"d\", ctx.line)(\"stroke\", ctx.color);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nPieLabelComponent.ctorParameters = function () {\n  return [];\n};\n\nPieLabelComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  radius: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  explodeSlices: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  labelTrim: [{\n    type: Input\n  }],\n  labelTrimSize: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PieLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-label]',\n      template: \"\\n    <title>{{ label }}</title>\\n    <svg:g [attr.transform]=\\\"attrTransform\\\" [style.transform]=\\\"styleTransform\\\" [style.transition]=\\\"textTransition\\\">\\n      <svg:text\\n        class=\\\"pie-label\\\"\\n        [class.animation]=\\\"animations\\\"\\n        dy=\\\".35em\\\"\\n        [style.textAnchor]=\\\"textAnchor()\\\"\\n        [style.shapeRendering]=\\\"'crispEdges'\\\"\\n      >\\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\\n      </svg:text>\\n    </svg:g>\\n    <svg:path\\n      [attr.d]=\\\"line\\\"\\n      [attr.stroke]=\\\"color\\\"\\n      fill=\\\"none\\\"\\n      class=\\\"pie-label-line line\\\"\\n      [class.animation]=\\\"animations\\\"\\n    ></svg:path>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    animations: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }]\n  });\n})();\n\nvar PieArcComponent = /*#__PURE__*/function () {\n  function PieArcComponent(element) {\n    _classCallCheck(this, PieArcComponent);\n\n    this.startAngle = 0;\n    this.endAngle = Math.PI * 2;\n    this.cornerRadius = 0;\n    this.explodeSlices = false;\n    this.gradient = false;\n    this.animate = true;\n    this.pointerEvents = true;\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  _createClass(PieArcComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"getGradient\",\n    value: function getGradient() {\n      return this.gradient ? this.gradientFill : this.fill;\n    }\n  }, {\n    key: \"getPointerEvents\",\n    value: function getPointerEvents() {\n      return this.pointerEvents ? 'auto' : 'none';\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var calc = this.calculateArc();\n      this.startOpacity = 0.5;\n      this.radialGradientId = 'linearGrad' + id().toString();\n      this.gradientFill = \"url(#\".concat(this.radialGradientId, \")\");\n\n      if (this.animate) {\n        if (this.initialized) {\n          this.updateAnimation();\n        } else {\n          this.loadAnimation();\n          this.initialized = true;\n        }\n      } else {\n        this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n      }\n    }\n  }, {\n    key: \"calculateArc\",\n    value: function calculateArc() {\n      var outerRadius = this.outerRadius;\n\n      if (this.explodeSlices && this.innerRadius === 0) {\n        outerRadius = this.outerRadius * this.value / this.max;\n      }\n\n      return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n    }\n  }, {\n    key: \"loadAnimation\",\n    value: function loadAnimation() {\n      var node = select(this.element).selectAll('.arc').data([{\n        startAngle: this.startAngle,\n        endAngle: this.endAngle\n      }]);\n      var calc = this.calculateArc();\n      node.transition().attrTween('d', function (d) {\n        this._current = this._current || d;\n        var copyOfD = Object.assign({}, d);\n        copyOfD.endAngle = copyOfD.startAngle;\n        var interpolater = interpolate(copyOfD, copyOfD);\n        this._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      }).transition().duration(750).attrTween('d', function (d) {\n        this._current = this._current || d;\n        var interpolater = interpolate(this._current, d);\n        this._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n    }\n  }, {\n    key: \"updateAnimation\",\n    value: function updateAnimation() {\n      var node = select(this.element).selectAll('.arc').data([{\n        startAngle: this.startAngle,\n        endAngle: this.endAngle\n      }]);\n      var calc = this.calculateArc();\n      node.transition().duration(750).attrTween('d', function (d) {\n        this._current = this._current || d;\n        var interpolater = interpolate(this._current, d);\n        this._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      var _this62 = this;\n\n      clearTimeout(this._timeout);\n      this._timeout = setTimeout(function () {\n        return _this62.select.emit(_this62.data);\n      }, 200);\n    }\n  }, {\n    key: \"onDblClick\",\n    value: function onDblClick(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this._timeout);\n      this.dblclick.emit({\n        data: this.data,\n        nativeEvent: event\n      });\n    }\n  }]);\n\n  return PieArcComponent;\n}();\n\nPieArcComponent.ɵfac = function PieArcComponent_Factory(t) {\n  return new (t || PieArcComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nPieArcComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PieArcComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-arc\", \"\"]],\n  inputs: {\n    startAngle: \"startAngle\",\n    endAngle: \"endAngle\",\n    cornerRadius: \"cornerRadius\",\n    explodeSlices: \"explodeSlices\",\n    gradient: \"gradient\",\n    animate: \"animate\",\n    pointerEvents: \"pointerEvents\",\n    isActive: \"isActive\",\n    fill: \"fill\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    value: \"value\",\n    max: \"max\",\n    data: \"data\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c38,\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"arc-group\"], [4, \"ngIf\"], [1, \"arc\", 3, \"click\", \"dblclick\", \"mouseenter\", \"mouseleave\"], [\"ngx-charts-svg-radial-gradient\", \"\", \"orientation\", \"vertical\", 3, \"color\", \"name\", \"startOpacity\"]],\n  template: function PieArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\", 0);\n      ɵngcc0.ɵɵtemplate(1, PieArcComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"path\", 2);\n      ɵngcc0.ɵɵlistener(\"click\", function PieArcComponent_Template__svg_path_click_2_listener() {\n        return ctx.onClick();\n      })(\"dblclick\", function PieArcComponent_Template__svg_path_dblclick_2_listener($event) {\n        return ctx.onDblClick($event);\n      })(\"mouseenter\", function PieArcComponent_Template__svg_path_mouseenter_2_listener() {\n        return ctx.activate.emit(ctx.data);\n      })(\"mouseleave\", function PieArcComponent_Template__svg_path_mouseleave_2_listener() {\n        return ctx.deactivate.emit(ctx.data);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"pointer-events\", ctx.getPointerEvents());\n      ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive);\n      ɵngcc0.ɵɵattribute(\"d\", ctx.path)(\"fill\", ctx.getGradient());\n    }\n  },\n  directives: [ɵngcc1.NgIf, SvgRadialGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nPieArcComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nPieArcComponent.propDecorators = {\n  fill: [{\n    type: Input\n  }],\n  startAngle: [{\n    type: Input\n  }],\n  endAngle: [{\n    type: Input\n  }],\n  innerRadius: [{\n    type: Input\n  }],\n  outerRadius: [{\n    type: Input\n  }],\n  cornerRadius: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  explodeSlices: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  animate: [{\n    type: Input\n  }],\n  pointerEvents: [{\n    type: Input\n  }],\n  isActive: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  dblclick: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PieArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-arc]',\n      template: \"\\n    <svg:g class=\\\"arc-group\\\">\\n      <svg:defs *ngIf=\\\"gradient\\\">\\n        <svg:g\\n          ngx-charts-svg-radial-gradient\\n          [color]=\\\"fill\\\"\\n          orientation=\\\"vertical\\\"\\n          [name]=\\\"radialGradientId\\\"\\n          [startOpacity]=\\\"startOpacity\\\"\\n        />\\n      </svg:defs>\\n      <svg:path\\n        [attr.d]=\\\"path\\\"\\n        class=\\\"arc\\\"\\n        [class.active]=\\\"isActive\\\"\\n        [attr.fill]=\\\"getGradient()\\\"\\n        (click)=\\\"onClick()\\\"\\n        (dblclick)=\\\"onDblClick($event)\\\"\\n        (mouseenter)=\\\"activate.emit(data)\\\"\\n        (mouseleave)=\\\"deactivate.emit(data)\\\"\\n        [style.pointer-events]=\\\"getPointerEvents()\\\"\\n      />\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    startAngle: [{\n      type: Input\n    }],\n    endAngle: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animate: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }],\n    fill: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\nvar PieChartComponent = /*#__PURE__*/function (_BaseChartComponent17) {\n  _inherits(PieChartComponent, _BaseChartComponent17);\n\n  var _super18 = _createSuper(PieChartComponent);\n\n  function PieChartComponent() {\n    var _this63;\n\n    _classCallCheck(this, PieChartComponent);\n\n    _this63 = _super18.apply(this, arguments);\n    _this63.labels = false;\n    _this63.legend = false;\n    _this63.legendTitle = 'Legend';\n    _this63.legendPosition = 'right';\n    _this63.explodeSlices = false;\n    _this63.doughnut = false;\n    _this63.arcWidth = 0.25;\n    _this63.activeEntries = [];\n    _this63.tooltipDisabled = false;\n    _this63.trimLabels = true;\n    _this63.maxLabelLength = 10;\n    _this63.dblclick = new EventEmitter();\n    _this63.select = new EventEmitter();\n    _this63.activate = new EventEmitter();\n    _this63.deactivate = new EventEmitter();\n    return _this63;\n  }\n\n  _createClass(PieChartComponent, [{\n    key: \"update\",\n    value: function update() {\n      var _this64 = this;\n\n      _get(_getPrototypeOf(PieChartComponent.prototype), \"update\", this).call(this);\n\n      if (this.labels && this.hasNoOptionalMarginsSet()) {\n        this.margins = [30, 80, 30, 80];\n      } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n        // default value for margins\n        this.margins = [20, 20, 20, 20];\n      }\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margins,\n        showLegend: this.legend,\n        legendPosition: this.legendPosition\n      });\n      this.formatDates();\n      var xOffset = this.margins[3] + this.dims.width / 2;\n      var yOffset = this.margins[0] + this.dims.height / 2;\n      this.translation = \"translate(\".concat(xOffset, \", \").concat(yOffset, \")\");\n      this.outerRadius = Math.min(this.dims.width, this.dims.height);\n\n      if (this.labels) {\n        // make room for labels\n        this.outerRadius /= 3;\n      } else {\n        this.outerRadius /= 2;\n      }\n\n      this.innerRadius = 0;\n\n      if (this.doughnut) {\n        this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n      }\n\n      this.domain = this.getDomain(); // sort data according to domain\n\n      this.data = this.results.sort(function (a, b) {\n        return _this64.domain.indexOf(a.name) - _this64.domain.indexOf(b.name);\n      });\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n    }\n  }, {\n    key: \"getDomain\",\n    value: function getDomain() {\n      return this.results.map(function (d) {\n        return d.label;\n      });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      return {\n        scaleType: 'ordinal',\n        domain: this.domain,\n        colors: this.colors,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var fromLegend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      item = this.results.find(function (d) {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item].concat(_toConsumableArray(this.activeEntries));\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var fromLegend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      item = this.results.find(function (d) {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"hasNoOptionalMarginsSet\",\n    value: function hasNoOptionalMarginsSet() {\n      return !this.margins || this.margins.length <= 0;\n    }\n  }]);\n\n  return PieChartComponent;\n}(BaseChartComponent);\n\nPieChartComponent.ɵfac = function PieChartComponent_Factory(t) {\n  return ɵPieChartComponent_BaseFactory(t || PieChartComponent);\n};\n\nPieChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PieChartComponent,\n  selectors: [[\"ngx-charts-pie-chart\"]],\n  contentQueries: function PieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    labels: \"labels\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    explodeSlices: \"explodeSlices\",\n    doughnut: \"doughnut\",\n    arcWidth: \"arcWidth\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    margins: \"margins\",\n    gradient: \"gradient\",\n    labelFormatting: \"labelFormatting\",\n    tooltipText: \"tooltipText\"\n  },\n  outputs: {\n    dblclick: \"dblclick\",\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 24,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"pie-chart\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"showLabels\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"activeEntries\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"dblclick\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelActivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      })(\"legendLabelClick\", function PieChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"g\", 2);\n      ɵngcc0.ɵɵlistener(\"dblclick\", function PieChartComponent_Template__svg_g_dblclick_2_listener($event) {\n        return ctx.dblclick.emit($event);\n      })(\"select\", function PieChartComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function PieChartComponent_Template__svg_g_activate_2_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function PieChartComponent_Template__svg_g_deactivate_2_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(21, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.translation);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.data)(\"showLabels\", ctx.labels)(\"labelFormatting\", ctx.labelFormatting)(\"trimLabels\", ctx.trimLabels)(\"maxLabelLength\", ctx.maxLabelLength)(\"activeEntries\", ctx.activeEntries)(\"innerRadius\", ctx.innerRadius)(\"outerRadius\", ctx.outerRadius)(\"explodeSlices\", ctx.explodeSlices)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, PieSeriesComponent];\n  },\n  styles: [_c24, _c39],\n  encapsulation: 2,\n  changeDetection: 0\n});\nPieChartComponent.propDecorators = {\n  labels: [{\n    type: Input\n  }],\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  explodeSlices: [{\n    type: Input\n  }],\n  doughnut: [{\n    type: Input\n  }],\n  arcWidth: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  labelFormatting: [{\n    type: Input\n  }],\n  trimLabels: [{\n    type: Input\n  }],\n  maxLabelLength: [{\n    type: Input\n  }],\n  tooltipText: [{\n    type: Input\n  }],\n  dblclick: [{\n    type: Output\n  }],\n  margins: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵPieChartComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(PieChartComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-chart',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelActivate)=\\\"onActivate($event, true)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event, true)\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"translation\\\" class=\\\"pie-chart chart\\\">\\n        <svg:g\\n          ngx-charts-pie-series\\n          [colors]=\\\"colors\\\"\\n          [series]=\\\"data\\\"\\n          [showLabels]=\\\"labels\\\"\\n          [labelFormatting]=\\\"labelFormatting\\\"\\n          [trimLabels]=\\\"trimLabels\\\"\\n          [maxLabelLength]=\\\"maxLabelLength\\\"\\n          [activeEntries]=\\\"activeEntries\\\"\\n          [innerRadius]=\\\"innerRadius\\\"\\n          [outerRadius]=\\\"outerRadius\\\"\\n          [explodeSlices]=\\\"explodeSlices\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [animations]=\\\"animations\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [tooltipText]=\\\"tooltipText\\\"\\n          (dblclick)=\\\"dblclick.emit($event)\\\"\\n          (select)=\\\"onClick($event)\\\"\\n          (activate)=\\\"onActivate($event)\\\"\\n          (deactivate)=\\\"onDeactivate($event)\\\"\\n        />\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:fadeIn .75s ease-in;animation:fadeIn .75s ease-in}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:drawOut 3s linear;animation:drawOut 3s linear;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\"]\n    }]\n  }], null, {\n    labels: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    doughnut: [{\n      type: Input\n    }],\n    arcWidth: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    dblclick: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    margins: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nfunction gridSize(dims, len, minWidth) {\n  var rows = 1;\n  var cols = len;\n  var width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n  var xScale = scaleBand();\n  var yScale = scaleBand();\n  var width = dims.width;\n  var height = dims.height;\n\n  var _gridSize = gridSize(dims, data.length, minWidth),\n      _gridSize2 = _slicedToArray(_gridSize, 2),\n      columns = _gridSize2[0],\n      rows = _gridSize2[1];\n\n  var xDomain = [];\n  var yDomain = [];\n\n  for (var i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n\n  for (var _i = 0; _i < columns; _i++) {\n    xDomain.push(_i);\n  }\n\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n  var res = [];\n  var total = designatedTotal ? designatedTotal : getTotal(data);\n  var cardWidth = xScale.bandwidth();\n  var cardHeight = yScale.bandwidth();\n\n  for (var _i2 = 0; _i2 < data.length; _i2++) {\n    res[_i2] = {};\n    res[_i2].data = {\n      name: data[_i2] ? data[_i2].name : '',\n      value: data[_i2] ? data[_i2].value : undefined,\n      extra: data[_i2] ? data[_i2].extra : undefined,\n      label: data[_i2] ? data[_i2].label : ''\n    };\n    res[_i2].x = xScale(_i2 % columns);\n    res[_i2].y = yScale(Math.floor(_i2 / columns));\n    res[_i2].width = cardWidth;\n    res[_i2].height = cardHeight;\n    res[_i2].data.percent = total > 0 ? res[_i2].data.value / total : 0;\n    res[_i2].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(function (d) {\n    return d ? d.value : 0;\n  }).reduce(function (sum, val) {\n    return sum + val;\n  }, 0);\n}\n\nvar PieGridComponent = /*#__PURE__*/function (_BaseChartComponent18) {\n  _inherits(PieGridComponent, _BaseChartComponent18);\n\n  var _super19 = _createSuper(PieGridComponent);\n\n  function PieGridComponent() {\n    var _this65;\n\n    _classCallCheck(this, PieGridComponent);\n\n    _this65 = _super19.apply(this, arguments);\n    _this65.tooltipDisabled = false;\n    _this65.label = 'Total';\n    _this65.minWidth = 150;\n    _this65.activeEntries = [];\n    _this65.activate = new EventEmitter();\n    _this65.deactivate = new EventEmitter();\n    _this65.margin = [20, 20, 20, 20];\n    return _this65;\n  }\n\n  _createClass(PieGridComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(PieGridComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin\n      });\n      this.formatDates();\n      this.domain = this.getDomain();\n      this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n      this.transform = \"translate(\".concat(this.margin[3], \" , \").concat(this.margin[0], \")\");\n      this.series = this.getSeries();\n      this.setColors();\n      this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n  }, {\n    key: \"defaultTooltipText\",\n    value: function defaultTooltipText(_ref40) {\n      var data = _ref40.data;\n      var label = trimLabel(formatLabel(data.name));\n      var val = data.value.toLocaleString();\n      return \"\\n      <span class=\\\"tooltip-label\\\">\".concat(label, \"</span>\\n      <span class=\\\"tooltip-val\\\">\").concat(val, \"</span>\\n    \");\n    }\n  }, {\n    key: \"getDomain\",\n    value: function getDomain() {\n      return this.results.map(function (d) {\n        return d.label;\n      });\n    }\n  }, {\n    key: \"getSeries\",\n    value: function getSeries() {\n      var _this66 = this;\n\n      var total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n      return this.data.map(function (d) {\n        var baselineLabelHeight = 20;\n        var padding = 10;\n        var name = d.data.name;\n        var label = formatLabel(name);\n        var value = d.data.value;\n        var radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n        var innerRadius = radius * 0.9;\n        var count = 0;\n\n        var colors = function colors() {\n          count += 1;\n\n          if (count === 1) {\n            return 'rgba(100,100,100,0.3)';\n          } else {\n            return _this66.colorScale.getColor(label);\n          }\n        };\n\n        var xPos = d.x + (d.width - padding) / 2;\n        var yPos = d.y + (d.height - baselineLabelHeight) / 2;\n        return {\n          transform: \"translate(\".concat(xPos, \", \").concat(yPos, \")\"),\n          colors: colors,\n          innerRadius: innerRadius,\n          outerRadius: radius,\n          name: name,\n          label: trimLabel(label),\n          total: value,\n          value: value,\n          percent: format('.1%')(d.data.percent),\n          data: [d, {\n            data: {\n              other: true,\n              value: total - value,\n              name: d.data.name\n            }\n          }]\n        };\n      });\n    }\n  }, {\n    key: \"getTotal\",\n    value: function getTotal() {\n      return this.results.map(function (d) {\n        return d.value;\n      }).reduce(function (sum, d) {\n        return sum + d;\n      }, 0);\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var fromLegend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      item = this.results.find(function (d) {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item].concat(_toConsumableArray(this.activeEntries));\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var fromLegend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      item = this.results.find(function (d) {\n        if (fromLegend) {\n          return d.label === item.name;\n        } else {\n          return d.name === item.name;\n        }\n      });\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value && d.series === item.series;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }]);\n\n  return PieGridComponent;\n}(BaseChartComponent);\n\nPieGridComponent.ɵfac = function PieGridComponent_Factory(t) {\n  return ɵPieGridComponent_BaseFactory(t || PieGridComponent);\n};\n\nPieGridComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PieGridComponent,\n  selectors: [[\"ngx-charts-pie-grid\"]],\n  contentQueries: function PieGridComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    tooltipDisabled: \"tooltipDisabled\",\n    label: \"label\",\n    minWidth: \"minWidth\",\n    activeEntries: \"activeEntries\",\n    tooltipText: \"tooltipText\",\n    designatedTotal: \"designatedTotal\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"pie-grid\", \"chart\"], [\"class\", \"pie-grid-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"pie-grid-item\"], [\"ngx-charts-pie-grid-series\", \"\", \"ngx-tooltip\", \"\", 3, \"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countPrefix\", 4, \"ngIf\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\", 3, \"countTo\", \"countSuffix\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 1, \"label\", 3, \"countTo\", \"countPrefix\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 1, \"label\"]],\n  template: function PieGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(2, PieGridComponent__svg_g_2_Template, 8, 19, \"g\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(5, _c23, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.series);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgForOf, PieGridSeriesComponent, TooltipDirective, ɵngcc1.NgIf, CountUpDirective];\n  },\n  styles: [_c24, \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nPieGridComponent.propDecorators = {\n  designatedTotal: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipText: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  minWidth: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵPieGridComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(PieGridComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PieGridComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-grid',\n      template: \"\\n    <ngx-charts-chart [view]=\\\"[width, height]\\\" [showLegend]=\\\"false\\\" [animations]=\\\"animations\\\">\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"pie-grid chart\\\">\\n        <svg:g *ngFor=\\\"let series of series\\\" class=\\\"pie-grid-item\\\" [attr.transform]=\\\"series.transform\\\">\\n          <svg:g\\n            ngx-charts-pie-grid-series\\n            [colors]=\\\"series.colors\\\"\\n            [data]=\\\"series.data\\\"\\n            [innerRadius]=\\\"series.innerRadius\\\"\\n            [outerRadius]=\\\"series.outerRadius\\\"\\n            [animations]=\\\"animations\\\"\\n            (select)=\\\"onClick($event)\\\"\\n            ngx-tooltip\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipPlacement]=\\\"'top'\\\"\\n            [tooltipType]=\\\"'tooltip'\\\"\\n            [tooltipTitle]=\\\"tooltipTemplate ? undefined : tooltipText({ data: series })\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [tooltipContext]=\\\"series.data[0].data\\\"\\n            (activate)=\\\"onActivate($event)\\\"\\n            (deactivate)=\\\"onDeactivate($event)\\\"\\n          />\\n          <svg:text\\n            *ngIf=\\\"animations\\\"\\n            class=\\\"label percent-label\\\"\\n            dy=\\\"-0.5em\\\"\\n            x=\\\"0\\\"\\n            y=\\\"5\\\"\\n            ngx-charts-count-up\\n            [countTo]=\\\"series.percent\\\"\\n            [countSuffix]=\\\"'%'\\\"\\n            text-anchor=\\\"middle\\\"\\n          ></svg:text>\\n          <svg:text *ngIf=\\\"!animations\\\" class=\\\"label percent-label\\\" dy=\\\"-0.5em\\\" x=\\\"0\\\" y=\\\"5\\\" text-anchor=\\\"middle\\\">\\n            {{ series.percent.toLocaleString() }}\\n          </svg:text>\\n          <svg:text class=\\\"label\\\" dy=\\\"0.5em\\\" x=\\\"0\\\" y=\\\"5\\\" text-anchor=\\\"middle\\\">\\n            {{ series.label }}\\n          </svg:text>\\n          <svg:text\\n            *ngIf=\\\"animations\\\"\\n            class=\\\"label\\\"\\n            dy=\\\"1.23em\\\"\\n            x=\\\"0\\\"\\n            [attr.y]=\\\"series.outerRadius\\\"\\n            text-anchor=\\\"middle\\\"\\n            ngx-charts-count-up\\n            [countTo]=\\\"series.total\\\"\\n            [countPrefix]=\\\"label + ': '\\\"\\n          ></svg:text>\\n          <svg:text\\n            *ngIf=\\\"!animations\\\"\\n            class=\\\"label\\\"\\n            dy=\\\"1.23em\\\"\\n            x=\\\"0\\\"\\n            [attr.y]=\\\"series.outerRadius\\\"\\n            text-anchor=\\\"middle\\\"\\n          >\\n            {{ label }}: {{ series.total.toLocaleString() }}\\n          </svg:text>\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\"]\n    }]\n  }], null, {\n    tooltipDisabled: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    minWidth: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    designatedTotal: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar PieGridSeriesComponent = /*#__PURE__*/function () {\n  function PieGridSeriesComponent(element) {\n    _classCallCheck(this, PieGridSeriesComponent);\n\n    this.innerRadius = 70;\n    this.outerRadius = 80;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.element = element.nativeElement;\n  }\n\n  _createClass(PieGridSeriesComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.layout = pie().value(function (d) {\n        return d.data.value;\n      }).sort(null);\n      this.arcs = this.getArcs();\n    }\n  }, {\n    key: \"getArcs\",\n    value: function getArcs() {\n      var _this67 = this;\n\n      return this.layout(this.data).map(function (arc, index) {\n        var label = arc.data.data.name;\n        var other = arc.data.data.other;\n\n        if (index === 0) {\n          arc.startAngle = 0;\n        }\n\n        var color = _this67.colors(label);\n\n        return {\n          data: arc.data.data,\n          class: 'arc ' + 'arc' + index,\n          fill: color,\n          startAngle: other ? 0 : arc.startAngle,\n          endAngle: arc.endAngle,\n          animate: _this67.animations && !other,\n          pointerEvents: !other\n        };\n      });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(this.data[0].data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.data.name;\n    }\n  }, {\n    key: \"label\",\n    value: function label(arc) {\n      return arc.data.name;\n    }\n  }, {\n    key: \"color\",\n    value: function color(arc) {\n      return this.colors(this.label(arc));\n    }\n  }]);\n\n  return PieGridSeriesComponent;\n}();\n\nPieGridSeriesComponent.ɵfac = function PieGridSeriesComponent_Factory(t) {\n  return new (t || PieGridSeriesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nPieGridSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PieGridSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-grid-series\", \"\"]],\n  inputs: {\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    animations: \"animations\",\n    colors: \"colors\",\n    data: \"data\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c41,\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"pie-grid-arcs\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieGridSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\", 0);\n      ɵngcc0.ɵɵtemplate(1, PieGridSeriesComponent__svg_g_1_Template, 1, 11, \"g\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, PieArcComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nPieGridSeriesComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nPieGridSeriesComponent.propDecorators = {\n  colors: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  innerRadius: [{\n    type: Input\n  }],\n  outerRadius: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PieGridSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-grid-series]',\n      template: \"\\n    <svg:g class=\\\"pie-grid-arcs\\\">\\n      <svg:g\\n        ngx-charts-pie-arc\\n        *ngFor=\\\"let arc of arcs; trackBy: trackBy\\\"\\n        [attr.class]=\\\"arc.class\\\"\\n        [startAngle]=\\\"arc.startAngle\\\"\\n        [endAngle]=\\\"arc.endAngle\\\"\\n        [innerRadius]=\\\"innerRadius\\\"\\n        [outerRadius]=\\\"outerRadius\\\"\\n        [fill]=\\\"color(arc)\\\"\\n        [value]=\\\"arc.data.value\\\"\\n        [data]=\\\"arc.data\\\"\\n        [gradient]=\\\"false\\\"\\n        [pointerEvents]=\\\"arc.pointerEvents\\\"\\n        [animate]=\\\"arc.animate\\\"\\n        (select)=\\\"onClick($event)\\\"\\n        (activate)=\\\"activate.emit($event)\\\"\\n        (deactivate)=\\\"deactivate.emit($event)\\\"\\n      ></svg:g>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    colors: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\nvar PieSeriesComponent = /*#__PURE__*/function () {\n  function PieSeriesComponent() {\n    _classCallCheck(this, PieSeriesComponent);\n\n    this.series = [];\n    this.innerRadius = 60;\n    this.outerRadius = 80;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n  }\n\n  _createClass(PieSeriesComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var pieGenerator = pie().value(function (d) {\n        return d.value;\n      }).sort(null);\n      var arcData = pieGenerator(this.series);\n      this.max = max(arcData, function (d) {\n        return d.value;\n      });\n      this.data = this.calculateLabelPositions(arcData);\n      this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n  }, {\n    key: \"midAngle\",\n    value: function midAngle(d) {\n      return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n  }, {\n    key: \"outerArc\",\n    value: function outerArc() {\n      var factor = 1.5;\n      return arc().innerRadius(this.outerRadius * factor).outerRadius(this.outerRadius * factor);\n    }\n  }, {\n    key: \"calculateLabelPositions\",\n    value: function calculateLabelPositions(pieData) {\n      var _this68 = this;\n\n      var factor = 1.5;\n      var minDistance = 10;\n      var labelPositions = pieData;\n      labelPositions.forEach(function (d) {\n        d.pos = _this68.outerArc().centroid(d);\n        d.pos[0] = factor * _this68.outerRadius * (_this68.midAngle(d) < Math.PI ? 1 : -1);\n      });\n\n      for (var i = 0; i < labelPositions.length - 1; i++) {\n        var a = labelPositions[i];\n\n        if (!this.labelVisible(a)) {\n          continue;\n        }\n\n        for (var j = i + 1; j < labelPositions.length; j++) {\n          var b = labelPositions[j];\n\n          if (!this.labelVisible(b)) {\n            continue;\n          } // if they're on the same side\n\n\n          if (b.pos[0] * a.pos[0] > 0) {\n            // if they're overlapping\n            var o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n            if (o > 0) {\n              // push the second up or down\n              b.pos[1] += Math.sign(b.pos[0]) * o;\n            }\n          }\n        }\n      }\n\n      return labelPositions;\n    }\n  }, {\n    key: \"labelVisible\",\n    value: function labelVisible(myArc) {\n      return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n    }\n  }, {\n    key: \"getTooltipTitle\",\n    value: function getTooltipTitle(a) {\n      return this.tooltipTemplate ? undefined : this.tooltipText(a);\n    }\n  }, {\n    key: \"labelText\",\n    value: function labelText(myArc) {\n      if (this.labelFormatting) {\n        return this.labelFormatting(myArc.data.name);\n      }\n\n      return this.label(myArc);\n    }\n  }, {\n    key: \"label\",\n    value: function label(myArc) {\n      return formatLabel(myArc.data.name);\n    }\n  }, {\n    key: \"defaultTooltipText\",\n    value: function defaultTooltipText(myArc) {\n      var label = this.label(myArc);\n      var val = formatLabel(myArc.data.value);\n      return \"\\n      <span class=\\\"tooltip-label\\\">\".concat(escapeLabel(label), \"</span>\\n      <span class=\\\"tooltip-val\\\">\").concat(val, \"</span>\\n    \");\n    }\n  }, {\n    key: \"color\",\n    value: function color(myArc) {\n      return this.colors.getColor(this.label(myArc));\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.data.name;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(entry) {\n      if (!this.activeEntries) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name && entry.series === d.series;\n      });\n      return item !== undefined;\n    }\n  }]);\n\n  return PieSeriesComponent;\n}();\n\nPieSeriesComponent.ɵfac = function PieSeriesComponent_Factory(t) {\n  return new (t || PieSeriesComponent)();\n};\n\nPieSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PieSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-series\", \"\"]],\n  inputs: {\n    series: \"series\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipDisabled: \"tooltipDisabled\",\n    animations: \"animations\",\n    tooltipText: \"tooltipText\",\n    colors: \"colors\",\n    dims: \"dims\",\n    explodeSlices: \"explodeSlices\",\n    showLabels: \"showLabels\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    labelFormatting: \"labelFormatting\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c42,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"gradient\", \"data\", \"max\", \"explodeSlices\", \"isActive\", \"animate\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", \"dblclick\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\"]],\n  template: function PieSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, PieSeriesComponent__svg_g_0_Template, 3, 19, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf, PieArcComponent, TooltipDirective, PieLabelComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\nPieSeriesComponent.propDecorators = {\n  colors: [{\n    type: Input\n  }],\n  series: [{\n    type: Input\n  }],\n  dims: [{\n    type: Input\n  }],\n  innerRadius: [{\n    type: Input\n  }],\n  outerRadius: [{\n    type: Input\n  }],\n  explodeSlices: [{\n    type: Input\n  }],\n  showLabels: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  labelFormatting: [{\n    type: Input\n  }],\n  trimLabels: [{\n    type: Input\n  }],\n  maxLabelLength: [{\n    type: Input\n  }],\n  tooltipText: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  dblclick: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PieSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-series]',\n      template: \"\\n    <svg:g *ngFor=\\\"let arc of data; trackBy: trackBy\\\">\\n      <svg:g\\n        ngx-charts-pie-label\\n        *ngIf=\\\"labelVisible(arc)\\\"\\n        [data]=\\\"arc\\\"\\n        [radius]=\\\"outerRadius\\\"\\n        [color]=\\\"color(arc)\\\"\\n        [label]=\\\"labelText(arc)\\\"\\n        [labelTrim]=\\\"trimLabels\\\"\\n        [labelTrimSize]=\\\"maxLabelLength\\\"\\n        [max]=\\\"max\\\"\\n        [value]=\\\"arc.value\\\"\\n        [explodeSlices]=\\\"explodeSlices\\\"\\n        [animations]=\\\"animations\\\"\\n      ></svg:g>\\n      <svg:g\\n        ngx-charts-pie-arc\\n        [startAngle]=\\\"arc.startAngle\\\"\\n        [endAngle]=\\\"arc.endAngle\\\"\\n        [innerRadius]=\\\"innerRadius\\\"\\n        [outerRadius]=\\\"outerRadius\\\"\\n        [fill]=\\\"color(arc)\\\"\\n        [value]=\\\"arc.data.value\\\"\\n        [gradient]=\\\"gradient\\\"\\n        [data]=\\\"arc.data\\\"\\n        [max]=\\\"max\\\"\\n        [explodeSlices]=\\\"explodeSlices\\\"\\n        [isActive]=\\\"isActive(arc.data)\\\"\\n        [animate]=\\\"animations\\\"\\n        (select)=\\\"onClick($event)\\\"\\n        (activate)=\\\"activate.emit($event)\\\"\\n        (deactivate)=\\\"deactivate.emit($event)\\\"\\n        (dblclick)=\\\"dblclick.emit($event)\\\"\\n        ngx-tooltip\\n        [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n        [tooltipPlacement]=\\\"'top'\\\"\\n        [tooltipType]=\\\"'tooltip'\\\"\\n        [tooltipTitle]=\\\"getTooltipTitle(arc)\\\"\\n        [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n        [tooltipContext]=\\\"arc.data\\\"\\n      ></svg:g>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    series: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    showLabels: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nvar PieChartModule = function PieChartModule() {\n  _classCallCheck(this, PieChartModule);\n};\n\nPieChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: PieChartModule\n});\nPieChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function PieChartModule_Factory(t) {\n    return new (t || PieChartModule)();\n  },\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PieChartModule, {\n    declarations: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent],\n    imports: [ChartCommonModule],\n    exports: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PieChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent],\n      exports: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nvar PolarChartModule = function PolarChartModule() {\n  _classCallCheck(this, PolarChartModule);\n};\n\nPolarChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: PolarChartModule\n});\nPolarChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function PolarChartModule_Factory(t) {\n    return new (t || PolarChartModule)();\n  },\n  imports: [[ChartCommonModule, PieChartModule, LineChartModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PolarChartModule, {\n    declarations: [PolarChartComponent, PolarSeriesComponent],\n    imports: [ChartCommonModule, PieChartModule, LineChartModule],\n    exports: [PolarChartComponent, PolarSeriesComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PolarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, LineChartModule],\n      declarations: [PolarChartComponent, PolarSeriesComponent],\n      exports: [PolarChartComponent, PolarSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nvar CardComponent = /*#__PURE__*/function () {\n  function CardComponent(element, cd, zone) {\n    _classCallCheck(this, CardComponent);\n\n    this.cd = cd;\n    this.zone = zone;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.value = '';\n    this.textFontSize = 12;\n    this.textTransform = '';\n    this.initialized = false;\n    this.bandHeight = 10;\n    this.textPadding = [10, 20, 5, 20];\n    this.labelFontSize = 15;\n    this.element = element.nativeElement;\n  }\n\n  _createClass(CardComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      cancelAnimationFrame(this.animationReq);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this69 = this;\n\n      this.zone.run(function () {\n        var hasValue = _this69.data && typeof _this69.data.value !== 'undefined';\n\n        var valueFormatting = _this69.valueFormatting || function (card) {\n          return card.value.toLocaleString();\n        };\n\n        var labelFormatting = _this69.labelFormatting || function (card) {\n          return escapeLabel(trimLabel(card.label, 55));\n        };\n\n        _this69.transform = \"translate(\".concat(_this69.x, \" , \").concat(_this69.y, \")\");\n        _this69.textWidth = Math.max(0, _this69.width) - _this69.textPadding[1] - _this69.textPadding[3];\n        _this69.cardWidth = Math.max(0, _this69.width);\n        _this69.cardHeight = Math.max(0, _this69.height);\n        _this69.label = _this69.label ? _this69.label : _this69.data.name;\n        var cardData = {\n          label: _this69.label,\n          data: _this69.data,\n          value: _this69.data.value\n        };\n        _this69.formattedLabel = labelFormatting(cardData);\n        _this69.transformBand = \"translate(0 , \".concat(_this69.cardHeight - _this69.bandHeight, \")\");\n        var value = hasValue ? valueFormatting(cardData) : '';\n        _this69.value = _this69.paddedValue(value);\n\n        _this69.setPadding();\n\n        _this69.bandPath = roundedRect(0, 0, _this69.cardWidth, _this69.bandHeight, 3, [false, false, true, true]);\n        setTimeout(function () {\n          _this69.scaleText();\n\n          _this69.value = value;\n\n          if (hasValue && !_this69.initialized) {\n            setTimeout(function () {\n              return _this69.startCount();\n            }, 20);\n          }\n        }, 8);\n      });\n    }\n  }, {\n    key: \"paddedValue\",\n    value: function paddedValue(value) {\n      if (this.medianSize && this.medianSize > value.length) {\n        value += \"\\u2007\".repeat(this.medianSize - value.length);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"startCount\",\n    value: function startCount() {\n      var _this70 = this;\n\n      if (!this.initialized && this.animations) {\n        cancelAnimationFrame(this.animationReq);\n        var val = this.data.value;\n        var decs = decimalChecker(val);\n\n        var valueFormatting = this.valueFormatting || function (card) {\n          return card.value.toLocaleString();\n        };\n\n        var callback = function callback(_ref41) {\n          var value = _ref41.value,\n              finished = _ref41.finished;\n\n          _this70.zone.run(function () {\n            value = finished ? val : value;\n            _this70.value = valueFormatting({\n              label: _this70.label,\n              data: _this70.data,\n              value: value\n            });\n\n            if (!finished) {\n              _this70.value = _this70.paddedValue(_this70.value);\n            }\n\n            _this70.cd.markForCheck();\n          });\n        };\n\n        this.animationReq = count(0, val, decs, 1, callback);\n        this.initialized = true;\n      }\n    }\n  }, {\n    key: \"scaleText\",\n    value: function scaleText() {\n      var _this71 = this;\n\n      this.zone.run(function () {\n        var _this71$textEl$native = _this71.textEl.nativeElement.getBoundingClientRect(),\n            width = _this71$textEl$native.width,\n            height = _this71$textEl$native.height;\n\n        if (width === 0 || height === 0) {\n          return;\n        }\n\n        var textPadding = _this71.textPadding[1] = _this71.textPadding[3] = _this71.cardWidth / 8;\n        var availableWidth = _this71.cardWidth - 2 * textPadding;\n        var availableHeight = _this71.cardHeight / 3;\n        var resizeScale = Math.min(availableWidth / width, availableHeight / height);\n        _this71.textFontSize = Math.floor(_this71.textFontSize * resizeScale);\n        _this71.labelFontSize = Math.min(_this71.textFontSize, 15);\n\n        _this71.setPadding();\n\n        _this71.cd.markForCheck();\n      });\n    }\n  }, {\n    key: \"setPadding\",\n    value: function setPadding() {\n      this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n      var padding = this.cardHeight / 2;\n      this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n      this.textPadding[2] = padding - this.labelFontSize;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      this.select.emit(this.data);\n    }\n  }]);\n\n  return CardComponent;\n}();\n\nCardComponent.ɵfac = function CardComponent_Factory(t) {\n  return new (t || CardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CardComponent,\n  selectors: [[\"g\", \"ngx-charts-card\", \"\"]],\n  viewQuery: function CardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c43, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    animations: \"animations\",\n    label: \"label\",\n    color: \"color\",\n    bandColor: \"bandColor\",\n    textColor: \"textColor\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    data: \"data\",\n    medianSize: \"medianSize\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c44,\n  decls: 10,\n  vars: 25,\n  consts: [[1, \"cell\", 3, \"click\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card\"], [\"class\", \"card-band\", \"stroke\", \"none\", 4, \"ngIf\"], [\"x\", \"5\", \"alignment-baseline\", \"hanging\", 1, \"trimmed-label\"], [3, \"innerHTML\"], [\"text-anchor\", \"start\", \"alignment-baseline\", \"hanging\", 1, \"value-text\"], [\"textEl\", \"\"], [\"stroke\", \"none\", 1, \"card-band\"]],\n  template: function CardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function CardComponent_Template__svg_g_click_0_listener() {\n        return ctx.onClick();\n      });\n      ɵngcc0.ɵɵelement(1, \"rect\", 1);\n      ɵngcc0.ɵɵtemplate(2, CardComponent__svg_path_2_Template, 1, 3, \"path\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"title\");\n      ɵngcc0.ɵɵtext(4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"foreignObject\", 3);\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelement(6, \"p\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(7, \"text\", 5, 6);\n      ɵngcc0.ɵɵtext(9);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"fill\", ctx.color);\n      ɵngcc0.ɵɵattribute(\"width\", ctx.cardWidth)(\"height\", ctx.cardHeight);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.bandColor && ctx.bandColor !== ctx.color);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.label);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.cardHeight - ctx.textPadding[2])(\"width\", ctx.textWidth)(\"height\", ctx.labelFontSize + ctx.textPadding[2]);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"color\", ctx.textColor)(\"font-size\", ctx.labelFontSize, \"px\")(\"line-height\", ctx.labelFontSize, \"px\");\n      ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.formattedLabel, ɵngcc0.ɵɵsanitizeHtml);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"fill\", ctx.textColor)(\"font-size\", ctx.textFontSize, \"pt\");\n      ɵngcc0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.textPadding[0]);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  directives: [ɵngcc1.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nCardComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }];\n};\n\nCardComponent.propDecorators = {\n  color: [{\n    type: Input\n  }],\n  bandColor: [{\n    type: Input\n  }],\n  textColor: [{\n    type: Input\n  }],\n  x: [{\n    type: Input\n  }],\n  y: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  medianSize: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  labelFormatting: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  textEl: [{\n    type: ViewChild,\n    args: ['textEl', {\n      static: false\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card]',\n      template: \"\\n    <svg:g [attr.transform]=\\\"transform\\\" class=\\\"cell\\\" (click)=\\\"onClick()\\\">\\n      <svg:rect class=\\\"card\\\" [style.fill]=\\\"color\\\" [attr.width]=\\\"cardWidth\\\" [attr.height]=\\\"cardHeight\\\" rx=\\\"3\\\" ry=\\\"3\\\" />\\n      <svg:path\\n        *ngIf=\\\"bandColor && bandColor !== color\\\"\\n        class=\\\"card-band\\\"\\n        [attr.fill]=\\\"bandColor\\\"\\n        [attr.transform]=\\\"transformBand\\\"\\n        stroke=\\\"none\\\"\\n        [attr.d]=\\\"bandPath\\\"\\n      />\\n      <title>{{ label }}</title>\\n      <svg:foreignObject\\n        class=\\\"trimmed-label\\\"\\n        x=\\\"5\\\"\\n        [attr.x]=\\\"textPadding[3]\\\"\\n        [attr.y]=\\\"cardHeight - textPadding[2]\\\"\\n        [attr.width]=\\\"textWidth\\\"\\n        [attr.height]=\\\"labelFontSize + textPadding[2]\\\"\\n        alignment-baseline=\\\"hanging\\\"\\n      >\\n        <xhtml:p\\n          [style.color]=\\\"textColor\\\"\\n          [style.fontSize.px]=\\\"labelFontSize\\\"\\n          [style.lineHeight.px]=\\\"labelFontSize\\\"\\n          [innerHTML]=\\\"formattedLabel\\\"\\n        >\\n        </xhtml:p>\\n      </svg:foreignObject>\\n      <svg:text\\n        #textEl\\n        class=\\\"value-text\\\"\\n        [attr.x]=\\\"textPadding[3]\\\"\\n        [attr.y]=\\\"textPadding[0]\\\"\\n        [style.fill]=\\\"textColor\\\"\\n        text-anchor=\\\"start\\\"\\n        alignment-baseline=\\\"hanging\\\"\\n        [style.font-size.pt]=\\\"textFontSize\\\"\\n      >\\n        {{ value }}\\n      </svg:text>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    label: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    medianSize: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl', {\n        static: false\n      }]\n    }]\n  });\n})();\n/**\n * Converts a hex to RGB\n *\n * @export\n */\n\n\nfunction hexToRgb(value) {\n  // deprecated, use d3.color()\n  return rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\n\n\nfunction invertColor(value) {\n  var color = rgb(value);\n  var r = color.r,\n      g = color.g,\n      b = color.b,\n      opacity = color.opacity;\n\n  if (opacity === 0) {\n    return color.toString();\n  }\n\n  var yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  var depth = yiq >= 128 ? -0.8 : 0.8;\n  return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\n\n\nfunction shadeRGBColor(_ref42, percent) {\n  var r = _ref42.r,\n      g = _ref42.g,\n      b = _ref42.b;\n  var t = percent < 0 ? 0 : 255;\n  var p = percent < 0 ? percent * -1 : percent;\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n  return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n}\n\nvar CardSeriesComponent = /*#__PURE__*/function () {\n  function CardSeriesComponent() {\n    _classCallCheck(this, CardSeriesComponent);\n\n    this.innerPadding = 15;\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  _createClass(CardSeriesComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.data.length > 2) {\n        var valueFormatting = this.valueFormatting || function (card) {\n          return card.value.toLocaleString();\n        };\n\n        var sortedLengths = this.data.map(function (d) {\n          var hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n          return hasValue ? valueFormatting({\n            data: d.data,\n            label: d ? d.data.name : '',\n            value: d && d.data ? d.data.value : ''\n          }).length : 0;\n        }).sort(function (a, b) {\n          return b - a;\n        });\n        var idx = Math.ceil(this.data.length / 2);\n        this.medianSize = sortedLengths[idx];\n      }\n\n      var cards = this.getCards();\n      this.cards = cards.filter(function (d) {\n        return d.data.value !== null;\n      });\n      this.emptySlots = cards.filter(function (d) {\n        return d.data.value === null;\n      });\n    }\n  }, {\n    key: \"getCards\",\n    value: function getCards() {\n      var _this72 = this;\n\n      var yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n      var xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n      return this.data.map(function (d, index) {\n        var label = d.data.name;\n\n        if (label && label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label ? label.toLocaleString() : label;\n        }\n\n        var value = d.data.value;\n        var valueColor = label ? _this72.colors.getColor(label) : _this72.emptyColor;\n        var color = _this72.cardColor || valueColor || '#000';\n        return {\n          x: d.x,\n          y: d.y,\n          width: d.width - xPadding,\n          height: d.height - yPadding,\n          color: color,\n          bandColor: _this72.bandColor || valueColor,\n          textColor: _this72.textColor || invertColor(color),\n          label: label,\n          data: d.data,\n          tooltipText: \"\".concat(label, \": \").concat(value)\n        };\n      });\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, card) {\n      return card.label;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }]);\n\n  return CardSeriesComponent;\n}();\n\nCardSeriesComponent.ɵfac = function CardSeriesComponent_Factory(t) {\n  return new (t || CardSeriesComponent)();\n};\n\nCardSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CardSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-card-series\", \"\"]],\n  inputs: {\n    innerPadding: \"innerPadding\",\n    emptyColor: \"emptyColor\",\n    animations: \"animations\",\n    data: \"data\",\n    slots: \"slots\",\n    dims: \"dims\",\n    colors: \"colors\",\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c45,\n  decls: 2,\n  vars: 4,\n  consts: [[\"class\", \"card-empty\", \"rx\", \"3\", \"ry\", \"3\", 3, \"fill\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card-empty\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function CardSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, CardSeriesComponent__svg_rect_0_Template, 1, 6, \"rect\", 0);\n      ɵngcc0.ɵɵtemplate(1, CardSeriesComponent__svg_g_1_Template, 1, 13, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.emptySlots)(\"ngForTrackBy\", ctx.trackBy);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.cards)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, CardComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\nCardSeriesComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  slots: [{\n    type: Input\n  }],\n  dims: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  innerPadding: [{\n    type: Input\n  }],\n  cardColor: [{\n    type: Input\n  }],\n  bandColor: [{\n    type: Input\n  }],\n  emptyColor: [{\n    type: Input\n  }],\n  textColor: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  labelFormatting: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CardSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card-series]',\n      template: \"\\n    <svg:rect\\n      *ngFor=\\\"let c of emptySlots; trackBy: trackBy\\\"\\n      class=\\\"card-empty\\\"\\n      [attr.x]=\\\"c.x\\\"\\n      [attr.y]=\\\"c.y\\\"\\n      [style.fill]=\\\"emptyColor\\\"\\n      [attr.width]=\\\"c.width\\\"\\n      [attr.height]=\\\"c.height\\\"\\n      rx=\\\"3\\\"\\n      ry=\\\"3\\\"\\n    />\\n    <svg:g\\n      ngx-charts-card\\n      *ngFor=\\\"let c of cards; trackBy: trackBy\\\"\\n      [x]=\\\"c.x\\\"\\n      [y]=\\\"c.y\\\"\\n      [width]=\\\"c.width\\\"\\n      [height]=\\\"c.height\\\"\\n      [color]=\\\"c.color\\\"\\n      [bandColor]=\\\"c.bandColor\\\"\\n      [textColor]=\\\"c.textColor\\\"\\n      [data]=\\\"c.data\\\"\\n      [label]=\\\"c.label\\\"\\n      [medianSize]=\\\"medianSize\\\"\\n      [valueFormatting]=\\\"valueFormatting\\\"\\n      [labelFormatting]=\\\"labelFormatting\\\"\\n      [animations]=\\\"animations\\\"\\n      (select)=\\\"onClick($event)\\\"\\n    />\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    innerPadding: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    data: [{\n      type: Input\n    }],\n    slots: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nvar NumberCardComponent = /*#__PURE__*/function (_BaseChartComponent19) {\n  _inherits(NumberCardComponent, _BaseChartComponent19);\n\n  var _super20 = _createSuper(NumberCardComponent);\n\n  function NumberCardComponent() {\n    var _this73;\n\n    _classCallCheck(this, NumberCardComponent);\n\n    _this73 = _super20.apply(this, arguments);\n    _this73.emptyColor = 'rgba(0, 0, 0, 0)';\n    _this73.innerPadding = 15;\n    _this73.margin = [10, 10, 10, 10];\n    return _this73;\n  }\n\n  _createClass(NumberCardComponent, [{\n    key: \"clickable\",\n    get: function get() {\n      return !!this.select.observers.length;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(NumberCardComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin\n      });\n      this.formatDates();\n      this.domain = this.getDomain();\n      this.setColors();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n      var size = gridSize(this.dims, this.results.length, 150);\n      var N = size[0] * size[1];\n      var data = this.results.slice();\n\n      while (data.length < N) {\n        data.push({\n          value: null\n        });\n      }\n\n      this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n    }\n  }, {\n    key: \"getDomain\",\n    value: function getDomain() {\n      return this.results.map(function (d) {\n        return d.label;\n      });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n  }]);\n\n  return NumberCardComponent;\n}(BaseChartComponent);\n\nNumberCardComponent.ɵfac = function NumberCardComponent_Factory(t) {\n  return ɵNumberCardComponent_BaseFactory(t || NumberCardComponent);\n};\n\nNumberCardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NumberCardComponent,\n  selectors: [[\"ngx-charts-number-card\"]],\n  inputs: {\n    emptyColor: \"emptyColor\",\n    innerPadding: \"innerPadding\",\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    designatedTotal: \"designatedTotal\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"number-card\", \"chart\"], [\"ngx-charts-card-series\", \"\", 3, \"colors\", \"cardColor\", \"bandColor\", \"textColor\", \"emptyColor\", \"data\", \"dims\", \"innerPadding\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function NumberCardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"g\", 2);\n      ɵngcc0.ɵɵlistener(\"select\", function NumberCardComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"clickable\", ctx.clickable);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"colors\", ctx.colors)(\"cardColor\", ctx.cardColor)(\"bandColor\", ctx.bandColor)(\"textColor\", ctx.textColor)(\"emptyColor\", ctx.emptyColor)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"innerPadding\", ctx.innerPadding)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [ChartComponent, CardSeriesComponent],\n  styles: [_c24, \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;line-height:1em;overflow:hidden;pointer-events:none;text-align:left}ngx-charts-number-card .cell .trimmed-label p{margin:0;overflow:hidden;padding:0;text-overflow:ellipsis;white-space:nowrap;width:100%}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nNumberCardComponent.propDecorators = {\n  cardColor: [{\n    type: Input\n  }],\n  bandColor: [{\n    type: Input\n  }],\n  emptyColor: [{\n    type: Input\n  }],\n  innerPadding: [{\n    type: Input\n  }],\n  textColor: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  labelFormatting: [{\n    type: Input\n  }],\n  designatedTotal: [{\n    type: Input\n  }]\n};\nvar ɵNumberCardComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(NumberCardComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NumberCardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-number-card',\n      template: \"\\n    <ngx-charts-chart [view]=\\\"[width, height]\\\" [showLegend]=\\\"false\\\" [animations]=\\\"animations\\\">\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"number-card chart\\\" [class.clickable]=\\\"clickable\\\">\\n        <svg:g\\n          ngx-charts-card-series\\n          [colors]=\\\"colors\\\"\\n          [cardColor]=\\\"cardColor\\\"\\n          [bandColor]=\\\"bandColor\\\"\\n          [textColor]=\\\"textColor\\\"\\n          [emptyColor]=\\\"emptyColor\\\"\\n          [data]=\\\"data\\\"\\n          [dims]=\\\"dims\\\"\\n          [innerPadding]=\\\"innerPadding\\\"\\n          [valueFormatting]=\\\"valueFormatting\\\"\\n          [labelFormatting]=\\\"labelFormatting\\\"\\n          [animations]=\\\"animations\\\"\\n          (select)=\\\"onClick($event)\\\"\\n        />\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;line-height:1em;overflow:hidden;pointer-events:none;text-align:left}ngx-charts-number-card .cell .trimmed-label p{margin:0;overflow:hidden;padding:0;text-overflow:ellipsis;white-space:nowrap;width:100%}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\"]\n    }]\n  }], null, {\n    emptyColor: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    designatedTotal: [{\n      type: Input\n    }]\n  });\n})();\n\nvar NumberCardModule = function NumberCardModule() {\n  _classCallCheck(this, NumberCardModule);\n};\n\nNumberCardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NumberCardModule\n});\nNumberCardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NumberCardModule_Factory(t) {\n    return new (t || NumberCardModule)();\n  },\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NumberCardModule, {\n    declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n    imports: [ChartCommonModule],\n    exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NumberCardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n      exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n    }]\n  }], null, null);\n})();\n\nvar TreeMapCellComponent = /*#__PURE__*/function () {\n  function TreeMapCellComponent(element) {\n    _classCallCheck(this, TreeMapCellComponent);\n\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  _createClass(TreeMapCellComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this.update();\n\n      this.valueFormatting = this.valueFormatting || function (value) {\n        return value.toLocaleString();\n      };\n\n      var labelFormatting = this.labelFormatting || function (cell) {\n        return escapeLabel(trimLabel(cell.label, 55));\n      };\n\n      var cellData = {\n        data: this.data,\n        label: this.label,\n        value: this.value\n      };\n      this.formattedValue = this.valueFormatting(cellData.value);\n      this.formattedLabel = labelFormatting(cellData);\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = \"url(#\".concat(this.gradientId, \")\");\n      this.gradientStops = this.getGradientStops();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.initialized) {\n        this.animateToCurrentForm();\n      } else {\n        if (this.animations) {\n          this.loadAnimation();\n        }\n\n        this.initialized = true;\n      }\n    }\n  }, {\n    key: \"loadAnimation\",\n    value: function loadAnimation() {\n      var node = select(this.element).select('.cell');\n      node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n      this.animateToCurrentForm();\n    }\n  }, {\n    key: \"getTextColor\",\n    value: function getTextColor() {\n      return invertColor(this.fill);\n    }\n  }, {\n    key: \"animateToCurrentForm\",\n    value: function animateToCurrentForm() {\n      var node = select(this.element).select('.cell');\n\n      if (this.animations) {\n        node.transition().duration(750).attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n      } else {\n        node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      this.select.emit(this.data);\n    }\n  }, {\n    key: \"getGradientStops\",\n    value: function getGradientStops() {\n      return [{\n        offset: 0,\n        color: this.fill,\n        opacity: 0.3\n      }, {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }];\n    }\n  }]);\n\n  return TreeMapCellComponent;\n}();\n\nTreeMapCellComponent.ɵfac = function TreeMapCellComponent_Factory(t) {\n  return new (t || TreeMapCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nTreeMapCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell\", \"\"]],\n  inputs: {\n    gradient: \"gradient\",\n    animations: \"animations\",\n    valueFormatting: \"valueFormatting\",\n    data: \"data\",\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    value: \"value\",\n    valueType: \"valueType\",\n    labelFormatting: \"labelFormatting\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c46,\n  decls: 4,\n  vars: 9,\n  consts: [[4, \"ngIf\"], [1, \"cell\", 3, \"click\"], [\"class\", \"treemap-label\", 3, \"pointer-events\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", \"orientation\", \"vertical\", 3, \"name\", \"stops\"], [1, \"treemap-label\"], [1, \"treemap-label\", 3, \"innerHTML\"], [\"class\", \"treemap-val\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"treemap-val\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"treemap-val\", 3, \"countTo\", \"valueFormatting\"], [1, \"treemap-val\"]],\n  template: function TreeMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\");\n      ɵngcc0.ɵɵtemplate(1, TreeMapCellComponent__svg_defs_1_Template, 2, 2, \"defs\", 0);\n      ɵngcc0.ɵɵelementStart(2, \"rect\", 1);\n      ɵngcc0.ɵɵlistener(\"click\", function TreeMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, TreeMapCellComponent__svg_foreignObject_3_Template, 6, 15, \"foreignObject\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"cursor\", \"pointer\");\n      ɵngcc0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height)(\"x\", ctx.x)(\"y\", ctx.y);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.width >= 70 && ctx.height >= 35);\n    }\n  },\n  directives: [ɵngcc1.NgIf, SvgLinearGradientComponent, CountUpDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nTreeMapCellComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nTreeMapCellComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  fill: [{\n    type: Input\n  }],\n  x: [{\n    type: Input\n  }],\n  y: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  height: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  valueType: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  labelFormatting: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TreeMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell]',\n      template: \"\\n    <svg:g>\\n      <defs *ngIf=\\\"gradient\\\">\\n        <svg:g ngx-charts-svg-linear-gradient orientation=\\\"vertical\\\" [name]=\\\"gradientId\\\" [stops]=\\\"gradientStops\\\" />\\n      </defs>\\n      <svg:rect\\n        [attr.fill]=\\\"gradient ? gradientUrl : fill\\\"\\n        [attr.width]=\\\"width\\\"\\n        [attr.height]=\\\"height\\\"\\n        [attr.x]=\\\"x\\\"\\n        [attr.y]=\\\"y\\\"\\n        [style.cursor]=\\\"'pointer'\\\"\\n        class=\\\"cell\\\"\\n        (click)=\\\"onClick()\\\"\\n      />\\n      <svg:foreignObject\\n        *ngIf=\\\"width >= 70 && height >= 35\\\"\\n        [attr.x]=\\\"x\\\"\\n        [attr.y]=\\\"y\\\"\\n        [attr.width]=\\\"width\\\"\\n        [attr.height]=\\\"height\\\"\\n        class=\\\"treemap-label\\\"\\n        [style.pointer-events]=\\\"'none'\\\"\\n      >\\n        <xhtml:p [style.color]=\\\"getTextColor()\\\" [style.height]=\\\"height + 'px'\\\" [style.width]=\\\"width + 'px'\\\">\\n          <xhtml:span class=\\\"treemap-label\\\" [innerHTML]=\\\"formattedLabel\\\"> </xhtml:span>\\n          <xhtml:br />\\n          <xhtml:span\\n            *ngIf=\\\"animations\\\"\\n            class=\\\"treemap-val\\\"\\n            ngx-charts-count-up\\n            [countTo]=\\\"value\\\"\\n            [valueFormatting]=\\\"valueFormatting\\\"\\n          >\\n          </xhtml:span>\\n          <xhtml:span *ngIf=\\\"!animations\\\" class=\\\"treemap-val\\\">\\n            {{ formattedValue }}\\n          </xhtml:span>\\n        </xhtml:p>\\n      </svg:foreignObject>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    valueType: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TreeMapCellSeriesComponent = /*#__PURE__*/function () {\n  function TreeMapCellSeriesComponent() {\n    _classCallCheck(this, TreeMapCellSeriesComponent);\n\n    this.gradient = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  _createClass(TreeMapCellSeriesComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.cells = this.getCells();\n    }\n  }, {\n    key: \"getCells\",\n    value: function getCells() {\n      var _this74 = this;\n\n      return this.data.children.filter(function (d) {\n        return d.depth === 1;\n      }).map(function (d, index) {\n        var label = d.id;\n        return {\n          data: d.data,\n          x: d.x0,\n          y: d.y0,\n          width: d.x1 - d.x0,\n          height: d.y1 - d.y0,\n          fill: _this74.colors.getColor(label),\n          label: label,\n          value: d.value,\n          valueType: d.valueType\n        };\n      });\n    }\n  }, {\n    key: \"getTooltipText\",\n    value: function getTooltipText(_ref43) {\n      var label = _ref43.label,\n          value = _ref43.value;\n      return \"\\n      <span class=\\\"tooltip-label\\\">\".concat(escapeLabel(label), \"</span>\\n      <span class=\\\"tooltip-val\\\">\").concat(value.toLocaleString(), \"</span>\\n    \");\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.label;\n    }\n  }]);\n\n  return TreeMapCellSeriesComponent;\n}();\n\nTreeMapCellSeriesComponent.ɵfac = function TreeMapCellSeriesComponent_Factory(t) {\n  return new (t || TreeMapCellSeriesComponent)();\n};\n\nTreeMapCellSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeMapCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell-series\", \"\"]],\n  inputs: {\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    animations: \"animations\",\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c47,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueType\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueType\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\"]],\n  template: function TreeMapCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeMapCellSeriesComponent__svg_g_0_Template, 1, 19, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, TreeMapCellComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\nTreeMapCellSeriesComponent.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  dims: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  labelFormatting: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TreeMapCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell-series]',\n      template: \"\\n    <svg:g\\n      ngx-charts-tree-map-cell\\n      *ngFor=\\\"let c of cells; trackBy: trackBy\\\"\\n      [data]=\\\"c.data\\\"\\n      [x]=\\\"c.x\\\"\\n      [y]=\\\"c.y\\\"\\n      [width]=\\\"c.width\\\"\\n      [height]=\\\"c.height\\\"\\n      [fill]=\\\"c.fill\\\"\\n      [label]=\\\"c.label\\\"\\n      [value]=\\\"c.value\\\"\\n      [valueType]=\\\"c.valueType\\\"\\n      [valueFormatting]=\\\"valueFormatting\\\"\\n      [labelFormatting]=\\\"labelFormatting\\\"\\n      [gradient]=\\\"gradient\\\"\\n      [animations]=\\\"animations\\\"\\n      (select)=\\\"onClick($event)\\\"\\n      ngx-tooltip\\n      [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n      [tooltipPlacement]=\\\"'top'\\\"\\n      [tooltipType]=\\\"'tooltip'\\\"\\n      [tooltipTitle]=\\\"tooltipTemplate ? undefined : getTooltipText(c)\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipContext]=\\\"c.data\\\"\\n    ></svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TreeMapComponent = /*#__PURE__*/function (_BaseChartComponent20) {\n  _inherits(TreeMapComponent, _BaseChartComponent20);\n\n  var _super21 = _createSuper(TreeMapComponent);\n\n  function TreeMapComponent() {\n    var _this75;\n\n    _classCallCheck(this, TreeMapComponent);\n\n    _this75 = _super21.apply(this, arguments);\n    _this75.tooltipDisabled = false;\n    _this75.gradient = false;\n    _this75.select = new EventEmitter();\n    _this75.margin = [10, 10, 10, 10];\n    return _this75;\n  }\n\n  _createClass(TreeMapComponent, [{\n    key: \"update\",\n    value: function update() {\n      _get(_getPrototypeOf(TreeMapComponent.prototype), \"update\", this).call(this);\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin\n      });\n      this.domain = this.getDomain();\n      this.treemap = treemap().size([this.dims.width, this.dims.height]);\n      var rootNode = {\n        name: 'root',\n        value: 0,\n        isRoot: true\n      };\n      var root = stratify().id(function (d) {\n        var label = d.name;\n\n        if (label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label.toLocaleString();\n        }\n\n        return label;\n      }).parentId(function (d) {\n        return d.isRoot ? null : 'root';\n      })([rootNode].concat(_toConsumableArray(this.results))).sum(function (d) {\n        return d.value;\n      });\n      this.data = this.treemap(root);\n      this.setColors();\n      this.transform = \"translate(\".concat(this.dims.xOffset, \" , \").concat(this.margin[0], \")\");\n    }\n  }, {\n    key: \"getDomain\",\n    value: function getDomain() {\n      return this.results.map(function (d) {\n        return d.name;\n      });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n  }]);\n\n  return TreeMapComponent;\n}(BaseChartComponent);\n\nTreeMapComponent.ɵfac = function TreeMapComponent_Factory(t) {\n  return ɵTreeMapComponent_BaseFactory(t || TreeMapComponent);\n};\n\nTreeMapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeMapComponent,\n  selectors: [[\"ngx-charts-tree-map\"]],\n  contentQueries: function TreeMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    results: \"results\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 16,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"tree-map\", \"chart\"], [\"ngx-charts-tree-map-cell-series\", \"\", 3, \"colors\", \"data\", \"dims\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"select\"]],\n  template: function TreeMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"g\", 2);\n      ɵngcc0.ɵɵlistener(\"select\", function TreeMapComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(13, _c23, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"colors\", ctx.colors)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [ChartComponent, TreeMapCellSeriesComponent],\n  styles: [\".tree-map .treemap-val{display:inline-block;font-size:1.3em;padding-top:5px}.tree-map .treemap-label p{display:table-cell;line-height:1.2em;text-align:center;vertical-align:middle}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nTreeMapComponent.propDecorators = {\n  results: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  labelFormatting: [{\n    type: Input\n  }],\n  gradient: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }]\n};\nvar ɵTreeMapComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(TreeMapComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TreeMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-tree-map',\n      template: \"\\n    <ngx-charts-chart [view]=\\\"[width, height]\\\" [showLegend]=\\\"false\\\" [animations]=\\\"animations\\\">\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"tree-map chart\\\">\\n        <svg:g\\n          ngx-charts-tree-map-cell-series\\n          [colors]=\\\"colors\\\"\\n          [data]=\\\"data\\\"\\n          [dims]=\\\"dims\\\"\\n          [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [valueFormatting]=\\\"valueFormatting\\\"\\n          [labelFormatting]=\\\"labelFormatting\\\"\\n          [gradient]=\\\"gradient\\\"\\n          [animations]=\\\"animations\\\"\\n          (select)=\\\"onClick($event)\\\"\\n        />\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".tree-map .treemap-val{display:inline-block;font-size:1.3em;padding-top:5px}.tree-map .treemap-label p{display:table-cell;line-height:1.2em;text-align:center;vertical-align:middle}\"]\n    }]\n  }], null, {\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    results: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nvar TreeMapModule = function TreeMapModule() {\n  _classCallCheck(this, TreeMapModule);\n};\n\nTreeMapModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TreeMapModule\n});\nTreeMapModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TreeMapModule_Factory(t) {\n    return new (t || TreeMapModule)();\n  },\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeMapModule, {\n    declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n    imports: [ChartCommonModule],\n    exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TreeMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n      exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n    }]\n  }], null, null);\n})();\n\nvar LinearGaugeComponent = /*#__PURE__*/function (_BaseChartComponent21) {\n  _inherits(LinearGaugeComponent, _BaseChartComponent21);\n\n  var _super22 = _createSuper(LinearGaugeComponent);\n\n  function LinearGaugeComponent() {\n    var _this76;\n\n    _classCallCheck(this, LinearGaugeComponent);\n\n    _this76 = _super22.apply(this, arguments);\n    _this76.min = 0;\n    _this76.max = 100;\n    _this76.value = 0;\n    _this76.margin = [10, 20, 10, 20];\n    _this76.valueResizeScale = 1;\n    _this76.unitsResizeScale = 1;\n    _this76.valueTextTransform = '';\n    _this76.valueTranslate = '';\n    _this76.unitsTextTransform = '';\n    _this76.unitsTranslate = '';\n    return _this76;\n  }\n\n  _createClass(LinearGaugeComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this77 = this;\n\n      _get(_getPrototypeOf(LinearGaugeComponent.prototype), \"ngAfterViewInit\", this).call(this);\n\n      setTimeout(function () {\n        _this77.scaleText('value');\n\n        _this77.scaleText('units');\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this78 = this;\n\n      _get(_getPrototypeOf(LinearGaugeComponent.prototype), \"update\", this).call(this);\n\n      this.hasPreviousValue = this.previousValue !== undefined;\n      this.max = Math.max(this.max, this.value);\n      this.min = Math.min(this.min, this.value);\n\n      if (this.hasPreviousValue) {\n        this.max = Math.max(this.max, this.previousValue);\n        this.min = Math.min(this.min, this.previousValue);\n      }\n\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin\n      });\n      this.valueDomain = this.getValueDomain();\n      this.valueScale = this.getValueScale();\n      this.displayValue = this.getDisplayValue();\n      this.setColors();\n      var xOffset = this.margin[3] + this.dims.width / 2;\n      var yOffset = this.margin[0] + this.dims.height / 2;\n      this.transform = \"translate(\".concat(xOffset, \", \").concat(yOffset, \")\");\n      this.transformLine = \"translate(\".concat(this.margin[3] + this.valueScale(this.previousValue), \", \").concat(yOffset, \")\");\n      this.valueTranslate = \"translate(0, -15)\";\n      this.unitsTranslate = \"translate(0, 15)\";\n      setTimeout(function () {\n        return _this78.scaleText('value');\n      }, 50);\n      setTimeout(function () {\n        return _this78.scaleText('units');\n      }, 50);\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      return [this.min, this.max];\n    }\n  }, {\n    key: \"getValueScale\",\n    value: function getValueScale() {\n      return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    }\n  }, {\n    key: \"getDisplayValue\",\n    value: function getDisplayValue() {\n      if (this.valueFormatting) {\n        return this.valueFormatting(this.value);\n      }\n\n      return this.value.toLocaleString();\n    }\n  }, {\n    key: \"scaleText\",\n    value: function scaleText(element) {\n      var _this79 = this;\n\n      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var el;\n      var resizeScale;\n\n      if (element === 'value') {\n        el = this.valueTextEl;\n        resizeScale = this.valueResizeScale;\n      } else {\n        el = this.unitsTextEl;\n        resizeScale = this.unitsResizeScale;\n      }\n\n      var _el$nativeElement$get = el.nativeElement.getBoundingClientRect(),\n          width = _el$nativeElement$get.width,\n          height = _el$nativeElement$get.height;\n\n      if (width === 0 || height === 0) return;\n      var oldScale = resizeScale;\n      var availableWidth = this.dims.width;\n      var availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n      var resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n      var resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n      resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n      if (resizeScale !== oldScale) {\n        if (element === 'value') {\n          this.valueResizeScale = resizeScale;\n          this.valueTextTransform = \"scale(\".concat(resizeScale, \", \").concat(resizeScale, \")\");\n        } else {\n          this.unitsResizeScale = resizeScale;\n          this.unitsTextTransform = \"scale(\".concat(resizeScale, \", \").concat(resizeScale, \")\");\n        }\n\n        this.cd.markForCheck();\n\n        if (repeat) {\n          setTimeout(function () {\n            _this79.scaleText(element, false);\n          }, 50);\n        }\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      this.select.emit({\n        name: 'Value',\n        value: this.value\n      });\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\n    }\n  }]);\n\n  return LinearGaugeComponent;\n}(BaseChartComponent);\n\nLinearGaugeComponent.ɵfac = function LinearGaugeComponent_Factory(t) {\n  return ɵLinearGaugeComponent_BaseFactory(t || LinearGaugeComponent);\n};\n\nLinearGaugeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: LinearGaugeComponent,\n  selectors: [[\"ngx-charts-linear-gauge\"]],\n  viewQuery: function LinearGaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c48, true);\n      ɵngcc0.ɵɵviewQuery(_c49, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.valueTextEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.unitsTextEl = _t.first);\n    }\n  },\n  inputs: {\n    min: \"min\",\n    max: \"max\",\n    value: \"value\",\n    units: \"units\",\n    previousValue: \"previousValue\",\n    valueFormatting: \"valueFormatting\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 15,\n  vars: 38,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"click\"], [1, \"linear-gauge\", \"chart\"], [\"ngx-charts-bar\", \"\", 1, \"background-bar\", 3, \"width\", \"height\", \"x\", \"y\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"ngx-charts-bar\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\", 4, \"ngIf\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\", 4, \"ngIf\"], [\"alignment-baseline\", \"after-edge\", 1, \"value\"], [\"valueTextEl\", \"\"], [\"alignment-baseline\", \"before-edge\", 1, \"units\"], [\"unitsTextEl\", \"\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\"]],\n  template: function LinearGaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function LinearGaugeComponent_Template_ngx_charts_chart_click_0_listener() {\n        return ctx.onClick();\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵelement(2, \"g\", 2);\n      ɵngcc0.ɵɵelement(3, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(4, LinearGaugeComponent__svg_line_4_Template, 1, 2, \"line\", 4);\n      ɵngcc0.ɵɵtemplate(5, LinearGaugeComponent__svg_line_5_Template, 1, 2, \"line\", 5);\n      ɵngcc0.ɵɵelementStart(6, \"g\");\n      ɵngcc0.ɵɵelementStart(7, \"g\");\n      ɵngcc0.ɵɵelementStart(8, \"text\", 6, 7);\n      ɵngcc0.ɵɵtext(10);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(11, \"g\");\n      ɵngcc0.ɵɵelementStart(12, \"text\", 8, 9);\n      ɵngcc0.ɵɵtext(14);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(33, _c23, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"width\", ctx.dims.width)(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"data\", ɵngcc0.ɵɵpureFunction0(36, _c50))(\"orientation\", \"horizontal\")(\"roundEdges\", true)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"width\", ctx.valueScale(ctx.value))(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"fill\", ctx.colors.getColor(ctx.units))(\"data\", ɵngcc0.ɵɵpureFunction0(37, _c50))(\"orientation\", \"horizontal\")(\"roundEdges\", true)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.valueTranslate);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.valueTextTransform);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.displayValue, \" \");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.unitsTranslate);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.unitsTextTransform);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.units, \" \");\n    }\n  },\n  directives: [ChartComponent, BarComponent, ɵngcc1.NgIf],\n  styles: [_c24, \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:rgba(0,0,0,.05)}.linear-gauge .units{fill:#666}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nLinearGaugeComponent.propDecorators = {\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  units: [{\n    type: Input\n  }],\n  previousValue: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  valueTextEl: [{\n    type: ViewChild,\n    args: ['valueTextEl']\n  }],\n  unitsTextEl: [{\n    type: ViewChild,\n    args: ['unitsTextEl']\n  }]\n};\nvar ɵLinearGaugeComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(LinearGaugeComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LinearGaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-linear-gauge',\n      template: \"\\n    <ngx-charts-chart [view]=\\\"[width, height]\\\" [showLegend]=\\\"false\\\" [animations]=\\\"animations\\\" (click)=\\\"onClick()\\\">\\n      <svg:g class=\\\"linear-gauge chart\\\">\\n        <svg:g\\n          ngx-charts-bar\\n          class=\\\"background-bar\\\"\\n          [width]=\\\"dims.width\\\"\\n          [height]=\\\"3\\\"\\n          [x]=\\\"margin[3]\\\"\\n          [y]=\\\"dims.height / 2 + margin[0] - 2\\\"\\n          [data]=\\\"{}\\\"\\n          [orientation]=\\\"'horizontal'\\\"\\n          [roundEdges]=\\\"true\\\"\\n          [animations]=\\\"animations\\\"\\n        ></svg:g>\\n        <svg:g\\n          ngx-charts-bar\\n          [width]=\\\"valueScale(value)\\\"\\n          [height]=\\\"3\\\"\\n          [x]=\\\"margin[3]\\\"\\n          [y]=\\\"dims.height / 2 + margin[0] - 2\\\"\\n          [fill]=\\\"colors.getColor(units)\\\"\\n          [data]=\\\"{}\\\"\\n          [orientation]=\\\"'horizontal'\\\"\\n          [roundEdges]=\\\"true\\\"\\n          [animations]=\\\"animations\\\"\\n        ></svg:g>\\n\\n        <svg:line\\n          *ngIf=\\\"hasPreviousValue\\\"\\n          [attr.transform]=\\\"transformLine\\\"\\n          x1=\\\"0\\\"\\n          y1=\\\"5\\\"\\n          x2=\\\"0\\\"\\n          y2=\\\"15\\\"\\n          [attr.stroke]=\\\"colors.getColor(units)\\\"\\n        />\\n\\n        <svg:line\\n          *ngIf=\\\"hasPreviousValue\\\"\\n          [attr.transform]=\\\"transformLine\\\"\\n          x1=\\\"0\\\"\\n          y1=\\\"-5\\\"\\n          x2=\\\"0\\\"\\n          y2=\\\"-15\\\"\\n          [attr.stroke]=\\\"colors.getColor(units)\\\"\\n        />\\n\\n        <svg:g [attr.transform]=\\\"transform\\\">\\n          <svg:g [attr.transform]=\\\"valueTranslate\\\">\\n            <svg:text\\n              #valueTextEl\\n              class=\\\"value\\\"\\n              [style.textAnchor]=\\\"'middle'\\\"\\n              [attr.transform]=\\\"valueTextTransform\\\"\\n              alignment-baseline=\\\"after-edge\\\"\\n            >\\n              {{ displayValue }}\\n            </svg:text>\\n          </svg:g>\\n\\n          <svg:g [attr.transform]=\\\"unitsTranslate\\\">\\n            <svg:text\\n              #unitsTextEl\\n              class=\\\"units\\\"\\n              [style.textAnchor]=\\\"'middle'\\\"\\n              [attr.transform]=\\\"unitsTextTransform\\\"\\n              alignment-baseline=\\\"before-edge\\\"\\n            >\\n              {{ units }}\\n            </svg:text>\\n          </svg:g>\\n        </svg:g>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:rgba(0,0,0,.05)}.linear-gauge .units{fill:#666}\"]\n    }]\n  }], null, {\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    previousValue: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    valueTextEl: [{\n      type: ViewChild,\n      args: ['valueTextEl']\n    }],\n    unitsTextEl: [{\n      type: ViewChild,\n      args: ['unitsTextEl']\n    }]\n  });\n})();\n\nvar GaugeComponent = /*#__PURE__*/function (_BaseChartComponent22) {\n  _inherits(GaugeComponent, _BaseChartComponent22);\n\n  var _super23 = _createSuper(GaugeComponent);\n\n  function GaugeComponent() {\n    var _this80;\n\n    _classCallCheck(this, GaugeComponent);\n\n    _this80 = _super23.apply(this, arguments);\n    _this80.legend = false;\n    _this80.legendTitle = 'Legend';\n    _this80.legendPosition = 'right';\n    _this80.min = 0;\n    _this80.max = 100;\n    _this80.bigSegments = 10;\n    _this80.smallSegments = 5;\n    _this80.showAxis = true;\n    _this80.startAngle = -120;\n    _this80.angleSpan = 240;\n    _this80.activeEntries = [];\n    _this80.tooltipDisabled = false;\n    _this80.showText = true;\n    _this80.activate = new EventEmitter();\n    _this80.deactivate = new EventEmitter();\n    _this80.resizeScale = 1;\n    _this80.rotation = '';\n    _this80.textTransform = 'scale(1, 1)';\n    _this80.cornerRadius = 10;\n    return _this80;\n  }\n\n  _createClass(GaugeComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this81 = this;\n\n      _get(_getPrototypeOf(GaugeComponent.prototype), \"ngAfterViewInit\", this).call(this);\n\n      setTimeout(function () {\n        return _this81.scaleText();\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this82 = this;\n\n      _get(_getPrototypeOf(GaugeComponent.prototype), \"update\", this).call(this);\n\n      if (!this.showAxis) {\n        if (!this.margin) {\n          this.margin = [10, 20, 10, 20];\n        }\n      } else {\n        if (!this.margin) {\n          this.margin = [60, 100, 60, 100];\n        }\n      } // make the starting angle positive\n\n\n      if (this.startAngle < 0) {\n        this.startAngle = this.startAngle % 360 + 360;\n      }\n\n      this.angleSpan = Math.min(this.angleSpan, 360);\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showLegend: this.legend,\n        legendPosition: this.legendPosition\n      });\n      this.domain = this.getDomain();\n      this.valueDomain = this.getValueDomain();\n      this.valueScale = this.getValueScale();\n      this.displayValue = this.getDisplayValue();\n      this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n      this.arcs = this.getArcs();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n      var xOffset = this.margin[3] + this.dims.width / 2;\n      var yOffset = this.margin[0] + this.dims.height / 2;\n      this.transform = \"translate(\".concat(xOffset, \", \").concat(yOffset, \")\");\n      this.rotation = \"rotate(\".concat(this.startAngle, \")\");\n      setTimeout(function () {\n        return _this82.scaleText();\n      }, 50);\n    }\n  }, {\n    key: \"getArcs\",\n    value: function getArcs() {\n      var arcs = [];\n      var availableRadius = this.outerRadius * 0.7;\n      var radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n      var arcWidth = radiusPerArc * 0.7;\n      this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n      this.cornerRadius = Math.floor(arcWidth / 2);\n      var i = 0;\n\n      var _iterator70 = _createForOfIteratorHelper(this.results),\n          _step70;\n\n      try {\n        for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {\n          var d = _step70.value;\n          var outerRadius = this.outerRadius - i * radiusPerArc;\n          var innerRadius = outerRadius - arcWidth;\n          var backgroundArc = {\n            endAngle: this.angleSpan * Math.PI / 180,\n            innerRadius: innerRadius,\n            outerRadius: outerRadius,\n            data: {\n              value: this.max,\n              name: d.name\n            }\n          };\n          var valueArc = {\n            endAngle: Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI / 180,\n            innerRadius: innerRadius,\n            outerRadius: outerRadius,\n            data: {\n              value: d.value,\n              name: d.name\n            }\n          };\n          var _arc = {\n            backgroundArc: backgroundArc,\n            valueArc: valueArc\n          };\n          arcs.push(_arc);\n          i++;\n        }\n      } catch (err) {\n        _iterator70.e(err);\n      } finally {\n        _iterator70.f();\n      }\n\n      return arcs;\n    }\n  }, {\n    key: \"getDomain\",\n    value: function getDomain() {\n      return this.results.map(function (d) {\n        return d.name;\n      });\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      var values = this.results.map(function (d) {\n        return d.value;\n      });\n      var dataMin = Math.min.apply(Math, _toConsumableArray(values));\n      var dataMax = Math.max.apply(Math, _toConsumableArray(values));\n\n      if (this.min !== undefined) {\n        this.min = Math.min(this.min, dataMin);\n      } else {\n        this.min = dataMin;\n      }\n\n      if (this.max !== undefined) {\n        this.max = Math.max(this.max, dataMax);\n      } else {\n        this.max = dataMax;\n      }\n\n      return [this.min, this.max];\n    }\n  }, {\n    key: \"getValueScale\",\n    value: function getValueScale() {\n      return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n    }\n  }, {\n    key: \"getDisplayValue\",\n    value: function getDisplayValue() {\n      var value = this.results.map(function (d) {\n        return d.value;\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      if (this.textValue && 0 !== this.textValue.length) {\n        return this.textValue.toLocaleString();\n      }\n\n      if (this.valueFormatting) {\n        return this.valueFormatting(value);\n      }\n\n      return value.toLocaleString();\n    }\n  }, {\n    key: \"scaleText\",\n    value: function scaleText() {\n      var _this83 = this;\n\n      var repeat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!this.showText) {\n        return;\n      }\n\n      var _this$textEl$nativeEl = this.textEl.nativeElement.getBoundingClientRect(),\n          width = _this$textEl$nativeEl.width;\n\n      var oldScale = this.resizeScale;\n\n      if (width === 0) {\n        this.resizeScale = 1;\n      } else {\n        var availableSpace = this.textRadius;\n        this.resizeScale = Math.floor(availableSpace / (width / this.resizeScale) * 100) / 100;\n      }\n\n      if (this.resizeScale !== oldScale) {\n        this.textTransform = \"scale(\".concat(this.resizeScale, \", \").concat(this.resizeScale, \")\");\n        this.cd.markForCheck();\n\n        if (repeat) {\n          setTimeout(function () {\n            return _this83.scaleText(false);\n          }, 50);\n        }\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(data) {\n      this.select.emit(data);\n    }\n  }, {\n    key: \"getLegendOptions\",\n    value: function getLegendOptions() {\n      return {\n        scaleType: 'ordinal',\n        colors: this.colors,\n        domain: this.domain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors() {\n      this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n    }\n  }, {\n    key: \"onActivate\",\n    value: function onActivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n\n      if (idx > -1) {\n        return;\n      }\n\n      this.activeEntries = [item].concat(_toConsumableArray(this.activeEntries));\n      this.activate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"onDeactivate\",\n    value: function onDeactivate(item) {\n      var idx = this.activeEntries.findIndex(function (d) {\n        return d.name === item.name && d.value === item.value;\n      });\n      this.activeEntries.splice(idx, 1);\n      this.activeEntries = _toConsumableArray(this.activeEntries);\n      this.deactivate.emit({\n        value: item,\n        entries: this.activeEntries\n      });\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(entry) {\n      if (!this.activeEntries) return false;\n      var item = this.activeEntries.find(function (d) {\n        return entry.name === d.name && entry.series === d.series;\n      });\n      return item !== undefined;\n    }\n  }, {\n    key: \"trackBy\",\n    value: function trackBy(index, item) {\n      return item.valueArc.data.name;\n    }\n  }]);\n\n  return GaugeComponent;\n}(BaseChartComponent);\n\nGaugeComponent.ɵfac = function GaugeComponent_Factory(t) {\n  return ɵGaugeComponent_BaseFactory(t || GaugeComponent);\n};\n\nGaugeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: GaugeComponent,\n  selectors: [[\"ngx-charts-gauge\"]],\n  contentQueries: function GaugeComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  viewQuery: function GaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c43, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    min: \"min\",\n    max: \"max\",\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    showAxis: \"showAxis\",\n    startAngle: \"startAngle\",\n    angleSpan: \"angleSpan\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showText: \"showText\",\n    margin: \"margin\",\n    textValue: \"textValue\",\n    units: \"units\",\n    results: \"results\",\n    axisTickFormatting: \"axisTickFormatting\",\n    valueFormatting: \"valueFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"gauge\", \"chart\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\", 4, \"ngIf\"], [\"alignment-baseline\", \"central\", 3, \"textAnchor\", 4, \"ngIf\"], [\"ngx-charts-gauge-arc\", \"\", 3, \"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\"], [\"alignment-baseline\", \"central\"], [\"textEl\", \"\"], [\"x\", \"0\", \"dy\", \"0\"], [\"x\", \"0\", \"dy\", \"1.2em\"]],\n  template: function GaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      ɵngcc0.ɵɵlistener(\"legendLabelClick\", function GaugeComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵtemplate(2, GaugeComponent__svg_g_2_Template, 2, 10, \"g\", 2);\n      ɵngcc0.ɵɵtemplate(3, GaugeComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      ɵngcc0.ɵɵtemplate(4, GaugeComponent__svg_text_4_Template, 6, 5, \"text\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"view\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.transform);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showAxis);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showText);\n    }\n  },\n  directives: function directives() {\n    return [ChartComponent, ɵngcc1.NgForOf, ɵngcc1.NgIf, GaugeArcComponent, GaugeAxisComponent];\n  },\n  styles: [_c24, \".gauge .background-arc path{fill:rgba(0,0,0,.05)}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{fill:#666;font-size:12px;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nGaugeComponent.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  legendTitle: [{\n    type: Input\n  }],\n  legendPosition: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  textValue: [{\n    type: Input\n  }],\n  units: [{\n    type: Input\n  }],\n  bigSegments: [{\n    type: Input\n  }],\n  smallSegments: [{\n    type: Input\n  }],\n  results: [{\n    type: Input\n  }],\n  showAxis: [{\n    type: Input\n  }],\n  startAngle: [{\n    type: Input\n  }],\n  angleSpan: [{\n    type: Input\n  }],\n  activeEntries: [{\n    type: Input\n  }],\n  axisTickFormatting: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  showText: [{\n    type: Input\n  }],\n  margin: [{\n    type: Input\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  tooltipTemplate: [{\n    type: ContentChild,\n    args: ['tooltipTemplate']\n  }],\n  textEl: [{\n    type: ViewChild,\n    args: ['textEl']\n  }]\n};\nvar ɵGaugeComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GaugeComponent);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-gauge',\n      template: \"\\n    <ngx-charts-chart\\n      [view]=\\\"[width, height]\\\"\\n      [showLegend]=\\\"legend\\\"\\n      [legendOptions]=\\\"legendOptions\\\"\\n      [activeEntries]=\\\"activeEntries\\\"\\n      [animations]=\\\"animations\\\"\\n      (legendLabelClick)=\\\"onClick($event)\\\"\\n      (legendLabelActivate)=\\\"onActivate($event)\\\"\\n      (legendLabelDeactivate)=\\\"onDeactivate($event)\\\"\\n    >\\n      <svg:g [attr.transform]=\\\"transform\\\" class=\\\"gauge chart\\\">\\n        <svg:g *ngFor=\\\"let arc of arcs; trackBy: trackBy\\\" [attr.transform]=\\\"rotation\\\">\\n          <svg:g\\n            ngx-charts-gauge-arc\\n            [backgroundArc]=\\\"arc.backgroundArc\\\"\\n            [valueArc]=\\\"arc.valueArc\\\"\\n            [cornerRadius]=\\\"cornerRadius\\\"\\n            [colors]=\\\"colors\\\"\\n            [isActive]=\\\"isActive(arc.valueArc.data)\\\"\\n            [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n            [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n            [valueFormatting]=\\\"valueFormatting\\\"\\n            [animations]=\\\"animations\\\"\\n            (select)=\\\"onClick($event)\\\"\\n            (activate)=\\\"onActivate($event)\\\"\\n            (deactivate)=\\\"onDeactivate($event)\\\"\\n          ></svg:g>\\n        </svg:g>\\n\\n        <svg:g\\n          ngx-charts-gauge-axis\\n          *ngIf=\\\"showAxis\\\"\\n          [bigSegments]=\\\"bigSegments\\\"\\n          [smallSegments]=\\\"smallSegments\\\"\\n          [min]=\\\"min\\\"\\n          [max]=\\\"max\\\"\\n          [radius]=\\\"outerRadius\\\"\\n          [angleSpan]=\\\"angleSpan\\\"\\n          [valueScale]=\\\"valueScale\\\"\\n          [startAngle]=\\\"startAngle\\\"\\n          [tickFormatting]=\\\"axisTickFormatting\\\"\\n        ></svg:g>\\n\\n        <svg:text\\n          #textEl\\n          *ngIf=\\\"showText\\\"\\n          [style.textAnchor]=\\\"'middle'\\\"\\n          [attr.transform]=\\\"textTransform\\\"\\n          alignment-baseline=\\\"central\\\"\\n        >\\n          <tspan x=\\\"0\\\" dy=\\\"0\\\">{{ displayValue }}</tspan>\\n          <tspan x=\\\"0\\\" dy=\\\"1.2em\\\">{{ units }}</tspan>\\n        </svg:text>\\n      </svg:g>\\n    </ngx-charts-chart>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:none}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{opacity:.2;transition:opacity .1s ease-in-out}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{fill:none;stroke:#ddd;stroke-width:1}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-dasharray:5;stroke-dashoffset:5;stroke-width:1}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill:#000;fill-opacity:.05}.ngx-charts .gridline-path-dotted{fill:none;stroke:#ddd;stroke-dasharray:1,20;stroke-dashoffset:3;stroke-width:1}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}\", \".gauge .background-arc path{fill:rgba(0,0,0,.05)}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{fill:#666;font-size:12px;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    showAxis: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showText: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    margin: [{\n      type: Input\n    }],\n    textValue: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    axisTickFormatting: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl']\n    }]\n  });\n})();\n\nvar GaugeArcComponent = /*#__PURE__*/function () {\n  function GaugeArcComponent() {\n    _classCallCheck(this, GaugeArcComponent);\n\n    this.isActive = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  _createClass(GaugeArcComponent, [{\n    key: \"tooltipText\",\n    value: function tooltipText(arc) {\n      var label = formatLabel(arc.data.name);\n      var val;\n\n      if (this.valueFormatting) {\n        val = this.valueFormatting(arc.data.value);\n      } else {\n        val = formatLabel(arc.data.value);\n      }\n\n      return \"\\n      <span class=\\\"tooltip-label\\\">\".concat(escapeLabel(label), \"</span>\\n      <span class=\\\"tooltip-val\\\">\").concat(val, \"</span>\\n    \");\n    }\n  }]);\n\n  return GaugeArcComponent;\n}();\n\nGaugeArcComponent.ɵfac = function GaugeArcComponent_Factory(t) {\n  return new (t || GaugeArcComponent)();\n};\n\nGaugeArcComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: GaugeArcComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-arc\", \"\"]],\n  inputs: {\n    isActive: \"isActive\",\n    tooltipDisabled: \"tooltipDisabled\",\n    animations: \"animations\",\n    backgroundArc: \"backgroundArc\",\n    valueArc: \"valueArc\",\n    cornerRadius: \"cornerRadius\",\n    colors: \"colors\",\n    valueFormatting: \"valueFormatting\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  attrs: _c51,\n  decls: 2,\n  vars: 23,\n  consts: [[\"ngx-charts-pie-arc\", \"\", 1, \"background-arc\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"data\", \"animate\", \"pointerEvents\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"fill\", \"data\", \"animate\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function GaugeArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelement(0, \"g\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"g\", 1);\n      ɵngcc0.ɵɵlistener(\"select\", function GaugeArcComponent_Template__svg_g_select_1_listener($event) {\n        return ctx.select.emit($event);\n      })(\"activate\", function GaugeArcComponent_Template__svg_g_activate_1_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function GaugeArcComponent_Template__svg_g_deactivate_1_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.backgroundArc.endAngle)(\"innerRadius\", ctx.backgroundArc.innerRadius)(\"outerRadius\", ctx.backgroundArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"data\", ctx.backgroundArc.data)(\"animate\", false)(\"pointerEvents\", false);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.valueArc.endAngle)(\"innerRadius\", ctx.valueArc.innerRadius)(\"outerRadius\", ctx.valueArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"fill\", ctx.colors.getColor(ctx.valueArc.data.name))(\"data\", ctx.valueArc.data)(\"animate\", ctx.animations)(\"isActive\", ctx.isActive)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", \"top\")(\"tooltipType\", \"tooltip\")(\"tooltipTitle\", ctx.tooltipTemplate ? undefined : ctx.tooltipText(ctx.valueArc))(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.valueArc.data);\n    }\n  },\n  directives: [PieArcComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\nGaugeArcComponent.propDecorators = {\n  backgroundArc: [{\n    type: Input\n  }],\n  valueArc: [{\n    type: Input\n  }],\n  cornerRadius: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  isActive: [{\n    type: Input\n  }],\n  tooltipDisabled: [{\n    type: Input\n  }],\n  valueFormatting: [{\n    type: Input\n  }],\n  tooltipTemplate: [{\n    type: Input\n  }],\n  animations: [{\n    type: Input\n  }],\n  select: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GaugeArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-arc]',\n      template: \"\\n    <svg:g\\n      ngx-charts-pie-arc\\n      class=\\\"background-arc\\\"\\n      [startAngle]=\\\"0\\\"\\n      [endAngle]=\\\"backgroundArc.endAngle\\\"\\n      [innerRadius]=\\\"backgroundArc.innerRadius\\\"\\n      [outerRadius]=\\\"backgroundArc.outerRadius\\\"\\n      [cornerRadius]=\\\"cornerRadius\\\"\\n      [data]=\\\"backgroundArc.data\\\"\\n      [animate]=\\\"false\\\"\\n      [pointerEvents]=\\\"false\\\"\\n    ></svg:g>\\n    <svg:g\\n      ngx-charts-pie-arc\\n      [startAngle]=\\\"0\\\"\\n      [endAngle]=\\\"valueArc.endAngle\\\"\\n      [innerRadius]=\\\"valueArc.innerRadius\\\"\\n      [outerRadius]=\\\"valueArc.outerRadius\\\"\\n      [cornerRadius]=\\\"cornerRadius\\\"\\n      [fill]=\\\"colors.getColor(valueArc.data.name)\\\"\\n      [data]=\\\"valueArc.data\\\"\\n      [animate]=\\\"animations\\\"\\n      [isActive]=\\\"isActive\\\"\\n      (select)=\\\"select.emit($event)\\\"\\n      (activate)=\\\"activate.emit($event)\\\"\\n      (deactivate)=\\\"deactivate.emit($event)\\\"\\n      ngx-tooltip\\n      [tooltipDisabled]=\\\"tooltipDisabled\\\"\\n      [tooltipPlacement]=\\\"'top'\\\"\\n      [tooltipType]=\\\"'tooltip'\\\"\\n      [tooltipTitle]=\\\"tooltipTemplate ? undefined : tooltipText(valueArc)\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipContext]=\\\"valueArc.data\\\"\\n    ></svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    isActive: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    backgroundArc: [{\n      type: Input\n    }],\n    valueArc: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nvar GaugeAxisComponent = /*#__PURE__*/function () {\n  function GaugeAxisComponent() {\n    _classCallCheck(this, GaugeAxisComponent);\n\n    this.rotate = '';\n  }\n\n  _createClass(GaugeAxisComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.rotationAngle = -90 + this.startAngle;\n      this.rotate = \"rotate(\".concat(this.rotationAngle, \")\");\n      this.ticks = this.getTicks();\n    }\n  }, {\n    key: \"getTicks\",\n    value: function getTicks() {\n      var bigTickSegment = this.angleSpan / this.bigSegments;\n      var smallTickSegment = bigTickSegment / this.smallSegments;\n      var tickLength = 20;\n      var ticks = {\n        big: [],\n        small: []\n      };\n      var startDistance = this.radius + 10;\n      var textDist = startDistance + tickLength + 10;\n\n      for (var i = 0; i <= this.bigSegments; i++) {\n        var angleDeg = i * bigTickSegment;\n        var angle = angleDeg * Math.PI / 180;\n        var textAnchor = this.getTextAnchor(angleDeg);\n        var skip = false;\n\n        if (i === 0 && this.angleSpan === 360) {\n          skip = true;\n        }\n\n        if (!skip) {\n          var text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n\n          if (this.tickFormatting) {\n            text = this.tickFormatting(text);\n          }\n\n          ticks.big.push({\n            line: this.getTickPath(startDistance, tickLength, angle),\n            textAnchor: textAnchor,\n            text: text,\n            textTransform: \"\\n            translate(\".concat(textDist * Math.cos(angle), \", \").concat(textDist * Math.sin(angle), \") rotate(\").concat(-this.rotationAngle, \")\\n          \")\n          });\n        }\n\n        if (i === this.bigSegments) {\n          continue;\n        }\n\n        for (var j = 1; j <= this.smallSegments; j++) {\n          var smallAngleDeg = angleDeg + j * smallTickSegment;\n          var smallAngle = smallAngleDeg * Math.PI / 180;\n          ticks.small.push({\n            line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n          });\n        }\n      }\n\n      return ticks;\n    }\n  }, {\n    key: \"getTextAnchor\",\n    value: function getTextAnchor(angle) {\n      // [0, 45] = 'middle';\n      // [46, 135] = 'start';\n      // [136, 225] = 'middle';\n      // [226, 315] = 'end';\n      angle = (this.startAngle + angle) % 360;\n      var textAnchor = 'middle';\n\n      if (angle > 45 && angle <= 135) {\n        textAnchor = 'start';\n      } else if (angle > 225 && angle <= 315) {\n        textAnchor = 'end';\n      }\n\n      return textAnchor;\n    }\n  }, {\n    key: \"getTickPath\",\n    value: function getTickPath(startDistance, tickLength, angle) {\n      var y1 = startDistance * Math.sin(angle);\n      var y2 = (startDistance + tickLength) * Math.sin(angle);\n      var x1 = startDistance * Math.cos(angle);\n      var x2 = (startDistance + tickLength) * Math.cos(angle);\n      var points = [{\n        x: x1,\n        y: y1\n      }, {\n        x: x2,\n        y: y2\n      }];\n      var lineGenerator = line().x(function (d) {\n        return d.x;\n      }).y(function (d) {\n        return d.y;\n      });\n      return lineGenerator(points);\n    }\n  }]);\n\n  return GaugeAxisComponent;\n}();\n\nGaugeAxisComponent.ɵfac = function GaugeAxisComponent_Factory(t) {\n  return new (t || GaugeAxisComponent)();\n};\n\nGaugeAxisComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: GaugeAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-axis\", \"\"]],\n  inputs: {\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    min: \"min\",\n    max: \"max\",\n    angleSpan: \"angleSpan\",\n    startAngle: \"startAngle\",\n    radius: \"radius\",\n    valueScale: \"valueScale\",\n    tickFormatting: \"tickFormatting\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c52,\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"gauge-tick gauge-tick-large\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gauge-tick gauge-tick-small\", 4, \"ngFor\", \"ngForOf\"], [1, \"gauge-tick\", \"gauge-tick-large\"], [\"alignment-baseline\", \"central\"], [1, \"gauge-tick\", \"gauge-tick-small\"]],\n  template: function GaugeAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"g\");\n      ɵngcc0.ɵɵtemplate(1, GaugeAxisComponent__svg_g_1_Template, 2, 1, \"g\", 0);\n      ɵngcc0.ɵɵtemplate(2, GaugeAxisComponent__svg_g_2_Template, 3, 4, \"g\", 0);\n      ɵngcc0.ɵɵtemplate(3, GaugeAxisComponent__svg_g_3_Template, 2, 1, \"g\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"transform\", ctx.rotate);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks.small);\n    }\n  },\n  directives: [ɵngcc1.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\nGaugeAxisComponent.propDecorators = {\n  bigSegments: [{\n    type: Input\n  }],\n  smallSegments: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  angleSpan: [{\n    type: Input\n  }],\n  startAngle: [{\n    type: Input\n  }],\n  radius: [{\n    type: Input\n  }],\n  valueScale: [{\n    type: Input\n  }],\n  tickFormatting: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GaugeAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-axis]',\n      template: \"\\n    <svg:g [attr.transform]=\\\"rotate\\\">\\n      <svg:g *ngFor=\\\"let tick of ticks.big\\\" class=\\\"gauge-tick gauge-tick-large\\\">\\n        <svg:path [attr.d]=\\\"tick.line\\\" />\\n      </svg:g>\\n      <svg:g *ngFor=\\\"let tick of ticks.big\\\" class=\\\"gauge-tick gauge-tick-large\\\">\\n        <svg:text\\n          [style.textAnchor]=\\\"tick.textAnchor\\\"\\n          [attr.transform]=\\\"tick.textTransform\\\"\\n          alignment-baseline=\\\"central\\\"\\n        >\\n          {{ tick.text }}\\n        </svg:text>\\n      </svg:g>\\n      <svg:g *ngFor=\\\"let tick of ticks.small\\\" class=\\\"gauge-tick gauge-tick-small\\\">\\n        <svg:path [attr.d]=\\\"tick.line\\\" />\\n      </svg:g>\\n    </svg:g>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    valueScale: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nvar GaugeModule = function GaugeModule() {\n  _classCallCheck(this, GaugeModule);\n};\n\nGaugeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: GaugeModule\n});\nGaugeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function GaugeModule_Factory(t) {\n    return new (t || GaugeModule)();\n  },\n  imports: [[ChartCommonModule, PieChartModule, BarChartModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GaugeModule, {\n    declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n    imports: [ChartCommonModule, PieChartModule, BarChartModule],\n    exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GaugeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, BarChartModule],\n      declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n      exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n    }]\n  }], null, null);\n})(); // The export is needed here to generate a valid polyfills.metadata.json file\n\n\nfunction ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n\nvar NgxChartsModule = function NgxChartsModule() {\n  _classCallCheck(this, NgxChartsModule);\n\n  ngxChartsPolyfills();\n};\n\nNgxChartsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxChartsModule\n});\nNgxChartsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgxChartsModule_Factory(t) {\n    return new (t || NgxChartsModule)();\n  },\n  imports: [ChartCommonModule, AreaChartModule, BarChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n});\n\nNgxChartsModule.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxChartsModule, {\n    exports: [ChartCommonModule, AreaChartModule, BarChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxChartsModule, [{\n    type: NgModule,\n    args: [{\n      exports: [ChartCommonModule, AreaChartModule, BarChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction tickFormat(fieldType, groupByType) {\n  return function (label) {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      var formatter = timeFormat('MM/DD/YYYY');\n      return formatter(label);\n    }\n\n    return label.toString();\n  };\n}\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AlignmentTypes, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, SeriesHorizontal, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getUniqueXDomainValues, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel, InjectionRegisteryService as ɵa, InjectionService as ɵb };","map":{"version":3,"sources":["../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/throttle.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/placement.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/position.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection-registery.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/charts/chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/visibility-observer.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/base-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axis-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/trim-label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/ticks.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/shape.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axes.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/style.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/alignment.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/show.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/id.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-linear-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-radial-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/events.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip-area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/timeline/timeline.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend-entry.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/scale-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/advanced-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/chart-common.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/view-dimensions.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-sets.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/color.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/domain.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/sort.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/types.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/advanced-pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-layout.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/linear-gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polyfills.ts","../../../../projects/swimlane/ngx-charts/src/lib/ngx-charts.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tick-format.helper.ts","../../../../projects/swimlane/ngx-charts/src/public-api.ts","../../../../projects/swimlane/ngx-charts/src/swimlane-ngx-charts.ts"],"names":["observableFromEvent","d3event","d3_color.rgb"],"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","sourcesContent":["import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  EmbeddedViewRef,\n  Type\n} from '@angular/core';\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\n\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\n  return x.element;\n}\n\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n@Injectable()\nexport class InjectionService {\n  static globalRootViewContainer: ViewContainerRef = null;\n\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\n    InjectionService.globalRootViewContainer = container;\n  }\n\n  private _container: ViewContainerRef;\n\n  constructor(\n    private applicationRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {}\n\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n\n    throw new Error(\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\n    );\n  }\n\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n  setRootViewContainer(container: ViewContainerRef): void {\n    this._container = container;\n  }\n\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n\n    // the top most component root node has no `hostView`\n    return component.location.nativeElement;\n  }\n\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    return this.getComponentRootNode(component);\n  }\n\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n\n    const portalHost = new DomPortalHost(\n      appendLocation,\n      this.componentFactoryResolver,\n      this.applicationRef,\n      this.injector\n    );\n\n    const portal = new ComponentPortal(componentClass);\n\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n}\n","/**\n * Throttle a function\n *\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","export enum PlacementTypes {\n  top = 'top' as any,\n  bottom = 'bottom' as any,\n  left = 'left' as any,\n  right = 'right' as any\n}\n","import { PlacementTypes } from './placement.type';\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'top') {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === 'bottom') {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'left') {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === 'right') {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nexport class PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'top') {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === 'bottom') {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'left') {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === 'right') {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing): boolean {\n    let flip = false;\n\n    if (placement === 'right') {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'left') {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'top') {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'bottom') {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n  static determinePlacement(placement, elmDim, hostDim, spacing): any {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.right) {\n        return PlacementTypes.left;\n      } else if (placement === PlacementTypes.left) {\n        return PlacementTypes.right;\n      } else if (placement === PlacementTypes.top) {\n        return PlacementTypes.bottom;\n      } else if (placement === PlacementTypes.bottom) {\n        return PlacementTypes.top;\n      }\n    }\n\n    return placement;\n  }\n}\n","import {\n  Input,\n  Component,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  HostBinding,\n  Renderer2\n} from '@angular/core';\n\nimport { throttleable } from '../../utils/throttle';\nimport { PositionHelper, PlacementTypes } from './position';\n\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\n\n@Component({\n  selector: 'ngx-tooltip-content',\n  template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./tooltip.component.scss']\n})\nexport class TooltipContentComponent implements AfterViewInit {\n  @Input() host: any;\n  @Input() showCaret: boolean;\n  @Input() type: StyleTypes;\n  @Input() placement: PlacementTypes;\n  @Input() alignment: AlignmentTypes;\n  @Input() spacing: number;\n  @Input() cssClass: string;\n  @Input() title: string;\n  @Input() template: any;\n  @Input() context: any;\n\n  @ViewChild('caretElm') caretElm;\n\n  @HostBinding('class')\n  get cssClasses(): string {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  constructor(public element: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(this.position.bind(this));\n  }\n\n  position(): void {\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\n\n    // if no dims were found, never show\n    if (!hostDim.height && !hostDim.width) return;\n\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    }\n\n    // animate its entry\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm, hostDim, elmDim): void {\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim, elmDim): void {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const { top, left } = PositionHelper.positionCaret(\n      this.placement,\n      elmDim,\n      hostDim,\n      caretDimensions,\n      this.alignment\n    );\n\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim, elmDim): void {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  @HostListener('window:resize')\n  @throttleable(100)\n  onWindowResize(): void {\n    this.position();\n  }\n}\n","import { ComponentRef, Type } from '@angular/core';\nimport { InjectionService } from './injection.service';\n\nexport interface PartialBindings {\n  inputs?: object;\n  outputs?: object;\n}\n\nexport abstract class InjectionRegisteryService<T = any> {\n  protected abstract type: Type<T>;\n\n  protected defaults: PartialBindings = {};\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\n\n  constructor(public injectionService: InjectionService) {}\n\n  getByType(type: Type<T> = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings: object): ComponentRef<T> {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    bindings = this.assignDefaults(bindings);\n\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n\n    return component;\n  }\n\n  destroy(instance: ComponentRef<T>): void {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll(): void {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type: Type<T>): void {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\n    const inputs = { ...this.defaults.inputs };\n    const outputs = { ...this.defaults.outputs };\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = { inputs: bindings };\n    }\n\n    if (inputs) {\n      bindings.inputs = { ...inputs, ...bindings.inputs };\n    }\n\n    if (outputs) {\n      bindings.outputs = { ...outputs, ...bindings.outputs };\n    }\n\n    return bindings;\n  }\n\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { InjectionService } from './injection.service';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { InjectionRegisteryService } from './injection-registery.service';\n@Injectable()\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\n  type: any = TooltipContentComponent;\n\n  constructor(injectionService: InjectionService) {\n    super(injectionService);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { TooltipService } from '../tooltip/tooltip.service';\n\n@Component({\n  providers: [TooltipService],\n  selector: 'ngx-charts-chart',\n  template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === 'scaleLegend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === 'legend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\n    ])\n  ]\n})\nexport class ChartComponent implements OnChanges {\n  @Input() view;\n  @Input() showLegend = false;\n  @Input() legendOptions: any;\n\n  // remove\n  @Input() data;\n  @Input() legendData;\n  @Input() legendType: any;\n  @Input() colors: any;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() legendLabelClick: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  chartWidth: any;\n  title: any;\n  legendWidth: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let legendColumns = 0;\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === 'right') {\n        if (this.legendType === 'scaleLegend') {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n    this.legendWidth =\n      !this.legendOptions || this.legendOptions.position === 'right'\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\n        : this.chartWidth;\n  }\n\n  getLegendType(): string {\n    if (this.legendOptions.scaleType === 'linear') {\n      return 'scaleLegend';\n    } else {\n      return 'legend';\n    }\n  }\n}\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\n\n/**\n * Visibility Observer\n */\n@Directive({\n  selector: 'visibility-observer'\n})\nexport class VisibilityObserver {\n  @Output() visible: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n  isVisible: boolean = false;\n\n  constructor(private element: ElementRef, private zone: NgZone) {\n    this.runCheck();\n  }\n\n  destroy(): void {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange(): void {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck(): void {\n    const check = () => {\n      if (!this.element) {\n        return;\n      }\n\n      // https://davidwalsh.name/offsetheight-visibility\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n}\n","import {\n  ElementRef,\n  NgZone,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\n\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { VisibilityObserver } from '../utils/visibility-observer';\n\n@Component({\n  selector: 'base-chart',\n  template: ` <div></div> `\n})\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\n  @Input() results: any;\n  @Input() view: [number, number];\n  @Input() scheme: any = 'cool';\n  @Input() schemeType: string = 'ordinal';\n  @Input() customColors: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  width: number;\n  height: number;\n  resizeSubscription: any;\n  visibilityObserver: VisibilityObserver;\n\n  constructor(protected chartElement: ElementRef, protected zone: NgZone, protected cd: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this.bindWindowResizeEvent();\n\n    // listen for visibility of the element for hidden by default scenario\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.unbindEvents();\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    }\n\n    // default values if width or height are 0 or undefined\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims(): any {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return { width, height };\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n  formatDates(): void {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n      if (g.label instanceof Date) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n          if (d.label instanceof Date) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  protected unbindEvents(): void {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  private bindWindowResizeEvent(): void {\n    const source = observableFromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n  private cloneData(data): any {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n}\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-axis-label]',\n  template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AxisLabelComponent implements OnChanges {\n  @Input() orient;\n  @Input() label;\n  @Input() offset;\n  @Input() width;\n  @Input() height;\n\n  x: any;\n  y: any;\n  transform: any;\n  strokeWidth: any;\n  textAnchor: any;\n  element: ElementRef;\n  textHeight = 25;\n  margin = 5;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case 'top':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'bottom':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'left':\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      case 'right':\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      default:\n    }\n  }\n}\n","export function trimLabel(s, max = 16): string {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n","export function reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  SimpleChanges,\n  AfterViewInit,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineHeight;\n  @Input() width;\n  @Input() rotateTicks: boolean = true;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  verticalSpacing: number = 20;\n  rotateLabels: boolean = false;\n  innerTickSize: number = 6;\n  outerTickSize: number = 6;\n  tickPadding: number = 3;\n  textAnchor: string = 'middle';\n  maxTicksLength: number = 0;\n  maxAllowedLength: number = 16;\n  adjustedScale: any;\n  textTransform: any;\n  ticks: any;\n  tickFormat: (o: any) => any;\n  height: number = 0;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({ height });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n\n    this.adjustedScale = this.scale.bandwidth\n      ? function (d) {\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\n        }\n      : this.scale;\n\n    this.textTransform = '';\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = 'end';\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = 'middle';\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks): number {\n    let angle = 0;\n    this.maxTicksLength = 0;\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 8; // need to measure this\n    const wordWidth = len * charWidth;\n\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\n\n    // calculate optimal angle\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    return angle;\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth: number): number {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick): string {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform(): string {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis]',\n  template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"'bottom'\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisComponent implements OnChanges {\n  @Input() xScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() rotateTicks: boolean = true;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() ticks: any[];\n  @Input() xAxisTickInterval;\n  @Input() xAxisTickCount: any;\n  @Input() xOrient: string = 'bottom';\n  @Input() xAxisOffset: number = 0;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  xAxisClassName: string = 'x axis';\n\n  tickArguments: any;\n  transform: any;\n  labelOffset: number = 0;\n  fill: string = 'none';\n  stroke: string = 'stroke';\n  tickStroke: string = '#ccc';\n  strokeWidth: string = 'none';\n  padding: number = 5;\n\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({ height }): void {\n    const newLabelOffset = height + 25 + 5;\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ height });\n      }, 0);\n    }\n  }\n}\n","/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nexport function roundedRect(x, y, w, h, r, [tl, tr, bl, br]: boolean[]) {\n  let retval = '';\n\n  w = Math.floor(w);\n  h = Math.floor(h);\n\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n\n  return retval;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  EventEmitter,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nimport { roundedRect } from '../../common/shape.helper';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === 'left'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === 'right'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineWidth;\n  @Input() height;\n  @Input() referenceLines;\n  @Input() showRefLabels: boolean = false;\n  @Input() showRefLines: boolean = false;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  innerTickSize: any = 6;\n  tickPadding: any = 3;\n  tickSpacing: any;\n  verticalSpacing: number = 20;\n  textAnchor: any = 'middle';\n  dy: any;\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n  adjustedScale: any;\n  transform: (o: any) => string;\n  tickFormat: (o: any) => string;\n  ticks: any;\n  width: number = 0;\n  outerTickSize: number = 6;\n  rotateLabels: boolean = false;\n  refMax: number;\n  refMin: number;\n  referenceLineLength: number = 0;\n  referenceAreaPath: string;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({ width });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    let scale;\n    const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n\n    scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth\n      ? function (d) {\n          return scale(d) + scale.bandwidth() * 0.5;\n        }\n      : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case 'top':\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'bottom':\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'left':\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'end';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      case 'right':\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'start';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      default:\n    }\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines(): void {\n    this.refMin = this.adjustedScale(\n      Math.min.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.refMax = this.adjustedScale(\n      Math.max.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.referenceLineLength = this.referenceLines.length;\n\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n      false,\n      false,\n      false,\n      false\n    ]);\n  }\n\n  getTicks(): any {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight: number): number {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick): string {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform(): string {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis]',\n  template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisComponent implements OnChanges {\n  @Input() yScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() ticks: any[];\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() yAxisTickInterval;\n  @Input() yAxisTickCount: any;\n  @Input() yOrient: string = 'left';\n  @Input() referenceLines;\n  @Input() showRefLines;\n  @Input() showRefLabels;\n  @Input() yAxisOffset: number = 0;\n  @Output() dimensionsChanged = new EventEmitter();\n\n  yAxisClassName: string = 'y axis';\n  tickArguments: any;\n  offset: any;\n  transform: any;\n  labelOffset: number = 15;\n  fill: string = 'none';\n  stroke: string = '#CCC';\n  tickStroke: string = '#CCC';\n  strokeWidth: number = 1;\n  padding: number = 5;\n\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.offset = -(this.yAxisOffset + this.padding);\n    if (this.yOrient === 'right') {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.offset = this.offset;\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({ width }): void {\n    if (width !== this.labelOffset && this.yOrient === 'right') {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AxisLabelComponent } from './axis-label.component';\nimport { XAxisComponent } from './x-axis.component';\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { YAxisComponent } from './y-axis.component';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n})\nexport class AxesModule {}\n","export enum StyleTypes {\n  popover = 'popover' as any,\n  tooltip = 'tooltip' as any\n}\n","export enum AlignmentTypes {\n  left = 'left' as any,\n  center = 'center' as any,\n  right = 'right' as any\n}\n","export enum ShowTypes {\n  all = 'all' as any,\n  focus = 'focus' as any,\n  mouseover = 'mouseover' as any\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  Renderer2,\n  OnDestroy\n} from '@angular/core';\n\nimport { PlacementTypes } from './position';\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\nimport { ShowTypes } from './show.type';\n\nimport { TooltipService } from './tooltip.service';\n\n@Directive({ selector: '[ngx-tooltip]' })\nexport class TooltipDirective implements OnDestroy {\n  @Input() tooltipCssClass: string = '';\n  @Input() tooltipTitle: string = '';\n  @Input() tooltipAppendToBody: boolean = true;\n  @Input() tooltipSpacing: number = 10;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipShowCaret: boolean = true;\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.top;\n  @Input() tooltipAlignment: AlignmentTypes = AlignmentTypes.center;\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\n  @Input() tooltipCloseOnClickOutside: boolean = true;\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\n  @Input() tooltipHideTimeout: number = 300;\n  @Input() tooltipShowTimeout: number = 100;\n  @Input() tooltipTemplate: any;\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\n  @Input() tooltipContext: any;\n  @Input() tooltipImmediateExit: boolean = false;\n\n  @Output() show = new EventEmitter();\n  @Output() hide = new EventEmitter();\n\n  private get listensForFocus(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  private get listensForHover(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  private component: any;\n  private timeout: any;\n  private mouseLeaveContentEvent: any;\n  private mouseEnterContentEvent: any;\n  private documentClickEvent: any;\n\n  constructor(\n    private tooltipService: TooltipService,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnDestroy(): void {\n    this.hideTooltip(true);\n  }\n\n  @HostListener('focusin')\n  onFocus(): void {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('mouseleave', ['$event.target'])\n  onMouseLeave(target): void {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  @HostListener('click')\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate?: boolean): void {\n    if (this.component || this.tooltipDisabled) return;\n\n    const time = immediate ? 0 : this.tooltipShowTimeout;\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options);\n\n      // add a tiny timeout to avoid event re-triggers\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip): void {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    });\n\n    // content mouse leave listener\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    }\n\n    // content close on click outside\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen(document, 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate: boolean = false): void {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent();\n\n      // emit events\n      this.hide.emit(true);\n\n      // destroy component\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  private createBoundOptions(): any {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TooltipDirective } from './tooltip.directive';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\nimport { InjectionService } from './injection.service';\n\n@NgModule({\n  declarations: [TooltipContentComponent, TooltipDirective],\n  providers: [InjectionService, TooltipService],\n  exports: [TooltipContentComponent, TooltipDirective],\n  imports: [CommonModule],\n  entryComponents: [TooltipContentComponent]\n})\nexport class TooltipModule {}\n","/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nexport function formatLabel(label: any): string {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n\n/**\n * Escapes a label.\n *\n * @export\n */\nexport function escapeLabel(label: any): string {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  // append a 'a' because neo gets mad\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-circle-series]',\n  template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 1 }))\n      ])\n    ])\n  ]\n})\nexport class CircleSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() type = 'standard';\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() scaleType;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circle: any; // active circle\n  barVisible: boolean = false;\n  gradientId: string;\n  gradientFill: string;\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle(): {} {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d: any, i: number): any {\n    const seriesName = this.data.name;\n\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n\n    let cx;\n    if (this.scaleType === 'time') {\n      cx = this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === 'standard' ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n\n    let color;\n    if (this.colors.scaleType === 'linear') {\n      if (this.type === 'standard') {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({ tooltipLabel, value, seriesName, min, max }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min: any, max: any) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n        result += min.toLocaleString();\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color) {\n    return [\n      {\n        offset: 0,\n        color,\n        opacity: 0.2\n      },\n      {\n        offset: 100,\n        color,\n        opacity: 1\n      }\n    ];\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle(): void {\n    this.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(): void {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({ name: this.data.name });\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-circle]',\n  template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CircleComponent implements OnChanges {\n  @Input() cx;\n  @Input() cy;\n  @Input() r;\n  @Input() fill;\n  @Input() stroke;\n  @Input() data;\n  @Input() classNames;\n  @Input() circleOpacity;\n  @Input() pointerEvents;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  @HostListener('click')\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel]',\n  template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelComponent {\n  @Input() path;\n  @Input() width;\n  @Input() height;\n  @Input() x;\n  @Input() y;\n}\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel-series]',\n  template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelSeriesComponent implements OnChanges {\n  gridPanels: any[];\n\n  @Input()\n  data;\n\n  @Input()\n  dims;\n\n  @Input()\n  xScale;\n\n  @Input()\n  yScale;\n\n  @Input()\n  orient;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels(): any[] {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = 'odd';\n\n      if (this.orient === 'vertical') {\n        const position: number = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === 'horizontal') {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-linear-gradient]',\n  template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgLinearGradientComponent implements OnChanges {\n  @Input() orientation = 'vertical';\n  @Input() name;\n  @Input() stops: any[];\n\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === 'horizontal') {\n      this.x2 = '100%';\n    } else if (this.orientation === 'vertical') {\n      this.y1 = '100%';\n    }\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-radial-gradient]',\n  template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgRadialGradientComponent implements OnChanges {\n  @Input() color: string;\n  @Input() name: string;\n  @Input() startOpacity: number;\n  @Input() endOpacity = 1;\n  @Input() cx: number = 0;\n  @Input() cy: number = 0;\n\n  @Input()\n  get stops(): any[] {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value: any[]) {\n    this.stopsInput = value;\n  }\n\n  r: string;\n\n  private stopsInput: any[];\n  private stopsDefault: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.r = '30%';\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [\n        {\n          offset: 0,\n          color: this.color,\n          opacity: this.startOpacity\n        },\n        {\n          offset: 100,\n          color: this.color,\n          opacity: this.endOpacity\n        }\n      ];\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-area]',\n  template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaComponent implements OnChanges {\n  @Input() data;\n  @Input() path;\n  @Input() startingPath;\n  @Input() fill;\n  @Input() opacity = 1;\n  @Input() startOpacity = 0.5;\n  @Input() endOpacity = 1;\n  @Input() activeLabel;\n  @Input() gradient: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  element: HTMLElement;\n  gradientId: string;\n  gradientFill: string;\n  areaPath: string;\n  initialized: boolean = false;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation(): void {\n    this.areaPath = this.startingPath;\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: this.endOpacity\n      }\n    ];\n  }\n}\n","// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n\n/**\n * Counts from a number to the end incrementally.\n */\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n\n/**\n * Determine decimals places\n *\n * @export\n */\nexport function decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\nimport { count, decimalChecker } from './count.helper';\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n@Component({\n  selector: '[ngx-charts-count-up]',\n  template: ` {{ value }} `\n})\nexport class CountUpDirective implements OnDestroy {\n  @Input() countDuration: number = 1;\n  @Input() countPrefix: string = '';\n  @Input() countSuffix: string = '';\n  @Input() valueFormatting: any;\n\n  @Input()\n  set countDecimals(val: number) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals(): number {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  @Input()\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo(): any {\n    return this._countTo;\n  }\n\n  @Input()\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom(): any {\n    return this._countFrom;\n  }\n\n  @Output() countChange = new EventEmitter();\n  @Output() countFinish = new EventEmitter();\n\n  nativeElement: any;\n\n  value: any = '';\n  formattedValue: string;\n\n  private animationReq: any;\n\n  private _countDecimals: number = 0;\n  private _countTo: number = 0;\n  private _countFrom: number = 0;\n\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\n    this.nativeElement = element.nativeElement;\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start(): void {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting =\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({ value, progress, finished }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({ value: this.value, progress });\n      if (finished) this.countFinish.emit({ value: this.value, progress });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n}\n","declare let global: any;\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root: any;\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n}\n\n// tslint:disable-next-line:variable-name\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\n  prototype?: MouseEvent;\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\n};\n\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, { bubbles, cancelable });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { createMouseEvent } from '../events';\n\n@Component({\n  selector: 'g[ngx-charts-tooltip-area]',\n  template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'right'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition('inactive => active', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 0.7 }))\n      ]),\n      transition('active => inactive', [\n        style({\n          opacity: 0.7\n        }),\n        animate(250, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class TooltipArea {\n  anchorOpacity: number = 0;\n  anchorPos: number = -1;\n  anchorValues: any[] = [];\n  lastAnchorPos: number;\n\n  @Input() dims;\n  @Input() xSet;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() results;\n  @Input() colors;\n  @Input() showPercentage: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() hover = new EventEmitter();\n\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\n\n  getValues(xVal): any[] {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n        let color;\n        if (this.colors.scaleType === 'linear') {\n          let v = val;\n          if (item.d1) {\n            v = item.d1;\n          }\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n\n    this.anchorValues = this.getValues(closestPoint);\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip(): void {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip(): void {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem: any): string {\n    let result: string = '';\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n    result += ': ';\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n        result += tooltipItem.min.toLocaleString();\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n      result += ')';\n    }\n    return result;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { brushX } from 'd3-brush';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { select, event as d3event } from 'd3-selection';\nimport { id } from '../..//utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-timeline]',\n  template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n  styleUrls: ['./timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Timeline implements OnChanges {\n  @Input() view;\n  @Input() state;\n  @Input() results;\n  @Input() scheme;\n  @Input() customColors;\n  @Input() legend;\n  @Input() miniChart;\n  @Input() autoScale;\n  @Input() scaleType;\n  @Input() height: number = 50;\n\n  @Output() select = new EventEmitter();\n  @Output() onDomainChange = new EventEmitter();\n\n  element: HTMLElement;\n  dims: any;\n  xDomain: any[];\n  xScale: any;\n  brush: any;\n  transform: string;\n  initialized: boolean = false;\n  filterId: any;\n  filter: any;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update(): void {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n\n    this.cd.markForCheck();\n  }\n\n  getXDomain(): any[] {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush(): void {\n    if (this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush = brushX()\n      .extent([\n        [0, 0],\n        [width, height]\n      ])\n      .on('brush end', () => {\n        const selection = d3event.selection || this.xScale.range();\n        const newDomain = selection.map(this.xScale.invert);\n\n        this.onDomainChange.emit(newDomain);\n        this.cd.markForCheck();\n      });\n\n    select(this.element).select('.brush').call(this.brush);\n  }\n\n  updateBrush(): void {\n    if (!this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush.extent([\n      [0, 0],\n      [width, height]\n    ]);\n    select(this.element).select('.brush').call(this.brush);\n\n    // clear hardcoded properties so they can be defined by CSS\n    select(this.element)\n      .select('.selection')\n      .attr('fill', undefined)\n      .attr('stroke', undefined)\n      .attr('fill-opacity', undefined);\n\n    this.cd.markForCheck();\n  }\n\n  getDims(): any {\n    const width = this.view[0];\n\n    const dims = {\n      width,\n      height: this.height\n    };\n\n    return dims;\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectorRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-legend',\n  template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendComponent implements OnChanges {\n  @Input() data;\n  @Input() title;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() activeEntries;\n  @Input() horizontal = false;\n\n  @Output() labelClick: EventEmitter<any> = new EventEmitter();\n  @Output() labelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() labelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  legendEntries: any[] = [];\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries(): any[] {\n    const items = [];\n\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ngx-charts-legend-entry',\n  template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendEntryComponent {\n  @Input() color: string;\n  @Input() label: any;\n  @Input() formattedLabel: string;\n  @Input() isActive: boolean = false;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  get trimmedLabel(): string {\n    return this.formattedLabel || '(empty)';\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit({ name: this.label });\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit({ name: this.label });\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'ngx-charts-scale-legend',\n  template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./scale-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScaleLegendComponent implements OnChanges {\n  @Input() valueRange;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() horizontal = false;\n\n  gradient: any;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = this.sanitizer.bypassSecurityTrustStyle(`linear-gradient(to ${direction}, ${gradientValues})`);\n  }\n\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n  gradientString(colors, splits): string {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n\n    return pairs.join(', ');\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-advanced-legend',\n  template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./advanced-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedLegendComponent implements OnChanges {\n  @Input() width: number;\n  @Input() data;\n  @Input() colors;\n  @Input() label: string = 'Total';\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  legendItems: any[] = [];\n  total: number;\n  roundedTotal: number;\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() labelFormatting: (value: string) => any = label => label;\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\n\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getTotal(): number {\n    return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  update(): void {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems(): any {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(item) {\n    return item.formattedLabel;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ChartComponent } from './charts/chart.component';\nimport { BaseChartComponent } from './base-chart.component';\nimport { AxesModule } from './axes/axes.module';\nimport { TooltipModule } from './tooltip/tooltip.module';\nimport { CircleSeriesComponent } from './circle-series.component';\nimport { CircleComponent } from './circle.component';\nimport { GridPanelComponent } from './grid-panel.component';\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\nimport { AreaComponent } from './area.component';\nimport { CountUpDirective } from './count/count.directive';\nimport { TooltipArea } from './tooltip-area.component';\nimport { Timeline } from './timeline/timeline.component';\nimport { VisibilityObserver } from '../utils/visibility-observer';\nimport { LegendComponent } from './legend/legend.component';\nimport { LegendEntryComponent } from './legend/legend-entry.component';\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\n\nconst COMPONENTS = [\n  AreaComponent,\n  BaseChartComponent,\n  CountUpDirective,\n  TooltipArea,\n  ChartComponent,\n  LegendComponent,\n  LegendEntryComponent,\n  ScaleLegendComponent,\n  CircleComponent,\n  CircleSeriesComponent,\n  GridPanelComponent,\n  GridPanelSeriesComponent,\n  SvgLinearGradientComponent,\n  SvgRadialGradientComponent,\n  Timeline,\n  AdvancedLegendComponent\n];\n\n@NgModule({\n  imports: [CommonModule, AxesModule, TooltipModule],\n  declarations: [...COMPONENTS, VisibilityObserver],\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n})\nexport class ChartCommonModule {}\n","export interface ViewDimensions {\n  width: number;\n  height: number;\n  xOffset: number;\n}\n\nexport function calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = 'ordinal',\n  legendPosition = 'right',\n  columns = 12\n}): ViewDimensions {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === 'right') {\n    if (legendType === 'ordinal') {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = (chartWidth * columns) / 12;\n\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n","export let colorSets = [\n  {\n    name: 'vivid',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#647c8a',\n      '#3f51b5',\n      '#2196f3',\n      '#00b862',\n      '#afdf0a',\n      '#a7b61a',\n      '#f3e562',\n      '#ff9800',\n      '#ff5722',\n      '#ff4514'\n    ]\n  },\n  {\n    name: 'natural',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#bf9d76',\n      '#e99450',\n      '#d89f59',\n      '#f2dfa7',\n      '#a5d7c6',\n      '#7794b1',\n      '#afafaf',\n      '#707160',\n      '#ba9383',\n      '#d9d5c3'\n    ]\n  },\n  {\n    name: 'cool',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#a8385d',\n      '#7aa3e5',\n      '#a27ea8',\n      '#aae3f5',\n      '#adcded',\n      '#a95963',\n      '#8796c0',\n      '#7ed3ed',\n      '#50abcc',\n      '#ad6886'\n    ]\n  },\n  {\n    name: 'fire',\n    selectable: true,\n    group: 'Ordinal',\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n  },\n  {\n    name: 'solar',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#fff8e1',\n      '#ffecb3',\n      '#ffe082',\n      '#ffd54f',\n      '#ffca28',\n      '#ffc107',\n      '#ffb300',\n      '#ffa000',\n      '#ff8f00',\n      '#ff6f00'\n    ]\n  },\n  {\n    name: 'air',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e1f5fe',\n      '#b3e5fc',\n      '#81d4fa',\n      '#4fc3f7',\n      '#29b6f6',\n      '#03a9f4',\n      '#039be5',\n      '#0288d1',\n      '#0277bd',\n      '#01579b'\n    ]\n  },\n  {\n    name: 'aqua',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e0f7fa',\n      '#b2ebf2',\n      '#80deea',\n      '#4dd0e1',\n      '#26c6da',\n      '#00bcd4',\n      '#00acc1',\n      '#0097a7',\n      '#00838f',\n      '#006064'\n    ]\n  },\n  {\n    name: 'flame',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#A10A28',\n      '#D3342D',\n      '#EF6D49',\n      '#FAAD67',\n      '#FDDE90',\n      '#DBED91',\n      '#A9D770',\n      '#6CBA67',\n      '#2C9653',\n      '#146738'\n    ]\n  },\n  {\n    name: 'ocean',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#1D68FB',\n      '#33C0FC',\n      '#4AFFFE',\n      '#AFFFFF',\n      '#FFFC63',\n      '#FDBD2D',\n      '#FC8A25',\n      '#FA4F1E',\n      '#FA141B',\n      '#BA38D1'\n    ]\n  },\n  {\n    name: 'forest',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#55C22D',\n      '#C1F33D',\n      '#3CC099',\n      '#AFFFFF',\n      '#8CFC9D',\n      '#76CFFA',\n      '#BA60FB',\n      '#EE6490',\n      '#C42A1C',\n      '#FC9F32'\n    ]\n  },\n  {\n    name: 'horizon',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2597FB',\n      '#65EBFD',\n      '#99FDD0',\n      '#FCEE4B',\n      '#FEFCFA',\n      '#FDD6E3',\n      '#FCB1A8',\n      '#EF6F7B',\n      '#CB96E8',\n      '#EFDEE0'\n    ]\n  },\n  {\n    name: 'neons',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FF3333',\n      '#FF33FF',\n      '#CC33FF',\n      '#0000FF',\n      '#33CCFF',\n      '#33FFFF',\n      '#33FF66',\n      '#CCFF33',\n      '#FFCC00',\n      '#FF6600'\n    ]\n  },\n  {\n    name: 'picnic',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FAC51D',\n      '#66BD6D',\n      '#FAA026',\n      '#29BB9C',\n      '#E96B56',\n      '#55ACD2',\n      '#B7332F',\n      '#2C83C9',\n      '#9166B8',\n      '#92E7E8'\n    ]\n  },\n  {\n    name: 'night',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2B1B5A',\n      '#501356',\n      '#183356',\n      '#28203F',\n      '#391B3C',\n      '#1E2B3C',\n      '#120634',\n      '#2D0432',\n      '#051932',\n      '#453080',\n      '#75267D',\n      '#2C507D',\n      '#4B3880',\n      '#752F7D',\n      '#35547D'\n    ]\n  },\n  {\n    name: 'nightLights',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#4e31a5',\n      '#9c25a7',\n      '#3065ab',\n      '#57468b',\n      '#904497',\n      '#46648b',\n      '#32118d',\n      '#a00fb3',\n      '#1052a2',\n      '#6e51bd',\n      '#b63cc3',\n      '#6c97cb',\n      '#8671c1',\n      '#b455be',\n      '#7496c3'\n    ]\n  }\n];\n","import { range } from 'd3-array';\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\n\nimport { colorSets } from '../utils/color-sets';\n\nexport class ColorHelper {\n  scale: any;\n  scaleType: any;\n  colorDomain: any[];\n  domain: any;\n  customColors: any;\n\n  constructor(scheme, type, domain, customColors?) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    let colorScale;\n    if (type === 'quantile') {\n      colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n    } else if (type === 'ordinal') {\n      colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n    } else if (type === 'linear') {\n      // linear schemes must have at least 2 colors\n      const colorDomain = [...scheme.domain];\n      if (colorDomain.length === 1) {\n        colorDomain.push(colorDomain[0]);\n        this.colorDomain = colorDomain;\n      }\n\n      const points = range(0, 1, 1.0 / colorDomain.length);\n      colorScale = scaleLinear().domain(points).range(colorDomain);\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n    if (this.scaleType === 'linear') {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found: any; // todo type customColors\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n\n    const endColor = this.getColor(value);\n\n    // generate the stops\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n}\n","/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nexport function getUniqueXDomainValues(results: any[]): any[] {\n  const valueSet = new Set();\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n  return Array.from(valueSet);\n}\n\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nexport function getScaleType(values: any[], checkDateType = true): string {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n    if (allDates) {\n      return 'time';\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n  if (allNumbers) {\n    return 'linear';\n  }\n\n  return 'ordinal';\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() state;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() baseValue: any = 'auto';\n  @Input() autoScale;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  clipPathId: string;\n  clipPath: string;\n  scaleType: string;\n  series: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values): string {\n    let date = true;\n    let num = true;\n    for (const value of values) {\n      if (!this.isDate(value)) {\n        date = false;\n      }\n      if (typeof value !== 'number') {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return 'time';\n    }\n\n    if (num) {\n      return 'linear';\n    }\n\n    return 'ordinal';\n  }\n\n  isDate(value): boolean {\n    if (value instanceof Date) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              normalized=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            normalized=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  tooltipAreas: any[];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      let total = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = (d.d0 * 100) / total;\n          d.d1 = (d.d1 * 100) / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    return [0, 100];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              stacked=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            stacked=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","export function sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nexport function sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nexport function sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { area } from 'd3-shape';\n\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-area-series]',\n  template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() baseValue: any = 'auto';\n  @Input() colors;\n  @Input() scaleType;\n  @Input() stacked: boolean = false;\n  @Input() normalized: boolean = false;\n  @Input() gradient;\n  @Input() curve;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  opacity: number;\n  path: string;\n  startingPath: string;\n\n  hasGradient: boolean;\n  gradientStops: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradient();\n\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0((d, i) => this.yScale(d.d0))\n        .y1((d, i) => this.yScale(d.d1));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => this.yScale.range()[0])\n        .y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => this.yScale(d.value));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n\n    this.opacity = 0.8;\n\n    let data = this.data.series;\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AreaChartComponent } from './area-chart.component';\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\nimport { AreaSeriesComponent } from './area-series.component';\nimport { ChartCommonModule } from '../common/chart-common.module';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n})\nexport class AreaChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { roundedRect } from '../common/shape.helper';\nimport { id } from '../utils/id';\n\n/* tslint:disable-next-line */\nimport { transition } from 'd3-transition';\n\n@Component({\n  selector: 'g[ngx-charts-bar]',\n  template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarComponent implements OnChanges {\n  @Input() fill;\n  @Input() data: any;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() orientation;\n  @Input() roundEdges: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() offset = 0;\n  @Input() isActive: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n  @Input() ariaLabel: string;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: any;\n  path: any;\n  gradientId: any;\n  gradientFill: any;\n  startOpacity: any;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n  hideBar: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n    this.update();\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation(): void {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === 'vertical') {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius(): number {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity(): number {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === 'horizontal') {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n    return edges;\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  private checkToHideBar() {\n    this.hideBar =\n      this.noBarWhenZero &&\n      ((this.orientation === 'vertical' && this.height === 0) ||\n        (this.orientation === 'horizontal' && this.width === 0));\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarHorizontalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() xScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yScale: any;\n  xScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n\n  getXDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontal2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valuesDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    return [0, 100];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarVerticalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xScale: any;\n  yScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: any[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n    return [min, max];\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVertical2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() scaleType = 'ordinal';\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valuesDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    return [0, 100];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  tickFormatting: (label: string) => string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nexport enum D0Types {\n  positive = 'positive',\n  negative = 'negative'\n}\n\n@Component({\n  selector: 'g[ngx-charts-series-vertical]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'vertical'\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'vertical'\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesVerticalComponent implements OnChanges {\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelHeightChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  ngOnChanges(changes): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    let width;\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === 'standard') {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar): string {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { D0Types } from './series-vertical.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-series-horizontal]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'horizontal'\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'horizontal'\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesHorizontal implements OnChanges {\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelWidthChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type: D0Types;\n    d0Type = D0Types.positive;\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === 'standard') {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n        bar.y = this.yScale(label);\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      // if total is positive then we show it on the right, otherwise on the left\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data: DataItem): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { formatLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bar-label]',\n  template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n  styleUrls: ['./bar-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarLabelComponent implements OnChanges {\n  @Input() value;\n  @Input() valueFormatting: any;\n  @Input() barX;\n  @Input() barY;\n  @Input() barWidth;\n  @Input() barHeight;\n  @Input() orientation;\n\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\n\n  element: any;\n  x: number;\n  y: number;\n  horizontalPadding: number = 2;\n  verticalPadding: number = 5;\n  formatedValue: string;\n  transform: string;\n  textAnchor: string;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getSize(): any {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return { height: h, width: w, negative: this.value < 0 };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update(): void {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth;\n      // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BarComponent } from './bar.component';\nimport { BarHorizontalComponent } from './bar-horizontal.component';\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\nimport { BarVerticalComponent } from './bar-vertical.component';\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\nimport { SeriesHorizontal } from './series-horizontal.component';\nimport { SeriesVerticalComponent } from './series-vertical.component';\nimport { BarLabelComponent } from './bar-label.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ],\n  exports: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ]\n})\nexport class BarChartModule {}\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\n\nexport function getDomain(values, scaleType, autoScale, minVal?, maxVal?): number[] {\n  let domain: number[] = [];\n  if (scaleType === 'linear') {\n    values = values.map(v => Number(v));\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === 'time' || scaleType === 'linear') {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nexport function getScale(domain, range: number[], scaleType, roundDomains): any {\n  let scale: any;\n\n  if (scaleType === 'time') {\n    scale = scaleTime().range(range).domain(domain);\n  } else if (scaleType === 'linear') {\n    scale = scaleLinear().range(range).domain(domain);\n\n    if (roundDomains) {\n      scale = scale.nice();\n    }\n  } else if (scaleType === 'ordinal') {\n    scale = scalePoint().range([range[0], range[1]]).domain(domain);\n  }\n\n  return scale;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\nimport { getDomain, getScale } from './bubble-chart.utils';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'ngx-charts-bubble-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class BubbleChartComponent extends BaseChartComponent {\n  @Input() showGridLines: boolean = true;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean = true;\n  @Input() yAxis: boolean = true;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() maxRadius = 10;\n  @Input() minRadius = 3;\n  @Input() autoScale: boolean;\n  @Input() schemeType = 'ordinal';\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: any;\n  @Input() yScaleMax: any;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  colors: ColorHelper;\n  scaleType = 'linear';\n  margin = [10, 20, 10, 20];\n  bubblePadding = [0, 0, 0, 0];\n  data: any;\n\n  legendOptions: any;\n  transform: string;\n\n  clipPath: string;\n  clipPathId: string;\n\n  seriesDomain: any[];\n  xDomain: any[];\n  yDomain: any[];\n  rDomain: number[];\n\n  xScaleType: string;\n  yScaleType: string;\n\n  yScale: any;\n  xScale: any;\n  rScale: any;\n\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n\n  activeEntries: any[] = [];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n\n    const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n\n    this.data = this.results;\n\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n\n    this.legendOptions = this.getLegendOptions();\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n    let height = this.dims.height;\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height): any {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width): any {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range): any {\n    const scale = scaleLinear().range(range).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions(): any {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain(): number[] {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bubble-series]',\n  template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipType]=\"'tooltip'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0,\n          transform: 'scale(0)'\n        }),\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n      ])\n    ])\n  ]\n})\nexport class BubbleSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() rScale;\n  @Input() xScaleType;\n  @Input() yScaleType;\n  @Input() colors;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circles: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circles = this.getCircles();\n  }\n\n  getCircles(): any[] {\n    const seriesName = this.data.name;\n\n    return this.data.series\n      .map((d, i) => {\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n          const y = d.y;\n          const x = d.x;\n          const r = d.r;\n\n          const radius = this.rScale(r || 1);\n          const tooltipLabel = formatLabel(d.name);\n\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\n\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n          const opacity = isActive ? 1 : 0.3;\n\n          const data = Object.assign({}, d, {\n            series: seriesName,\n            name: d.name,\n            value: d.y,\n            x: d.x,\n            radius: d.r\n          });\n\n          return {\n            data,\n            x,\n            y,\n            r,\n            classNames: [`circle-data-${i}`],\n            value: y,\n            label: x,\n            cx,\n            cy,\n            radius,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            isActive,\n            transform: `translate(${cx},${cy})`\n          };\n        }\n      })\n      .filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle): string {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name =\n      hasSeriesName && hasTooltipLabel\n        ? `${circle.seriesName} • ${circle.tooltipLabel}`\n        : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle =\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle): boolean {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({ name: circle.seriesName });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle): void {\n    circle.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(circle): void {\n    circle.barVisible = false;\n    this.deactivate.emit({ name: this.data.name });\n  }\n\n  trackBy(index, circle): string {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BubbleChartComponent } from './bubble-chart.component';\nimport { BubbleSeriesComponent } from './bubble-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\n})\nexport class BubbleChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        style=\"cursor: pointer\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatMapCellComponent implements OnChanges {\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() data;\n  @Input() label;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  transform: string;\n  activeRange: any[];\n  startOpacity: number;\n  gradientId: string;\n  gradientUrl: string;\n  gradientStops: any[];\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.transform = `translate(${this.x} , ${this.y})`;\n\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    node.transition().duration(750).attr('opacity', 1);\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() colors;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() gradient: boolean;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  cells: any[];\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    const cells = [];\n\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n\n    return cells;\n  }\n\n  getTooltipText({ label, data, series }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index, item): string {\n    return item.tooltipText;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { scaleBand } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-heat-map',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class HeatMapComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() gradient: boolean;\n  @Input() innerPadding: number | number[] = 8;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xDomain: any[];\n  yDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  color: any;\n  colors: ColorHelper;\n  colorScale: any;\n  transform: string;\n  rects: any[];\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  scaleType: string = 'linear';\n\n  update(): void {\n    super.update();\n\n    this.formatDates();\n\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.scaleType = getScaleType(this.valueDomain, false);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === 'linear') {\n      let min = this.min;\n      let max = this.max;\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain(): any {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n  getDimension(value: string | number | Array<string | number>, index = 0, N: number, L: number): number {\n    if (typeof value === 'string') {\n      value = value\n        .replace('[', '')\n        .replace(']', '')\n        .replace('px', '')\n        // tslint:disable-next-line: quotemark\n        .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n    return N / (L / +value + 1);\n  }\n\n  getXScale(): any {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n\n  getYScale(): any {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n\n  getRects(): any[] {\n    const rects = [];\n\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n\n    return rects;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\n      title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { HeatMapCellComponent } from './heat-map-cell.component';\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\nimport { HeatMapComponent } from './heat-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n})\nexport class HeatMapModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { select } from 'd3-selection';\n\n@Component({\n  selector: 'g[ngx-charts-line]',\n  template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          strokeDasharray: 2000,\n          strokeDashoffset: 2000\n        }),\n        animate(\n          1000,\n          style({\n            strokeDashoffset: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineComponent implements OnChanges {\n  @Input() path;\n  @Input() stroke;\n  @Input() data;\n  @Input() fill: string = 'none';\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  initialized: boolean = false;\n  initialPath: string;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-line-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() autoScale;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showRefLines: boolean = false;\n  @Input() referenceLines: any;\n  @Input() showRefLabels: boolean = true;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any;\n  xScale: any;\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  clipPath: string;\n  clipPathId: string;\n  series: any;\n  areaPath: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  hasRange: boolean; // whether the line has a min-max range around it\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear().range([0, width]).domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    this.deactivateAll();\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { area, line } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-line-series]',\n  template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() hasRange: boolean;\n  @Input() animations: boolean = true;\n\n  path: string;\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  stroke: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const data = this.sortData(this.data.series);\n\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator(): any {\n    return line<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  getRangeGenerator(): any {\n    return area<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n      .curve(this.curve);\n  }\n\n  getAreaGenerator(): any {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area<any>()\n      .x(xProperty)\n      .y0(() => this.yScale.range()[0])\n      .y1(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LineComponent } from './line.component';\nimport { LineChartComponent } from './line-chart.component';\nimport { LineSeriesComponent } from './line-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n})\nexport class LineChartModule {}\n","export function isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveCardinalClosed } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { getScaleType } from '../common/domain.helper';\nimport { isDate } from '../utils/types';\n\nconst twoPI = 2 * Math.PI;\n\n@Component({\n  selector: 'ngx-charts-polar-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"'bottom'\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: [\n    '../common/base-chart.component.scss',\n    '../pie-chart/pie-chart.component.scss',\n    './polar-chart.component.scss'\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class PolarChartComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() autoScale: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveCardinalClosed;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number = 0.15;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: (o: any) => any;\n  @Input() yAxisTickFormatting: (o: any) => any;\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showSeriesOnHover: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() yAxisMinScale: number = 0;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yAxisDims: ViewDimensions;\n  labelOffset: number;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any; // -> rScale\n  xScale: any; // -> tScale\n  yAxisScale: any; // -> yScale\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  transformPlot: string;\n  transformYAxis: string;\n  transformXAxis: string;\n  series: any; // ???\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  thetaTicks: any[];\n  radiusTicks: number[];\n  outerRadius: number;\n\n  update(): void {\n    super.update();\n\n    this.setDims();\n\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n\n    this.yAxisDims = {\n      ...this.dims,\n      width: halfWidth\n    };\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n\n    const minDistance = 10;\n\n    /* from pie chart, abstract out -*/\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j];\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues(): any[] {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()): any[] {\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n    return values;\n  }\n\n  getYValues(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()): any[] {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n\n    min = Math.max(0, min);\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    switch (this.scaleType) {\n      case 'time':\n        return scaleTime().range([0, width]).domain(domain);\n      case 'linear':\n        const scale = scaleLinear().range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n      default:\n        return scalePoint()\n          .range([0, width - twoPI / domain.length])\n          .padding(0)\n          .domain(domain);\n    }\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === 'ordinal') {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { lineRadial } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-polar-series]',\n  template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        tooltipType=\"tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PolarSeriesComponent implements OnChanges {\n  @Input() name;\n  @Input() data;\n  @Input() xScale; // Theta\n  @Input() yScale; // R\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => string;\n  @Input() gradient: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  path: string;\n  circles: any[];\n  circleRadius: number = 3;\n\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  seriesColor: string;\n\n  active: boolean;\n  inactive: boolean;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const line = this.getLineGenerator();\n\n    const data = this.sortData(this.data.series);\n\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === 'linear';\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n\n    this.path = line(data) || '';\n\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d) {\n    const label = d.name;\n    if (this.scaleType === 'time') {\n      return this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      return this.xScale(Number(label));\n    }\n    return this.xScale(label);\n  }\n\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator(): any {\n    return lineRadial<any>()\n      .angle(d => this.getAngle(d))\n      .radius(d => this.getRadius(d))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      return sortByTime(data, 'name');\n    }\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === 'linear') {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-advanced-pie-chart',\n  template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedPieChartComponent extends BaseChartComponent {\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() label: string = 'Total';\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  data: any;\n  dims: ViewDimensions;\n  domain: any[];\n  outerRadius: number;\n  innerRadius: number;\n  transform: string;\n  colors: ColorHelper;\n  legendWidth: number;\n  margin = [20, 20, 20, 20];\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() nameFormatting: (value: string) => any;\n  @Input() percentageFormatting: (value: number) => any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: (this.width * 4) / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n    this.setColors();\n\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { arc } from 'd3-shape';\n\nimport { trimLabel } from '../common/trim-label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-label]',\n  template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieLabelComponent implements OnChanges {\n  @Input() data;\n  @Input() radius;\n  @Input() label;\n  @Input() color;\n  @Input() max;\n  @Input() value;\n  @Input() explodeSlices;\n  @Input() animations: boolean = true;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  trimLabel: (label: string, max?: number) => string;\n  line: string;\n\n  private readonly isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n\n  constructor() {\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let startRadius = this.radius;\n    if (this.explodeSlices) {\n      startRadius = (this.radius * this.value) / this.max;\n    }\n\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n\n    // Calculate innerPos then scale outer position to match label position\n    const innerPos = innerArc.centroid(this.data);\n\n    let scale = this.data.pos[1] / innerPos[1];\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX(): number {\n    return this.data.pos[0];\n  }\n\n  get textY(): number {\n    return this.data.pos[1];\n  }\n\n  get styleTransform(): string {\n    return this.isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n  }\n\n  get attrTransform(): string {\n    return !this.isIE ? null : `translate(${this.textX},${this.textY})`;\n  }\n\n  get textTransition(): string {\n    return this.isIE || !this.animations ? null : 'transform 0.75s';\n  }\n\n  textAnchor(): any {\n    return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { interpolate } from 'd3-interpolate';\nimport { select } from 'd3-selection';\nimport { arc } from 'd3-shape';\n\nimport { id } from '../utils/id';\n/* tslint:disable */\nimport { MouseEvent } from '../events';\n\n@Component({\n  selector: 'g[ngx-charts-pie-arc]',\n  template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          [color]=\"fill\"\n          orientation=\"vertical\"\n          [name]=\"radialGradientId\"\n          [startOpacity]=\"startOpacity\"\n        />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieArcComponent implements OnChanges {\n  @Input() fill;\n  @Input() startAngle: number = 0;\n  @Input() endAngle: number = Math.PI * 2;\n  @Input() innerRadius;\n  @Input() outerRadius;\n  @Input() cornerRadius: number = 0;\n  @Input() value;\n  @Input() max;\n  @Input() data;\n  @Input() explodeSlices: boolean = false;\n  @Input() gradient: boolean = false;\n  @Input() animate: boolean = true;\n  @Input() pointerEvents: boolean = true;\n  @Input() isActive: boolean = false;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  element: HTMLElement;\n  path: any;\n  startOpacity: number;\n  radialGradientId: string;\n  linearGradientId: string;\n  gradientFill: string;\n  initialized: boolean = false;\n  private _timeout;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update(): void {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc(): any {\n    let outerRadius = this.outerRadius;\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = (this.outerRadius * this.value) / this.max;\n    }\n\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const copyOfD = Object.assign({}, d);\n        copyOfD.endAngle = copyOfD.startAngle;\n        const interpolater = interpolate(copyOfD, copyOfD);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      })\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  updateAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  onClick(): void {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event: MouseEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieChartComponent extends BaseChartComponent {\n  @Input() labels = false;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() explodeSlices = false;\n  @Input() doughnut = false;\n  @Input() arcWidth = 0.25;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: any;\n  @Output() dblclick = new EventEmitter();\n  // optional margins\n  @Input() margins: number[];\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  translation: string;\n  outerRadius: number;\n  innerRadius: number;\n  data: any;\n  colors: ColorHelper;\n  domain: any;\n  dims: any;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n    this.innerRadius = 0;\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain();\n\n    // sort data according to domain\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: 'ordinal',\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  private hasNoOptionalMarginsSet(): boolean {\n    return !this.margins || this.margins.length <= 0;\n  }\n}\n","import { scaleBand } from 'd3-scale';\n\nexport function gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nexport function gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale: any = scaleBand<number>();\n  const yScale: any = scaleBand<number>();\n  const width = dims.width;\n  const height = dims.height;\n\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n\n  const xDomain = [];\n  const yDomain = [];\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { min } from 'd3-array';\nimport { format } from 'd3-format';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { gridLayout } from '../common/grid-layout.helper';\nimport { formatLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-grid',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipType]=\"'tooltip'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridComponent extends BaseChartComponent {\n  @Input() designatedTotal: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => any;\n  @Input() label: string = 'Total';\n  @Input() minWidth: number = 150;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  dims: ViewDimensions;\n  data: any[];\n  transform: string;\n  series: any[];\n  domain: any[];\n  colorScale: ColorHelper;\n  margin = [20, 20, 20, 20];\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n\n    this.series = this.getSeries();\n    this.setColors();\n\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({ data }): string {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries(): any[] {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n\n      let count = 0;\n      const colors = () => {\n        count += 1;\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [\n          d,\n          {\n            data: {\n              other: true,\n              value: total - value,\n              name: d.data.name\n            }\n          }\n        ]\n      };\n    });\n  }\n\n  getTotal(): any {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { pie } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-pie-grid-series]',\n  template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() data;\n  @Input() innerRadius = 70;\n  @Input() outerRadius = 80;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  layout: any;\n  arcs: any;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.layout = pie<any, any>()\n      .value(d => d.data.value)\n      .sort(null);\n\n    this.arcs = this.getArcs();\n  }\n\n  getArcs(): any[] {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data): void {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  label(arc): string {\n    return arc.data.name;\n  }\n\n  color(arc): any {\n    return this.colors(this.label(arc));\n  }\n}\n","import {\n  Component,\n  SimpleChanges,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { max } from 'd3-array';\nimport { arc, pie } from 'd3-shape';\n\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-series]',\n  template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() series: any = [];\n  @Input() dims;\n  @Input() innerRadius = 60;\n  @Input() outerRadius = 80;\n  @Input() explodeSlices;\n  @Input() showLabels;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: (o: any) => any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  max: number;\n  data: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    const pieGenerator = pie<any, any>()\n      .value(d => d.value)\n      .sort(null);\n\n    const arcData = pieGenerator(this.series);\n\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc(): any {\n    const factor = 1.5;\n\n    return arc()\n      .innerRadius(this.outerRadius * factor)\n      .outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData): any {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n        if (!this.labelVisible(b)) {\n          continue;\n        }\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc): boolean {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc): string {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n    return this.label(myArc);\n  }\n\n  label(myArc): string {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc): string {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc): any {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\nimport { PieLabelComponent } from './pie-label.component';\nimport { PieArcComponent } from './pie-arc.component';\nimport { PieChartComponent } from './pie-chart.component';\nimport { PieGridComponent } from './pie-grid.component';\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\nimport { PieSeriesComponent } from './pie-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ],\n  exports: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ]\n})\nexport class PieChartModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { PolarChartComponent } from './polar-chart.component';\nimport { PolarSeriesComponent } from './polar-series.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { LineChartModule } from '../line-chart/line-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\n  declarations: [PolarChartComponent, PolarSeriesComponent],\n  exports: [PolarChartComponent, PolarSeriesComponent]\n})\nexport class PolarChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  NgZone,\n  OnDestroy\n} from '@angular/core';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { roundedRect } from '../common/shape.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { decimalChecker, count } from '../common/count/count.helper';\n\n@Component({\n  selector: 'g[ngx-charts-card]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardComponent implements OnChanges, OnDestroy {\n  @Input() color;\n  @Input() bandColor;\n  @Input() textColor;\n\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() data;\n  @Input() medianSize: number;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\n\n  element: HTMLElement;\n  value: string = '';\n  transform: string;\n  formattedLabel: string;\n  cardWidth: number;\n  cardHeight: number;\n  textWidth: number;\n  textFontSize: number = 12;\n  textTransform: string = '';\n  initialized: boolean = false;\n  animationReq: any;\n\n  bandHeight: number = 10;\n  transformBand: string;\n  textPadding = [10, 20, 5, 20];\n  labelFontSize = 15;\n\n  bandPath: string;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private zone: NgZone) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  update(): void {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n\n      this.label = this.label ? this.label : this.data.name;\n\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n\n      const value = hasValue ? valueFormatting(cardData) : '';\n\n      this.value = this.paddedValue(value);\n      this.setPadding();\n\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n\n      setTimeout(() => {\n        this.scaleText();\n        this.value = value;\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value: string) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n    return value;\n  }\n\n  startCount(): void {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({ value, finished }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText(): void {\n    this.zone.run(() => {\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n}\n","import * as d3_color from 'd3-color';\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nexport function hexToRgb(value: string): any {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nexport function invertColor(value: string): string {\n  const color = d3_color.rgb(value);\n  const { r, g, b, opacity } = color;\n  if (opacity === 0) {\n    return color.toString();\n  }\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n\n  return shadeRGBColor(color, depth);\n}\n\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nexport function shadeRGBColor({ r, g, b }, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n\n  return `rgb(${r}, ${g}, ${b})`;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { invertColor } from '../utils/color-utils';\n\nexport interface CardModel {\n  x;\n  y;\n  width: number;\n  height: number;\n  color: string;\n  label: string;\n  data;\n  tooltipText: string;\n}\n\n@Component({\n  selector: 'g[ngx-charts-card-series]',\n  template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardSeriesComponent implements OnChanges {\n  @Input() data: any[];\n  @Input() slots: any[];\n  @Input() dims;\n  @Input() colors;\n  @Input() innerPadding = 15;\n\n  @Input() cardColor;\n  @Input() bandColor;\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\n  @Input() textColor;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cards: CardModel[];\n  emptySlots: any[];\n  medianSize: number;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data\n        .map(d => {\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n          return hasValue\n            ? valueFormatting({\n                data: d.data,\n                label: d ? d.data.name : '',\n                value: d && d.data ? d.data.value : ''\n              }).length\n            : 0;\n        })\n        .sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards(): any[] {\n    const yPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card): string {\n    return card.label;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\n\n@Component({\n  selector: 'ngx-charts-number-card',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberCardComponent extends BaseChartComponent {\n  @Input() cardColor: string;\n  @Input() bandColor: string;\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\n  @Input() innerPadding = 15;\n  @Input() textColor: string;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() designatedTotal: number;\n\n  dims: ViewDimensions;\n  data: any[];\n  slots: any[];\n  colors: ColorHelper;\n  transform: string;\n  domain: any[];\n  margin = [10, 10, 10, 10];\n\n  backgroundCards: any[];\n\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({ value: null });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { CardComponent } from './card.component';\nimport { CardSeriesComponent } from './card-series.component';\nimport { NumberCardComponent } from './number-card.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n})\nexport class NumberCardModule {}\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { invertColor } from '../utils/color-utils';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell]',\n  template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [style.cursor]=\"'pointer'\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellComponent implements OnChanges {\n  @Input() data;\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() value;\n  @Input() valueType;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  gradientStops: any[];\n  gradientId: string;\n  gradientUrl: string;\n\n  element: HTMLElement;\n  transform: string;\n  formattedLabel: string;\n  formattedValue: string;\n  initialized: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update(): void {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n\n    this.animateToCurrentForm();\n  }\n\n  getTextColor(): string {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('opacity', 1)\n        .attr('x', this.x)\n        .attr('y', this.y)\n        .attr('width', this.width)\n        .attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: 0.3\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n}\n","import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueType]=\"c.valueType\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() dims;\n  @Input() colors;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cells: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.cells = this.getCells();\n  }\n\n  getCells(): any[] {\n    return this.data.children\n      .filter(d => {\n        return d.depth === 1;\n      })\n      .map((d, index) => {\n        const label = d.id;\n\n        return {\n          data: d.data,\n          x: d.x0,\n          y: d.y0,\n          width: d.x1 - d.x0,\n          height: d.y1 - d.y0,\n          fill: this.colors.getColor(label),\n          label,\n          value: d.value,\n          valueType: d.valueType\n        };\n      });\n  }\n\n  getTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { treemap, stratify } from 'd3-hierarchy';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-tree-map',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['./tree-map.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapComponent extends BaseChartComponent {\n  @Input() results;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n\n  @Output() select = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: any;\n  domain: any;\n  transform: any;\n  colors: ColorHelper;\n  treemap: any;\n  data: any;\n  margin = [10, 10, 10, 10];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.domain = this.getDomain();\n\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\n\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n\n    const root = stratify<any>()\n      .id(d => {\n        let label = d.name;\n\n        if (label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label.toLocaleString();\n        }\n        return label;\n      })\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n      .sum(d => d.value);\n\n    this.data = this.treemap(root);\n\n    this.setColors();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { TreeMapCellComponent } from './tree-map-cell.component';\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\nimport { TreeMapComponent } from './tree-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n})\nexport class TreeMapModule {}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-linear-gauge',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() value: number = 0;\n  @Input() units: string;\n  @Input() previousValue;\n  @Input() valueFormatting: any;\n\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\n\n  dims: ViewDimensions;\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n  margin: any[] = [10, 20, 10, 20];\n  transformLine: string;\n\n  valueResizeScale: number = 1;\n  unitsResizeScale: number = 1;\n  valueTextTransform: string = '';\n  valueTranslate: string = '';\n  unitsTextTransform: string = '';\n  unitsTranslate: string = '';\n  displayValue: string;\n  hasPreviousValue: boolean;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText('value');\n      this.scaleText('units');\n    });\n  }\n\n  update(): void {\n    super.update();\n\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.setColors();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n    setTimeout(() => this.scaleText('value'), 50);\n    setTimeout(() => this.scaleText('units'), 50);\n  }\n\n  getValueDomain(): any[] {\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element, repeat: boolean = true): void {\n    let el;\n    let resizeScale;\n    if (element === 'value') {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const { width, height } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === 'value') {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  onClick(): void {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\n  }\n}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-gauge',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() textValue: string;\n  @Input() units: string;\n  @Input() bigSegments: number = 10;\n  @Input() smallSegments: number = 5;\n  @Input() results: any[];\n  @Input() showAxis: boolean = true;\n  @Input() startAngle: number = -120;\n  @Input() angleSpan: number = 240;\n  @Input() activeEntries: any[] = [];\n  @Input() axisTickFormatting: any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() showText: boolean = true;\n\n  // Specify margins\n  @Input() margin: any[];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  @ViewChild('textEl') textEl: ElementRef;\n\n  dims: ViewDimensions;\n  domain: any[];\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n\n  outerRadius: number;\n  textRadius: number; // max available radius for the text\n  resizeScale: number = 1;\n  rotation: string = '';\n  textTransform: string = 'scale(1, 1)';\n  cornerRadius: number = 10;\n  arcs: any[];\n  displayValue: string;\n  legendOptions: any;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update(): void {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    }\n\n    // make the starting angle positive\n    if (this.startAngle < 0) {\n      this.startAngle = (this.startAngle % 360) + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n\n    this.arcs = this.getArcs();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs(): any[] {\n    const arcs = [];\n\n    const availableRadius = this.outerRadius * 0.7;\n\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n\n    let i = 0;\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n\n      const backgroundArc = {\n        endAngle: (this.angleSpan * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n\n      const valueArc = {\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat: boolean = true): void {\n    if (!this.showText) {\n      return;\n    }\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  getLegendOptions(): any {\n    return {\n      scaleType: 'ordinal',\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index, item): string {\n    return item.valueArc.data.name;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-arc]',\n  template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeArcComponent {\n  @Input() backgroundArc: any;\n  @Input() valueArc: any;\n  @Input() cornerRadius: any;\n  @Input() colors: ColorHelper;\n  @Input() isActive: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  tooltipText(arc): string {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { line } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-axis]',\n  template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeAxisComponent implements OnChanges {\n  @Input() bigSegments: any;\n  @Input() smallSegments: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() angleSpan: number;\n  @Input() startAngle: number;\n  @Input() radius: any;\n  @Input() valueScale: any;\n  @Input() tickFormatting: any;\n\n  ticks: any;\n  rotationAngle: number;\n  rotate: string = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.update();\n  }\n\n  update(): void {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks(): any {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = (angleDeg * Math.PI) / 180;\n\n      const textAnchor = this.getTextAnchor(angleDeg);\n\n      let skip = false;\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\n\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = 'middle';\n    if (angle > 45 && angle <= 135) {\n      textAnchor = 'start';\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = 'end';\n    }\n    return textAnchor;\n  }\n\n  getTickPath(startDistance, tickLength, angle): any {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n\n    const points = [\n      { x: x1, y: y1 },\n      { x: x2, y: y2 }\n    ];\n    const lineGenerator = line<any>()\n      .x(d => d.x)\n      .y(d => d.y);\n    return lineGenerator(points);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LinearGaugeComponent } from './linear-gauge.component';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeArcComponent } from './gauge-arc.component';\nimport { GaugeAxisComponent } from './gauge-axis.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n})\nexport class GaugeModule {}\n","// The export is needed here to generate a valid polyfills.metadata.json file\nexport function ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from './common/chart-common.module';\nimport { AreaChartModule } from './area-chart/area-chart.module';\nimport { BarChartModule } from './bar-chart/bar-chart.module';\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\nimport { HeatMapModule } from './heat-map/heat-map.module';\nimport { LineChartModule } from './line-chart/line-chart.module';\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\nimport { NumberCardModule } from './number-card/number-card.module';\nimport { PieChartModule } from './pie-chart/pie-chart.module';\nimport { TreeMapModule } from './tree-map/tree-map.module';\nimport { GaugeModule } from './gauge/gauge.module';\nimport { ngxChartsPolyfills } from './polyfills';\n\n@NgModule({\n  exports: [\n    ChartCommonModule,\n    AreaChartModule,\n    BarChartModule,\n    BubbleChartModule,\n    HeatMapModule,\n    LineChartModule,\n    PolarChartModule,\n    NumberCardModule,\n    PieChartModule,\n    TreeMapModule,\n    GaugeModule\n  ]\n})\nexport class NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n}\n","import { timeFormat } from 'd3-time-format';\n\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\n  return function (label: string): string {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(<any>label);\n    }\n\n    return label.toString();\n  };\n}\n","/*\n * Public API Surface of ngx-charts\n */\n\nexport * from './lib/ngx-charts.module';\n\nexport * from './lib/area-chart/area-chart.module';\nexport * from './lib/area-chart/area-chart.component';\nexport * from './lib/area-chart/area-chart-normalized.component';\nexport * from './lib/area-chart/area-chart-stacked.component';\nexport * from './lib/area-chart/area-series.component';\n\nexport * from './lib/bar-chart/bar-chart.module';\nexport * from './lib/bar-chart/bar.component';\nexport * from './lib/bar-chart/bar-horizontal.component';\nexport * from './lib/bar-chart/bar-horizontal-2d.component';\nexport * from './lib/bar-chart/bar-horizontal-normalized.component';\nexport * from './lib/bar-chart/bar-horizontal-stacked.component';\nexport * from './lib/bar-chart/series-horizontal.component';\nexport * from './lib/bar-chart/bar-label.component';\nexport * from './lib/bar-chart/bar-vertical.component';\nexport * from './lib/bar-chart/bar-vertical-2d.component';\nexport * from './lib/bar-chart/bar-vertical-normalized.component';\nexport * from './lib/bar-chart/bar-vertical-stacked.component';\nexport * from './lib/bar-chart/series-vertical.component';\n\nexport * from './lib/bubble-chart/bubble-chart.module';\nexport * from './lib/bubble-chart/bubble-chart.component';\nexport * from './lib/bubble-chart/bubble-chart.utils';\nexport * from './lib/bubble-chart/bubble-series.component';\n\nexport * from './lib/common/chart-common.module';\nexport * from './lib/common/legend/legend.component';\nexport * from './lib/common/legend/scale-legend.component';\nexport * from './lib/common/legend/legend-entry.component';\nexport * from './lib/common/legend/advanced-legend.component';\n\nexport * from './lib/common/tooltip/tooltip.module';\nexport * from './lib/common/tooltip/tooltip.service';\nexport * from './lib/common/tooltip/tooltip.component';\nexport * from './lib/common/tooltip/tooltip.directive';\nexport * from './lib/common/tooltip/style.type';\nexport * from './lib/common/tooltip/alignment.type';\nexport * from './lib/common/tooltip/show.type';\n\nexport * from './lib/common/axes/axes.module';\nexport * from './lib/common/axes/axis-label.component';\nexport * from './lib/common/axes/x-axis.component';\nexport * from './lib/common/axes/x-axis-ticks.component';\nexport * from './lib/common/axes/y-axis.component';\nexport * from './lib/common/axes/y-axis-ticks.component';\nexport * from './lib/common/axes/ticks.helper';\n\nexport * from './lib/common/count/count.directive';\nexport * from './lib/common/count/count.helper';\nexport * from './lib/common/timeline/timeline.component';\nexport * from './lib/common/color.helper';\nexport * from './lib/common/charts/chart.component';\n\nexport * from './lib/common/area.component';\nexport * from './lib/common/base-chart.component';\nexport * from './lib/common/circle.component';\nexport * from './lib/common/circle-series.component';\nexport * from './lib/common/grid-layout.helper';\nexport * from './lib/common/grid-panel.component';\nexport * from './lib/common/grid-panel-series.component';\nexport * from './lib/common/svg-linear-gradient.component';\nexport * from './lib/common/svg-radial-gradient.component';\nexport * from './lib/common/tooltip-area.component';\nexport * from './lib/common/tick-format.helper';\nexport * from './lib/common/trim-label.helper';\nexport * from './lib/common/view-dimensions.helper';\nexport * from './lib/common/label.helper';\nexport * from './lib/common/domain.helper';\n\nexport * from './lib/gauge/gauge.module';\nexport * from './lib/gauge/gauge-arc.component';\nexport * from './lib/gauge/gauge-axis.component';\nexport * from './lib/gauge/gauge.component';\nexport * from './lib/gauge/linear-gauge.component';\n\nexport * from './lib/heat-map/heat-map.module';\nexport * from './lib/heat-map/heat-map.component';\nexport * from './lib/heat-map/heat-map-cell.component';\nexport * from './lib/heat-map/heat-map-cell-series.component';\n\nexport * from './lib/line-chart/line-chart.module';\nexport * from './lib/line-chart/line-chart.component';\nexport * from './lib/line-chart/line.component';\nexport * from './lib/line-chart/line-series.component';\n\nexport * from './lib/models/chart-data.model';\n\nexport * from './lib/number-card/number-card.module';\nexport * from './lib/number-card/number-card.component';\nexport * from './lib/number-card/card.component';\nexport * from './lib/number-card/card-series.component';\n\nexport * from './lib/pie-chart/pie-chart.module';\nexport * from './lib/pie-chart/advanced-pie-chart.component';\nexport * from './lib/pie-chart/pie-chart.component';\nexport * from './lib/pie-chart/pie-arc.component';\nexport * from './lib/pie-chart/pie-grid.component';\nexport * from './lib/pie-chart/pie-grid-series.component';\nexport * from './lib/pie-chart/pie-series.component';\nexport * from './lib/pie-chart/pie-label.component';\n\nexport * from './lib/polar-chart/polar-chart.module';\nexport * from './lib/polar-chart/polar-chart.component';\nexport * from './lib/polar-chart/polar-series.component';\n\nexport * from './lib/tree-map/tree-map.module';\nexport * from './lib/tree-map/tree-map.component';\nexport * from './lib/tree-map/tree-map-cell.component';\nexport * from './lib/tree-map/tree-map-cell-series.component';\n\nexport * from './lib/utils/id';\nexport * from './lib/utils/color-sets';\nexport * from './lib/utils/sort';\nexport * from './lib/utils/throttle';\nexport * from './lib/utils/color-utils';\nexport * from './lib/utils/visibility-observer';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {InjectionRegisteryService as ɵa} from './lib/common/tooltip/injection-registery.service';\nexport {InjectionService as ɵb} from './lib/common/tooltip/injection.service';"]},"metadata":{},"sourceType":"module"}