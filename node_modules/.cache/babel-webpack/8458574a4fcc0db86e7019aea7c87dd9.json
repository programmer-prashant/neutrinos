{"ast":null,"code":"import _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, EventEmitter, Output, Injector, Component, Input, NgModule, APP_INITIALIZER } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterModule } from '@angular/router';\nimport { map, catchError, timeout, finalize, switchMap, filter, take } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { os, name, version } from 'platform';\nimport { Driver, NgForageConfig, NgForage, NgForageCache, InstanceFactory } from 'ngforage';\nimport { Subject, throwError, BehaviorSubject } from 'rxjs';\nimport firebase from 'firebase'; // @dynamic\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ngforage';\nimport * as ɵngcc2 from '@angular/common/http';\nimport * as ɵngcc3 from '@angular/router';\nimport * as ɵngcc4 from '@angular/common';\n\nvar _c0 = function _c0(a0, a1) {\n  return {\n    background: a0,\n    color: a1\n  };\n};\n\nvar _c1 = function _c1() {\n  return [\"snackbar-layout\", \"customClass\"];\n};\n\nvar _c2 = [\"*\"];\n\nvar _c3 = function _c3(a0) {\n  return {\n    color: a0\n  };\n};\n\nfunction SnackbarComponent_n_snack_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function SnackbarComponent_n_snack_1_div_4_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var snackbar_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n      return snackbar_r1.action.onClick();\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var snackbar_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(2, _c3, snackbar_r1.action.color || ctx_r2.accent));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", snackbar_r1.action.text, \" \");\n  }\n}\n\nfunction SnackbarComponent_n_snack_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"n-snack\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 3);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 4);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(4, SnackbarComponent_n_snack_1_div_4_Template, 2, 4, \"div\", 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var snackbar_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"background\", snackbar_r1.background || ctx_r0.background)(\"customClass\", snackbar_r1.customClass || ctx_r0.customClass)(\"color\", snackbar_r1.color || ctx_r0.color || ctx_r0.calcTextColor(snackbar_r1.background || ctx_r0.background));\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", snackbar_r1.msg, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", snackbar_r1.action.text);\n  }\n}\n\nvar _c4 = \".snack-action[_ngcontent-%COMP%]{color:#2196f3;cursor:pointer;font-weight:700}.container[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap}.child[_ngcontent-%COMP%]{flex:1 0;margin-right:.5em;width:60%}.snackbars.bottom-center[_ngcontent-%COMP%]{align-items:middle}.snackbars[_ngcontent-%COMP%]{display:flex;display:inline;font-family:Roboto;letter-spacing:1px;max-width:100%;position:fixed;word-wrap:break-word;z-index:99999}.snackbars.bottom-center[_ngcontent-%COMP%]{align-items:center;bottom:1px;left:50%;transform:translate(-50%)}.snack[_ngcontent-%COMP%]{border-radius:.3em;max-height:50vh;overflow:auto;padding:1em}\";\n\nvar NSystemService = /*#__PURE__*/function () {\n  function NSystemService() {\n    _classCallCheck(this, NSystemService);\n\n    this._deviceType = this.checkDevice();\n  }\n\n  _createClass(NSystemService, [{\n    key: \"checkDevice\",\n    value:\n    /**\n     * Seter and getter for the environments\n     */\n    // set environments(properties) {\n    //   console.log(properties);\n    //   NSystemService.envProperties = properties;\n    //   this.properties = this.getVal('properties');\n    // }\n    // get environments() {\n    //   return NSystemService.envProperties;\n    // }\n\n    /**\n     * Returna 'mobile' or 'browser' based on the platform\n     */\n    function checkDevice() {\n      if (window['device'] && (window['device']['platform'] != 'browser' || window['device']['platform'] != 'Browser')) {\n        return 'mobile';\n      } else if (window['device'] && (window['device']['platform'] == 'browser' || window['device']['platform'] == 'Browser')) {\n        return 'cordova_browser';\n      } else {\n        return 'browser';\n      }\n    }\n  }, {\n    key: \"deviceType\",\n    get: function get() {\n      return this._deviceType;\n    }\n  }, {\n    key: \"getVal\",\n    value: function getVal(key) {\n      if (!NSystemService.envProperties) {\n        NSystemService.envProperties = window['neutrinos']['environments'];\n        this.properties = NSystemService.envProperties.properties;\n      }\n\n      if (key == 'properties') {\n        if (NSystemService.envProperties) {\n          return NSystemService.envProperties.properties;\n        } else {\n          return undefined;\n        }\n      } else {\n        if (NSystemService.envProperties && NSystemService.envProperties.properties) {\n          return NSystemService.envProperties.properties[key];\n        } else {\n          return undefined;\n        }\n      }\n    }\n  }, {\n    key: \"isAndroid\",\n    value: function isAndroid() {\n      if (window['device'] && window['device']['platform'] == 'Android') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"isIOS\",\n    value: function isIOS() {\n      if (window['device'] && window['device']['platform'] == 'iOS') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"getAndroidVersion\",\n    value: function getAndroidVersion() {\n      if (this.isAndroid()) {\n        return window['device']['version'];\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: \"getAuthUrl\",\n    value: function getAuthUrl() {\n      // this.properties = this.getVal('properties');\n      return this.properties.baseUrl + this.properties.tenantName + '/auth/';\n    }\n  }, {\n    key: \"getTenantUrl\",\n    value: function getTenantUrl() {\n      return this.properties.baseUrl + this.properties.tenantName + '/';\n    }\n  }, {\n    key: \"getAppUrl\",\n    value: function getAppUrl() {\n      return this.properties.baseUrl + this.properties.tenantName + '/proxy/' + this.properties.appName + '/';\n    }\n  }, {\n    key: \"getProxyUrl\",\n    value: function getProxyUrl() {\n      return this.properties.baseUrl + this.properties.tenantName + '/proxy/';\n    }\n  }, {\n    key: \"getDataModelUrl\",\n    value: function getDataModelUrl() {\n      return this.properties.baseUrl + this.properties.tenantName + '/datamodel/' + this.properties.appDataSource + '/' + this.properties.appName + '/';\n    }\n  }, {\n    key: \"getFileIOUrl\",\n    value: function getFileIOUrl() {\n      return this.properties.baseUrl + this.properties.tenantName + '/fileio/' + this.properties.appDataSource + '/' + this.properties.appName + '/';\n    }\n  }, {\n    key: \"getPlatformDetails\",\n    value: function getPlatformDetails(type) {\n      var pDetails = {\n        platform: os.family,\n        platformVersion: os.version\n      };\n\n      if (type === 'browser') {\n        return Object.assign(pDetails, {\n          type: 'browser',\n          browser: name,\n          browserVersion: version\n        });\n      } else if (type === 'mobile' || type === 'cordova_browser') {\n        return Object.assign(pDetails, {\n          type: 'mobile',\n          model: window['device'].model,\n          manufacturer: window['device'].manufacturer,\n          isVirtual: window['device'].isVirtual\n        });\n      }\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!this.instance) {\n        this.instance = new NSystemService();\n      }\n\n      return this.instance;\n    }\n  }]);\n\n  return NSystemService;\n}();\n\nvar NSessionStorageService = /*@__PURE__*/function () {\n  var NSessionStorageService = /*#__PURE__*/function () {\n    function NSessionStorageService() {\n      _classCallCheck(this, NSessionStorageService);\n\n      NSessionStorageService.sessionStorageCache = sessionStorage;\n    }\n\n    _createClass(NSessionStorageService, [{\n      key: \"getSessionStorage\",\n      value: function getSessionStorage() {\n        return NSessionStorageService.sessionStorageCache;\n      }\n    }, {\n      key: \"setValue\",\n      value: function setValue(key, value) {\n        NSessionStorageService.sessionStorageCache[key] = value;\n        sessionStorage.setItem(key, value);\n      }\n    }, {\n      key: \"getValue\",\n      value: function getValue(key) {\n        if (!NSessionStorageService.sessionStorageCache[key]) {\n          return null;\n        }\n\n        try {\n          var obj = NSessionStorageService.sessionStorageCache[key];\n          return JSON.parse(obj);\n        } catch (error) {\n          return NSessionStorageService.sessionStorageCache[key];\n        }\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(key) {\n        if (NSessionStorageService.sessionStorageCache.hasOwnProperty(key)) {\n          delete NSessionStorageService.sessionStorageCache[key];\n          sessionStorage.removeItem(key);\n        }\n      }\n    }, {\n      key: \"clearSessionStorage\",\n      value: function clearSessionStorage() {\n        NSessionStorageService.sessionStorageCache = {};\n        sessionStorage.clear();\n      }\n    }]);\n\n    return NSessionStorageService;\n  }();\n\n  NSessionStorageService.ɵfac = function NSessionStorageService_Factory(t) {\n    return new (t || NSessionStorageService)();\n  };\n\n  NSessionStorageService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NSessionStorageService,\n    factory: NSessionStorageService.ɵfac\n  });\n  NSessionStorageService.sessionStorageCache = {};\n  return NSessionStorageService;\n}();\n\nvar NUtility = /*#__PURE__*/function () {\n  function NUtility() {\n    _classCallCheck(this, NUtility);\n  }\n\n  _createClass(NUtility, [{\n    key: \"generateUUID\",\n    value: function generateUUID() {\n      return this.__s4() + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + this.__s4() + this.__s4();\n    }\n  }, {\n    key: \"__s4\",\n    value: function __s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n  }]);\n\n  return NUtility;\n}();\n\nvar NLocalStorageService = /*@__PURE__*/function () {\n  var NLocalStorageService = /*#__PURE__*/function () {\n    function NLocalStorageService(ngfConfig, ngf, ngfCache) {\n      _classCallCheck(this, NLocalStorageService);\n\n      this.ngfConfig = ngfConfig;\n      this.ngf = ngf;\n      this.ngfCache = ngfCache;\n      this.storageCache = {};\n    }\n\n    _createClass(NLocalStorageService, [{\n      key: \"initStorage\",\n      value: function initStorage() {\n        var _this = this;\n\n        return new Promise(function (resolve, reject) {\n          if (window['cordova']) {\n            _this.initNgForage();\n          }\n\n          _this.ngf.iterate(function (value, key, iteratonNumber) {\n            _this.storageCache[key] = value;\n          }).then(function (result) {\n            _this.checkDeviceId();\n\n            return resolve('iteration is completed');\n          }).catch(function (error) {\n            return reject(error);\n          });\n        });\n      }\n    }, {\n      key: \"getStorage\",\n      value: function getStorage() {\n        return this.storageCache;\n      }\n    }, {\n      key: \"setValue\",\n      value: function setValue(key, value) {\n        if (window['cordova']) {\n          this.initNgForage();\n        }\n\n        this.storageCache[key] = value;\n        return this.ngf.setItem(key, value).then(function (result) {\n          return result;\n        }, function (error) {\n          console.log(error);\n        });\n      }\n    }, {\n      key: \"getValue\",\n      value: function getValue(key) {\n        if (!this.storageCache[key]) {\n          return null;\n        }\n\n        try {\n          var obj = this.storageCache[key];\n          return JSON.parse(obj);\n        } catch (error) {\n          return this.storageCache[key];\n        }\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(key) {\n        var _this2 = this;\n\n        delete this.storageCache[key];\n\n        if (window['cordova']) {\n          this.initNgForage();\n        }\n\n        this.ngf.removeItem(key).then(function (fulfilled) {\n          delete _this2.ngf[key];\n        }).catch(function (error) {\n          console.error('Could not remove', key);\n        });\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        this.storageCache = {};\n        this.ngf.clear();\n      }\n    }, {\n      key: \"pluginCheck\",\n      value: function pluginCheck() {\n        if (window['cordova'] && window['NativeStorage']) {\n          this.nativeStorageI = window['NativeStorage']; // return true;\n        } // this.initStorage();\n\n      }\n    }, {\n      key: \"getItemNs\",\n      value: function getItemNs(key) {\n        var _this3 = this;\n\n        return new Promise(function (resolve, reject) {\n          if (window['cordova'] && window['NativeStorage']) {\n            _this3.nativeStorageI.getItem(key, function (result) {\n              resolve(result);\n            }, function (error) {\n              reject(error);\n            });\n          }\n        });\n      }\n    }, {\n      key: \"setItemNs\",\n      value: function setItemNs(key, value) {\n        var _this4 = this;\n\n        return new Promise(function (resolve, reject) {\n          if (window['cordova'] && window['NativeStorage']) {\n            _this4.nativeStorageI.setItem(key, value, function (result) {\n              resolve(result);\n            }, function (error) {\n              reject(error);\n            });\n          }\n        });\n      }\n    }, {\n      key: \"removeItemNs\",\n      value: function removeItemNs(key) {\n        var _this5 = this;\n\n        return new Promise(function (resolve, reject) {\n          if (window['cordova'] && window['NativeStorage']) {\n            _this5.nativeStorageI.remove(key, function (result) {\n              resolve(result);\n            }, function (error) {\n              reject(error);\n            });\n          }\n        });\n      }\n    }, {\n      key: \"clearNs\",\n      value: function clearNs() {\n        var _this6 = this;\n\n        return new Promise(function (resolve, reject) {\n          if (window['cordova'] && window['NativeStorage']) {\n            _this6.nativeStorageI.clear(function (result) {\n              resolve(result);\n            }, function (error) {\n              reject(error);\n            });\n          }\n        });\n      }\n    }, {\n      key: \"initNgForage\",\n      value: function initNgForage() {\n        var driverType = window['neutrinos']['environments']['properties']['NGFORAGE_MOBILE_DRIVER'] ? window['neutrinos']['environments']['properties']['NGFORAGE_MOBILE_DRIVER'] : \"INDEXED_DB\";\n        this.ngfConfig.configure({\n          name: 'MyApp',\n          driver: [Driver[driverType]]\n        });\n      }\n    }, {\n      key: \"promiseReflect\",\n      value: function promiseReflect(promise) {\n        return promise.then(function (resolved) {\n          return {\n            v: resolved,\n            status: 'resolved'\n          };\n        }, function (error) {\n          return {\n            e: error,\n            status: 'rejected'\n          };\n        });\n      }\n    }, {\n      key: \"clearLocalStorage\",\n      value: function clearLocalStorage() {\n        this.remove('userObj');\n        this.remove('accessToken');\n        this.remove('refreshToken');\n        this.remove('registrationId');\n      }\n      /**\n       * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService\n      */\n\n    }, {\n      key: \"checkDeviceId\",\n      value: function checkDeviceId() {\n        var _this7 = this;\n\n        if (NSystemService.getInstance().checkDevice() === 'browser') {\n          this._deviceUUID = this.getValue('uuid');\n\n          if (!this._deviceUUID) {\n            this._deviceUUID = new NUtility().generateUUID();\n            this.setValue('uuid', this._deviceUUID);\n          }\n        } else {\n          window['plugins'].uniqueDeviceID.get(function (uuid) {\n            _this7._deviceUUID = uuid;\n\n            _this7.setValue('uuid', _this7._deviceUUID);\n          });\n        }\n\n        return this._deviceUUID;\n      }\n    }, {\n      key: \"deviceUUID\",\n      get: function get() {\n        return this._deviceUUID;\n      }\n    }]);\n\n    return NLocalStorageService;\n  }();\n\n  NLocalStorageService.ɵfac = function NLocalStorageService_Factory(t) {\n    return new (t || NLocalStorageService)(ɵngcc0.ɵɵinject(ɵngcc1.NgForageConfig), ɵngcc0.ɵɵinject(ɵngcc1.NgForage), ɵngcc0.ɵɵinject(ɵngcc1.NgForageCache));\n  };\n\n  NLocalStorageService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NLocalStorageService,\n    factory: NLocalStorageService.ɵfac\n  });\n  return NLocalStorageService;\n}();\n\nvar NTokenService = /*@__PURE__*/function () {\n  var NTokenService = /*#__PURE__*/function () {\n    // nLocalStorageService: NLocalStorageService;\n    function NTokenService(nLocalStorageService) {\n      _classCallCheck(this, NTokenService);\n\n      this.nLocalStorageService = nLocalStorageService;\n      this.nSessionStorage = new NSessionStorageService(); // this.nLocalStorageService = new NLocalStorageService();\n    }\n\n    _createClass(NTokenService, [{\n      key: \"updateTokens\",\n      value: function updateTokens(tokensObj, isRemember) {\n        var userObj = this.decodeToken(tokensObj['accessToken']);\n        this.nSessionStorage.setValue('accessToken', tokensObj['accessToken']);\n        this.nSessionStorage.setValue('refreshToken', tokensObj['refreshToken']);\n        this.nSessionStorage.setValue('userObj', JSON.stringify(userObj));\n\n        if (isRemember || this.nLocalStorageService.getValue('accessToken')) {\n          this.nLocalStorageService.setValue('accessToken', tokensObj['accessToken']);\n          this.nLocalStorageService.setValue('refreshToken', tokensObj['refreshToken']);\n          this.nLocalStorageService.setValue('userObj', JSON.stringify(userObj));\n        }\n      }\n    }, {\n      key: \"updateSessionStorage\",\n      value: function updateSessionStorage() {\n        this.updateTokens(this.nLocalStorageService.getStorage(), true);\n      }\n    }, {\n      key: \"urlBase64Decode\",\n      value: function urlBase64Decode(str) {\n        var output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n        switch (output.length % 4) {\n          case 0:\n            {\n              break;\n            }\n\n          case 2:\n            {\n              output += '==';\n              break;\n            }\n\n          case 3:\n            {\n              output += '=';\n              break;\n            }\n\n          default:\n            {\n              throw 'Illegal base64url string!';\n            }\n        }\n\n        return this.b64DecodeUnicode(output);\n      } // credits for decoder goes to https://github.com/atk\n\n    }, {\n      key: \"b64decode\",\n      value: function b64decode(str) {\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        var output = '';\n        str = String(str).replace(/=+$/, '');\n\n        if (str.length % 4 == 1) {\n          throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n\n        for ( // initialize result and counters\n        var bc = 0, bs, buffer, idx = 0; // get next character\n        buffer = str.charAt(idx++); // character found in table? initialize bit storage and add its ascii value;\n        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n          // try to find character in table (0-63, not found => -1)\n          buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n      } // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n\n    }, {\n      key: \"b64DecodeUnicode\",\n      value: function b64DecodeUnicode(str) {\n        return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n      }\n    }, {\n      key: \"decodeToken\",\n      value: function decodeToken(token) {\n        var parts = token.split('.');\n\n        if (parts.length !== 3) {\n          throw new Error('JWT must have 3 parts');\n        }\n\n        var decoded = this.urlBase64Decode(parts[1]);\n\n        if (!decoded) {\n          throw new Error('Cannot decode the token');\n        }\n\n        return JSON.parse(decoded);\n      }\n    }, {\n      key: \"getTokenExpirationDate\",\n      value: function getTokenExpirationDate(token) {\n        var decoded;\n        decoded = this.decodeToken(token);\n\n        if (!decoded.hasOwnProperty('exp')) {\n          return null;\n        }\n\n        var date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n\n        date.setUTCSeconds(decoded.exp);\n        return date;\n      }\n    }, {\n      key: \"isTokenExpired\",\n      value: function isTokenExpired(token, offsetSeconds) {\n        var date = this.getTokenExpirationDate(token);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (date == null) {\n          return false;\n        } // Token expired?\n\n\n        return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\n      }\n    }]);\n\n    return NTokenService;\n  }();\n\n  NTokenService.ɵfac = function NTokenService_Factory(t) {\n    return new (t || NTokenService)(ɵngcc0.ɵɵinject(NLocalStorageService));\n  };\n\n  NTokenService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NTokenService,\n    factory: NTokenService.ɵfac\n  });\n  return NTokenService;\n}();\n\nvar ServiceName = \"PubSub Service\";\n\nvar NPubSubService = /*@__PURE__*/function () {\n  var NPubSubService = /*#__PURE__*/function () {\n    function NPubSubService() {\n      _classCallCheck(this, NPubSubService);\n\n      this.events = {};\n    }\n\n    _createClass(NPubSubService, [{\n      key: \"$sub\",\n      value: function $sub(event, callback, error, complete) {\n        if (!event) {\n          throw new Error(\"[\".concat(ServiceName, \"] => Subscription method must get event name.\"));\n        }\n\n        if (this.events[event] === undefined) {\n          this.events[event] = new Subject();\n        }\n\n        if (typeof callback !== 'function') {\n          return this.events[event].asObservable();\n        } else {\n          return this.events[event].asObservable().subscribe(callback, error, complete);\n        }\n      }\n    }, {\n      key: \"$pub\",\n      value: function $pub(event, eventObject) {\n        if (!event) {\n          throw new Error(\"[\".concat(ServiceName, \"] => Publish method must get event name.\"));\n        } else if (!this.events[event]) {\n          return;\n        }\n\n        this.events[event].next(eventObject);\n      }\n    }]);\n\n    return NPubSubService;\n  }();\n\n  NPubSubService.ɵfac = function NPubSubService_Factory(t) {\n    return new (t || NPubSubService)();\n  };\n\n  NPubSubService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NPubSubService,\n    factory: NPubSubService.ɵfac\n  });\n  return NPubSubService;\n}();\n\nvar NLogoutService = /*@__PURE__*/function () {\n  var NLogoutService = /*#__PURE__*/function () {\n    // nLocalStorageService = new NLocalStorageService();\n    function NLogoutService(nLocalStorageService) {\n      _classCallCheck(this, NLogoutService);\n\n      this.nLocalStorageService = nLocalStorageService;\n      this.nSessionStorage = new NSessionStorageService();\n    }\n\n    _createClass(NLogoutService, [{\n      key: \"logout\",\n      value: function logout() {\n        this.nSessionStorage.clearSessionStorage();\n        this.nLocalStorageService.clearLocalStorage();\n        return true;\n      }\n    }]);\n\n    return NLogoutService;\n  }();\n\n  NLogoutService.ɵfac = function NLogoutService_Factory(t) {\n    return new (t || NLogoutService)(ɵngcc0.ɵɵinject(NLocalStorageService));\n  };\n\n  NLogoutService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NLogoutService,\n    factory: NLogoutService.ɵfac\n  });\n  return NLogoutService;\n}();\n\nvar NHTTPLoaderService = /*@__PURE__*/function () {\n  var NHTTPLoaderService = /*#__PURE__*/function () {\n    function NHTTPLoaderService(nLogoutService, nPubSubService) {\n      _classCallCheck(this, NHTTPLoaderService);\n\n      this.nLogoutService = nLogoutService;\n      this.nPubSubService = nPubSubService;\n      this.pendingRequests = 0;\n      this.showLoading = false;\n      this._isHTTPRequestInProgress = new Subject();\n      this._isHTTPRequestInProgress$ = this._isHTTPRequestInProgress.asObservable();\n    }\n\n    _createClass(NHTTPLoaderService, [{\n      key: \"isHTTPRequestInProgress\",\n      value: function isHTTPRequestInProgress(bool) {\n        if (bool) {\n          this.pendingRequests++;\n\n          if (!this.showLoading) {\n            this._isHTTPRequestInProgress.next(bool);\n          }\n\n          this.showLoading = true;\n        } else {\n          this.pendingRequests--;\n\n          if (this.pendingRequests <= 0) {\n            if (this.showLoading) {\n              this._isHTTPRequestInProgress.next(bool);\n            }\n\n            this.showLoading = false;\n          }\n        }\n      }\n    }, {\n      key: \"alertError\",\n      value: function alertError(error) {\n        if (error.status < 200 || error.status > 500) {\n          if (error.status === 0) {\n            this.nPubSubService.$pub('openSnackBar', 'Connectivity issue');\n          } else {\n            this.nPubSubService.$pub('openSnackBar', 'Response failure');\n          }\n        } else if (error.status === 401) {\n          this.nLogoutService.logout();\n\n          if (error.error) {\n            this.nPubSubService.$pub('openSnackBar', error.error);\n          } else {\n            this.nPubSubService.$pub('openSnackBar', error);\n          }\n        } else if (error.error) {\n          if (error.error instanceof Object) {\n            this.nPubSubService.$pub('openSnackBar', error.error.message);\n          } else {\n            this.nPubSubService.$pub('openSnackBar', error.error);\n          }\n        } else {\n          this.nPubSubService.$pub('openSnackBar', 'Response failure');\n        }\n      }\n    }]);\n\n    return NHTTPLoaderService;\n  }();\n\n  NHTTPLoaderService.ɵfac = function NHTTPLoaderService_Factory(t) {\n    return new (t || NHTTPLoaderService)(ɵngcc0.ɵɵinject(NLogoutService), ɵngcc0.ɵɵinject(NPubSubService));\n  };\n\n  NHTTPLoaderService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NHTTPLoaderService,\n    factory: NHTTPLoaderService.ɵfac\n  });\n  return NHTTPLoaderService;\n}();\n\nvar NNotificationService = /*@__PURE__*/function () {\n  var NNotificationService = /*#__PURE__*/function () {\n    function NNotificationService(localStorageService, pubSubService, http, bHttpLoader) {\n      var _this8 = this;\n\n      _classCallCheck(this, NNotificationService);\n\n      this.localStorageService = localStorageService;\n      this.pubSubService = pubSubService;\n      this.http = http;\n      this.bHttpLoader = bHttpLoader; // private static instance: NNotificationService;\n\n      this.systemService = NSystemService.getInstance();\n      this.possiblePushTypes = ['APNS', 'FCM'];\n      this.firebaseSenderId = this.systemService.getVal('firebaseSenderId');\n      this.isNotificationEnabled = this.systemService.getVal('isNotificationEnabled');\n      this.appName = this.systemService.getVal('appName');\n      this.deviceType = this.systemService.deviceType;\n      this.sessionStorage = new NSessionStorageService();\n      this.loginSubscribe = this.pubSubService.$sub('firebaseRegister', function () {\n        _this8.enableNotification();\n      });\n    }\n\n    _createClass(NNotificationService, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {}\n    }, {\n      key: \"enableNotification\",\n      value: function enableNotification() {\n        var _this9 = this;\n\n        var pushType = this.getPushType(this.systemService.getVal('pushType'));\n        document.addEventListener('deviceready', function (event) {\n          if (_this9.isNotificationEnabled) {\n            if (_this9.deviceType && _this9.deviceType != 'browser') {\n              _this9.deviceType = _this9.systemService.deviceType;\n\n              _this9.checkPermission(pushType).then(function (res) {\n                if (res) {\n                  _this9.initializeNotifications(pushType);\n                }\n              });\n            }\n          }\n        });\n\n        if (this.isNotificationEnabled && pushType !== 'APNS') {\n          if (this.deviceType && this.deviceType == 'browser' && window['Notification']) {\n            this.initialiseWebPush();\n          }\n        }\n      }\n    }, {\n      key: \"initialiseWebPush\",\n      value: function initialiseWebPush() {\n        var __this = this;\n\n        var messaging = firebase.messaging();\n        Notification.requestPermission().then(function () {\n          return messaging.getToken();\n        }).then(function (token) {\n          if (token) {\n            __this.sendRegDetails(token);\n          }\n        }).catch(function (err) {\n          __this.bHttpLoader.alertError(err);\n        });\n        messaging.onMessage(function (payload) {\n          if (payload['notification']) {\n            var notificationObj = payload['notification'];\n            var options = {\n              body: notificationObj.body,\n              icon: notificationObj.icon\n            }; // creating a native browser message\n\n            var notificationUI = new Notification(notificationObj.title, options);\n\n            notificationUI.onclick = function () {\n              window.focus(); // window is focused when the user clicks the notification using this\n            };\n          }\n        });\n      }\n    }, {\n      key: \"checkPermission\",\n      value: function checkPermission(pushType) {\n        var _this10 = this;\n\n        // Android & iOS only\n        // Checks whether the push notification permission has been granted.\n        return new Promise(function (resolve) {\n          pushType = _this10.getPushType(pushType);\n\n          if ((_this10.deviceType === 'Android' || _this10.deviceType === 'iOS') && pushType === 'FCM') {\n            PushNotification.hasPermission(function (data) {\n              return resolve(data.isEnabled);\n            });\n          } else if (_this10.deviceType === 'iOS' && pushType === 'APNS') {\n            APNSPushNotification.hasPermission(function (data) {\n              return resolve(data.isEnabled);\n            });\n          } else {\n            return resolve(true);\n          }\n        });\n      }\n    }, {\n      key: \"initializeNotifications\",\n      value: function initializeNotifications(pushType) {\n        var _this11 = this;\n\n        //pushType = pushType ? pushType : 'FCM';\n        pushType = this.getPushType(pushType);\n        var push; // Default if for FCM\n\n        if (pushType === 'FCM') {\n          push = window['PushNotification'].init({\n            android: {\n              senderID: this.firebaseSenderId\n            },\n            ios: {\n              alert: \"true\",\n              badge: \"true\",\n              sound: \"true\",\n              senderID: this.firebaseSenderId\n            }\n          });\n        } // New APNS plugin init\n        else if (pushType === 'APNS') {\n            push = window['APNSPushNotification'].init({\n              ios: {\n                alert: \"true\",\n                badge: \"true\",\n                sound: \"true\"\n              }\n            });\n          }\n\n        push.on('registration', function (data) {\n          // data.registrationId\n          _this11.sendRegDetails(data.registrationId);\n        }); // ToDo Christy get call back function from app user to change what happens once a notification arrives\n\n        push.on('notification', function (data) {\n          window['cordova'].plugins.notification.local.schedule({\n            title: data.title,\n            text: data.message,\n            sound: data.sound,\n            at: new Date().getTime()\n          });\n        });\n        push.on('error', function (e) {\n          // e.message\n          console.error(e);\n        });\n      }\n    }, {\n      key: \"sendRegDetails\",\n      value: function sendRegDetails(registrationId) {\n        this.localStorageService.setValue('registrationId', registrationId);\n        var url = this.systemService.getTenantUrl() + 'notification/' + this.systemService.getVal('appName') + '/register';\n        var pushType = this.getPushType(this.systemService.getVal('pushType'));\n        this.http.post(url, {\n          'key': this.sessionStorage.getValue('userObj')['userKey'],\n          'uuid': this.localStorageService.getValue('uuid'),\n          'fbregid': registrationId,\n          'pushType': pushType\n        }).subscribe(function (result) {// this.pubSubService.$pub('FBRegComp');\n        }, function (error) {\n          console.log(error);\n        });\n      }\n    }, {\n      key: \"getPushType\",\n      value: function getPushType(currPushType) {\n        var isValidPush = typeof currPushType !== 'undefined' && this.possiblePushTypes.includes(currPushType.toUpperCase());\n        var pushType = isValidPush ? currPushType.toUpperCase() : 'FCM';\n        return pushType;\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.loginSubscribe.unSubscribe();\n      }\n    }]);\n\n    return NNotificationService;\n  }();\n\n  NNotificationService.ɵfac = function NNotificationService_Factory(t) {\n    return new (t || NNotificationService)(ɵngcc0.ɵɵinject(NLocalStorageService), ɵngcc0.ɵɵinject(NPubSubService), ɵngcc0.ɵɵinject(ɵngcc2.HttpClient), ɵngcc0.ɵɵinject(NHTTPLoaderService));\n  };\n\n  NNotificationService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NNotificationService,\n    factory: NNotificationService.ɵfac\n  });\n  return NNotificationService;\n}();\n\nvar NLoginService = /*@__PURE__*/function () {\n  var NLoginService = /*#__PURE__*/function () {\n    function NLoginService(http, pubSubService, notificationService, nLocalStorageService, nTokenService) {\n      _classCallCheck(this, NLoginService);\n\n      this.http = http;\n      this.pubSubService = pubSubService;\n      this.notificationService = notificationService;\n      this.nLocalStorageService = nLocalStorageService;\n      this.nTokenService = nTokenService;\n      this.loginCompleted = new EventEmitter();\n      this.systemService = NSystemService.getInstance(); // this.nTokenService = new NTokenService();\n\n      this.nSessionStorage = new NSessionStorageService(); // this.nLocalStorageService = new NLocalStorageService();\n    }\n\n    _createClass(NLoginService, [{\n      key: \"login\",\n      value: function login(userName, password, isRemember) {\n        var _this12 = this;\n\n        this.appProperties = this.systemService.getVal('properties');\n        this.loginUrl = this.systemService.getAuthUrl() + this.appProperties.appName;\n        this.uuid = this.nLocalStorageService.getValue('uuid');\n\n        if (!this.uuid) {\n          this.uuid = this.nLocalStorageService.checkDeviceId();\n        }\n\n        this.details = {\n          username: userName,\n          password: password\n        };\n        this.details.platformDetails = this.systemService.getPlatformDetails(this.systemService.checkDevice());\n        this.details.platformDetails['uuid'] = this.uuid;\n        return this.http.post(this.loginUrl, JSON.stringify(this.details)).pipe(map(function (result) {\n          var tokensObj = result;\n\n          if (tokensObj) {\n            _this12.nTokenService.updateTokens(tokensObj, isRemember);\n          } // TODO chris array of supported pushes currently only support APNS and Firebase\n\n\n          if (_this12.systemService.getVal('firebaseSenderId') != 'FIREBASE_SENDER_ID' && _this12.systemService.getVal('firebaseAuthKey') != 'FIREBASE_AUTH_KEY' || _this12.systemService.getVal('pushType') === 'APNS' && _this12.systemService.isIOS()) {\n            _this12.pubSubService.$pub('firebaseRegister');\n          }\n\n          _this12.pubSubService.$pub('loginComplete');\n\n          return result;\n        }, function (error) {\n          return error;\n        }));\n      }\n    }, {\n      key: \"isLoggedIn\",\n      value: function isLoggedIn() {\n        var _this13 = this;\n\n        return this.nLocalStorageService.initStorage().then(function (result) {\n          if (_this13.nSessionStorage.getValue('accessToken') && _this13.nSessionStorage.getValue('refreshToken') && _this13.nSessionStorage.getValue('accessToken') != 'null' && _this13.nSessionStorage.getValue('refreshToken') != 'null') {\n            return true;\n          }\n\n          return false;\n        }).catch(function (error) {\n          return false;\n        });\n      }\n    }]);\n\n    return NLoginService;\n  }();\n\n  NLoginService.ɵfac = function NLoginService_Factory(t) {\n    return new (t || NLoginService)(ɵngcc0.ɵɵinject(ɵngcc2.HttpClient), ɵngcc0.ɵɵinject(NPubSubService), ɵngcc0.ɵɵinject(NNotificationService), ɵngcc0.ɵɵinject(NLocalStorageService), ɵngcc0.ɵɵinject(NTokenService));\n  };\n\n  NLoginService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NLoginService,\n    factory: NLoginService.ɵfac\n  });\n  return NLoginService;\n}();\n\nvar NAuthGuardService = /*@__PURE__*/function () {\n  var NAuthGuardService = /*#__PURE__*/function () {\n    function NAuthGuardService(nLoginService, router) {\n      _classCallCheck(this, NAuthGuardService);\n\n      this.nLoginService = nLoginService;\n      this.router = router;\n    }\n\n    _createClass(NAuthGuardService, [{\n      key: \"canActivate\",\n      value: function canActivate() {\n        var _this14 = this;\n\n        return this.nLoginService.isLoggedIn().then(function (result) {\n          if (result) {\n            return true;\n          } else {\n            _this14.router.navigate(['unauthorized']);\n\n            return false;\n          }\n        });\n      }\n    }]);\n\n    return NAuthGuardService;\n  }();\n\n  NAuthGuardService.ɵfac = function NAuthGuardService_Factory(t) {\n    return new (t || NAuthGuardService)(ɵngcc0.ɵɵinject(NLoginService), ɵngcc0.ɵɵinject(ɵngcc3.Router));\n  };\n\n  NAuthGuardService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NAuthGuardService,\n    factory: NAuthGuardService.ɵfac\n  });\n  return NAuthGuardService;\n}();\n\nvar NDataModelService = /*@__PURE__*/function () {\n  var NDataModelService = /*#__PURE__*/function () {\n    function NDataModelService(http) {\n      _classCallCheck(this, NDataModelService);\n\n      this.http = http;\n      this.invalidDataModelName = 'Invalid data model name.';\n      this.invalidDataModelId = 'Invalid data model id.';\n      this.invalidDataModelObj = 'Invalid data model object.';\n      this.systemService = NSystemService.getInstance();\n    } // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n\n    /**\n     *\n     * @param dataModelName\n     * @param filter The filter query parameter allows to specify conditions on the documents to return.\n     * The filter qparam value is any mongodb query… Defaults to {}\n     * @param keys Projections to be applited on mongo db.\n     * @param sort sort to be applied on the query results. Defaults to {}\n     * @param pagenumber Page number for paginated queries. Defaults to 1\n     * @param pagesize Size of each page to be returned. Defaults to 100.\n     */\n\n\n    _createClass(NDataModelService, [{\n      key: \"get\",\n      value: function get(dataModelName, filter, keys, sort, pagenumber, pagesize) {\n        if (dataModelName) {\n          // let modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n          var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n\n          if (this.checkIfValid(filter) || this.checkIfValid(keys) || this.checkIfValid(sort) || this.checkIfValid(pagenumber) || this.checkIfValid(pagesize)) {\n            var queryString = \"\".concat(this.toQueryString({\n              'filter': filter,\n              'keys': keys,\n              'sort': sort,\n              'pagenumber': pagenumber,\n              'pagesize': pagesize\n            }));\n\n            if (queryString === '') {\n              queryString += '?filter={}';\n            } else {\n              queryString = '?'.concat(queryString);\n            }\n\n            modelNameUrl += queryString;\n          }\n\n          return this.http.get(modelNameUrl).pipe(map(function (value, index) {\n            return value;\n          }), catchError(function (error) {\n            return throwError(error);\n          }));\n        } else {\n          return throwError(new Error(\"Could not get \".concat(dataModelName, \". \").concat(this.invalidDataModelName)));\n        }\n      } // PUT /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n\n      /**\n       *\n       * @param dataModelName Data model name of the app\n       * @param dataModelObj Data Model object which is to be inserted\n       */\n\n    }, {\n      key: \"put\",\n      value: function put(dataModelName, dataModelObj) {\n        if (dataModelName) {\n          if (dataModelObj) {\n            // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n            var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n            return this.http.put(modelNameUrl, dataModelObj).pipe(map(function (value, index) {\n              return value;\n            }), catchError(function (error) {\n              return throwError(error);\n            }));\n          } else {\n            return throwError(new Error(\"Could not put \".concat(dataModelObj, \" in \").concat(dataModelName, \". \").concat(this.invalidDataModelObj)));\n          }\n        } else {\n          return throwError(new Error(\"Could not put \".concat(dataModelObj, \" in \").concat(dataModelName, \". \").concat(this.invalidDataModelName)));\n        }\n      } // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n\n      /**\n       *\n       * @param dataModelName\n       * @param filter\n       */\n\n    }, {\n      key: \"delete\",\n      value: function _delete(dataModelName, filter) {\n        var modelNameUrl;\n\n        if (dataModelName) {\n          // modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n          modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n\n          if (this.checkIfValid(filter) && filter != '') {\n            modelNameUrl += \"?filter=\".concat(filter);\n          } else {\n            modelNameUrl += '?filter={}';\n          }\n\n          return this.http.delete(modelNameUrl).pipe(map(function (value, index) {\n            return value;\n          }), catchError(function (error) {\n            return throwError(error);\n          }));\n        } else {\n          return throwError(new Error(\"Could not delete \".concat(dataModelName, \". \").concat(this.invalidDataModelName)));\n        }\n      } // PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n\n      /**\n       *\n       * @param dataModelName Data model name which is to be updated\n       * @param dataModelObj New data model object\n       */\n\n    }, {\n      key: \"update\",\n      value: function update(dataModelName, updateObject) {\n        if (dataModelName && updateObject) {\n          // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n          var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n          return this.http.patch(modelNameUrl, updateObject).pipe(map(function (value, index) {\n            return value;\n          }), catchError(function (error) {\n            return throwError(error);\n          }));\n        } else {\n          return throwError(new Error(\"Could not update \".concat(dataModelName, \". \").concat(this.invalidDataModelName)));\n        }\n      } // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}\n\n      /**\n       *\n       * @param dataModelName Data model name which is to be updated\n       * @param dataModelId Data model id which is to be updated\n       */\n\n    }, {\n      key: \"getById\",\n      value: function getById(dataModelName, dataModelId) {\n        if (dataModelName) {\n          if (dataModelId) {\n            // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;\n            var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + \"/\" + dataModelId;\n            return this.http.get(modelNameUrl).pipe(map(function (value, index) {\n              return value;\n            }), catchError(function (error) {\n              return throwError(error);\n            }));\n          } else {\n            throwError(new Error(\"Could not get \".concat(dataModelName, \" by id \").concat(dataModelId, \". \").concat(this.invalidDataModelId)));\n          }\n        } else {\n          throwError(new Error(\"Could not get \".concat(dataModelName, \" by id \").concat(dataModelId, \". \").concat(this.invalidDataModelName)));\n        }\n      } // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}\n\n      /**\n       *\n       * @param dataModelName Data model name which is to be deleted\n       * @param dataModelId Data model id which is to be deleted\n       */\n\n    }, {\n      key: \"deleteById\",\n      value: function deleteById(dataModelName, dataModelId) {\n        if (dataModelName) {\n          if (dataModelId) {\n            // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;\n            var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + \"/\" + dataModelId;\n            return this.http.delete(modelNameUrl).pipe(map(function (value, index) {\n              return value;\n            }), catchError(function (error) {\n              return throwError(error);\n            }));\n          } else {\n            throwError(new Error(\"Could not get \".concat(dataModelName, \" by id \").concat(dataModelId, \". \").concat(this.invalidDataModelId)));\n          }\n        } else {\n          return throwError(new Error(\"Could not delete \".concat(dataModelName, \" by id \").concat(dataModelId, \". \").concat(this.invalidDataModelName)));\n        }\n      } //PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}\n\n      /**\n       *\n       * @param dataModelName Data model name which is to be update\n       * @param dataModelId Data model id which is to be updated\n       * @param dataModelObj Data Model object which is to be inserted\n       */\n\n    }, {\n      key: \"updateById\",\n      value: function updateById(dataModelName, dataModelId, dataModelObj) {\n        if (dataModelName) {\n          if (dataModelId) {\n            // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;\n            var modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + \"/\" + dataModelId;\n            var dmObj = Object.assign({}, dataModelObj);\n            delete dmObj['_id'];\n            return this.http.patch(modelNameUrl, dmObj).pipe(map(function (value, index) {\n              return value;\n            }), catchError(function (error) {\n              return throwError(error);\n            }));\n          } else {\n            throwError(new Error(\"Could not get \".concat(dataModelName, \" by id \").concat(dataModelId, \". \").concat(this.invalidDataModelId)));\n          }\n        } else {\n          return throwError(new Error(\"Could not delete \".concat(dataModelName, \" by id \").concat(dataModelId, \". \").concat(this.invalidDataModelName)));\n        }\n      }\n    }, {\n      key: \"toQueryString\",\n      value: function toQueryString(obj) {\n        var parts = [];\n\n        for (var i in obj) {\n          if (obj.hasOwnProperty(i) && this.checkIfValid(obj[i])) {\n            parts.push(i + '=' + JSON.stringify(obj[i]));\n          }\n        }\n\n        return parts.join('&');\n      }\n    }, {\n      key: \"checkIfValid\",\n      value: function checkIfValid(value) {\n        if (value === undefined || value == null) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n    }, {\n      key: \"getDataSourceURL\",\n      value: function getDataSourceURL(dataModelName) {\n        if (!this.dmDs) {\n          this.dmDs = window['neutrinos']['dataSource'];\n        }\n\n        var dsDm = this.dmDs[dataModelName];\n        var properties = this.systemService.properties;\n\n        if (dsDm) {\n          return properties.baseUrl + properties.tenantName + '/datamodel/' + dsDm + '/' + properties.appName + '/';\n        } else {\n          return this.systemService.getDataModelUrl();\n        }\n      }\n    }]);\n\n    return NDataModelService;\n  }();\n\n  NDataModelService.ɵfac = function NDataModelService_Factory(t) {\n    return new (t || NDataModelService)(ɵngcc0.ɵɵinject(ɵngcc2.HttpClient));\n  };\n\n  NDataModelService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NDataModelService,\n    factory: NDataModelService.ɵfac\n  });\n  return NDataModelService;\n}();\n\nvar NHttpService = /*@__PURE__*/function () {\n  var NHttpService = /*#__PURE__*/function () {\n    function NHttpService(nHTTPLoader, inj, nLocalStorageService, nTokenService) {\n      _classCallCheck(this, NHttpService);\n\n      this.nHTTPLoader = nHTTPLoader;\n      this.inj = inj;\n      this.nLocalStorageService = nLocalStorageService;\n      this.nTokenService = nTokenService;\n      this.timeout = 90000;\n      this.isRefreshingToken = false;\n      this.tokenSubject = new BehaviorSubject(null);\n      this.systemService = NSystemService.getInstance();\n      this.nSessionStorage = new NSessionStorageService();\n      this.appProperties = this.systemService.getVal('properties');\n      this.nPubSubService = new NPubSubService();\n    }\n\n    _createClass(NHttpService, [{\n      key: \"intercept\",\n      value: function intercept(req, next) {\n        var _this15 = this;\n\n        this.requestInterceptor(); // Pass on the cloned request instead of the original request.\n\n        return next.handle(this.requestOptions(req)).pipe(timeout(this.timeout), catchError(function (error) {\n          return _this15.onCatch(error, req, next);\n        }), finalize(function () {\n          _this15.onFinally();\n        }));\n      }\n    }, {\n      key: \"updateToken\",\n      value: function updateToken(error, req, next) {\n        var _this16 = this;\n\n        if (this.appProperties.appAuthenticationStrategy === 'activeDirectory' || this.appProperties.appAuthenticationStrategy === 'localAuth') {\n          if (!this.isRefreshingToken) {\n            this.isRefreshingToken = true; // Reset here so that the following requests wait until the token\n            // comes back from the refreshToken call.\n\n            this.tokenSubject.next(null);\n            return this.refreshToken().pipe(switchMap(function (tokensObj) {\n              if (tokensObj) {\n                _this16.nTokenService.updateTokens(tokensObj);\n\n                var newToken = tokensObj['accessToken'];\n\n                _this16.tokenSubject.next(newToken);\n\n                return next.handle(_this16.requestOptions(req));\n              }\n\n              return throwError(new Error('Can\\'t refresh the token'));\n            }), catchError(function (err) {\n              return _this16.onCatchError(err);\n            }), finalize(function () {\n              return _this16.isRefreshingToken = false;\n            }));\n          } else {\n            return this.tokenSubject.pipe(filter(function (token) {\n              return token != null;\n            }), take(1), switchMap(function (token) {\n              return next.handle(_this16.requestOptions(req));\n            }));\n          }\n        } else {\n          return this.onCatchError(error);\n        }\n      }\n    }, {\n      key: \"refreshToken\",\n      value: function refreshToken() {\n        var http = this.inj.get(HttpClient);\n        var appProperties = this.systemService.getVal('properties');\n        var refreshUrl = this.systemService.getAuthUrl() + appProperties.appName + '/refresh';\n        var body = {\n          'platformDetails': this.systemService.getPlatformDetails(this.systemService.checkDevice()),\n          'userKey': this.nSessionStorage.getValue('userObj')['userKey'],\n          'refreshToken': this.nSessionStorage.getValue('refreshToken')\n        };\n        body.platformDetails['uuid'] = this.nLocalStorageService.getValue('uuid');\n        return http.post(refreshUrl, body);\n      }\n      /**\n       * Request options.\n       * @param options\n       * @returns HttpRequest\n       */\n\n    }, {\n      key: \"requestOptions\",\n      value: function requestOptions(req) {\n        var headers = req.headers;\n\n        if (req.headers == null) {\n          headers = new HttpHeaders();\n        }\n\n        req = req.clone({\n          url: this.getFullUrl(req.url),\n          headers: headers\n        });\n        var baseUrl = NSystemService.getInstance().getVal('baseUrl');\n        var isArt = baseUrl !== '' && req.url.includes(baseUrl);\n        return isArt ? this.addDefaultHeaders(req) : req;\n      }\n      /**\n      * Default options.\n      * @param options\n      * @returns HttpHeadedrs\n      */\n\n    }, {\n      key: \"addDefaultHeaders\",\n      value: function addDefaultHeaders(req) {\n        /**\n         * TODO: Add all default Headers over here\n         */\n        if (!req.headers.has('Access-Control-Allow-Origin')) {\n          req.headers = req.headers.set('Access-Control-Allow-Origin', '*');\n        }\n\n        if (!req.headers.has('Content-Type')) {\n          req.headers = req.headers.set('Content-Type', 'application/json');\n        } else if (req.headers.has('Content-Type') && req.headers.get('Content-Type') === 'no-content') {\n          req.headers = req.headers.delete('Content-Type');\n        }\n\n        if (!req.headers.has('Accept')) {\n          req.headers = req.headers.set('Accept', 'application/json');\n        }\n\n        if (!req.headers.has('Authorization')) {\n          this.appProperties = this.systemService.getVal('properties');\n\n          if (this.appProperties && this.appProperties.appAuthenticationStrategy === 'basicAuth') {\n            var username, password;\n\n            if (this.appProperties.basicAuthUser && this.appProperties.basicAuthPassword) {\n              username = this.appProperties.basicAuthUser;\n              password = this.appProperties.basicAuthPassword;\n            } else {\n              username = \"bhive-art-proxyuser\";\n              password = \"password\";\n              console.warn(\"Authentication strategy: Basic Auth. basicAuthUser and basicAuthPassword are not configured in environment. Setting default values.\");\n            }\n\n            req.headers = req.headers.set('Authorization', 'Basic ' + btoa(username + \":\" + password));\n          } else if (this.appProperties && (this.appProperties.appAuthenticationStrategy === 'activeDirectory' || this.appProperties.appAuthenticationStrategy === 'localAuth')) {\n            if (this.nSessionStorage.getValue('accessToken')) {\n              req.headers = req.headers.set('Authorization', 'Bearer ' + this.nSessionStorage.getValue('accessToken'));\n            }\n          }\n        }\n\n        return req;\n      }\n      /**\n       * Build API url.\n       * @param url\n       * @returns string\n       */\n\n    }, {\n      key: \"getFullUrl\",\n      value: function getFullUrl(url) {\n        // return full URL to API here\n        return url;\n      }\n      /**\n       * Request interceptor.\n       */\n\n    }, {\n      key: \"requestInterceptor\",\n      value: function requestInterceptor() {\n        this.nHTTPLoader.isHTTPRequestInProgress(true);\n      }\n      /**\n       * Response interceptor.\n       */\n\n    }, {\n      key: \"responseInterceptor\",\n      value: function responseInterceptor() {\n        this.nHTTPLoader.isHTTPRequestInProgress(false);\n      }\n      /**\n        * Error handler.\n        * @param error\n        * @param caught\n        * @returns ErrorObservable\n        */\n\n    }, {\n      key: \"onCatch\",\n      value: function onCatch(error, req, next) {\n        if (error instanceof HttpErrorResponse) {\n          if (error.status === 403 && error.error.message === 'jwt expired') {\n            return this.updateToken(error, req, next);\n          } else {\n            return this.onSubscribeError(error);\n          }\n        } else {\n          return this.onSubscribeError(error);\n        }\n      }\n      /**\n       * onSubscribeError\n       * @param error\n       */\n\n    }, {\n      key: \"onSubscribeError\",\n      value: function onSubscribeError(err) {\n        this.nHTTPLoader.alertError(err);\n        return this.onCatchError(err);\n      }\n      /**\n       * onFinally\n       */\n\n    }, {\n      key: \"onFinally\",\n      value: function onFinally() {\n        this.responseInterceptor();\n      }\n    }, {\n      key: \"onCatchError\",\n      value: function onCatchError(error) {\n        return throwError(error);\n      }\n    }]);\n\n    return NHttpService;\n  }();\n\n  NHttpService.ɵfac = function NHttpService_Factory(t) {\n    return new (t || NHttpService)(ɵngcc0.ɵɵinject(NHTTPLoaderService), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(NLocalStorageService), ɵngcc0.ɵɵinject(NTokenService));\n  };\n\n  NHttpService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NHttpService,\n    factory: NHttpService.ɵfac\n  });\n  return NHttpService;\n}();\n\nvar NSnackbarService = /*@__PURE__*/function () {\n  var NSnackbarService = /*#__PURE__*/function () {\n    function NSnackbarService(nPubSubService) {\n      var _this17 = this;\n\n      _classCallCheck(this, NSnackbarService);\n\n      this.nPubSubService = nPubSubService;\n      this.snackService = new Subject();\n\n      if (NSystemService.getInstance().getVal('useDefaultExceptionUI')) {\n        this.snackBarListner = this.nPubSubService.$sub('openSnackBar', function (msg) {\n          _this17.openSnackBar(msg);\n        });\n      }\n    }\n\n    _createClass(NSnackbarService, [{\n      key: \"get\",\n      value: function get() {\n        return this.snackService.asObservable();\n      }\n    }, {\n      key: \"add\",\n      value: function add(data) {\n        this.snackService.next({\n          action: 'add',\n          data: data\n        });\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(id) {\n        this.snackService.next({\n          action: 'remove',\n          id: id\n        });\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        this.snackService.next({\n          action: 'clear'\n        });\n      }\n    }, {\n      key: \"openSnackBar\",\n      value: function openSnackBar(message, timeout) {\n        this.add({\n          msg: message,\n          timeout: timeout || 5000,\n          action: {\n            text: 'Close',\n            onClick: function onClick(snack) {}\n          },\n          onAdd: function onAdd(snack) {},\n          onRemove: function onRemove(snack) {}\n        });\n      }\n    }]);\n\n    return NSnackbarService;\n  }();\n\n  NSnackbarService.ɵfac = function NSnackbarService_Factory(t) {\n    return new (t || NSnackbarService)(ɵngcc0.ɵɵinject(NPubSubService));\n  };\n\n  NSnackbarService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NSnackbarService,\n    factory: NSnackbarService.ɵfac\n  });\n  return NSnackbarService;\n}();\n\nvar SnackComponent = /*@__PURE__*/function () {\n  var SnackComponent = function SnackComponent() {\n    _classCallCheck(this, SnackComponent);\n  };\n\n  SnackComponent.ɵfac = function SnackComponent_Factory(t) {\n    return new (t || SnackComponent)();\n  };\n\n  SnackComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SnackComponent,\n    selectors: [[\"n-snack\"]],\n    inputs: {\n      background: \"background\",\n      color: \"color\",\n      customClass: \"customClass\"\n    },\n    ngContentSelectors: _c2,\n    decls: 2,\n    vars: 6,\n    consts: [[1, \"snack\", 3, \"ngStyle\", \"ngClass\"]],\n    template: function SnackComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx.background ? ctx.background : \"#323232\", ctx.color ? ctx.color : \"#fff\"))(\"ngClass\", ɵngcc0.ɵɵpureFunction0(5, _c1));\n      }\n    },\n    directives: [ɵngcc4.NgStyle, ɵngcc4.NgClass],\n    styles: [_c4]\n  });\n  return SnackComponent;\n}();\n\nvar SnackbarComponent = /*@__PURE__*/function () {\n  var SnackbarComponent = /*#__PURE__*/function () {\n    function SnackbarComponent(snackbarService) {\n      var _this18 = this;\n\n      _classCallCheck(this, SnackbarComponent);\n\n      this.snackbarService = snackbarService;\n      this.max = 1;\n      this.onAdd = new EventEmitter();\n      this.onRemove = new EventEmitter();\n      this.onClear = new EventEmitter();\n      this.snacks = [];\n      this.snackbarService.get().subscribe(function (snack) {\n        if (snack.action === 'add') {\n          _this18.add(snack.data);\n        } else if (snack.action === 'remove') {\n          _this18.remove(snack.id);\n        } else if (snack.action === 'clear') {\n          _this18.clear();\n        }\n      });\n    }\n\n    _createClass(SnackbarComponent, [{\n      key: \"add\",\n      value: function add(snack) {\n        var _this19 = this;\n\n        var timeout;\n        var id = this.uuid();\n\n        if (this.max && this.max > 0 && this.snacks.length === this.max) {\n          this.remove(this.snacks[0].id);\n        }\n\n        if (snack.timeout || this.timeout) {\n          timeout = setTimeout(function () {\n            _this19.remove(id);\n          }, snack.timeout || this.timeout);\n        }\n\n        var data = Object.assign({\n          id: id,\n          timeoutObj: timeout\n        }, snack);\n\n        if (snack.action) {\n          var that = this;\n          var fcn = snack.action.onClick || new Function();\n\n          snack.action.onClick = function () {\n            fcn(data);\n            that.remove(id);\n          };\n        }\n\n        if (snack.onAdd) {\n          snack.onAdd(data);\n        }\n\n        if (this.onAdd) {\n          this.onAdd.emit(data);\n        }\n\n        this.snacks.push(data);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(id) {\n        var snack = this.snacks.find(function (obj) {\n          return obj.id === id;\n        });\n\n        if (snack) {\n          if (snack.onRemove) {\n            snack.onRemove(snack);\n          }\n\n          if (this.onRemove) {\n            this.onRemove.emit(snack);\n          }\n\n          if (snack.timeoutObj) {\n            clearTimeout(snack.timeoutObj);\n          }\n        }\n\n        this.snacks = this.snacks.filter(function (obj) {\n          return obj.id !== id;\n        });\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        // this.snacks.forEach(snack => {\n        //   this.remove(snack.id);\n        // });\n        this.snacks = [];\n\n        if (this.onClear) {\n          this.onClear.emit(true);\n        }\n      }\n    }, {\n      key: \"uuid\",\n      value: function uuid() {\n        // tslint:disable:no-bitwise\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n          var r = Math.random() * 16 | 0,\n              v = c === 'x' ? r : r & 0x3 | 0x8;\n          return v.toString(16);\n        }); // tslint:enable:no-bitwise\n      }\n    }, {\n      key: \"calcTextColor\",\n      value: function calcTextColor(background) {\n        if (!background) {\n          return null;\n        }\n\n        function hexToRgb(hex) {\n          var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n          hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n            return r + r + g + g + b + b;\n          });\n          var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n          return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16)\n          } : null;\n        }\n\n        var rgb = hexToRgb(background);\n\n        if (!rgb) {\n          return null;\n        }\n\n        var color = [rgb.r / 255, rgb.g / 255, rgb.b / 255];\n\n        for (var i = 0; i < color.length; ++i) {\n          if (color[i] <= 0.03928) {\n            color[i] = color[i] / 12.92;\n          } else {\n            color[i] = Math.pow((color[i] + 0.055) / 1.055, 2.4);\n          }\n        }\n\n        var l = 0.2126 * color[0] + 0.7152 * color[1] + 0.0722 * color[2];\n\n        if (l > 0.179) {\n          return '#000';\n        } else {\n          return '#fff';\n        }\n      }\n    }]);\n\n    return SnackbarComponent;\n  }();\n\n  SnackbarComponent.ɵfac = function SnackbarComponent_Factory(t) {\n    return new (t || SnackbarComponent)(ɵngcc0.ɵɵdirectiveInject(NSnackbarService));\n  };\n\n  SnackbarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SnackbarComponent,\n    selectors: [[\"n-snackbar\"]],\n    inputs: {\n      max: \"max\",\n      position: \"position\",\n      background: \"background\",\n      accent: \"accent\",\n      color: \"color\",\n      customClass: \"customClass\",\n      timeout: \"timeout\"\n    },\n    outputs: {\n      onAdd: \"onAdd\",\n      onRemove: \"onRemove\",\n      onClear: \"onClear\"\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[1, \"snackbars\", 3, \"ngClass\"], [3, \"background\", \"customClass\", \"color\", 4, \"ngFor\", \"ngForOf\"], [3, \"background\", \"customClass\", \"color\"], [1, \"container\"], [1, \"snack-text\", \"child\"], [\"class\", \"snack-action\", 3, \"ngStyle\", \"click\", 4, \"ngIf\"], [1, \"snack-action\", 3, \"ngStyle\", \"click\"]],\n    template: function SnackbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, SnackbarComponent_n_snack_1_Template, 5, 5, \"n-snack\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.position || \"bottom-center\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.snacks);\n      }\n    },\n    directives: [ɵngcc4.NgClass, ɵngcc4.NgForOf, SnackComponent, ɵngcc4.NgIf, ɵngcc4.NgStyle],\n    styles: [_c4]\n  });\n  return SnackbarComponent;\n}();\n\nfunction startupServiceFactory(startupService) {\n  var res = function res() {\n    // console.log('module before initstorage call');\n    return startupService.initStorage();\n  };\n\n  return res;\n}\n\nfunction NgForageFactory(ngForageConfig) {\n  // @ts-ignore\n  return new NgForage({}, new InstanceFactory(ngForageConfig));\n}\n\nvar NeutrinosSeedServicesModule = /*@__PURE__*/function () {\n  var NeutrinosSeedServicesModule = function NeutrinosSeedServicesModule() {\n    _classCallCheck(this, NeutrinosSeedServicesModule);\n  };\n\n  NeutrinosSeedServicesModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NeutrinosSeedServicesModule\n  });\n  NeutrinosSeedServicesModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function NeutrinosSeedServicesModule_Factory(t) {\n      return new (t || NeutrinosSeedServicesModule)();\n    },\n    providers: [{\n      provide: HTTP_INTERCEPTORS,\n      useClass: NHttpService,\n      multi: true\n    }, {\n      // Provider for APP_INITIALIZER\n      provide: APP_INITIALIZER,\n      useFactory: startupServiceFactory,\n      deps: [NLocalStorageService],\n      multi: true\n    }, {\n      provide: NgForage,\n      useFactory: NgForageFactory,\n      deps: [NgForageConfig]\n    }, NAuthGuardService, NDataModelService, NHttpService, NHTTPLoaderService, NLocalStorageService, NLoginService, NLogoutService, NNotificationService, NSnackbarService, NPubSubService, NSessionStorageService, NTokenService],\n    imports: [[CommonModule, HttpClientModule, RouterModule]]\n  });\n  return NeutrinosSeedServicesModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NeutrinosSeedServicesModule, {\n    declarations: function declarations() {\n      return [SnackComponent, SnackbarComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, HttpClientModule, RouterModule];\n    },\n    exports: function exports() {\n      return [SnackComponent, SnackbarComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NAuthGuardService, NDataModelService, NHTTPLoaderService, NHttpService, NLocalStorageService, NLoginService, NLogoutService, NNotificationService, NPubSubService, NSessionStorageService, NSnackbarService, NSystemService, NTokenService, NUtility, NeutrinosSeedServicesModule, NgForageFactory, SnackComponent, SnackbarComponent, startupServiceFactory };","map":null,"metadata":{},"sourceType":"module"}