{"ast":null,"code":"import _slicedToArray from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Injectable, NgModule, Input, ɵɵdefineInjectable } from '@angular/core';\nimport { MediaMarshaller, BaseDirective2, StyleBuilder, StyleUtils, CoreModule } from '@angular/flex-layout/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/grid-align/grid-align.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/flex-layout/core';\nvar ROW_DEFAULT = 'stretch';\n/** @type {?} */\n\nvar COL_DEFAULT = 'stretch';\n\nvar GridAlignStyleBuilder =\n/** @class */\nfunction () {\n  var GridAlignStyleBuilder = /*#__PURE__*/function (_StyleBuilder) {\n    _inherits(GridAlignStyleBuilder, _StyleBuilder);\n\n    var _super = _createSuper(GridAlignStyleBuilder);\n\n    function GridAlignStyleBuilder() {\n      _classCallCheck(this, GridAlignStyleBuilder);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(GridAlignStyleBuilder, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @return {?}\n       */\n      function buildStyles(input) {\n        return buildCss(input || ROW_DEFAULT);\n      }\n    }]);\n\n    return GridAlignStyleBuilder;\n  }(StyleBuilder);\n\n  GridAlignStyleBuilder.ɵfac = function GridAlignStyleBuilder_Factory(t) {\n    return ɵGridAlignStyleBuilder_BaseFactory(t || GridAlignStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  GridAlignStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function GridAlignStyleBuilder_Factory() {\n      return new GridAlignStyleBuilder();\n    },\n    token: GridAlignStyleBuilder,\n    providedIn: \"root\"\n  });\n  var ɵGridAlignStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAlignStyleBuilder);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAlignStyleBuilder, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridAlignStyleBuilder;\n}();\n\nvar GridAlignDirective =\n/** @class */\nfunction () {\n  var GridAlignDirective = /*#__PURE__*/function (_BaseDirective) {\n    _inherits(GridAlignDirective, _BaseDirective);\n\n    var _super2 = _createSuper(GridAlignDirective);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} styleBuilder\n     * @param {?} styler\n     * @param {?} marshal\n     */\n    function GridAlignDirective(elementRef, styleBuilder, styler, marshal) {\n      var _this;\n\n      _classCallCheck(this, GridAlignDirective);\n\n      _this = _super2.call(this, elementRef, styleBuilder, styler, marshal);\n      _this.DIRECTIVE_KEY = 'grid-align';\n      _this.styleCache = alignCache;\n\n      _this.init();\n\n      return _this;\n    }\n\n    return GridAlignDirective;\n  }(BaseDirective2);\n\n  GridAlignDirective.ɵfac = function GridAlignDirective_Factory(t) {\n    return new (t || GridAlignDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridAlignStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridAlignDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridAlignDirective,\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridAlignDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: GridAlignStyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAlignDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: GridAlignStyleBuilder\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, null);\n  })();\n\n  return GridAlignDirective;\n}();\n/** @type {?} */\n\n\nvar alignCache = new Map();\n/** @type {?} */\n\nvar inputs = ['gdGridAlign', 'gdGridAlign.xs', 'gdGridAlign.sm', 'gdGridAlign.md', 'gdGridAlign.lg', 'gdGridAlign.xl', 'gdGridAlign.lt-sm', 'gdGridAlign.lt-md', 'gdGridAlign.lt-lg', 'gdGridAlign.lt-xl', 'gdGridAlign.gt-xs', 'gdGridAlign.gt-sm', 'gdGridAlign.gt-md', 'gdGridAlign.gt-lg'];\n/** @type {?} */\n\nvar selector = \"\\n  [gdGridAlign],\\n  [gdGridAlign.xs], [gdGridAlign.sm], [gdGridAlign.md], [gdGridAlign.lg],[gdGridAlign.xl],\\n  [gdGridAlign.lt-sm], [gdGridAlign.lt-md], [gdGridAlign.lt-lg], [gdGridAlign.lt-xl],\\n  [gdGridAlign.gt-xs], [gdGridAlign.gt-sm], [gdGridAlign.gt-md], [gdGridAlign.gt-lg]\\n\";\n/**\n * 'align' CSS Grid styling directive for grid children\n *  Defines positioning of child elements along row and column axis in a grid container\n *  Optional values: {row-axis} values or {row-axis column-axis} value pairs\n *\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-self\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-self\n */\n\nvar DefaultGridAlignDirective =\n/** @class */\nfunction () {\n  /**\n   * 'align' CSS Grid styling directive for grid children\n   *  Defines positioning of child elements along row and column axis in a grid container\n   *  Optional values: {row-axis} values or {row-axis column-axis} value pairs\n   *\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-self\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-self\n   */\n  var DefaultGridAlignDirective = /*#__PURE__*/function (_GridAlignDirective) {\n    _inherits(DefaultGridAlignDirective, _GridAlignDirective);\n\n    var _super3 = _createSuper(DefaultGridAlignDirective);\n\n    function DefaultGridAlignDirective() {\n      var _this2;\n\n      _classCallCheck(this, DefaultGridAlignDirective);\n\n      _this2 = _super3.apply(this, arguments);\n      _this2.inputs = inputs;\n      return _this2;\n    }\n\n    return DefaultGridAlignDirective;\n  }(GridAlignDirective);\n\n  DefaultGridAlignDirective.ɵfac = function DefaultGridAlignDirective_Factory(t) {\n    return ɵDefaultGridAlignDirective_BaseFactory(t || DefaultGridAlignDirective);\n  };\n\n  DefaultGridAlignDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridAlignDirective,\n    selectors: [[\"\", \"gdGridAlign\", \"\"], [\"\", \"gdGridAlign.xs\", \"\"], [\"\", \"gdGridAlign.sm\", \"\"], [\"\", \"gdGridAlign.md\", \"\"], [\"\", \"gdGridAlign.lg\", \"\"], [\"\", \"gdGridAlign.xl\", \"\"], [\"\", \"gdGridAlign.lt-sm\", \"\"], [\"\", \"gdGridAlign.lt-md\", \"\"], [\"\", \"gdGridAlign.lt-lg\", \"\"], [\"\", \"gdGridAlign.lt-xl\", \"\"], [\"\", \"gdGridAlign.gt-xs\", \"\"], [\"\", \"gdGridAlign.gt-sm\", \"\"], [\"\", \"gdGridAlign.gt-md\", \"\"], [\"\", \"gdGridAlign.gt-lg\", \"\"]],\n    inputs: {\n      gdGridAlign: \"gdGridAlign\",\n      \"gdGridAlign.xs\": \"gdGridAlign.xs\",\n      \"gdGridAlign.sm\": \"gdGridAlign.sm\",\n      \"gdGridAlign.md\": \"gdGridAlign.md\",\n      \"gdGridAlign.lg\": \"gdGridAlign.lg\",\n      \"gdGridAlign.xl\": \"gdGridAlign.xl\",\n      \"gdGridAlign.lt-sm\": \"gdGridAlign.lt-sm\",\n      \"gdGridAlign.lt-md\": \"gdGridAlign.lt-md\",\n      \"gdGridAlign.lt-lg\": \"gdGridAlign.lt-lg\",\n      \"gdGridAlign.lt-xl\": \"gdGridAlign.lt-xl\",\n      \"gdGridAlign.gt-xs\": \"gdGridAlign.gt-xs\",\n      \"gdGridAlign.gt-sm\": \"gdGridAlign.gt-sm\",\n      \"gdGridAlign.gt-md\": \"gdGridAlign.gt-md\",\n      \"gdGridAlign.gt-lg\": \"gdGridAlign.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridAlignDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAlignDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridAlignDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector,\n        inputs: inputs\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridAlignDirective;\n}();\n/**\n * @param {?=} align\n * @return {?}\n */\n\n\nfunction buildCss() {\n  var align = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  /** @type {?} */\n  var css = {};\n\n  var _align$split = align.split(' '),\n      _align$split2 = _slicedToArray(_align$split, 2),\n      rowAxis = _align$split2[0],\n      columnAxis = _align$split2[1]; // Row axis\n\n\n  switch (rowAxis) {\n    case 'end':\n      css['justify-self'] = 'end';\n      break;\n\n    case 'center':\n      css['justify-self'] = 'center';\n      break;\n\n    case 'stretch':\n      css['justify-self'] = 'stretch';\n      break;\n\n    case 'start':\n      css['justify-self'] = 'start';\n      break;\n\n    default:\n      css['justify-self'] = ROW_DEFAULT; // default row axis\n\n      break;\n  } // Column axis\n\n\n  switch (columnAxis) {\n    case 'end':\n      css['align-self'] = 'end';\n      break;\n\n    case 'center':\n      css['align-self'] = 'center';\n      break;\n\n    case 'stretch':\n      css['align-self'] = 'stretch';\n      break;\n\n    case 'start':\n      css['align-self'] = 'start';\n      break;\n\n    default:\n      css['align-self'] = COL_DEFAULT; // default column axis\n\n      break;\n  }\n\n  return css;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/align-columns/align-columns.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_MAIN = 'start';\n/** @type {?} */\n\nvar DEFAULT_CROSS = 'stretch';\n\nvar GridAlignColumnsStyleBuilder =\n/** @class */\nfunction () {\n  var GridAlignColumnsStyleBuilder = /*#__PURE__*/function (_StyleBuilder2) {\n    _inherits(GridAlignColumnsStyleBuilder, _StyleBuilder2);\n\n    var _super4 = _createSuper(GridAlignColumnsStyleBuilder);\n\n    function GridAlignColumnsStyleBuilder() {\n      _classCallCheck(this, GridAlignColumnsStyleBuilder);\n\n      return _super4.apply(this, arguments);\n    }\n\n    _createClass(GridAlignColumnsStyleBuilder, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @param {?} parent\n       * @return {?}\n       */\n      function buildStyles(input, parent) {\n        return buildCss$1(input || \"\".concat(DEFAULT_MAIN, \" \").concat(DEFAULT_CROSS), parent.inline);\n      }\n    }]);\n\n    return GridAlignColumnsStyleBuilder;\n  }(StyleBuilder);\n\n  GridAlignColumnsStyleBuilder.ɵfac = function GridAlignColumnsStyleBuilder_Factory(t) {\n    return ɵGridAlignColumnsStyleBuilder_BaseFactory(t || GridAlignColumnsStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  GridAlignColumnsStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function GridAlignColumnsStyleBuilder_Factory() {\n      return new GridAlignColumnsStyleBuilder();\n    },\n    token: GridAlignColumnsStyleBuilder,\n    providedIn: \"root\"\n  });\n  var ɵGridAlignColumnsStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAlignColumnsStyleBuilder);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAlignColumnsStyleBuilder, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridAlignColumnsStyleBuilder;\n}();\n\nvar GridAlignColumnsDirective =\n/** @class */\nfunction () {\n  var GridAlignColumnsDirective = /*#__PURE__*/function (_BaseDirective2) {\n    _inherits(GridAlignColumnsDirective, _BaseDirective2);\n\n    var _super5 = _createSuper(GridAlignColumnsDirective);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} styleBuilder\n     * @param {?} styler\n     * @param {?} marshal\n     */\n    function GridAlignColumnsDirective(elementRef, styleBuilder, styler, marshal) {\n      var _this3;\n\n      _classCallCheck(this, GridAlignColumnsDirective);\n\n      _this3 = _super5.call(this, elementRef, styleBuilder, styler, marshal);\n      _this3.DIRECTIVE_KEY = 'grid-align-columns';\n      _this3._inline = false;\n\n      _this3.init();\n\n      return _this3;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(GridAlignColumnsDirective, [{\n      key: \"inline\",\n      get: function get() {\n        return this._inline;\n      }\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      ,\n      set: function set(val) {\n        this._inline = coerceBooleanProperty(val);\n      } // *********************************************\n      // Protected methods\n      // *********************************************\n\n      /**\n       * @protected\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateWithValue\",\n      value: function updateWithValue(value) {\n        this.styleCache = this.inline ? alignColumnsInlineCache : alignColumnsCache;\n        this.addStyles(value, {\n          inline: this.inline\n        });\n      }\n    }]);\n\n    return GridAlignColumnsDirective;\n  }(BaseDirective2);\n\n  GridAlignColumnsDirective.ɵfac = function GridAlignColumnsDirective_Factory(t) {\n    return new (t || GridAlignColumnsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridAlignColumnsStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridAlignColumnsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridAlignColumnsDirective,\n    inputs: {\n      inline: [\"gdInline\", \"inline\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridAlignColumnsDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: GridAlignColumnsStyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n\n  GridAlignColumnsDirective.propDecorators = {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAlignColumnsDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: GridAlignColumnsStyleBuilder\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, {\n      inline: [{\n        type: Input,\n        args: ['gdInline']\n      }]\n    });\n  })();\n\n  return GridAlignColumnsDirective;\n}();\n/** @type {?} */\n\n\nvar alignColumnsCache = new Map();\n/** @type {?} */\n\nvar alignColumnsInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$1 = ['gdAlignColumns', 'gdAlignColumns.xs', 'gdAlignColumns.sm', 'gdAlignColumns.md', 'gdAlignColumns.lg', 'gdAlignColumns.xl', 'gdAlignColumns.lt-sm', 'gdAlignColumns.lt-md', 'gdAlignColumns.lt-lg', 'gdAlignColumns.lt-xl', 'gdAlignColumns.gt-xs', 'gdAlignColumns.gt-sm', 'gdAlignColumns.gt-md', 'gdAlignColumns.gt-lg'];\n/** @type {?} */\n\nvar selector$1 = \"\\n  [gdAlignColumns],\\n  [gdAlignColumns.xs], [gdAlignColumns.sm], [gdAlignColumns.md],\\n  [gdAlignColumns.lg], [gdAlignColumns.xl], [gdAlignColumns.lt-sm],\\n  [gdAlignColumns.lt-md], [gdAlignColumns.lt-lg], [gdAlignColumns.lt-xl],\\n  [gdAlignColumns.gt-xs], [gdAlignColumns.gt-sm], [gdAlignColumns.gt-md],\\n  [gdAlignColumns.gt-lg]\\n\";\n/**\n * 'column alignment' CSS Grid styling directive\n * Configures the alignment in the column direction\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-19\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-21\n */\n\nvar DefaultGridAlignColumnsDirective =\n/** @class */\nfunction () {\n  /**\n   * 'column alignment' CSS Grid styling directive\n   * Configures the alignment in the column direction\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-19\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-21\n   */\n  var DefaultGridAlignColumnsDirective = /*#__PURE__*/function (_GridAlignColumnsDire) {\n    _inherits(DefaultGridAlignColumnsDirective, _GridAlignColumnsDire);\n\n    var _super6 = _createSuper(DefaultGridAlignColumnsDirective);\n\n    function DefaultGridAlignColumnsDirective() {\n      var _this4;\n\n      _classCallCheck(this, DefaultGridAlignColumnsDirective);\n\n      _this4 = _super6.apply(this, arguments);\n      _this4.inputs = inputs$1;\n      return _this4;\n    }\n\n    return DefaultGridAlignColumnsDirective;\n  }(GridAlignColumnsDirective);\n\n  DefaultGridAlignColumnsDirective.ɵfac = function DefaultGridAlignColumnsDirective_Factory(t) {\n    return ɵDefaultGridAlignColumnsDirective_BaseFactory(t || DefaultGridAlignColumnsDirective);\n  };\n\n  DefaultGridAlignColumnsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridAlignColumnsDirective,\n    selectors: [[\"\", \"gdAlignColumns\", \"\"], [\"\", \"gdAlignColumns.xs\", \"\"], [\"\", \"gdAlignColumns.sm\", \"\"], [\"\", \"gdAlignColumns.md\", \"\"], [\"\", \"gdAlignColumns.lg\", \"\"], [\"\", \"gdAlignColumns.xl\", \"\"], [\"\", \"gdAlignColumns.lt-sm\", \"\"], [\"\", \"gdAlignColumns.lt-md\", \"\"], [\"\", \"gdAlignColumns.lt-lg\", \"\"], [\"\", \"gdAlignColumns.lt-xl\", \"\"], [\"\", \"gdAlignColumns.gt-xs\", \"\"], [\"\", \"gdAlignColumns.gt-sm\", \"\"], [\"\", \"gdAlignColumns.gt-md\", \"\"], [\"\", \"gdAlignColumns.gt-lg\", \"\"]],\n    inputs: {\n      gdAlignColumns: \"gdAlignColumns\",\n      \"gdAlignColumns.xs\": \"gdAlignColumns.xs\",\n      \"gdAlignColumns.sm\": \"gdAlignColumns.sm\",\n      \"gdAlignColumns.md\": \"gdAlignColumns.md\",\n      \"gdAlignColumns.lg\": \"gdAlignColumns.lg\",\n      \"gdAlignColumns.xl\": \"gdAlignColumns.xl\",\n      \"gdAlignColumns.lt-sm\": \"gdAlignColumns.lt-sm\",\n      \"gdAlignColumns.lt-md\": \"gdAlignColumns.lt-md\",\n      \"gdAlignColumns.lt-lg\": \"gdAlignColumns.lt-lg\",\n      \"gdAlignColumns.lt-xl\": \"gdAlignColumns.lt-xl\",\n      \"gdAlignColumns.gt-xs\": \"gdAlignColumns.gt-xs\",\n      \"gdAlignColumns.gt-sm\": \"gdAlignColumns.gt-sm\",\n      \"gdAlignColumns.gt-md\": \"gdAlignColumns.gt-md\",\n      \"gdAlignColumns.gt-lg\": \"gdAlignColumns.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridAlignColumnsDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAlignColumnsDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridAlignColumnsDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector$1,\n        inputs: inputs$1\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridAlignColumnsDirective;\n}();\n/**\n * @param {?} align\n * @param {?} inline\n * @return {?}\n */\n\n\nfunction buildCss$1(align, inline) {\n  /** @type {?} */\n  var css = {};\n\n  var _align$split3 = align.split(' '),\n      _align$split4 = _slicedToArray(_align$split3, 2),\n      mainAxis = _align$split4[0],\n      crossAxis = _align$split4[1]; // Main axis\n\n\n  switch (mainAxis) {\n    case 'center':\n      css['align-content'] = 'center';\n      break;\n\n    case 'space-around':\n      css['align-content'] = 'space-around';\n      break;\n\n    case 'space-between':\n      css['align-content'] = 'space-between';\n      break;\n\n    case 'space-evenly':\n      css['align-content'] = 'space-evenly';\n      break;\n\n    case 'end':\n      css['align-content'] = 'end';\n      break;\n\n    case 'start':\n      css['align-content'] = 'start';\n      break;\n\n    case 'stretch':\n      css['align-content'] = 'stretch';\n      break;\n\n    default:\n      css['align-content'] = DEFAULT_MAIN; // default main axis\n\n      break;\n  } // Cross-axis\n\n\n  switch (crossAxis) {\n    case 'start':\n      css['align-items'] = 'start';\n      break;\n\n    case 'center':\n      css['align-items'] = 'center';\n      break;\n\n    case 'end':\n      css['align-items'] = 'end';\n      break;\n\n    case 'stretch':\n      css['align-items'] = 'stretch';\n      break;\n\n    default:\n      // 'stretch'\n      css['align-items'] = DEFAULT_CROSS; // default cross axis\n\n      break;\n  }\n\n  css['display'] = inline ? 'inline-grid' : 'grid';\n  return css;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/align-rows/align-rows.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_MAIN$1 = 'start';\n/** @type {?} */\n\nvar DEFAULT_CROSS$1 = 'stretch';\n\nvar GridAlignRowsStyleBuilder =\n/** @class */\nfunction () {\n  var GridAlignRowsStyleBuilder = /*#__PURE__*/function (_StyleBuilder3) {\n    _inherits(GridAlignRowsStyleBuilder, _StyleBuilder3);\n\n    var _super7 = _createSuper(GridAlignRowsStyleBuilder);\n\n    function GridAlignRowsStyleBuilder() {\n      _classCallCheck(this, GridAlignRowsStyleBuilder);\n\n      return _super7.apply(this, arguments);\n    }\n\n    _createClass(GridAlignRowsStyleBuilder, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @param {?} parent\n       * @return {?}\n       */\n      function buildStyles(input, parent) {\n        return buildCss$2(input || \"\".concat(DEFAULT_MAIN$1, \" \").concat(DEFAULT_CROSS$1), parent.inline);\n      }\n    }]);\n\n    return GridAlignRowsStyleBuilder;\n  }(StyleBuilder);\n\n  GridAlignRowsStyleBuilder.ɵfac = function GridAlignRowsStyleBuilder_Factory(t) {\n    return ɵGridAlignRowsStyleBuilder_BaseFactory(t || GridAlignRowsStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  GridAlignRowsStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function GridAlignRowsStyleBuilder_Factory() {\n      return new GridAlignRowsStyleBuilder();\n    },\n    token: GridAlignRowsStyleBuilder,\n    providedIn: \"root\"\n  });\n  var ɵGridAlignRowsStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAlignRowsStyleBuilder);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAlignRowsStyleBuilder, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridAlignRowsStyleBuilder;\n}();\n\nvar GridAlignRowsDirective =\n/** @class */\nfunction () {\n  var GridAlignRowsDirective = /*#__PURE__*/function (_BaseDirective3) {\n    _inherits(GridAlignRowsDirective, _BaseDirective3);\n\n    var _super8 = _createSuper(GridAlignRowsDirective);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} styleBuilder\n     * @param {?} styler\n     * @param {?} marshal\n     */\n    function GridAlignRowsDirective(elementRef, styleBuilder, styler, marshal) {\n      var _this5;\n\n      _classCallCheck(this, GridAlignRowsDirective);\n\n      _this5 = _super8.call(this, elementRef, styleBuilder, styler, marshal);\n      _this5.DIRECTIVE_KEY = 'grid-align-rows';\n      _this5._inline = false;\n\n      _this5.init();\n\n      return _this5;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(GridAlignRowsDirective, [{\n      key: \"inline\",\n      get: function get() {\n        return this._inline;\n      }\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      ,\n      set: function set(val) {\n        this._inline = coerceBooleanProperty(val);\n      } // *********************************************\n      // Protected methods\n      // *********************************************\n\n      /**\n       * @protected\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateWithValue\",\n      value: function updateWithValue(value) {\n        this.styleCache = this.inline ? alignRowsInlineCache : alignRowsCache;\n        this.addStyles(value, {\n          inline: this.inline\n        });\n      }\n    }]);\n\n    return GridAlignRowsDirective;\n  }(BaseDirective2);\n\n  GridAlignRowsDirective.ɵfac = function GridAlignRowsDirective_Factory(t) {\n    return new (t || GridAlignRowsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridAlignRowsStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridAlignRowsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridAlignRowsDirective,\n    inputs: {\n      inline: [\"gdInline\", \"inline\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridAlignRowsDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: GridAlignRowsStyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n\n  GridAlignRowsDirective.propDecorators = {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAlignRowsDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: GridAlignRowsStyleBuilder\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, {\n      inline: [{\n        type: Input,\n        args: ['gdInline']\n      }]\n    });\n  })();\n\n  return GridAlignRowsDirective;\n}();\n/** @type {?} */\n\n\nvar alignRowsCache = new Map();\n/** @type {?} */\n\nvar alignRowsInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$2 = ['gdAlignRows', 'gdAlignRows.xs', 'gdAlignRows.sm', 'gdAlignRows.md', 'gdAlignRows.lg', 'gdAlignRows.xl', 'gdAlignRows.lt-sm', 'gdAlignRows.lt-md', 'gdAlignRows.lt-lg', 'gdAlignRows.lt-xl', 'gdAlignRows.gt-xs', 'gdAlignRows.gt-sm', 'gdAlignRows.gt-md', 'gdAlignRows.gt-lg'];\n/** @type {?} */\n\nvar selector$2 = \"\\n  [gdAlignRows],\\n  [gdAlignRows.xs], [gdAlignRows.sm], [gdAlignRows.md],\\n  [gdAlignRows.lg], [gdAlignRows.xl], [gdAlignRows.lt-sm],\\n  [gdAlignRows.lt-md], [gdAlignRows.lt-lg], [gdAlignRows.lt-xl],\\n  [gdAlignRows.gt-xs], [gdAlignRows.gt-sm], [gdAlignRows.gt-md],\\n  [gdAlignRows.gt-lg]\\n\";\n/**\n * 'row alignment' CSS Grid styling directive\n * Configures the alignment in the row direction\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-18\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-20\n */\n\nvar DefaultGridAlignRowsDirective =\n/** @class */\nfunction () {\n  /**\n   * 'row alignment' CSS Grid styling directive\n   * Configures the alignment in the row direction\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-18\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-20\n   */\n  var DefaultGridAlignRowsDirective = /*#__PURE__*/function (_GridAlignRowsDirecti) {\n    _inherits(DefaultGridAlignRowsDirective, _GridAlignRowsDirecti);\n\n    var _super9 = _createSuper(DefaultGridAlignRowsDirective);\n\n    function DefaultGridAlignRowsDirective() {\n      var _this6;\n\n      _classCallCheck(this, DefaultGridAlignRowsDirective);\n\n      _this6 = _super9.apply(this, arguments);\n      _this6.inputs = inputs$2;\n      return _this6;\n    }\n\n    return DefaultGridAlignRowsDirective;\n  }(GridAlignRowsDirective);\n\n  DefaultGridAlignRowsDirective.ɵfac = function DefaultGridAlignRowsDirective_Factory(t) {\n    return ɵDefaultGridAlignRowsDirective_BaseFactory(t || DefaultGridAlignRowsDirective);\n  };\n\n  DefaultGridAlignRowsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridAlignRowsDirective,\n    selectors: [[\"\", \"gdAlignRows\", \"\"], [\"\", \"gdAlignRows.xs\", \"\"], [\"\", \"gdAlignRows.sm\", \"\"], [\"\", \"gdAlignRows.md\", \"\"], [\"\", \"gdAlignRows.lg\", \"\"], [\"\", \"gdAlignRows.xl\", \"\"], [\"\", \"gdAlignRows.lt-sm\", \"\"], [\"\", \"gdAlignRows.lt-md\", \"\"], [\"\", \"gdAlignRows.lt-lg\", \"\"], [\"\", \"gdAlignRows.lt-xl\", \"\"], [\"\", \"gdAlignRows.gt-xs\", \"\"], [\"\", \"gdAlignRows.gt-sm\", \"\"], [\"\", \"gdAlignRows.gt-md\", \"\"], [\"\", \"gdAlignRows.gt-lg\", \"\"]],\n    inputs: {\n      gdAlignRows: \"gdAlignRows\",\n      \"gdAlignRows.xs\": \"gdAlignRows.xs\",\n      \"gdAlignRows.sm\": \"gdAlignRows.sm\",\n      \"gdAlignRows.md\": \"gdAlignRows.md\",\n      \"gdAlignRows.lg\": \"gdAlignRows.lg\",\n      \"gdAlignRows.xl\": \"gdAlignRows.xl\",\n      \"gdAlignRows.lt-sm\": \"gdAlignRows.lt-sm\",\n      \"gdAlignRows.lt-md\": \"gdAlignRows.lt-md\",\n      \"gdAlignRows.lt-lg\": \"gdAlignRows.lt-lg\",\n      \"gdAlignRows.lt-xl\": \"gdAlignRows.lt-xl\",\n      \"gdAlignRows.gt-xs\": \"gdAlignRows.gt-xs\",\n      \"gdAlignRows.gt-sm\": \"gdAlignRows.gt-sm\",\n      \"gdAlignRows.gt-md\": \"gdAlignRows.gt-md\",\n      \"gdAlignRows.gt-lg\": \"gdAlignRows.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridAlignRowsDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAlignRowsDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridAlignRowsDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector$2,\n        inputs: inputs$2\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridAlignRowsDirective;\n}();\n/**\n * @param {?} align\n * @param {?} inline\n * @return {?}\n */\n\n\nfunction buildCss$2(align, inline) {\n  /** @type {?} */\n  var css = {};\n\n  var _align$split5 = align.split(' '),\n      _align$split6 = _slicedToArray(_align$split5, 2),\n      mainAxis = _align$split6[0],\n      crossAxis = _align$split6[1]; // Main axis\n\n\n  switch (mainAxis) {\n    case 'center':\n    case 'space-around':\n    case 'space-between':\n    case 'space-evenly':\n    case 'end':\n    case 'start':\n    case 'stretch':\n      css['justify-content'] = mainAxis;\n      break;\n\n    default:\n      css['justify-content'] = DEFAULT_MAIN$1; // default main axis\n\n      break;\n  } // Cross-axis\n\n\n  switch (crossAxis) {\n    case 'start':\n    case 'center':\n    case 'end':\n    case 'stretch':\n      css['justify-items'] = crossAxis;\n      break;\n\n    default:\n      // 'stretch'\n      css['justify-items'] = DEFAULT_CROSS$1; // default cross axis\n\n      break;\n  }\n\n  css['display'] = inline ? 'inline-grid' : 'grid';\n  return css;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/area/area.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE = 'auto';\n\nvar GridAreaStyleBuilder =\n/** @class */\nfunction () {\n  var GridAreaStyleBuilder = /*#__PURE__*/function (_StyleBuilder4) {\n    _inherits(GridAreaStyleBuilder, _StyleBuilder4);\n\n    var _super10 = _createSuper(GridAreaStyleBuilder);\n\n    function GridAreaStyleBuilder() {\n      _classCallCheck(this, GridAreaStyleBuilder);\n\n      return _super10.apply(this, arguments);\n    }\n\n    _createClass(GridAreaStyleBuilder, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @return {?}\n       */\n      function buildStyles(input) {\n        return {\n          'grid-area': input || DEFAULT_VALUE\n        };\n      }\n    }]);\n\n    return GridAreaStyleBuilder;\n  }(StyleBuilder);\n\n  GridAreaStyleBuilder.ɵfac = function GridAreaStyleBuilder_Factory(t) {\n    return ɵGridAreaStyleBuilder_BaseFactory(t || GridAreaStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  GridAreaStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function GridAreaStyleBuilder_Factory() {\n      return new GridAreaStyleBuilder();\n    },\n    token: GridAreaStyleBuilder,\n    providedIn: \"root\"\n  });\n  var ɵGridAreaStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAreaStyleBuilder);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAreaStyleBuilder, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridAreaStyleBuilder;\n}();\n\nvar GridAreaDirective =\n/** @class */\nfunction () {\n  var GridAreaDirective = /*#__PURE__*/function (_BaseDirective4) {\n    _inherits(GridAreaDirective, _BaseDirective4);\n\n    var _super11 = _createSuper(GridAreaDirective);\n\n    /**\n     * @param {?} elRef\n     * @param {?} styleUtils\n     * @param {?} styleBuilder\n     * @param {?} marshal\n     */\n    function GridAreaDirective(elRef, styleUtils, styleBuilder, marshal) {\n      var _this7;\n\n      _classCallCheck(this, GridAreaDirective);\n\n      _this7 = _super11.call(this, elRef, styleBuilder, styleUtils, marshal);\n      _this7.DIRECTIVE_KEY = 'grid-area';\n      _this7.styleCache = gridAreaCache;\n\n      _this7.init();\n\n      return _this7;\n    }\n\n    return GridAreaDirective;\n  }(BaseDirective2);\n\n  GridAreaDirective.ɵfac = function GridAreaDirective_Factory(t) {\n    return new (t || GridAreaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(GridAreaStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridAreaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridAreaDirective,\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridAreaDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: StyleUtils\n    }, {\n      type: GridAreaStyleBuilder\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAreaDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: GridAreaStyleBuilder\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, null);\n  })();\n\n  return GridAreaDirective;\n}();\n/** @type {?} */\n\n\nvar gridAreaCache = new Map();\n/** @type {?} */\n\nvar inputs$3 = ['gdArea', 'gdArea.xs', 'gdArea.sm', 'gdArea.md', 'gdArea.lg', 'gdArea.xl', 'gdArea.lt-sm', 'gdArea.lt-md', 'gdArea.lt-lg', 'gdArea.lt-xl', 'gdArea.gt-xs', 'gdArea.gt-sm', 'gdArea.gt-md', 'gdArea.gt-lg'];\n/** @type {?} */\n\nvar selector$3 = \"\\n  [gdArea],\\n  [gdArea.xs], [gdArea.sm], [gdArea.md], [gdArea.lg], [gdArea.xl],\\n  [gdArea.lt-sm], [gdArea.lt-md], [gdArea.lt-lg], [gdArea.lt-xl],\\n  [gdArea.gt-xs], [gdArea.gt-sm], [gdArea.gt-md], [gdArea.gt-lg]\\n\";\n/**\n * 'grid-area' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27\n */\n\nvar DefaultGridAreaDirective =\n/** @class */\nfunction () {\n  /**\n   * 'grid-area' CSS Grid styling directive\n   * Configures the name or position of an element within the grid\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27\n   */\n  var DefaultGridAreaDirective = /*#__PURE__*/function (_GridAreaDirective) {\n    _inherits(DefaultGridAreaDirective, _GridAreaDirective);\n\n    var _super12 = _createSuper(DefaultGridAreaDirective);\n\n    function DefaultGridAreaDirective() {\n      var _this8;\n\n      _classCallCheck(this, DefaultGridAreaDirective);\n\n      _this8 = _super12.apply(this, arguments);\n      _this8.inputs = inputs$3;\n      return _this8;\n    }\n\n    return DefaultGridAreaDirective;\n  }(GridAreaDirective);\n\n  DefaultGridAreaDirective.ɵfac = function DefaultGridAreaDirective_Factory(t) {\n    return ɵDefaultGridAreaDirective_BaseFactory(t || DefaultGridAreaDirective);\n  };\n\n  DefaultGridAreaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridAreaDirective,\n    selectors: [[\"\", \"gdArea\", \"\"], [\"\", \"gdArea.xs\", \"\"], [\"\", \"gdArea.sm\", \"\"], [\"\", \"gdArea.md\", \"\"], [\"\", \"gdArea.lg\", \"\"], [\"\", \"gdArea.xl\", \"\"], [\"\", \"gdArea.lt-sm\", \"\"], [\"\", \"gdArea.lt-md\", \"\"], [\"\", \"gdArea.lt-lg\", \"\"], [\"\", \"gdArea.lt-xl\", \"\"], [\"\", \"gdArea.gt-xs\", \"\"], [\"\", \"gdArea.gt-sm\", \"\"], [\"\", \"gdArea.gt-md\", \"\"], [\"\", \"gdArea.gt-lg\", \"\"]],\n    inputs: {\n      gdArea: \"gdArea\",\n      \"gdArea.xs\": \"gdArea.xs\",\n      \"gdArea.sm\": \"gdArea.sm\",\n      \"gdArea.md\": \"gdArea.md\",\n      \"gdArea.lg\": \"gdArea.lg\",\n      \"gdArea.xl\": \"gdArea.xl\",\n      \"gdArea.lt-sm\": \"gdArea.lt-sm\",\n      \"gdArea.lt-md\": \"gdArea.lt-md\",\n      \"gdArea.lt-lg\": \"gdArea.lt-lg\",\n      \"gdArea.lt-xl\": \"gdArea.lt-xl\",\n      \"gdArea.gt-xs\": \"gdArea.gt-xs\",\n      \"gdArea.gt-sm\": \"gdArea.gt-sm\",\n      \"gdArea.gt-md\": \"gdArea.gt-md\",\n      \"gdArea.gt-lg\": \"gdArea.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridAreaDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAreaDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridAreaDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector$3,\n        inputs: inputs$3\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridAreaDirective;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/areas/areas.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$1 = 'none';\n/** @type {?} */\n\nvar DELIMETER = '|';\n\nvar GridAreasStyleBuiler =\n/** @class */\nfunction () {\n  var GridAreasStyleBuiler = /*#__PURE__*/function (_StyleBuilder5) {\n    _inherits(GridAreasStyleBuiler, _StyleBuilder5);\n\n    var _super13 = _createSuper(GridAreasStyleBuiler);\n\n    function GridAreasStyleBuiler() {\n      _classCallCheck(this, GridAreasStyleBuiler);\n\n      return _super13.apply(this, arguments);\n    }\n\n    _createClass(GridAreasStyleBuiler, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @param {?} parent\n       * @return {?}\n       */\n      function buildStyles(input, parent) {\n        /** @type {?} */\n        var areas = (input || DEFAULT_VALUE$1).split(DELIMETER).map(\n        /**\n        * @param {?} v\n        * @return {?}\n        */\n        function (v) {\n          return \"\\\"\".concat(v.trim(), \"\\\"\");\n        });\n        return {\n          'display': parent.inline ? 'inline-grid' : 'grid',\n          'grid-template-areas': areas.join(' ')\n        };\n      }\n    }]);\n\n    return GridAreasStyleBuiler;\n  }(StyleBuilder);\n\n  GridAreasStyleBuiler.ɵfac = function GridAreasStyleBuiler_Factory(t) {\n    return ɵGridAreasStyleBuiler_BaseFactory(t || GridAreasStyleBuiler);\n  };\n  /** @nocollapse */\n\n\n  GridAreasStyleBuiler.ɵprov = ɵɵdefineInjectable({\n    factory: function GridAreasStyleBuiler_Factory() {\n      return new GridAreasStyleBuiler();\n    },\n    token: GridAreasStyleBuiler,\n    providedIn: \"root\"\n  });\n  var ɵGridAreasStyleBuiler_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAreasStyleBuiler);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAreasStyleBuiler, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridAreasStyleBuiler;\n}();\n\nvar GridAreasDirective =\n/** @class */\nfunction () {\n  var GridAreasDirective = /*#__PURE__*/function (_BaseDirective5) {\n    _inherits(GridAreasDirective, _BaseDirective5);\n\n    var _super14 = _createSuper(GridAreasDirective);\n\n    /**\n     * @param {?} elRef\n     * @param {?} styleUtils\n     * @param {?} styleBuilder\n     * @param {?} marshal\n     */\n    function GridAreasDirective(elRef, styleUtils, styleBuilder, marshal) {\n      var _this9;\n\n      _classCallCheck(this, GridAreasDirective);\n\n      _this9 = _super14.call(this, elRef, styleBuilder, styleUtils, marshal);\n      _this9.DIRECTIVE_KEY = 'grid-areas';\n      _this9._inline = false;\n\n      _this9.init();\n\n      return _this9;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(GridAreasDirective, [{\n      key: \"inline\",\n      get: function get() {\n        return this._inline;\n      }\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      ,\n      set: function set(val) {\n        this._inline = coerceBooleanProperty(val);\n      } // *********************************************\n      // Protected methods\n      // *********************************************\n\n      /**\n       * @protected\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateWithValue\",\n      value: function updateWithValue(value) {\n        this.styleCache = this.inline ? areasInlineCache : areasCache;\n        this.addStyles(value, {\n          inline: this.inline\n        });\n      }\n    }]);\n\n    return GridAreasDirective;\n  }(BaseDirective2);\n\n  GridAreasDirective.ɵfac = function GridAreasDirective_Factory(t) {\n    return new (t || GridAreasDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(GridAreasStyleBuiler), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridAreasDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridAreasDirective,\n    inputs: {\n      inline: [\"gdInline\", \"inline\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridAreasDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: StyleUtils\n    }, {\n      type: GridAreasStyleBuiler\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n\n  GridAreasDirective.propDecorators = {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAreasDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: GridAreasStyleBuiler\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, {\n      inline: [{\n        type: Input,\n        args: ['gdInline']\n      }]\n    });\n  })();\n\n  return GridAreasDirective;\n}();\n/** @type {?} */\n\n\nvar areasCache = new Map();\n/** @type {?} */\n\nvar areasInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$4 = ['gdAreas', 'gdAreas.xs', 'gdAreas.sm', 'gdAreas.md', 'gdAreas.lg', 'gdAreas.xl', 'gdAreas.lt-sm', 'gdAreas.lt-md', 'gdAreas.lt-lg', 'gdAreas.lt-xl', 'gdAreas.gt-xs', 'gdAreas.gt-sm', 'gdAreas.gt-md', 'gdAreas.gt-lg'];\n/** @type {?} */\n\nvar selector$4 = \"\\n  [gdAreas],\\n  [gdAreas.xs], [gdAreas.sm], [gdAreas.md], [gdAreas.lg], [gdAreas.xl],\\n  [gdAreas.lt-sm], [gdAreas.lt-md], [gdAreas.lt-lg], [gdAreas.lt-xl],\\n  [gdAreas.gt-xs], [gdAreas.gt-sm], [gdAreas.gt-md], [gdAreas.gt-lg]\\n\";\n/**\n * 'grid-template-areas' CSS Grid styling directive\n * Configures the names of elements within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-14\n */\n\nvar DefaultGridAreasDirective =\n/** @class */\nfunction () {\n  /**\n   * 'grid-template-areas' CSS Grid styling directive\n   * Configures the names of elements within the grid\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-14\n   */\n  var DefaultGridAreasDirective = /*#__PURE__*/function (_GridAreasDirective) {\n    _inherits(DefaultGridAreasDirective, _GridAreasDirective);\n\n    var _super15 = _createSuper(DefaultGridAreasDirective);\n\n    function DefaultGridAreasDirective() {\n      var _this10;\n\n      _classCallCheck(this, DefaultGridAreasDirective);\n\n      _this10 = _super15.apply(this, arguments);\n      _this10.inputs = inputs$4;\n      return _this10;\n    }\n\n    return DefaultGridAreasDirective;\n  }(GridAreasDirective);\n\n  DefaultGridAreasDirective.ɵfac = function DefaultGridAreasDirective_Factory(t) {\n    return ɵDefaultGridAreasDirective_BaseFactory(t || DefaultGridAreasDirective);\n  };\n\n  DefaultGridAreasDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridAreasDirective,\n    selectors: [[\"\", \"gdAreas\", \"\"], [\"\", \"gdAreas.xs\", \"\"], [\"\", \"gdAreas.sm\", \"\"], [\"\", \"gdAreas.md\", \"\"], [\"\", \"gdAreas.lg\", \"\"], [\"\", \"gdAreas.xl\", \"\"], [\"\", \"gdAreas.lt-sm\", \"\"], [\"\", \"gdAreas.lt-md\", \"\"], [\"\", \"gdAreas.lt-lg\", \"\"], [\"\", \"gdAreas.lt-xl\", \"\"], [\"\", \"gdAreas.gt-xs\", \"\"], [\"\", \"gdAreas.gt-sm\", \"\"], [\"\", \"gdAreas.gt-md\", \"\"], [\"\", \"gdAreas.gt-lg\", \"\"]],\n    inputs: {\n      gdAreas: \"gdAreas\",\n      \"gdAreas.xs\": \"gdAreas.xs\",\n      \"gdAreas.sm\": \"gdAreas.sm\",\n      \"gdAreas.md\": \"gdAreas.md\",\n      \"gdAreas.lg\": \"gdAreas.lg\",\n      \"gdAreas.xl\": \"gdAreas.xl\",\n      \"gdAreas.lt-sm\": \"gdAreas.lt-sm\",\n      \"gdAreas.lt-md\": \"gdAreas.lt-md\",\n      \"gdAreas.lt-lg\": \"gdAreas.lt-lg\",\n      \"gdAreas.lt-xl\": \"gdAreas.lt-xl\",\n      \"gdAreas.gt-xs\": \"gdAreas.gt-xs\",\n      \"gdAreas.gt-sm\": \"gdAreas.gt-sm\",\n      \"gdAreas.gt-md\": \"gdAreas.gt-md\",\n      \"gdAreas.gt-lg\": \"gdAreas.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridAreasDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAreasDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridAreasDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector$4,\n        inputs: inputs$4\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridAreasDirective;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/auto/auto.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$2 = 'initial';\n\nvar GridAutoStyleBuilder =\n/** @class */\nfunction () {\n  var GridAutoStyleBuilder = /*#__PURE__*/function (_StyleBuilder6) {\n    _inherits(GridAutoStyleBuilder, _StyleBuilder6);\n\n    var _super16 = _createSuper(GridAutoStyleBuilder);\n\n    function GridAutoStyleBuilder() {\n      _classCallCheck(this, GridAutoStyleBuilder);\n\n      return _super16.apply(this, arguments);\n    }\n\n    _createClass(GridAutoStyleBuilder, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @param {?} parent\n       * @return {?}\n       */\n      function buildStyles(input, parent) {\n        var _split = (input || DEFAULT_VALUE$2).split(' '),\n            _split2 = _slicedToArray(_split, 2),\n            direction = _split2[0],\n            dense = _split2[1];\n\n        if (direction !== 'column' && direction !== 'row' && direction !== 'dense') {\n          direction = 'row';\n        }\n\n        dense = dense === 'dense' && direction !== 'dense' ? ' dense' : '';\n        return {\n          'display': parent.inline ? 'inline-grid' : 'grid',\n          'grid-auto-flow': direction + dense\n        };\n      }\n    }]);\n\n    return GridAutoStyleBuilder;\n  }(StyleBuilder);\n\n  GridAutoStyleBuilder.ɵfac = function GridAutoStyleBuilder_Factory(t) {\n    return ɵGridAutoStyleBuilder_BaseFactory(t || GridAutoStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  GridAutoStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function GridAutoStyleBuilder_Factory() {\n      return new GridAutoStyleBuilder();\n    },\n    token: GridAutoStyleBuilder,\n    providedIn: \"root\"\n  });\n  var ɵGridAutoStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridAutoStyleBuilder);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAutoStyleBuilder, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridAutoStyleBuilder;\n}();\n\nvar GridAutoDirective =\n/** @class */\nfunction () {\n  var GridAutoDirective = /*#__PURE__*/function (_BaseDirective6) {\n    _inherits(GridAutoDirective, _BaseDirective6);\n\n    var _super17 = _createSuper(GridAutoDirective);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} styleBuilder\n     * @param {?} styler\n     * @param {?} marshal\n     */\n    function GridAutoDirective(elementRef, styleBuilder, styler, marshal) {\n      var _this11;\n\n      _classCallCheck(this, GridAutoDirective);\n\n      _this11 = _super17.call(this, elementRef, styleBuilder, styler, marshal);\n      _this11._inline = false;\n      _this11.DIRECTIVE_KEY = 'grid-auto';\n\n      _this11.init();\n\n      return _this11;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(GridAutoDirective, [{\n      key: \"inline\",\n      get: function get() {\n        return this._inline;\n      }\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      ,\n      set: function set(val) {\n        this._inline = coerceBooleanProperty(val);\n      } // *********************************************\n      // Protected methods\n      // *********************************************\n\n      /**\n       * @protected\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateWithValue\",\n      value: function updateWithValue(value) {\n        this.styleCache = this.inline ? autoInlineCache : autoCache;\n        this.addStyles(value, {\n          inline: this.inline\n        });\n      }\n    }]);\n\n    return GridAutoDirective;\n  }(BaseDirective2);\n\n  GridAutoDirective.ɵfac = function GridAutoDirective_Factory(t) {\n    return new (t || GridAutoDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridAutoStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridAutoDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridAutoDirective,\n    inputs: {\n      inline: [\"gdInline\", \"inline\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridAutoDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: GridAutoStyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n\n  GridAutoDirective.propDecorators = {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridAutoDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: GridAutoStyleBuilder\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, {\n      inline: [{\n        type: Input,\n        args: ['gdInline']\n      }]\n    });\n  })();\n\n  return GridAutoDirective;\n}();\n/** @type {?} */\n\n\nvar autoCache = new Map();\n/** @type {?} */\n\nvar autoInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$5 = ['gdAuto', 'gdAuto.xs', 'gdAuto.sm', 'gdAuto.md', 'gdAuto.lg', 'gdAuto.xl', 'gdAuto.lt-sm', 'gdAuto.lt-md', 'gdAuto.lt-lg', 'gdAuto.lt-xl', 'gdAuto.gt-xs', 'gdAuto.gt-sm', 'gdAuto.gt-md', 'gdAuto.gt-lg'];\n/** @type {?} */\n\nvar selector$5 = \"\\n  [gdAuto],\\n  [gdAuto.xs], [gdAuto.sm], [gdAuto.md], [gdAuto.lg], [gdAuto.xl],\\n  [gdAuto.lt-sm], [gdAuto.lt-md], [gdAuto.lt-lg], [gdAuto.lt-xl],\\n  [gdAuto.gt-xs], [gdAuto.gt-sm], [gdAuto.gt-md], [gdAuto.gt-lg]\\n\";\n/**\n * 'grid-auto-flow' CSS Grid styling directive\n * Configures the auto placement algorithm for the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-23\n */\n\nvar DefaultGridAutoDirective =\n/** @class */\nfunction () {\n  /**\n   * 'grid-auto-flow' CSS Grid styling directive\n   * Configures the auto placement algorithm for the grid\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-23\n   */\n  var DefaultGridAutoDirective = /*#__PURE__*/function (_GridAutoDirective) {\n    _inherits(DefaultGridAutoDirective, _GridAutoDirective);\n\n    var _super18 = _createSuper(DefaultGridAutoDirective);\n\n    function DefaultGridAutoDirective() {\n      var _this12;\n\n      _classCallCheck(this, DefaultGridAutoDirective);\n\n      _this12 = _super18.apply(this, arguments);\n      _this12.inputs = inputs$5;\n      return _this12;\n    }\n\n    return DefaultGridAutoDirective;\n  }(GridAutoDirective);\n\n  DefaultGridAutoDirective.ɵfac = function DefaultGridAutoDirective_Factory(t) {\n    return ɵDefaultGridAutoDirective_BaseFactory(t || DefaultGridAutoDirective);\n  };\n\n  DefaultGridAutoDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridAutoDirective,\n    selectors: [[\"\", \"gdAuto\", \"\"], [\"\", \"gdAuto.xs\", \"\"], [\"\", \"gdAuto.sm\", \"\"], [\"\", \"gdAuto.md\", \"\"], [\"\", \"gdAuto.lg\", \"\"], [\"\", \"gdAuto.xl\", \"\"], [\"\", \"gdAuto.lt-sm\", \"\"], [\"\", \"gdAuto.lt-md\", \"\"], [\"\", \"gdAuto.lt-lg\", \"\"], [\"\", \"gdAuto.lt-xl\", \"\"], [\"\", \"gdAuto.gt-xs\", \"\"], [\"\", \"gdAuto.gt-sm\", \"\"], [\"\", \"gdAuto.gt-md\", \"\"], [\"\", \"gdAuto.gt-lg\", \"\"]],\n    inputs: {\n      gdAuto: \"gdAuto\",\n      \"gdAuto.xs\": \"gdAuto.xs\",\n      \"gdAuto.sm\": \"gdAuto.sm\",\n      \"gdAuto.md\": \"gdAuto.md\",\n      \"gdAuto.lg\": \"gdAuto.lg\",\n      \"gdAuto.xl\": \"gdAuto.xl\",\n      \"gdAuto.lt-sm\": \"gdAuto.lt-sm\",\n      \"gdAuto.lt-md\": \"gdAuto.lt-md\",\n      \"gdAuto.lt-lg\": \"gdAuto.lt-lg\",\n      \"gdAuto.lt-xl\": \"gdAuto.lt-xl\",\n      \"gdAuto.gt-xs\": \"gdAuto.gt-xs\",\n      \"gdAuto.gt-sm\": \"gdAuto.gt-sm\",\n      \"gdAuto.gt-md\": \"gdAuto.gt-md\",\n      \"gdAuto.gt-lg\": \"gdAuto.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridAutoDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridAutoDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridAutoDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector$5,\n        inputs: inputs$5\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridAutoDirective;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/column/column.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$3 = 'auto';\n\nvar GridColumnStyleBuilder =\n/** @class */\nfunction () {\n  var GridColumnStyleBuilder = /*#__PURE__*/function (_StyleBuilder7) {\n    _inherits(GridColumnStyleBuilder, _StyleBuilder7);\n\n    var _super19 = _createSuper(GridColumnStyleBuilder);\n\n    function GridColumnStyleBuilder() {\n      _classCallCheck(this, GridColumnStyleBuilder);\n\n      return _super19.apply(this, arguments);\n    }\n\n    _createClass(GridColumnStyleBuilder, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @return {?}\n       */\n      function buildStyles(input) {\n        return {\n          'grid-column': input || DEFAULT_VALUE$3\n        };\n      }\n    }]);\n\n    return GridColumnStyleBuilder;\n  }(StyleBuilder);\n\n  GridColumnStyleBuilder.ɵfac = function GridColumnStyleBuilder_Factory(t) {\n    return ɵGridColumnStyleBuilder_BaseFactory(t || GridColumnStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  GridColumnStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function GridColumnStyleBuilder_Factory() {\n      return new GridColumnStyleBuilder();\n    },\n    token: GridColumnStyleBuilder,\n    providedIn: \"root\"\n  });\n  var ɵGridColumnStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridColumnStyleBuilder);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridColumnStyleBuilder, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridColumnStyleBuilder;\n}();\n\nvar GridColumnDirective =\n/** @class */\nfunction () {\n  var GridColumnDirective = /*#__PURE__*/function (_BaseDirective7) {\n    _inherits(GridColumnDirective, _BaseDirective7);\n\n    var _super20 = _createSuper(GridColumnDirective);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} styleBuilder\n     * @param {?} styler\n     * @param {?} marshal\n     */\n    function GridColumnDirective(elementRef, styleBuilder, styler, marshal) {\n      var _this13;\n\n      _classCallCheck(this, GridColumnDirective);\n\n      _this13 = _super20.call(this, elementRef, styleBuilder, styler, marshal);\n      _this13.DIRECTIVE_KEY = 'grid-column';\n      _this13.styleCache = columnCache;\n\n      _this13.init();\n\n      return _this13;\n    }\n\n    return GridColumnDirective;\n  }(BaseDirective2);\n\n  GridColumnDirective.ɵfac = function GridColumnDirective_Factory(t) {\n    return new (t || GridColumnDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridColumnStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridColumnDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridColumnDirective,\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridColumnDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: GridColumnStyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridColumnDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: GridColumnStyleBuilder\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, null);\n  })();\n\n  return GridColumnDirective;\n}();\n/** @type {?} */\n\n\nvar columnCache = new Map();\n/** @type {?} */\n\nvar inputs$6 = ['gdColumn', 'gdColumn.xs', 'gdColumn.sm', 'gdColumn.md', 'gdColumn.lg', 'gdColumn.xl', 'gdColumn.lt-sm', 'gdColumn.lt-md', 'gdColumn.lt-lg', 'gdColumn.lt-xl', 'gdColumn.gt-xs', 'gdColumn.gt-sm', 'gdColumn.gt-md', 'gdColumn.gt-lg'];\n/** @type {?} */\n\nvar selector$6 = \"\\n  [gdColumn],\\n  [gdColumn.xs], [gdColumn.sm], [gdColumn.md], [gdColumn.lg], [gdColumn.xl],\\n  [gdColumn.lt-sm], [gdColumn.lt-md], [gdColumn.lt-lg], [gdColumn.lt-xl],\\n  [gdColumn.gt-xs], [gdColumn.gt-sm], [gdColumn.gt-md], [gdColumn.gt-lg]\\n\";\n/**\n * 'grid-column' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n */\n\nvar DefaultGridColumnDirective =\n/** @class */\nfunction () {\n  /**\n   * 'grid-column' CSS Grid styling directive\n   * Configures the name or position of an element within the grid\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n   */\n  var DefaultGridColumnDirective = /*#__PURE__*/function (_GridColumnDirective) {\n    _inherits(DefaultGridColumnDirective, _GridColumnDirective);\n\n    var _super21 = _createSuper(DefaultGridColumnDirective);\n\n    function DefaultGridColumnDirective() {\n      var _this14;\n\n      _classCallCheck(this, DefaultGridColumnDirective);\n\n      _this14 = _super21.apply(this, arguments);\n      _this14.inputs = inputs$6;\n      return _this14;\n    }\n\n    return DefaultGridColumnDirective;\n  }(GridColumnDirective);\n\n  DefaultGridColumnDirective.ɵfac = function DefaultGridColumnDirective_Factory(t) {\n    return ɵDefaultGridColumnDirective_BaseFactory(t || DefaultGridColumnDirective);\n  };\n\n  DefaultGridColumnDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridColumnDirective,\n    selectors: [[\"\", \"gdColumn\", \"\"], [\"\", \"gdColumn.xs\", \"\"], [\"\", \"gdColumn.sm\", \"\"], [\"\", \"gdColumn.md\", \"\"], [\"\", \"gdColumn.lg\", \"\"], [\"\", \"gdColumn.xl\", \"\"], [\"\", \"gdColumn.lt-sm\", \"\"], [\"\", \"gdColumn.lt-md\", \"\"], [\"\", \"gdColumn.lt-lg\", \"\"], [\"\", \"gdColumn.lt-xl\", \"\"], [\"\", \"gdColumn.gt-xs\", \"\"], [\"\", \"gdColumn.gt-sm\", \"\"], [\"\", \"gdColumn.gt-md\", \"\"], [\"\", \"gdColumn.gt-lg\", \"\"]],\n    inputs: {\n      gdColumn: \"gdColumn\",\n      \"gdColumn.xs\": \"gdColumn.xs\",\n      \"gdColumn.sm\": \"gdColumn.sm\",\n      \"gdColumn.md\": \"gdColumn.md\",\n      \"gdColumn.lg\": \"gdColumn.lg\",\n      \"gdColumn.xl\": \"gdColumn.xl\",\n      \"gdColumn.lt-sm\": \"gdColumn.lt-sm\",\n      \"gdColumn.lt-md\": \"gdColumn.lt-md\",\n      \"gdColumn.lt-lg\": \"gdColumn.lt-lg\",\n      \"gdColumn.lt-xl\": \"gdColumn.lt-xl\",\n      \"gdColumn.gt-xs\": \"gdColumn.gt-xs\",\n      \"gdColumn.gt-sm\": \"gdColumn.gt-sm\",\n      \"gdColumn.gt-md\": \"gdColumn.gt-md\",\n      \"gdColumn.gt-lg\": \"gdColumn.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridColumnDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridColumnDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridColumnDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector$6,\n        inputs: inputs$6\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridColumnDirective;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/columns/columns.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$4 = 'none';\n/** @type {?} */\n\nvar AUTO_SPECIFIER = '!';\n\nvar GridColumnsStyleBuilder =\n/** @class */\nfunction () {\n  var GridColumnsStyleBuilder = /*#__PURE__*/function (_StyleBuilder8) {\n    _inherits(GridColumnsStyleBuilder, _StyleBuilder8);\n\n    var _super22 = _createSuper(GridColumnsStyleBuilder);\n\n    function GridColumnsStyleBuilder() {\n      _classCallCheck(this, GridColumnsStyleBuilder);\n\n      return _super22.apply(this, arguments);\n    }\n\n    _createClass(GridColumnsStyleBuilder, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @param {?} parent\n       * @return {?}\n       */\n      function buildStyles(input, parent) {\n        input = input || DEFAULT_VALUE$4;\n        /** @type {?} */\n\n        var auto = false;\n\n        if (input.endsWith(AUTO_SPECIFIER)) {\n          input = input.substring(0, input.indexOf(AUTO_SPECIFIER));\n          auto = true;\n        }\n        /** @type {?} */\n\n\n        var css = {\n          'display': parent.inline ? 'inline-grid' : 'grid',\n          'grid-auto-columns': '',\n          'grid-template-columns': ''\n        };\n        /** @type {?} */\n\n        var key = auto ? 'grid-auto-columns' : 'grid-template-columns';\n        css[key] = input;\n        return css;\n      }\n    }]);\n\n    return GridColumnsStyleBuilder;\n  }(StyleBuilder);\n\n  GridColumnsStyleBuilder.ɵfac = function GridColumnsStyleBuilder_Factory(t) {\n    return ɵGridColumnsStyleBuilder_BaseFactory(t || GridColumnsStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  GridColumnsStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function GridColumnsStyleBuilder_Factory() {\n      return new GridColumnsStyleBuilder();\n    },\n    token: GridColumnsStyleBuilder,\n    providedIn: \"root\"\n  });\n  var ɵGridColumnsStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridColumnsStyleBuilder);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridColumnsStyleBuilder, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridColumnsStyleBuilder;\n}();\n\nvar GridColumnsDirective =\n/** @class */\nfunction () {\n  var GridColumnsDirective = /*#__PURE__*/function (_BaseDirective8) {\n    _inherits(GridColumnsDirective, _BaseDirective8);\n\n    var _super23 = _createSuper(GridColumnsDirective);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} styleBuilder\n     * @param {?} styler\n     * @param {?} marshal\n     */\n    function GridColumnsDirective(elementRef, styleBuilder, styler, marshal) {\n      var _this15;\n\n      _classCallCheck(this, GridColumnsDirective);\n\n      _this15 = _super23.call(this, elementRef, styleBuilder, styler, marshal);\n      _this15.DIRECTIVE_KEY = 'grid-columns';\n      _this15._inline = false;\n\n      _this15.init();\n\n      return _this15;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(GridColumnsDirective, [{\n      key: \"inline\",\n      get: function get() {\n        return this._inline;\n      }\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      ,\n      set: function set(val) {\n        this._inline = coerceBooleanProperty(val);\n      } // *********************************************\n      // Protected methods\n      // *********************************************\n\n      /**\n       * @protected\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateWithValue\",\n      value: function updateWithValue(value) {\n        this.styleCache = this.inline ? columnsInlineCache : columnsCache;\n        this.addStyles(value, {\n          inline: this.inline\n        });\n      }\n    }]);\n\n    return GridColumnsDirective;\n  }(BaseDirective2);\n\n  GridColumnsDirective.ɵfac = function GridColumnsDirective_Factory(t) {\n    return new (t || GridColumnsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridColumnsStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridColumnsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridColumnsDirective,\n    inputs: {\n      inline: [\"gdInline\", \"inline\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridColumnsDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: GridColumnsStyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n\n  GridColumnsDirective.propDecorators = {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridColumnsDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: GridColumnsStyleBuilder\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, {\n      inline: [{\n        type: Input,\n        args: ['gdInline']\n      }]\n    });\n  })();\n\n  return GridColumnsDirective;\n}();\n/** @type {?} */\n\n\nvar columnsCache = new Map();\n/** @type {?} */\n\nvar columnsInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$7 = ['gdColumns', 'gdColumns.xs', 'gdColumns.sm', 'gdColumns.md', 'gdColumns.lg', 'gdColumns.xl', 'gdColumns.lt-sm', 'gdColumns.lt-md', 'gdColumns.lt-lg', 'gdColumns.lt-xl', 'gdColumns.gt-xs', 'gdColumns.gt-sm', 'gdColumns.gt-md', 'gdColumns.gt-lg'];\n/** @type {?} */\n\nvar selector$7 = \"\\n  [gdColumns],\\n  [gdColumns.xs], [gdColumns.sm], [gdColumns.md], [gdColumns.lg], [gdColumns.xl],\\n  [gdColumns.lt-sm], [gdColumns.lt-md], [gdColumns.lt-lg], [gdColumns.lt-xl],\\n  [gdColumns.gt-xs], [gdColumns.gt-sm], [gdColumns.gt-md], [gdColumns.gt-lg]\\n\";\n/**\n * 'grid-template-columns' CSS Grid styling directive\n * Configures the sizing for the columns in the grid\n * Syntax: <column value> [auto]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n */\n\nvar DefaultGridColumnsDirective =\n/** @class */\nfunction () {\n  /**\n   * 'grid-template-columns' CSS Grid styling directive\n   * Configures the sizing for the columns in the grid\n   * Syntax: <column value> [auto]\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n   */\n  var DefaultGridColumnsDirective = /*#__PURE__*/function (_GridColumnsDirective) {\n    _inherits(DefaultGridColumnsDirective, _GridColumnsDirective);\n\n    var _super24 = _createSuper(DefaultGridColumnsDirective);\n\n    function DefaultGridColumnsDirective() {\n      var _this16;\n\n      _classCallCheck(this, DefaultGridColumnsDirective);\n\n      _this16 = _super24.apply(this, arguments);\n      _this16.inputs = inputs$7;\n      return _this16;\n    }\n\n    return DefaultGridColumnsDirective;\n  }(GridColumnsDirective);\n\n  DefaultGridColumnsDirective.ɵfac = function DefaultGridColumnsDirective_Factory(t) {\n    return ɵDefaultGridColumnsDirective_BaseFactory(t || DefaultGridColumnsDirective);\n  };\n\n  DefaultGridColumnsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridColumnsDirective,\n    selectors: [[\"\", \"gdColumns\", \"\"], [\"\", \"gdColumns.xs\", \"\"], [\"\", \"gdColumns.sm\", \"\"], [\"\", \"gdColumns.md\", \"\"], [\"\", \"gdColumns.lg\", \"\"], [\"\", \"gdColumns.xl\", \"\"], [\"\", \"gdColumns.lt-sm\", \"\"], [\"\", \"gdColumns.lt-md\", \"\"], [\"\", \"gdColumns.lt-lg\", \"\"], [\"\", \"gdColumns.lt-xl\", \"\"], [\"\", \"gdColumns.gt-xs\", \"\"], [\"\", \"gdColumns.gt-sm\", \"\"], [\"\", \"gdColumns.gt-md\", \"\"], [\"\", \"gdColumns.gt-lg\", \"\"]],\n    inputs: {\n      gdColumns: \"gdColumns\",\n      \"gdColumns.xs\": \"gdColumns.xs\",\n      \"gdColumns.sm\": \"gdColumns.sm\",\n      \"gdColumns.md\": \"gdColumns.md\",\n      \"gdColumns.lg\": \"gdColumns.lg\",\n      \"gdColumns.xl\": \"gdColumns.xl\",\n      \"gdColumns.lt-sm\": \"gdColumns.lt-sm\",\n      \"gdColumns.lt-md\": \"gdColumns.lt-md\",\n      \"gdColumns.lt-lg\": \"gdColumns.lt-lg\",\n      \"gdColumns.lt-xl\": \"gdColumns.lt-xl\",\n      \"gdColumns.gt-xs\": \"gdColumns.gt-xs\",\n      \"gdColumns.gt-sm\": \"gdColumns.gt-sm\",\n      \"gdColumns.gt-md\": \"gdColumns.gt-md\",\n      \"gdColumns.gt-lg\": \"gdColumns.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridColumnsDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridColumnsDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridColumnsDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector$7,\n        inputs: inputs$7\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridColumnsDirective;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/gap/gap.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$5 = '0';\n\nvar GridGapStyleBuilder =\n/** @class */\nfunction () {\n  var GridGapStyleBuilder = /*#__PURE__*/function (_StyleBuilder9) {\n    _inherits(GridGapStyleBuilder, _StyleBuilder9);\n\n    var _super25 = _createSuper(GridGapStyleBuilder);\n\n    function GridGapStyleBuilder() {\n      _classCallCheck(this, GridGapStyleBuilder);\n\n      return _super25.apply(this, arguments);\n    }\n\n    _createClass(GridGapStyleBuilder, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @param {?} parent\n       * @return {?}\n       */\n      function buildStyles(input, parent) {\n        return {\n          'display': parent.inline ? 'inline-grid' : 'grid',\n          'grid-gap': input || DEFAULT_VALUE$5\n        };\n      }\n    }]);\n\n    return GridGapStyleBuilder;\n  }(StyleBuilder);\n\n  GridGapStyleBuilder.ɵfac = function GridGapStyleBuilder_Factory(t) {\n    return ɵGridGapStyleBuilder_BaseFactory(t || GridGapStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  GridGapStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function GridGapStyleBuilder_Factory() {\n      return new GridGapStyleBuilder();\n    },\n    token: GridGapStyleBuilder,\n    providedIn: \"root\"\n  });\n  var ɵGridGapStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridGapStyleBuilder);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridGapStyleBuilder, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridGapStyleBuilder;\n}();\n\nvar GridGapDirective =\n/** @class */\nfunction () {\n  var GridGapDirective = /*#__PURE__*/function (_BaseDirective9) {\n    _inherits(GridGapDirective, _BaseDirective9);\n\n    var _super26 = _createSuper(GridGapDirective);\n\n    /**\n     * @param {?} elRef\n     * @param {?} styleUtils\n     * @param {?} styleBuilder\n     * @param {?} marshal\n     */\n    function GridGapDirective(elRef, styleUtils, styleBuilder, marshal) {\n      var _this17;\n\n      _classCallCheck(this, GridGapDirective);\n\n      _this17 = _super26.call(this, elRef, styleBuilder, styleUtils, marshal);\n      _this17.DIRECTIVE_KEY = 'grid-gap';\n      _this17._inline = false;\n\n      _this17.init();\n\n      return _this17;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(GridGapDirective, [{\n      key: \"inline\",\n      get: function get() {\n        return this._inline;\n      }\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      ,\n      set: function set(val) {\n        this._inline = coerceBooleanProperty(val);\n      } // *********************************************\n      // Protected methods\n      // *********************************************\n\n      /**\n       * @protected\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateWithValue\",\n      value: function updateWithValue(value) {\n        this.styleCache = this.inline ? gapInlineCache : gapCache;\n        this.addStyles(value, {\n          inline: this.inline\n        });\n      }\n    }]);\n\n    return GridGapDirective;\n  }(BaseDirective2);\n\n  GridGapDirective.ɵfac = function GridGapDirective_Factory(t) {\n    return new (t || GridGapDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(GridGapStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridGapDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridGapDirective,\n    inputs: {\n      inline: [\"gdInline\", \"inline\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridGapDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: StyleUtils\n    }, {\n      type: GridGapStyleBuilder\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n\n  GridGapDirective.propDecorators = {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridGapDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: GridGapStyleBuilder\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, {\n      inline: [{\n        type: Input,\n        args: ['gdInline']\n      }]\n    });\n  })();\n\n  return GridGapDirective;\n}();\n/** @type {?} */\n\n\nvar gapCache = new Map();\n/** @type {?} */\n\nvar gapInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$8 = ['gdGap', 'gdGap.xs', 'gdGap.sm', 'gdGap.md', 'gdGap.lg', 'gdGap.xl', 'gdGap.lt-sm', 'gdGap.lt-md', 'gdGap.lt-lg', 'gdGap.lt-xl', 'gdGap.gt-xs', 'gdGap.gt-sm', 'gdGap.gt-md', 'gdGap.gt-lg'];\n/** @type {?} */\n\nvar selector$8 = \"\\n  [gdGap],\\n  [gdGap.xs], [gdGap.sm], [gdGap.md], [gdGap.lg], [gdGap.xl],\\n  [gdGap.lt-sm], [gdGap.lt-md], [gdGap.lt-lg], [gdGap.lt-xl],\\n  [gdGap.gt-xs], [gdGap.gt-sm], [gdGap.gt-md], [gdGap.gt-lg]\\n\";\n/**\n * 'grid-gap' CSS Grid styling directive\n * Configures the gap between items in the grid\n * Syntax: <row gap> [<column-gap>]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-17\n */\n\nvar DefaultGridGapDirective =\n/** @class */\nfunction () {\n  /**\n   * 'grid-gap' CSS Grid styling directive\n   * Configures the gap between items in the grid\n   * Syntax: <row gap> [<column-gap>]\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-17\n   */\n  var DefaultGridGapDirective = /*#__PURE__*/function (_GridGapDirective) {\n    _inherits(DefaultGridGapDirective, _GridGapDirective);\n\n    var _super27 = _createSuper(DefaultGridGapDirective);\n\n    function DefaultGridGapDirective() {\n      var _this18;\n\n      _classCallCheck(this, DefaultGridGapDirective);\n\n      _this18 = _super27.apply(this, arguments);\n      _this18.inputs = inputs$8;\n      return _this18;\n    }\n\n    return DefaultGridGapDirective;\n  }(GridGapDirective);\n\n  DefaultGridGapDirective.ɵfac = function DefaultGridGapDirective_Factory(t) {\n    return ɵDefaultGridGapDirective_BaseFactory(t || DefaultGridGapDirective);\n  };\n\n  DefaultGridGapDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridGapDirective,\n    selectors: [[\"\", \"gdGap\", \"\"], [\"\", \"gdGap.xs\", \"\"], [\"\", \"gdGap.sm\", \"\"], [\"\", \"gdGap.md\", \"\"], [\"\", \"gdGap.lg\", \"\"], [\"\", \"gdGap.xl\", \"\"], [\"\", \"gdGap.lt-sm\", \"\"], [\"\", \"gdGap.lt-md\", \"\"], [\"\", \"gdGap.lt-lg\", \"\"], [\"\", \"gdGap.lt-xl\", \"\"], [\"\", \"gdGap.gt-xs\", \"\"], [\"\", \"gdGap.gt-sm\", \"\"], [\"\", \"gdGap.gt-md\", \"\"], [\"\", \"gdGap.gt-lg\", \"\"]],\n    inputs: {\n      gdGap: \"gdGap\",\n      \"gdGap.xs\": \"gdGap.xs\",\n      \"gdGap.sm\": \"gdGap.sm\",\n      \"gdGap.md\": \"gdGap.md\",\n      \"gdGap.lg\": \"gdGap.lg\",\n      \"gdGap.xl\": \"gdGap.xl\",\n      \"gdGap.lt-sm\": \"gdGap.lt-sm\",\n      \"gdGap.lt-md\": \"gdGap.lt-md\",\n      \"gdGap.lt-lg\": \"gdGap.lt-lg\",\n      \"gdGap.lt-xl\": \"gdGap.lt-xl\",\n      \"gdGap.gt-xs\": \"gdGap.gt-xs\",\n      \"gdGap.gt-sm\": \"gdGap.gt-sm\",\n      \"gdGap.gt-md\": \"gdGap.gt-md\",\n      \"gdGap.gt-lg\": \"gdGap.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridGapDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridGapDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridGapDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector$8,\n        inputs: inputs$8\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridGapDirective;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/row/row.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$6 = 'auto';\n\nvar GridRowStyleBuilder =\n/** @class */\nfunction () {\n  var GridRowStyleBuilder = /*#__PURE__*/function (_StyleBuilder10) {\n    _inherits(GridRowStyleBuilder, _StyleBuilder10);\n\n    var _super28 = _createSuper(GridRowStyleBuilder);\n\n    function GridRowStyleBuilder() {\n      _classCallCheck(this, GridRowStyleBuilder);\n\n      return _super28.apply(this, arguments);\n    }\n\n    _createClass(GridRowStyleBuilder, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @return {?}\n       */\n      function buildStyles(input) {\n        return {\n          'grid-row': input || DEFAULT_VALUE$6\n        };\n      }\n    }]);\n\n    return GridRowStyleBuilder;\n  }(StyleBuilder);\n\n  GridRowStyleBuilder.ɵfac = function GridRowStyleBuilder_Factory(t) {\n    return ɵGridRowStyleBuilder_BaseFactory(t || GridRowStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  GridRowStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function GridRowStyleBuilder_Factory() {\n      return new GridRowStyleBuilder();\n    },\n    token: GridRowStyleBuilder,\n    providedIn: \"root\"\n  });\n  var ɵGridRowStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridRowStyleBuilder);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridRowStyleBuilder, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridRowStyleBuilder;\n}();\n\nvar GridRowDirective =\n/** @class */\nfunction () {\n  var GridRowDirective = /*#__PURE__*/function (_BaseDirective10) {\n    _inherits(GridRowDirective, _BaseDirective10);\n\n    var _super29 = _createSuper(GridRowDirective);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} styleBuilder\n     * @param {?} styler\n     * @param {?} marshal\n     */\n    function GridRowDirective(elementRef, styleBuilder, styler, marshal) {\n      var _this19;\n\n      _classCallCheck(this, GridRowDirective);\n\n      _this19 = _super29.call(this, elementRef, styleBuilder, styler, marshal);\n      _this19.DIRECTIVE_KEY = 'grid-row';\n      _this19.styleCache = rowCache;\n\n      _this19.init();\n\n      return _this19;\n    }\n\n    return GridRowDirective;\n  }(BaseDirective2);\n\n  GridRowDirective.ɵfac = function GridRowDirective_Factory(t) {\n    return new (t || GridRowDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridRowStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridRowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridRowDirective,\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridRowDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: GridRowStyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridRowDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: GridRowStyleBuilder\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, null);\n  })();\n\n  return GridRowDirective;\n}();\n/** @type {?} */\n\n\nvar rowCache = new Map();\n/** @type {?} */\n\nvar inputs$9 = ['gdRow', 'gdRow.xs', 'gdRow.sm', 'gdRow.md', 'gdRow.lg', 'gdRow.xl', 'gdRow.lt-sm', 'gdRow.lt-md', 'gdRow.lt-lg', 'gdRow.lt-xl', 'gdRow.gt-xs', 'gdRow.gt-sm', 'gdRow.gt-md', 'gdRow.gt-lg'];\n/** @type {?} */\n\nvar selector$9 = \"\\n  [gdRow],\\n  [gdRow.xs], [gdRow.sm], [gdRow.md], [gdRow.lg], [gdRow.xl],\\n  [gdRow.lt-sm], [gdRow.lt-md], [gdRow.lt-lg], [gdRow.lt-xl],\\n  [gdRow.gt-xs], [gdRow.gt-sm], [gdRow.gt-md], [gdRow.gt-lg]\\n\";\n/**\n * 'grid-row' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n */\n\nvar DefaultGridRowDirective =\n/** @class */\nfunction () {\n  /**\n   * 'grid-row' CSS Grid styling directive\n   * Configures the name or position of an element within the grid\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n   */\n  var DefaultGridRowDirective = /*#__PURE__*/function (_GridRowDirective) {\n    _inherits(DefaultGridRowDirective, _GridRowDirective);\n\n    var _super30 = _createSuper(DefaultGridRowDirective);\n\n    function DefaultGridRowDirective() {\n      var _this20;\n\n      _classCallCheck(this, DefaultGridRowDirective);\n\n      _this20 = _super30.apply(this, arguments);\n      _this20.inputs = inputs$9;\n      return _this20;\n    }\n\n    return DefaultGridRowDirective;\n  }(GridRowDirective);\n\n  DefaultGridRowDirective.ɵfac = function DefaultGridRowDirective_Factory(t) {\n    return ɵDefaultGridRowDirective_BaseFactory(t || DefaultGridRowDirective);\n  };\n\n  DefaultGridRowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridRowDirective,\n    selectors: [[\"\", \"gdRow\", \"\"], [\"\", \"gdRow.xs\", \"\"], [\"\", \"gdRow.sm\", \"\"], [\"\", \"gdRow.md\", \"\"], [\"\", \"gdRow.lg\", \"\"], [\"\", \"gdRow.xl\", \"\"], [\"\", \"gdRow.lt-sm\", \"\"], [\"\", \"gdRow.lt-md\", \"\"], [\"\", \"gdRow.lt-lg\", \"\"], [\"\", \"gdRow.lt-xl\", \"\"], [\"\", \"gdRow.gt-xs\", \"\"], [\"\", \"gdRow.gt-sm\", \"\"], [\"\", \"gdRow.gt-md\", \"\"], [\"\", \"gdRow.gt-lg\", \"\"]],\n    inputs: {\n      gdRow: \"gdRow\",\n      \"gdRow.xs\": \"gdRow.xs\",\n      \"gdRow.sm\": \"gdRow.sm\",\n      \"gdRow.md\": \"gdRow.md\",\n      \"gdRow.lg\": \"gdRow.lg\",\n      \"gdRow.xl\": \"gdRow.xl\",\n      \"gdRow.lt-sm\": \"gdRow.lt-sm\",\n      \"gdRow.lt-md\": \"gdRow.lt-md\",\n      \"gdRow.lt-lg\": \"gdRow.lt-lg\",\n      \"gdRow.lt-xl\": \"gdRow.lt-xl\",\n      \"gdRow.gt-xs\": \"gdRow.gt-xs\",\n      \"gdRow.gt-sm\": \"gdRow.gt-sm\",\n      \"gdRow.gt-md\": \"gdRow.gt-md\",\n      \"gdRow.gt-lg\": \"gdRow.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridRowDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridRowDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridRowDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector$9,\n        inputs: inputs$9\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridRowDirective;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/rows/rows.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_VALUE$7 = 'none';\n/** @type {?} */\n\nvar AUTO_SPECIFIER$1 = '!';\n\nvar GridRowsStyleBuilder =\n/** @class */\nfunction () {\n  var GridRowsStyleBuilder = /*#__PURE__*/function (_StyleBuilder11) {\n    _inherits(GridRowsStyleBuilder, _StyleBuilder11);\n\n    var _super31 = _createSuper(GridRowsStyleBuilder);\n\n    function GridRowsStyleBuilder() {\n      _classCallCheck(this, GridRowsStyleBuilder);\n\n      return _super31.apply(this, arguments);\n    }\n\n    _createClass(GridRowsStyleBuilder, [{\n      key: \"buildStyles\",\n      value:\n      /**\n       * @param {?} input\n       * @param {?} parent\n       * @return {?}\n       */\n      function buildStyles(input, parent) {\n        input = input || DEFAULT_VALUE$7;\n        /** @type {?} */\n\n        var auto = false;\n\n        if (input.endsWith(AUTO_SPECIFIER$1)) {\n          input = input.substring(0, input.indexOf(AUTO_SPECIFIER$1));\n          auto = true;\n        }\n        /** @type {?} */\n\n\n        var css = {\n          'display': parent.inline ? 'inline-grid' : 'grid',\n          'grid-auto-rows': '',\n          'grid-template-rows': ''\n        };\n        /** @type {?} */\n\n        var key = auto ? 'grid-auto-rows' : 'grid-template-rows';\n        css[key] = input;\n        return css;\n      }\n    }]);\n\n    return GridRowsStyleBuilder;\n  }(StyleBuilder);\n\n  GridRowsStyleBuilder.ɵfac = function GridRowsStyleBuilder_Factory(t) {\n    return ɵGridRowsStyleBuilder_BaseFactory(t || GridRowsStyleBuilder);\n  };\n  /** @nocollapse */\n\n\n  GridRowsStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function GridRowsStyleBuilder_Factory() {\n      return new GridRowsStyleBuilder();\n    },\n    token: GridRowsStyleBuilder,\n    providedIn: \"root\"\n  });\n  var ɵGridRowsStyleBuilder_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(GridRowsStyleBuilder);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridRowsStyleBuilder, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return GridRowsStyleBuilder;\n}();\n\nvar GridRowsDirective =\n/** @class */\nfunction () {\n  var GridRowsDirective = /*#__PURE__*/function (_BaseDirective11) {\n    _inherits(GridRowsDirective, _BaseDirective11);\n\n    var _super32 = _createSuper(GridRowsDirective);\n\n    /**\n     * @param {?} elementRef\n     * @param {?} styleBuilder\n     * @param {?} styler\n     * @param {?} marshal\n     */\n    function GridRowsDirective(elementRef, styleBuilder, styler, marshal) {\n      var _this21;\n\n      _classCallCheck(this, GridRowsDirective);\n\n      _this21 = _super32.call(this, elementRef, styleBuilder, styler, marshal);\n      _this21.DIRECTIVE_KEY = 'grid-rows';\n      _this21._inline = false;\n\n      _this21.init();\n\n      return _this21;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(GridRowsDirective, [{\n      key: \"inline\",\n      get: function get() {\n        return this._inline;\n      }\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      ,\n      set: function set(val) {\n        this._inline = coerceBooleanProperty(val);\n      } // *********************************************\n      // Protected methods\n      // *********************************************\n\n      /**\n       * @protected\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateWithValue\",\n      value: function updateWithValue(value) {\n        this.styleCache = this.inline ? rowsInlineCache : rowsCache;\n        this.addStyles(value, {\n          inline: this.inline\n        });\n      }\n    }]);\n\n    return GridRowsDirective;\n  }(BaseDirective2);\n\n  GridRowsDirective.ɵfac = function GridRowsDirective_Factory(t) {\n    return new (t || GridRowsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridRowsStyleBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleUtils), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MediaMarshaller));\n  };\n\n  GridRowsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: GridRowsDirective,\n    inputs: {\n      inline: [\"gdInline\", \"inline\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  GridRowsDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: GridRowsStyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  };\n\n  GridRowsDirective.propDecorators = {\n    inline: [{\n      type: Input,\n      args: ['gdInline']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridRowsDirective, [{\n      type: Directive\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: GridRowsStyleBuilder\n      }, {\n        type: ɵngcc1.StyleUtils\n      }, {\n        type: ɵngcc1.MediaMarshaller\n      }];\n    }, {\n      inline: [{\n        type: Input,\n        args: ['gdInline']\n      }]\n    });\n  })();\n\n  return GridRowsDirective;\n}();\n/** @type {?} */\n\n\nvar rowsCache = new Map();\n/** @type {?} */\n\nvar rowsInlineCache = new Map();\n/** @type {?} */\n\nvar inputs$10 = ['gdRows', 'gdRows.xs', 'gdRows.sm', 'gdRows.md', 'gdRows.lg', 'gdRows.xl', 'gdRows.lt-sm', 'gdRows.lt-md', 'gdRows.lt-lg', 'gdRows.lt-xl', 'gdRows.gt-xs', 'gdRows.gt-sm', 'gdRows.gt-md', 'gdRows.gt-lg'];\n/** @type {?} */\n\nvar selector$10 = \"\\n  [gdRows],\\n  [gdRows.xs], [gdRows.sm], [gdRows.md], [gdRows.lg], [gdRows.xl],\\n  [gdRows.lt-sm], [gdRows.lt-md], [gdRows.lt-lg], [gdRows.lt-xl],\\n  [gdRows.gt-xs], [gdRows.gt-sm], [gdRows.gt-md], [gdRows.gt-lg]\\n\";\n/**\n * 'grid-template-rows' CSS Grid styling directive\n * Configures the sizing for the rows in the grid\n * Syntax: <column value> [auto]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n */\n\nvar DefaultGridRowsDirective =\n/** @class */\nfunction () {\n  /**\n   * 'grid-template-rows' CSS Grid styling directive\n   * Configures the sizing for the rows in the grid\n   * Syntax: <column value> [auto]\n   * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n   */\n  var DefaultGridRowsDirective = /*#__PURE__*/function (_GridRowsDirective) {\n    _inherits(DefaultGridRowsDirective, _GridRowsDirective);\n\n    var _super33 = _createSuper(DefaultGridRowsDirective);\n\n    function DefaultGridRowsDirective() {\n      var _this22;\n\n      _classCallCheck(this, DefaultGridRowsDirective);\n\n      _this22 = _super33.apply(this, arguments);\n      _this22.inputs = inputs$10;\n      return _this22;\n    }\n\n    return DefaultGridRowsDirective;\n  }(GridRowsDirective);\n\n  DefaultGridRowsDirective.ɵfac = function DefaultGridRowsDirective_Factory(t) {\n    return ɵDefaultGridRowsDirective_BaseFactory(t || DefaultGridRowsDirective);\n  };\n\n  DefaultGridRowsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DefaultGridRowsDirective,\n    selectors: [[\"\", \"gdRows\", \"\"], [\"\", \"gdRows.xs\", \"\"], [\"\", \"gdRows.sm\", \"\"], [\"\", \"gdRows.md\", \"\"], [\"\", \"gdRows.lg\", \"\"], [\"\", \"gdRows.xl\", \"\"], [\"\", \"gdRows.lt-sm\", \"\"], [\"\", \"gdRows.lt-md\", \"\"], [\"\", \"gdRows.lt-lg\", \"\"], [\"\", \"gdRows.lt-xl\", \"\"], [\"\", \"gdRows.gt-xs\", \"\"], [\"\", \"gdRows.gt-sm\", \"\"], [\"\", \"gdRows.gt-md\", \"\"], [\"\", \"gdRows.gt-lg\", \"\"]],\n    inputs: {\n      gdRows: \"gdRows\",\n      \"gdRows.xs\": \"gdRows.xs\",\n      \"gdRows.sm\": \"gdRows.sm\",\n      \"gdRows.md\": \"gdRows.md\",\n      \"gdRows.lg\": \"gdRows.lg\",\n      \"gdRows.xl\": \"gdRows.xl\",\n      \"gdRows.lt-sm\": \"gdRows.lt-sm\",\n      \"gdRows.lt-md\": \"gdRows.lt-md\",\n      \"gdRows.lt-lg\": \"gdRows.lt-lg\",\n      \"gdRows.lt-xl\": \"gdRows.lt-xl\",\n      \"gdRows.gt-xs\": \"gdRows.gt-xs\",\n      \"gdRows.gt-sm\": \"gdRows.gt-sm\",\n      \"gdRows.gt-md\": \"gdRows.gt-md\",\n      \"gdRows.gt-lg\": \"gdRows.gt-lg\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  var ɵDefaultGridRowsDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(DefaultGridRowsDirective);\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DefaultGridRowsDirective, [{\n      type: Directive,\n      args: [{\n        selector: selector$10,\n        inputs: inputs$10\n      }]\n    }], null, null);\n  })();\n\n  return DefaultGridRowsDirective;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar ALL_DIRECTIVES = [DefaultGridAlignDirective, DefaultGridAlignColumnsDirective, DefaultGridAlignRowsDirective, DefaultGridAreaDirective, DefaultGridAreasDirective, DefaultGridAutoDirective, DefaultGridColumnDirective, DefaultGridColumnsDirective, DefaultGridGapDirective, DefaultGridRowDirective, DefaultGridRowsDirective];\n/**\n * *****************************************************************\n * Define module for the CSS Grid API\n * *****************************************************************\n */\n\nvar GridModule =\n/** @class */\nfunction () {\n  /**\n   * *****************************************************************\n   * Define module for the CSS Grid API\n   * *****************************************************************\n   */\n  var GridModule = function GridModule() {\n    _classCallCheck(this, GridModule);\n  };\n\n  GridModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: GridModule\n  });\n  GridModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function GridModule_Factory(t) {\n      return new (t || GridModule)();\n    },\n    imports: [[CoreModule]]\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GridModule, {\n      declarations: function declarations() {\n        return [DefaultGridAlignDirective, DefaultGridAlignColumnsDirective, DefaultGridAlignRowsDirective, DefaultGridAreaDirective, DefaultGridAreasDirective, DefaultGridAutoDirective, DefaultGridColumnDirective, DefaultGridColumnsDirective, DefaultGridGapDirective, DefaultGridRowDirective, DefaultGridRowsDirective];\n      },\n      imports: function imports() {\n        return [CoreModule];\n      },\n      exports: function exports() {\n        return [DefaultGridAlignDirective, DefaultGridAlignColumnsDirective, DefaultGridAlignRowsDirective, DefaultGridAreaDirective, DefaultGridAreasDirective, DefaultGridAutoDirective, DefaultGridColumnDirective, DefaultGridColumnsDirective, DefaultGridGapDirective, DefaultGridRowDirective, DefaultGridRowsDirective];\n      }\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(GridModule, [{\n      type: NgModule,\n      args: [{\n        imports: [CoreModule],\n        declarations: [].concat(ALL_DIRECTIVES),\n        exports: [].concat(ALL_DIRECTIVES)\n      }]\n    }], null, null);\n  })();\n\n  return GridModule;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { GridModule, DefaultGridAlignColumnsDirective as ɵgrid_privatef, GridAlignColumnsDirective as ɵgrid_privatee, GridAlignColumnsStyleBuilder as ɵgrid_privated, DefaultGridAlignRowsDirective as ɵgrid_privatei, GridAlignRowsDirective as ɵgrid_privateh, GridAlignRowsStyleBuilder as ɵgrid_privateg, DefaultGridAreaDirective as ɵgrid_privatel, GridAreaDirective as ɵgrid_privatek, GridAreaStyleBuilder as ɵgrid_privatej, DefaultGridAreasDirective as ɵgrid_privateo, GridAreasDirective as ɵgrid_privaten, GridAreasStyleBuiler as ɵgrid_privatem, DefaultGridAutoDirective as ɵgrid_privater, GridAutoDirective as ɵgrid_privateq, GridAutoStyleBuilder as ɵgrid_privatep, DefaultGridColumnDirective as ɵgrid_privateu, GridColumnDirective as ɵgrid_privatet, GridColumnStyleBuilder as ɵgrid_privates, DefaultGridColumnsDirective as ɵgrid_privatex, GridColumnsDirective as ɵgrid_privatew, GridColumnsStyleBuilder as ɵgrid_privatev, DefaultGridGapDirective as ɵgrid_privateba, GridGapDirective as ɵgrid_privatez, GridGapStyleBuilder as ɵgrid_privatey, DefaultGridAlignDirective as ɵgrid_privatec, GridAlignDirective as ɵgrid_privateb, GridAlignStyleBuilder as ɵgrid_privatea, DefaultGridRowDirective as ɵgrid_privatebd, GridRowDirective as ɵgrid_privatebc, GridRowStyleBuilder as ɵgrid_privatebb, DefaultGridRowsDirective as ɵgrid_privatebg, GridRowsDirective as ɵgrid_privatebf, GridRowsStyleBuilder as ɵgrid_privatebe };","map":{"version":3,"sources":["../../../src/lib/grid/grid-align/grid-align.ts","../../../src/lib/grid/align-columns/align-columns.ts","../../../src/lib/grid/align-rows/align-rows.ts","../../../src/lib/grid/area/area.ts","../../../src/lib/grid/areas/areas.ts","../../../src/lib/grid/auto/auto.ts","../../../src/lib/grid/column/column.ts","../../../src/lib/grid/columns/columns.ts","../../../src/lib/grid/gap/gap.ts","../../../src/lib/grid/row/row.ts","../../../src/lib/grid/rows/rows.ts","../../../src/lib/grid/module.ts"],"names":["buildCss","inputs","selector","DEFAULT_MAIN","DEFAULT_CROSS","DEFAULT_VALUE","AUTO_SPECIFIER"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable} from '@angular/core';\nimport {\n  MediaMarshaller,\n  BaseDirective2,\n  StyleBuilder,\n  StyleDefinition,\n  StyleUtils,\n} from '@angular/flex-layout/core';\n\nconst ROW_DEFAULT = 'stretch';\nconst COL_DEFAULT = 'stretch';\n\n@Injectable({providedIn: 'root'})\nexport class GridAlignStyleBuilder extends StyleBuilder {\n  buildStyles(input: string) {\n    return buildCss(input || ROW_DEFAULT);\n  }\n}\n\n@Directive()\nexport class GridAlignDirective extends BaseDirective2 {\n\n  protected DIRECTIVE_KEY = 'grid-align';\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridAlignStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  protected styleCache = alignCache;\n}\n\nconst alignCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdGridAlign',\n  'gdGridAlign.xs', 'gdGridAlign.sm', 'gdGridAlign.md', 'gdGridAlign.lg', 'gdGridAlign.xl',\n  'gdGridAlign.lt-sm', 'gdGridAlign.lt-md', 'gdGridAlign.lt-lg', 'gdGridAlign.lt-xl',\n  'gdGridAlign.gt-xs', 'gdGridAlign.gt-sm', 'gdGridAlign.gt-md', 'gdGridAlign.gt-lg'\n];\n\nconst selector = `\n  [gdGridAlign],\n  [gdGridAlign.xs], [gdGridAlign.sm], [gdGridAlign.md], [gdGridAlign.lg],[gdGridAlign.xl],\n  [gdGridAlign.lt-sm], [gdGridAlign.lt-md], [gdGridAlign.lt-lg], [gdGridAlign.lt-xl],\n  [gdGridAlign.gt-xs], [gdGridAlign.gt-sm], [gdGridAlign.gt-md], [gdGridAlign.gt-lg]\n`;\n\n/**\n * 'align' CSS Grid styling directive for grid children\n *  Defines positioning of child elements along row and column axis in a grid container\n *  Optional values: {row-axis} values or {row-axis column-axis} value pairs\n *\n *  @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-self\n *  @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-self\n */\n@Directive({selector, inputs})\nexport class DefaultGridAlignDirective extends GridAlignDirective {\n  protected inputs = inputs;\n}\n\nfunction buildCss(align: string = '') {\n  const css: {[key: string]: string} = {}, [rowAxis, columnAxis] = align.split(' ');\n\n  // Row axis\n  switch (rowAxis) {\n    case 'end':\n      css['justify-self'] = 'end';\n      break;\n    case 'center':\n      css['justify-self'] = 'center';\n      break;\n    case 'stretch':\n      css['justify-self'] = 'stretch';\n      break;\n    case 'start':\n      css['justify-self'] = 'start';\n      break;\n    default:\n      css['justify-self'] = ROW_DEFAULT;  // default row axis\n      break;\n  }\n\n  // Column axis\n  switch (columnAxis) {\n    case 'end':\n      css['align-self'] = 'end';\n      break;\n    case 'center':\n      css['align-self'] = 'center';\n      break;\n    case 'stretch':\n      css['align-self'] = 'stretch';\n      break;\n    case 'start':\n      css['align-self'] = 'start';\n      break;\n    default:\n      css['align-self'] = COL_DEFAULT;  // default column axis\n      break;\n  }\n\n  return css;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable, Input} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  StyleBuilder,\n  StyleDefinition,\n  MediaMarshaller,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_MAIN = 'start';\nconst DEFAULT_CROSS = 'stretch';\n\nexport interface GridAlignColumnsParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridAlignColumnsStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridAlignColumnsParent) {\n    return buildCss(input || `${DEFAULT_MAIN} ${DEFAULT_CROSS}`, parent.inline);\n  }\n}\n\n@Directive()\nexport class GridAlignColumnsDirective extends BaseDirective2 {\n\n  protected DIRECTIVE_KEY = 'grid-align-columns';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridAlignColumnsStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? alignColumnsInlineCache : alignColumnsCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst alignColumnsCache: Map<string, StyleDefinition> = new Map();\nconst alignColumnsInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdAlignColumns',\n  'gdAlignColumns.xs', 'gdAlignColumns.sm', 'gdAlignColumns.md',\n  'gdAlignColumns.lg', 'gdAlignColumns.xl', 'gdAlignColumns.lt-sm',\n  'gdAlignColumns.lt-md', 'gdAlignColumns.lt-lg', 'gdAlignColumns.lt-xl',\n  'gdAlignColumns.gt-xs', 'gdAlignColumns.gt-sm', 'gdAlignColumns.gt-md',\n  'gdAlignColumns.gt-lg'\n];\nconst selector = `\n  [gdAlignColumns],\n  [gdAlignColumns.xs], [gdAlignColumns.sm], [gdAlignColumns.md],\n  [gdAlignColumns.lg], [gdAlignColumns.xl], [gdAlignColumns.lt-sm],\n  [gdAlignColumns.lt-md], [gdAlignColumns.lt-lg], [gdAlignColumns.lt-xl],\n  [gdAlignColumns.gt-xs], [gdAlignColumns.gt-sm], [gdAlignColumns.gt-md],\n  [gdAlignColumns.gt-lg]\n`;\n\n/**\n * 'column alignment' CSS Grid styling directive\n * Configures the alignment in the column direction\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-19\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-21\n */\n@Directive({selector, inputs})\nexport class DefaultGridAlignColumnsDirective extends GridAlignColumnsDirective {\n  protected inputs = inputs;\n}\n\nfunction buildCss(align: string, inline: boolean): StyleDefinition {\n  const css: {[key: string]: string} = {}, [mainAxis, crossAxis] = align.split(' ');\n\n  // Main axis\n  switch (mainAxis) {\n    case 'center':\n      css['align-content'] = 'center';\n      break;\n    case 'space-around':\n      css['align-content'] = 'space-around';\n      break;\n    case 'space-between':\n      css['align-content'] = 'space-between';\n      break;\n    case 'space-evenly':\n      css['align-content'] = 'space-evenly';\n      break;\n    case 'end':\n      css['align-content'] = 'end';\n      break;\n    case 'start':\n      css['align-content'] = 'start';\n      break;\n    case 'stretch':\n      css['align-content'] = 'stretch';\n      break;\n    default:\n      css['align-content'] = DEFAULT_MAIN;  // default main axis\n      break;\n  }\n\n  // Cross-axis\n  switch (crossAxis) {\n    case 'start':\n      css['align-items'] = 'start';\n      break;\n    case 'center':\n      css['align-items'] = 'center';\n      break;\n    case 'end':\n      css['align-items'] = 'end';\n      break;\n    case 'stretch':\n      css['align-items'] = 'stretch';\n      break;\n    default : // 'stretch'\n      css['align-items'] = DEFAULT_CROSS;   // default cross axis\n      break;\n  }\n\n  css['display'] = inline ? 'inline-grid' : 'grid';\n\n  return css;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable, Input} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  StyleBuilder,\n  StyleDefinition,\n  MediaMarshaller,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_MAIN = 'start';\nconst DEFAULT_CROSS = 'stretch';\n\nexport interface GridAlignRowsParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridAlignRowsStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridAlignRowsParent) {\n    return buildCss(input || `${DEFAULT_MAIN} ${DEFAULT_CROSS}`, parent.inline);\n  }\n}\n\n@Directive()\nexport class GridAlignRowsDirective extends BaseDirective2 {\n\n  protected DIRECTIVE_KEY = 'grid-align-rows';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridAlignRowsStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? alignRowsInlineCache : alignRowsCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst alignRowsCache: Map<string, StyleDefinition> = new Map();\nconst alignRowsInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdAlignRows',\n  'gdAlignRows.xs', 'gdAlignRows.sm', 'gdAlignRows.md',\n  'gdAlignRows.lg', 'gdAlignRows.xl', 'gdAlignRows.lt-sm',\n  'gdAlignRows.lt-md', 'gdAlignRows.lt-lg', 'gdAlignRows.lt-xl',\n  'gdAlignRows.gt-xs', 'gdAlignRows.gt-sm', 'gdAlignRows.gt-md',\n  'gdAlignRows.gt-lg'\n];\nconst selector = `\n  [gdAlignRows],\n  [gdAlignRows.xs], [gdAlignRows.sm], [gdAlignRows.md],\n  [gdAlignRows.lg], [gdAlignRows.xl], [gdAlignRows.lt-sm],\n  [gdAlignRows.lt-md], [gdAlignRows.lt-lg], [gdAlignRows.lt-xl],\n  [gdAlignRows.gt-xs], [gdAlignRows.gt-sm], [gdAlignRows.gt-md],\n  [gdAlignRows.gt-lg]\n`;\n\n/**\n * 'row alignment' CSS Grid styling directive\n * Configures the alignment in the row direction\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-18\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-20\n */\n@Directive({selector, inputs})\nexport class DefaultGridAlignRowsDirective extends GridAlignRowsDirective {\n  protected inputs = inputs;\n}\n\nfunction buildCss(align: string, inline: boolean): StyleDefinition {\n  const css: {[key: string]: string} = {}, [mainAxis, crossAxis] = align.split(' ');\n\n  // Main axis\n  switch (mainAxis) {\n    case 'center':\n    case 'space-around':\n    case 'space-between':\n    case 'space-evenly':\n    case 'end':\n    case 'start':\n    case 'stretch':\n      css['justify-content'] = mainAxis;\n      break;\n    default:\n      css['justify-content'] = DEFAULT_MAIN;  // default main axis\n      break;\n  }\n\n  // Cross-axis\n  switch (crossAxis) {\n    case 'start':\n    case 'center':\n    case 'end':\n    case 'stretch':\n      css['justify-items'] = crossAxis;\n      break;\n    default : // 'stretch'\n      css['justify-items'] = DEFAULT_CROSS;   // default cross axis\n      break;\n  }\n\n  css['display'] = inline ? 'inline-grid' : 'grid';\n\n  return css;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  MediaMarshaller,\n  StyleBuilder,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\n\nconst DEFAULT_VALUE = 'auto';\n\n@Injectable({providedIn: 'root'})\nexport class GridAreaStyleBuilder extends StyleBuilder {\n  buildStyles(input: string) {\n    return {'grid-area': input || DEFAULT_VALUE};\n  }\n}\n\n@Directive()\nexport class GridAreaDirective extends BaseDirective2 {\n\n  protected DIRECTIVE_KEY = 'grid-area';\n\n  constructor(elRef: ElementRef,\n              styleUtils: StyleUtils,\n              styleBuilder: GridAreaStyleBuilder,\n              marshal: MediaMarshaller) {\n    super(elRef, styleBuilder, styleUtils, marshal);\n    this.init();\n  }\n\n  protected styleCache = gridAreaCache;\n}\n\nconst gridAreaCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdArea',\n  'gdArea.xs', 'gdArea.sm', 'gdArea.md', 'gdArea.lg', 'gdArea.xl',\n  'gdArea.lt-sm', 'gdArea.lt-md', 'gdArea.lt-lg', 'gdArea.lt-xl',\n  'gdArea.gt-xs', 'gdArea.gt-sm', 'gdArea.gt-md', 'gdArea.gt-lg'\n];\nconst selector = `\n  [gdArea],\n  [gdArea.xs], [gdArea.sm], [gdArea.md], [gdArea.lg], [gdArea.xl],\n  [gdArea.lt-sm], [gdArea.lt-md], [gdArea.lt-lg], [gdArea.lt-xl],\n  [gdArea.gt-xs], [gdArea.gt-sm], [gdArea.gt-md], [gdArea.gt-lg]\n`;\n\n/**\n * 'grid-area' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27\n */\n@Directive({selector, inputs})\nexport class DefaultGridAreaDirective extends GridAreaDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable, Input} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  StyleBuilder,\n  MediaMarshaller,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_VALUE = 'none';\nconst DELIMETER = '|';\n\nexport interface GridAreasParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridAreasStyleBuiler extends StyleBuilder {\n  buildStyles(input: string, parent: GridAreasParent) {\n    const areas = (input || DEFAULT_VALUE).split(DELIMETER).map(v => `\"${v.trim()}\"`);\n\n    return {\n      'display': parent.inline ? 'inline-grid' : 'grid',\n      'grid-template-areas': areas.join(' ')\n    };\n  }\n}\n\n@Directive()\nexport class GridAreasDirective extends BaseDirective2 {\n\n  protected DIRECTIVE_KEY = 'grid-areas';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elRef: ElementRef,\n              styleUtils: StyleUtils,\n              styleBuilder: GridAreasStyleBuiler,\n              marshal: MediaMarshaller) {\n    super(elRef, styleBuilder, styleUtils, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? areasInlineCache : areasCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst areasCache: Map<string, StyleDefinition> = new Map();\nconst areasInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdAreas',\n  'gdAreas.xs', 'gdAreas.sm', 'gdAreas.md', 'gdAreas.lg', 'gdAreas.xl',\n  'gdAreas.lt-sm', 'gdAreas.lt-md', 'gdAreas.lt-lg', 'gdAreas.lt-xl',\n  'gdAreas.gt-xs', 'gdAreas.gt-sm', 'gdAreas.gt-md', 'gdAreas.gt-lg'\n];\n\nconst selector = `\n  [gdAreas],\n  [gdAreas.xs], [gdAreas.sm], [gdAreas.md], [gdAreas.lg], [gdAreas.xl],\n  [gdAreas.lt-sm], [gdAreas.lt-md], [gdAreas.lt-lg], [gdAreas.lt-xl],\n  [gdAreas.gt-xs], [gdAreas.gt-sm], [gdAreas.gt-md], [gdAreas.gt-lg]\n`;\n\n/**\n * 'grid-template-areas' CSS Grid styling directive\n * Configures the names of elements within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-14\n */\n@Directive({selector, inputs})\nexport class DefaultGridAreasDirective extends GridAreasDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Input, Injectable} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  StyleBuilder,\n  MediaMarshaller,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_VALUE = 'initial';\n\nexport interface GridAutoParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridAutoStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridAutoParent) {\n    let [direction, dense] = (input || DEFAULT_VALUE).split(' ');\n    if (direction !== 'column' && direction !== 'row' && direction !== 'dense') {\n      direction = 'row';\n    }\n\n    dense = (dense === 'dense' && direction !== 'dense') ? ' dense' : '';\n\n    return {\n      'display': parent.inline ? 'inline-grid' : 'grid',\n      'grid-auto-flow': direction + dense\n    };\n  }\n}\n\n@Directive()\nexport class GridAutoDirective extends BaseDirective2 {\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  protected DIRECTIVE_KEY = 'grid-auto';\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridAutoStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? autoInlineCache : autoCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst autoCache: Map<string, StyleDefinition> = new Map();\nconst autoInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdAuto',\n  'gdAuto.xs', 'gdAuto.sm', 'gdAuto.md', 'gdAuto.lg', 'gdAuto.xl',\n  'gdAuto.lt-sm', 'gdAuto.lt-md', 'gdAuto.lt-lg', 'gdAuto.lt-xl',\n  'gdAuto.gt-xs', 'gdAuto.gt-sm', 'gdAuto.gt-md', 'gdAuto.gt-lg'\n];\nconst selector = `\n  [gdAuto],\n  [gdAuto.xs], [gdAuto.sm], [gdAuto.md], [gdAuto.lg], [gdAuto.xl],\n  [gdAuto.lt-sm], [gdAuto.lt-md], [gdAuto.lt-lg], [gdAuto.lt-xl],\n  [gdAuto.gt-xs], [gdAuto.gt-sm], [gdAuto.gt-md], [gdAuto.gt-lg]\n`;\n\n/**\n * 'grid-auto-flow' CSS Grid styling directive\n * Configures the auto placement algorithm for the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-23\n */\n@Directive({selector, inputs})\nexport class DefaultGridAutoDirective extends GridAutoDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  MediaMarshaller,\n  StyleBuilder,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\n\nconst DEFAULT_VALUE = 'auto';\n\n@Injectable({providedIn: 'root'})\nexport class GridColumnStyleBuilder extends StyleBuilder {\n  buildStyles(input: string) {\n    return {'grid-column': input || DEFAULT_VALUE};\n  }\n}\n\n@Directive()\nexport class GridColumnDirective extends BaseDirective2 {\n  protected DIRECTIVE_KEY = 'grid-column';\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridColumnStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  protected styleCache = columnCache;\n}\n\nconst columnCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdColumn',\n  'gdColumn.xs', 'gdColumn.sm', 'gdColumn.md', 'gdColumn.lg', 'gdColumn.xl',\n  'gdColumn.lt-sm', 'gdColumn.lt-md', 'gdColumn.lt-lg', 'gdColumn.lt-xl',\n  'gdColumn.gt-xs', 'gdColumn.gt-sm', 'gdColumn.gt-md', 'gdColumn.gt-lg'\n];\n\nconst selector = `\n  [gdColumn],\n  [gdColumn.xs], [gdColumn.sm], [gdColumn.md], [gdColumn.lg], [gdColumn.xl],\n  [gdColumn.lt-sm], [gdColumn.lt-md], [gdColumn.lt-lg], [gdColumn.lt-xl],\n  [gdColumn.gt-xs], [gdColumn.gt-sm], [gdColumn.gt-md], [gdColumn.gt-lg]\n`;\n\n/**\n * 'grid-column' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n */\n@Directive({selector, inputs})\nexport class DefaultGridColumnDirective extends GridColumnDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Input, Injectable} from '@angular/core';\nimport {\n  MediaMarshaller,\n  BaseDirective2,\n  StyleBuilder,\n  StyleDefinition,\n  StyleUtils,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_VALUE = 'none';\nconst AUTO_SPECIFIER = '!';\n\nexport interface GridColumnsParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridColumnsStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridColumnsParent) {\n    input = input || DEFAULT_VALUE;\n    let auto = false;\n    if (input.endsWith(AUTO_SPECIFIER)) {\n      input = input.substring(0, input.indexOf(AUTO_SPECIFIER));\n      auto = true;\n    }\n\n    const css = {\n      'display': parent.inline ? 'inline-grid' : 'grid',\n      'grid-auto-columns': '',\n      'grid-template-columns': '',\n    };\n    const key = (auto ? 'grid-auto-columns' : 'grid-template-columns');\n    css[key] = input;\n\n    return css;\n  }\n}\n\n@Directive()\nexport class GridColumnsDirective extends BaseDirective2 {\n  protected DIRECTIVE_KEY = 'grid-columns';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridColumnsStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? columnsInlineCache : columnsCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst columnsCache: Map<string, StyleDefinition> = new Map();\nconst columnsInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdColumns',\n  'gdColumns.xs', 'gdColumns.sm', 'gdColumns.md', 'gdColumns.lg', 'gdColumns.xl',\n  'gdColumns.lt-sm', 'gdColumns.lt-md', 'gdColumns.lt-lg', 'gdColumns.lt-xl',\n  'gdColumns.gt-xs', 'gdColumns.gt-sm', 'gdColumns.gt-md', 'gdColumns.gt-lg'\n];\n\nconst selector = `\n  [gdColumns],\n  [gdColumns.xs], [gdColumns.sm], [gdColumns.md], [gdColumns.lg], [gdColumns.xl],\n  [gdColumns.lt-sm], [gdColumns.lt-md], [gdColumns.lt-lg], [gdColumns.lt-xl],\n  [gdColumns.gt-xs], [gdColumns.gt-sm], [gdColumns.gt-md], [gdColumns.gt-lg]\n`;\n\n/**\n * 'grid-template-columns' CSS Grid styling directive\n * Configures the sizing for the columns in the grid\n * Syntax: <column value> [auto]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n */\n@Directive({selector, inputs})\nexport class DefaultGridColumnsDirective extends GridColumnsDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Input, Injectable} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  MediaMarshaller,\n  StyleBuilder,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_VALUE = '0';\n\nexport interface GridGapParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridGapStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridGapParent) {\n    return {\n      'display': parent.inline ? 'inline-grid' : 'grid',\n      'grid-gap': input || DEFAULT_VALUE\n    };\n  }\n}\n\n@Directive()\nexport class GridGapDirective extends BaseDirective2 {\n  protected DIRECTIVE_KEY = 'grid-gap';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elRef: ElementRef,\n              styleUtils: StyleUtils,\n              styleBuilder: GridGapStyleBuilder,\n              marshal: MediaMarshaller) {\n    super(elRef, styleBuilder, styleUtils, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? gapInlineCache : gapCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst gapCache: Map<string, StyleDefinition> = new Map();\nconst gapInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdGap',\n  'gdGap.xs', 'gdGap.sm', 'gdGap.md', 'gdGap.lg', 'gdGap.xl',\n  'gdGap.lt-sm', 'gdGap.lt-md', 'gdGap.lt-lg', 'gdGap.lt-xl',\n  'gdGap.gt-xs', 'gdGap.gt-sm', 'gdGap.gt-md', 'gdGap.gt-lg'\n];\n\nconst selector = `\n  [gdGap],\n  [gdGap.xs], [gdGap.sm], [gdGap.md], [gdGap.lg], [gdGap.xl],\n  [gdGap.lt-sm], [gdGap.lt-md], [gdGap.lt-lg], [gdGap.lt-xl],\n  [gdGap.gt-xs], [gdGap.gt-sm], [gdGap.gt-md], [gdGap.gt-lg]\n`;\n\n/**\n * 'grid-gap' CSS Grid styling directive\n * Configures the gap between items in the grid\n * Syntax: <row gap> [<column-gap>]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-17\n */\n@Directive({selector, inputs})\nexport class DefaultGridGapDirective extends GridGapDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Injectable} from '@angular/core';\nimport {\n  BaseDirective2,\n  StyleUtils,\n  MediaMarshaller,\n  StyleBuilder,\n  StyleDefinition,\n} from '@angular/flex-layout/core';\n\nconst DEFAULT_VALUE = 'auto';\n\n@Injectable({providedIn: 'root'})\nexport class GridRowStyleBuilder extends StyleBuilder {\n  buildStyles(input: string) {\n    return {'grid-row': input || DEFAULT_VALUE};\n  }\n}\n\n@Directive()\nexport class GridRowDirective extends BaseDirective2 {\n  protected DIRECTIVE_KEY = 'grid-row';\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridRowStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  protected styleCache = rowCache;\n}\n\nconst rowCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdRow',\n  'gdRow.xs', 'gdRow.sm', 'gdRow.md', 'gdRow.lg', 'gdRow.xl',\n  'gdRow.lt-sm', 'gdRow.lt-md', 'gdRow.lt-lg', 'gdRow.lt-xl',\n  'gdRow.gt-xs', 'gdRow.gt-sm', 'gdRow.gt-md', 'gdRow.gt-lg'\n];\n\nconst selector = `\n  [gdRow],\n  [gdRow.xs], [gdRow.sm], [gdRow.md], [gdRow.lg], [gdRow.xl],\n  [gdRow.lt-sm], [gdRow.lt-md], [gdRow.lt-lg], [gdRow.lt-xl],\n  [gdRow.gt-xs], [gdRow.gt-sm], [gdRow.gt-md], [gdRow.gt-lg]\n`;\n\n/**\n * 'grid-row' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n */\n@Directive({selector, inputs})\nexport class DefaultGridRowDirective extends GridRowDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Input, Injectable} from '@angular/core';\nimport {\n  MediaMarshaller,\n  BaseDirective2,\n  StyleBuilder,\n  StyleDefinition,\n  StyleUtils,\n} from '@angular/flex-layout/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst DEFAULT_VALUE = 'none';\nconst AUTO_SPECIFIER = '!';\n\nexport interface GridRowsParent {\n  inline: boolean;\n}\n\n@Injectable({providedIn: 'root'})\nexport class GridRowsStyleBuilder extends StyleBuilder {\n  buildStyles(input: string, parent: GridRowsParent) {\n    input = input || DEFAULT_VALUE;\n    let auto = false;\n    if (input.endsWith(AUTO_SPECIFIER)) {\n      input = input.substring(0, input.indexOf(AUTO_SPECIFIER));\n      auto = true;\n    }\n\n    const css = {\n      'display': parent.inline ? 'inline-grid' : 'grid',\n      'grid-auto-rows': '',\n      'grid-template-rows': '',\n    };\n    const key = (auto ? 'grid-auto-rows' : 'grid-template-rows');\n    css[key] = input;\n\n    return css;\n  }\n}\n\n@Directive()\nexport class GridRowsDirective extends BaseDirective2 {\n  protected DIRECTIVE_KEY = 'grid-rows';\n\n  @Input('gdInline')\n  get inline(): boolean { return this._inline; }\n  set inline(val: boolean) { this._inline = coerceBooleanProperty(val); }\n  protected _inline = false;\n\n  constructor(elementRef: ElementRef,\n              styleBuilder: GridRowsStyleBuilder,\n              styler: StyleUtils,\n              marshal: MediaMarshaller) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.init();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected updateWithValue(value: string) {\n    this.styleCache = this.inline ? rowsInlineCache : rowsCache;\n    this.addStyles(value, {inline: this.inline});\n  }\n}\n\nconst rowsCache: Map<string, StyleDefinition> = new Map();\nconst rowsInlineCache: Map<string, StyleDefinition> = new Map();\n\nconst inputs = [\n  'gdRows',\n  'gdRows.xs', 'gdRows.sm', 'gdRows.md', 'gdRows.lg', 'gdRows.xl',\n  'gdRows.lt-sm', 'gdRows.lt-md', 'gdRows.lt-lg', 'gdRows.lt-xl',\n  'gdRows.gt-xs', 'gdRows.gt-sm', 'gdRows.gt-md', 'gdRows.gt-lg'\n];\n\nconst selector = `\n  [gdRows],\n  [gdRows.xs], [gdRows.sm], [gdRows.md], [gdRows.lg], [gdRows.xl],\n  [gdRows.lt-sm], [gdRows.lt-md], [gdRows.lt-lg], [gdRows.lt-xl],\n  [gdRows.gt-xs], [gdRows.gt-sm], [gdRows.gt-md], [gdRows.gt-lg]\n`;\n\n/**\n * 'grid-template-rows' CSS Grid styling directive\n * Configures the sizing for the rows in the grid\n * Syntax: <column value> [auto]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n */\n@Directive({selector, inputs})\nexport class DefaultGridRowsDirective extends GridRowsDirective {\n  protected inputs = inputs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CoreModule} from '@angular/flex-layout/core';\n\nimport {DefaultGridAlignDirective} from './grid-align/grid-align';\nimport {DefaultGridAlignColumnsDirective} from './align-columns/align-columns';\nimport {DefaultGridAlignRowsDirective} from './align-rows/align-rows';\nimport {DefaultGridAreaDirective} from './area/area';\nimport {DefaultGridAreasDirective} from './areas/areas';\nimport {DefaultGridAutoDirective} from './auto/auto';\nimport {DefaultGridColumnDirective} from './column/column';\nimport {DefaultGridColumnsDirective} from './columns/columns';\nimport {DefaultGridGapDirective} from './gap/gap';\nimport {DefaultGridRowDirective} from './row/row';\nimport {DefaultGridRowsDirective} from './rows/rows';\n\n\nconst ALL_DIRECTIVES = [\n  DefaultGridAlignDirective,\n  DefaultGridAlignColumnsDirective,\n  DefaultGridAlignRowsDirective,\n  DefaultGridAreaDirective,\n  DefaultGridAreasDirective,\n  DefaultGridAutoDirective,\n  DefaultGridColumnDirective,\n  DefaultGridColumnsDirective,\n  DefaultGridGapDirective,\n  DefaultGridRowDirective,\n  DefaultGridRowsDirective,\n];\n\n/**\n * *****************************************************************\n * Define module for the CSS Grid API\n * *****************************************************************\n */\n\n@NgModule({\n  imports: [CoreModule],\n  declarations: [...ALL_DIRECTIVES],\n  exports: [...ALL_DIRECTIVES]\n})\nexport class GridModule {\n}\n"]},"metadata":{},"sourceType":"module"}