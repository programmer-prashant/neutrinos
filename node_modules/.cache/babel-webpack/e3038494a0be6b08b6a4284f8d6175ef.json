{"ast":null,"code":"import _toConsumableArray from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, ɵɵdefineInjectable, EventEmitter, Directive, ElementRef, Input, Output, NgModule } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { cloneDeep } from 'lodash-es';\nimport { pluginService, Chart as Chart$1 } from 'chart.js';\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/default-colors.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nvar defaultColors = [[255, 99, 132], [54, 162, 235], [255, 206, 86], [231, 233, 237], [75, 192, 192], [151, 187, 205], [220, 220, 220], [247, 70, 74], [70, 191, 189], [253, 180, 92], [148, 159, 177], [77, 83, 96]];\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/get-colors.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Generate colors by chart type\r\n * @param {?} chartType\r\n * @param {?} index\r\n * @param {?} count\r\n * @return {?}\r\n */\n\nfunction getColors(chartType, index, count) {\n  if (chartType === 'pie' || chartType === 'doughnut') {\n    return formatPieColors(generateColors(count));\n  }\n\n  if (chartType === 'polarArea') {\n    return formatPolarAreaColors(generateColors(count));\n  }\n\n  if (chartType === 'line' || chartType === 'radar') {\n    return formatLineColor(generateColor(index));\n  }\n\n  if (chartType === 'bar' || chartType === 'horizontalBar') {\n    return formatBarColor(generateColor(index));\n  }\n\n  if (chartType === 'bubble') {\n    return formatPieColors(generateColors(count));\n  }\n\n  if (chartType === 'scatter') {\n    return formatPieColors(generateColors(count));\n  }\n\n  throw new Error(\"getColors - Unsupported chart type \".concat(chartType));\n}\n/**\r\n * @param {?} colour\r\n * @param {?} alpha\r\n * @return {?}\r\n */\n\n\nfunction rgba(colour, alpha) {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n/**\r\n * @param {?} min\r\n * @param {?} max\r\n * @return {?}\r\n */\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n/**\r\n * @param {?} colors\r\n * @return {?}\r\n */\n\n\nfunction formatLineColor(colors) {\n  return {\n    backgroundColor: rgba(colors, 0.4),\n    borderColor: rgba(colors, 1),\n    pointBackgroundColor: rgba(colors, 1),\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: rgba(colors, 0.8)\n  };\n}\n/**\r\n * @param {?} colors\r\n * @return {?}\r\n */\n\n\nfunction formatBarColor(colors) {\n  return {\n    backgroundColor: rgba(colors, 0.6),\n    borderColor: rgba(colors, 1),\n    hoverBackgroundColor: rgba(colors, 0.8),\n    hoverBorderColor: rgba(colors, 1)\n  };\n}\n/**\r\n * @param {?} colors\r\n * @return {?}\r\n */\n\n\nfunction formatPieColors(colors) {\n  return {\n    backgroundColor: colors.map(\n    /**\r\n    * @param {?} color\r\n    * @return {?}\r\n    */\n    function (color) {\n      return rgba(color, 0.6);\n    }),\n    borderColor: colors.map(\n    /**\r\n    * @return {?}\r\n    */\n    function () {\n      return '#fff';\n    }),\n    pointBackgroundColor: colors.map(\n    /**\r\n    * @param {?} color\r\n    * @return {?}\r\n    */\n    function (color) {\n      return rgba(color, 1);\n    }),\n    pointBorderColor: colors.map(\n    /**\r\n    * @return {?}\r\n    */\n    function () {\n      return '#fff';\n    }),\n    pointHoverBackgroundColor: colors.map(\n    /**\r\n    * @param {?} color\r\n    * @return {?}\r\n    */\n    function (color) {\n      return rgba(color, 1);\n    }),\n    pointHoverBorderColor: colors.map(\n    /**\r\n    * @param {?} color\r\n    * @return {?}\r\n    */\n    function (color) {\n      return rgba(color, 1);\n    })\n  };\n}\n/**\r\n * @param {?} colors\r\n * @return {?}\r\n */\n\n\nfunction formatPolarAreaColors(colors) {\n  return {\n    backgroundColor: colors.map(\n    /**\r\n    * @param {?} color\r\n    * @return {?}\r\n    */\n    function (color) {\n      return rgba(color, 0.6);\n    }),\n    borderColor: colors.map(\n    /**\r\n    * @param {?} color\r\n    * @return {?}\r\n    */\n    function (color) {\n      return rgba(color, 1);\n    }),\n    hoverBackgroundColor: colors.map(\n    /**\r\n    * @param {?} color\r\n    * @return {?}\r\n    */\n    function (color) {\n      return rgba(color, 0.8);\n    }),\n    hoverBorderColor: colors.map(\n    /**\r\n    * @param {?} color\r\n    * @return {?}\r\n    */\n    function (color) {\n      return rgba(color, 1);\n    })\n  };\n}\n/**\r\n * @return {?}\r\n */\n\n\nfunction getRandomColor() {\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\r\n * Generate colors for line|bar charts\r\n * @param {?} index\r\n * @return {?}\r\n */\n\n\nfunction generateColor(index) {\n  return defaultColors[index] || getRandomColor();\n}\n/**\r\n * Generate colors for pie|doughnut charts\r\n * @param {?} count\r\n * @return {?}\r\n */\n\n\nfunction generateColors(count) {\n  /** @type {?} */\n  var colorsArr = new Array(count);\n\n  for (var i = 0; i < count; i++) {\n    colorsArr[i] = defaultColors[i] || getRandomColor();\n  }\n\n  return colorsArr;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/theme.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nvar ThemeService = /*#__PURE__*/function () {\n  function ThemeService() {\n    _classCallCheck(this, ThemeService);\n\n    this.pColorschemesOptions = {};\n    this.colorschemesOptions = new BehaviorSubject({});\n  }\n  /**\r\n   * @param {?} options\r\n   * @return {?}\r\n   */\n\n\n  _createClass(ThemeService, [{\n    key: \"setColorschemesOptions\",\n    value: function setColorschemesOptions(options) {\n      this.pColorschemesOptions = options;\n      this.colorschemesOptions.next(options);\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getColorschemesOptions\",\n    value: function getColorschemesOptions() {\n      return this.pColorschemesOptions;\n    }\n  }]);\n\n  return ThemeService;\n}();\n\nThemeService.ɵfac = function ThemeService_Factory(t) {\n  return new (t || ThemeService)();\n};\n/** @nocollapse */\n\n\nThemeService.ctorParameters = function () {\n  return [];\n};\n/** @nocollapse */\n\n\nThemeService.ɵprov = ɵɵdefineInjectable({\n  factory: function ThemeService_Factory() {\n    return new ThemeService();\n  },\n  token: ThemeService,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ThemeService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n  ThemeService.prototype.pColorschemesOptions;\n  /** @type {?} */\n\n  ThemeService.prototype.colorschemesOptions;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/base-chart.directive.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @record\r\n */\n\n\nfunction OldState() {}\n\nif (false) {\n  /** @type {?} */\n  OldState.prototype.dataExists;\n  /** @type {?} */\n\n  OldState.prototype.dataLength;\n  /** @type {?} */\n\n  OldState.prototype.datasetsExists;\n  /** @type {?} */\n\n  OldState.prototype.datasetsLength;\n  /** @type {?} */\n\n  OldState.prototype.datasetsDataObjects;\n  /** @type {?} */\n\n  OldState.prototype.datasetsDataLengths;\n  /** @type {?} */\n\n  OldState.prototype.colorsExists;\n  /** @type {?} */\n\n  OldState.prototype.colors;\n  /** @type {?} */\n\n  OldState.prototype.labelsExist;\n  /** @type {?} */\n\n  OldState.prototype.labels;\n  /** @type {?} */\n\n  OldState.prototype.legendExists;\n  /** @type {?} */\n\n  OldState.prototype.legend;\n}\n/** @enum {number} */\n\n\nvar UpdateType = {\n  Default: 0,\n  Update: 1,\n  Refresh: 2\n};\nUpdateType[UpdateType.Default] = 'Default';\nUpdateType[UpdateType.Update] = 'Update';\nUpdateType[UpdateType.Refresh] = 'Refresh';\n\nvar BaseChartDirective = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} element\r\n   * @param {?} themeService\r\n   */\n  function BaseChartDirective(element, themeService) {\n    _classCallCheck(this, BaseChartDirective);\n\n    this.element = element;\n    this.themeService = themeService;\n    this.options = {};\n    this.chartClick = new EventEmitter();\n    this.chartHover = new EventEmitter();\n    this.old = {\n      dataExists: false,\n      dataLength: 0,\n      datasetsExists: false,\n      datasetsLength: 0,\n      datasetsDataObjects: [],\n      datasetsDataLengths: [],\n      colorsExists: false,\n      colors: [],\n      labelsExist: false,\n      labels: [],\n      legendExists: false,\n      legend: {}\n    };\n    this.subs = [];\n  }\n  /**\r\n   * Register a plugin.\r\n   * @param {?} plugin\r\n   * @return {?}\r\n   */\n\n\n  _createClass(BaseChartDirective, [{\n    key: \"ngOnInit\",\n    value:\n    /**\r\n     * @return {?}\r\n     */\n    function ngOnInit() {\n      var _this = this;\n\n      this.ctx = this.element.nativeElement.getContext('2d');\n      this.refresh();\n      this.subs.push(this.themeService.colorschemesOptions.subscribe(\n      /**\r\n      * @param {?} r\r\n      * @return {?}\r\n      */\n      function (r) {\n        return _this.themeChanged(r);\n      }));\n    }\n    /**\r\n     * @private\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"themeChanged\",\n    value: function themeChanged(options) {\n      this.refresh();\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      var _this2 = this;\n\n      if (!this.chart) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var updateRequired = UpdateType.Default;\n      /** @type {?} */\n\n      var wantUpdate =\n      /**\r\n      * @param {?} x\r\n      * @return {?}\r\n      */\n      function wantUpdate(x) {\n        updateRequired = x > updateRequired ? x : updateRequired;\n      };\n\n      if (!!this.data !== this.old.dataExists) {\n        this.propagateDataToDatasets(this.data);\n        this.old.dataExists = !!this.data;\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (this.data && this.data.length !== this.old.dataLength) {\n        this.old.dataLength = this.data && this.data.length || 0;\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (!!this.datasets !== this.old.datasetsExists) {\n        this.old.datasetsExists = !!this.datasets;\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (this.datasets && this.datasets.length !== this.old.datasetsLength) {\n        this.old.datasetsLength = this.datasets && this.datasets.length || 0;\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (this.datasets && this.datasets.filter(\n      /**\r\n      * @param {?} x\r\n      * @param {?} i\r\n      * @return {?}\r\n      */\n      function (x, i) {\n        return x.data !== _this2.old.datasetsDataObjects[i];\n      }).length) {\n        this.old.datasetsDataObjects = this.datasets.map(\n        /**\r\n        * @param {?} x\r\n        * @return {?}\r\n        */\n        function (x) {\n          return x.data;\n        });\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (this.datasets && this.datasets.filter(\n      /**\r\n      * @param {?} x\r\n      * @param {?} i\r\n      * @return {?}\r\n      */\n      function (x, i) {\n        return x.data.length !== _this2.old.datasetsDataLengths[i];\n      }).length) {\n        this.old.datasetsDataLengths = this.datasets.map(\n        /**\r\n        * @param {?} x\r\n        * @return {?}\r\n        */\n        function (x) {\n          return x.data.length;\n        });\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (!!this.colors !== this.old.colorsExists) {\n        this.old.colorsExists = !!this.colors;\n        this.updateColors();\n        wantUpdate(UpdateType.Update);\n      } // This smells of inefficiency, might need to revisit this\n\n\n      if (this.colors && this.colors.filter(\n      /**\r\n      * @param {?} x\r\n      * @param {?} i\r\n      * @return {?}\r\n      */\n      function (x, i) {\n        return !_this2.colorsEqual(x, _this2.old.colors[i]);\n      }).length) {\n        this.old.colors = this.colors.map(\n        /**\r\n        * @param {?} x\r\n        * @return {?}\r\n        */\n        function (x) {\n          return _this2.copyColor(x);\n        });\n        this.updateColors();\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (!!this.labels !== this.old.labelsExist) {\n        this.old.labelsExist = !!this.labels;\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (this.labels && this.labels.filter(\n      /**\r\n      * @param {?} x\r\n      * @param {?} i\r\n      * @return {?}\r\n      */\n      function (x, i) {\n        return !_this2.labelsEqual(x, _this2.old.labels[i]);\n      }).length) {\n        this.old.labels = this.labels.map(\n        /**\r\n        * @param {?} x\r\n        * @return {?}\r\n        */\n        function (x) {\n          return _this2.copyLabel(x);\n        });\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (!!this.options.legend !== this.old.legendExists) {\n        this.old.legendExists = !!this.options.legend;\n        wantUpdate(UpdateType.Refresh);\n      }\n\n      if (this.options.legend && this.options.legend.position !== this.old.legend.position) {\n        this.old.legend.position = this.options.legend.position;\n        wantUpdate(UpdateType.Refresh);\n      }\n\n      switch (\n      /** @type {?} */\n      updateRequired) {\n        case UpdateType.Default:\n          break;\n\n        case UpdateType.Update:\n          this.update();\n          break;\n\n        case UpdateType.Refresh:\n          this.refresh();\n          break;\n      }\n    }\n    /**\r\n     * @param {?} a\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"copyLabel\",\n    value: function copyLabel(a) {\n      if (Array.isArray(a)) {\n        return _toConsumableArray(a);\n      }\n\n      return a;\n    }\n    /**\r\n     * @param {?} a\r\n     * @param {?} b\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"labelsEqual\",\n    value: function labelsEqual(a, b) {\n      return Array.isArray(a) === Array.isArray(b) && (Array.isArray(a) || a === b) && (!Array.isArray(a) || a.length === b.length) && (!Array.isArray(a) || a.filter(\n      /**\r\n      * @param {?} x\r\n      * @param {?} i\r\n      * @return {?}\r\n      */\n      function (x, i) {\n        return x !== b[i];\n      }).length === 0);\n    }\n    /**\r\n     * @param {?} a\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"copyColor\",\n    value: function copyColor(a) {\n      /** @type {?} */\n      var rc = {\n        backgroundColor: a.backgroundColor,\n        borderWidth: a.borderWidth,\n        borderColor: a.borderColor,\n        borderCapStyle: a.borderCapStyle,\n        borderDash: a.borderDash,\n        borderDashOffset: a.borderDashOffset,\n        borderJoinStyle: a.borderJoinStyle,\n        pointBorderColor: a.pointBorderColor,\n        pointBackgroundColor: a.pointBackgroundColor,\n        pointBorderWidth: a.pointBorderWidth,\n        pointRadius: a.pointRadius,\n        pointHoverRadius: a.pointHoverRadius,\n        pointHitRadius: a.pointHitRadius,\n        pointHoverBackgroundColor: a.pointHoverBackgroundColor,\n        pointHoverBorderColor: a.pointHoverBorderColor,\n        pointHoverBorderWidth: a.pointHoverBorderWidth,\n        pointStyle: a.pointStyle,\n        hoverBackgroundColor: a.hoverBackgroundColor,\n        hoverBorderColor: a.hoverBorderColor,\n        hoverBorderWidth: a.hoverBorderWidth\n      };\n      return rc;\n    }\n    /**\r\n     * @param {?} a\r\n     * @param {?} b\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"colorsEqual\",\n    value: function colorsEqual(a, b) {\n      if (!a !== !b) {\n        return false;\n      }\n\n      return !a || a.backgroundColor === b.backgroundColor && a.borderWidth === b.borderWidth && a.borderColor === b.borderColor && a.borderCapStyle === b.borderCapStyle && a.borderDash === b.borderDash && a.borderDashOffset === b.borderDashOffset && a.borderJoinStyle === b.borderJoinStyle && a.pointBorderColor === b.pointBorderColor && a.pointBackgroundColor === b.pointBackgroundColor && a.pointBorderWidth === b.pointBorderWidth && a.pointRadius === b.pointRadius && a.pointHoverRadius === b.pointHoverRadius && a.pointHitRadius === b.pointHitRadius && a.pointHoverBackgroundColor === b.pointHoverBackgroundColor && a.pointHoverBorderColor === b.pointHoverBorderColor && a.pointHoverBorderWidth === b.pointHoverBorderWidth && a.pointStyle === b.pointStyle && a.hoverBackgroundColor === b.hoverBackgroundColor && a.hoverBorderColor === b.hoverBorderColor && a.hoverBorderWidth === b.hoverBorderWidth;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"updateColors\",\n    value: function updateColors() {\n      var _this3 = this;\n\n      this.datasets.forEach(\n      /**\r\n      * @param {?} elm\r\n      * @param {?} index\r\n      * @return {?}\r\n      */\n      function (elm, index) {\n        if (_this3.colors && _this3.colors[index]) {\n          Object.assign(elm, _this3.colors[index]);\n        } else {\n          Object.assign(elm, getColors(_this3.chartType, index, elm.data.length), Object.assign({}, elm));\n        }\n      });\n    }\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var updateRequired = UpdateType.Default;\n      /** @type {?} */\n\n      var wantUpdate =\n      /**\r\n      * @param {?} x\r\n      * @return {?}\r\n      */\n      function wantUpdate(x) {\n        updateRequired = x > updateRequired ? x : updateRequired;\n      }; // Check if the changes are in the data or datasets or labels or legend\n\n\n      if (changes.hasOwnProperty('data') && changes.data.currentValue) {\n        this.propagateDataToDatasets(changes.data.currentValue);\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (changes.hasOwnProperty('datasets') && changes.datasets.currentValue) {\n        this.propagateDatasetsToData(changes.datasets.currentValue);\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (changes.hasOwnProperty('labels')) {\n        if (this.chart) {\n          this.chart.data.labels = changes.labels.currentValue;\n        }\n\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (changes.hasOwnProperty('legend')) {\n        if (this.chart) {\n          this.chart.config.options.legend.display = changes.legend.currentValue;\n          this.chart.generateLegend();\n        }\n\n        wantUpdate(UpdateType.Update);\n      }\n\n      if (changes.hasOwnProperty('options')) {\n        wantUpdate(UpdateType.Refresh);\n      }\n\n      switch (\n      /** @type {?} */\n      updateRequired) {\n        case UpdateType.Update:\n          this.update();\n          break;\n\n        case UpdateType.Refresh:\n        case UpdateType.Default:\n          this.refresh();\n          break;\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = void 0;\n      }\n\n      this.subs.forEach(\n      /**\r\n      * @param {?} x\r\n      * @return {?}\r\n      */\n      function (x) {\n        return x.unsubscribe();\n      });\n    }\n    /**\r\n     * @param {?=} duration\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(duration) {\n      if (this.chart) {\n        return this.chart.update(duration);\n      }\n    }\n    /**\r\n     * @param {?} index\r\n     * @param {?} hidden\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"hideDataset\",\n    value: function hideDataset(index, hidden) {\n      this.chart.getDatasetMeta(index).hidden = hidden;\n      this.chart.update();\n    }\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"isDatasetHidden\",\n    value: function isDatasetHidden(index) {\n      return this.chart.getDatasetMeta(index).hidden;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"toBase64Image\",\n    value: function toBase64Image() {\n      return this.chart.toBase64Image();\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getChartConfiguration\",\n    value: function getChartConfiguration() {\n      var _this4 = this;\n\n      /** @type {?} */\n      var datasets = this.getDatasets();\n      /** @type {?} */\n\n      var options = Object.assign({}, this.options);\n\n      if (this.legend === false) {\n        options.legend = {\n          display: false\n        };\n      } // hook for onHover and onClick events\n\n\n      options.hover = options.hover || {};\n\n      if (!options.hover.onHover) {\n        options.hover.onHover =\n        /**\r\n        * @param {?} event\r\n        * @param {?} active\r\n        * @return {?}\r\n        */\n        function (event, active) {\n          if (active && !active.length) {\n            return;\n          }\n\n          _this4.chartHover.emit({\n            event: event,\n            active: active\n          });\n        };\n      }\n\n      if (!options.onClick) {\n        options.onClick =\n        /**\r\n        * @param {?=} event\r\n        * @param {?=} active\r\n        * @return {?}\r\n        */\n        function (event, active) {\n          _this4.chartClick.emit({\n            event: event,\n            active: active\n          });\n        };\n      }\n      /** @type {?} */\n\n\n      var mergedOptions = this.smartMerge(options, this.themeService.getColorschemesOptions());\n      /** @type {?} */\n\n      var chartConfig = {\n        type: this.chartType,\n        data: {\n          labels: this.labels || [],\n          datasets: datasets\n        },\n        plugins: this.plugins,\n        options: mergedOptions\n      };\n      return chartConfig;\n    }\n    /**\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getChartBuilder\",\n    value: function getChartBuilder(ctx\n    /*, data:any[], options:any*/\n    ) {\n      /** @type {?} */\n      var chartConfig = this.getChartConfiguration();\n      return new Chart$1(ctx, chartConfig);\n    }\n    /**\r\n     * @param {?} options\r\n     * @param {?} overrides\r\n     * @param {?=} level\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"smartMerge\",\n    value: function smartMerge(options, overrides) {\n      var _this5 = this;\n\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (level === 0) {\n        options = cloneDeep(options);\n      }\n      /** @type {?} */\n\n\n      var keysToUpdate = Object.keys(overrides);\n      keysToUpdate.forEach(\n      /**\r\n      * @param {?} key\r\n      * @return {?}\r\n      */\n      function (key) {\n        if (Array.isArray(overrides[key])) {\n          /** @type {?} */\n          var arrayElements = options[key];\n\n          if (arrayElements) {\n            arrayElements.forEach(\n            /**\r\n            * @param {?} r\r\n            * @return {?}\r\n            */\n            function (r) {\n              _this5.smartMerge(r, overrides[key][0], level + 1);\n            });\n          }\n        } else if (typeof overrides[key] === 'object') {\n          if (!(key in options)) {\n            options[key] = {};\n          }\n\n          _this5.smartMerge(options[key], overrides[key], level + 1);\n        } else {\n          options[key] = overrides[key];\n        }\n      });\n\n      if (level === 0) {\n        return options;\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {?} label\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"isMultiLineLabel\",\n    value: function isMultiLineLabel(label) {\n      return Array.isArray(label);\n    }\n    /**\r\n     * @private\r\n     * @param {?} label\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"joinLabel\",\n    value: function joinLabel(label) {\n      if (!label) {\n        return null;\n      }\n\n      if (this.isMultiLineLabel(label)) {\n        return label.join(' ');\n      } else {\n        return label;\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {?} datasets\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"propagateDatasetsToData\",\n    value: function propagateDatasetsToData(datasets) {\n      this.data = this.datasets.map(\n      /**\r\n      * @param {?} r\r\n      * @return {?}\r\n      */\n      function (r) {\n        return r.data;\n      });\n\n      if (this.chart) {\n        this.chart.data.datasets = datasets;\n      }\n\n      this.updateColors();\n    }\n    /**\r\n     * @private\r\n     * @param {?} newDataValues\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"propagateDataToDatasets\",\n    value: function propagateDataToDatasets(newDataValues) {\n      var _this6 = this;\n\n      if (this.isMultiDataSet(newDataValues)) {\n        if (this.datasets && newDataValues.length === this.datasets.length) {\n          this.datasets.forEach(\n          /**\r\n          * @param {?} dataset\r\n          * @param {?} i\r\n          * @return {?}\r\n          */\n          function (dataset, i) {\n            dataset.data = newDataValues[i];\n          });\n        } else {\n          this.datasets = newDataValues.map(\n          /**\r\n          * @param {?} data\r\n          * @param {?} index\r\n          * @return {?}\r\n          */\n          function (data, index) {\n            return {\n              data: data,\n              label: _this6.joinLabel(_this6.labels[index]) || \"Label \".concat(index)\n            };\n          });\n\n          if (this.chart) {\n            this.chart.data.datasets = this.datasets;\n          }\n        }\n      } else {\n        if (!this.datasets) {\n          this.datasets = [{\n            data: newDataValues\n          }];\n\n          if (this.chart) {\n            this.chart.data.datasets = this.datasets;\n          }\n        } else {\n          this.datasets[0].data = newDataValues;\n          this.datasets.splice(1); // Remove all elements but the first\n        }\n      }\n\n      this.updateColors();\n    }\n    /**\r\n     * @private\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"isMultiDataSet\",\n    value: function isMultiDataSet(data) {\n      return Array.isArray(data[0]);\n    }\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getDatasets\",\n    value: function getDatasets() {\n      if (!this.datasets && !this.data) {\n        throw new Error(\"ng-charts configuration error, data or datasets field are required to render chart \".concat(this.chartType));\n      } // If `datasets` is defined, use it over the `data` property.\n\n\n      if (this.datasets) {\n        this.propagateDatasetsToData(this.datasets);\n        return this.datasets;\n      }\n\n      if (this.data) {\n        this.propagateDataToDatasets(this.data);\n        return this.datasets;\n      }\n    }\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      // if (this.options && this.options.responsive) {\n      //   setTimeout(() => this.refresh(), 50);\n      // }\n      // todo: remove this line, it is producing flickering\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = void 0;\n      }\n\n      if (this.ctx) {\n        this.chart = this.getChartBuilder(this.ctx\n        /*, data, this.options*/\n        );\n      }\n    }\n  }], [{\n    key: \"registerPlugin\",\n    value: function registerPlugin(plugin) {\n      pluginService.register(plugin);\n    }\n    /**\r\n     * @param {?} plugin\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"unregisterPlugin\",\n    value: function unregisterPlugin(plugin) {\n      pluginService.unregister(plugin);\n    }\n  }]);\n\n  return BaseChartDirective;\n}();\n\nBaseChartDirective.ɵfac = function BaseChartDirective_Factory(t) {\n  return new (t || BaseChartDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ThemeService));\n};\n\nBaseChartDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: BaseChartDirective,\n  selectors: [[\"canvas\", \"baseChart\", \"\"]],\n  inputs: {\n    options: \"options\",\n    data: \"data\",\n    datasets: \"datasets\",\n    labels: \"labels\",\n    chartType: \"chartType\",\n    colors: \"colors\",\n    legend: \"legend\",\n    plugins: \"plugins\"\n  },\n  outputs: {\n    chartClick: \"chartClick\",\n    chartHover: \"chartHover\"\n  },\n  exportAs: [\"base-chart\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nBaseChartDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ThemeService\n  }];\n};\n\nBaseChartDirective.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  datasets: [{\n    type: Input\n  }],\n  labels: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  chartType: [{\n    type: Input\n  }],\n  colors: [{\n    type: Input\n  }],\n  legend: [{\n    type: Input\n  }],\n  plugins: [{\n    type: Input\n  }],\n  chartClick: [{\n    type: Output\n  }],\n  chartHover: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BaseChartDirective, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: 'canvas[baseChart]',\n      exportAs: 'base-chart'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ThemeService\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartHover: [{\n      type: Output\n    }],\n    data: [{\n      type: Input\n    }],\n    datasets: [{\n      type: Input\n    }],\n    labels: [{\n      type: Input\n    }],\n    chartType: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    plugins: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  BaseChartDirective.prototype.data;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.datasets;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.labels;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.options;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.chartType;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.colors;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.legend;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.plugins;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.chartClick;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.chartHover;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.ctx;\n  /** @type {?} */\n\n  BaseChartDirective.prototype.chart;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  BaseChartDirective.prototype.old;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  BaseChartDirective.prototype.subs;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  BaseChartDirective.prototype.element;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  BaseChartDirective.prototype.themeService;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/charts.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nvar ChartsModule = function ChartsModule() {\n  _classCallCheck(this, ChartsModule);\n};\n\nChartsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ChartsModule\n});\nChartsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ChartsModule_Factory(t) {\n    return new (t || ChartsModule)();\n  },\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChartsModule, {\n    declarations: [BaseChartDirective],\n    exports: [BaseChartDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ChartsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [BaseChartDirective],\n      imports: [],\n      exports: [BaseChartDirective]\n    }]\n  }], null, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/color.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @record\r\n */\n\n\nfunction Color() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  Color.prototype.backgroundColor;\n  /** @type {?|undefined} */\n\n  Color.prototype.borderWidth;\n  /** @type {?|undefined} */\n\n  Color.prototype.borderColor;\n  /** @type {?|undefined} */\n\n  Color.prototype.borderCapStyle;\n  /** @type {?|undefined} */\n\n  Color.prototype.borderDash;\n  /** @type {?|undefined} */\n\n  Color.prototype.borderDashOffset;\n  /** @type {?|undefined} */\n\n  Color.prototype.borderJoinStyle;\n  /** @type {?|undefined} */\n\n  Color.prototype.pointBorderColor;\n  /** @type {?|undefined} */\n\n  Color.prototype.pointBackgroundColor;\n  /** @type {?|undefined} */\n\n  Color.prototype.pointBorderWidth;\n  /** @type {?|undefined} */\n\n  Color.prototype.pointRadius;\n  /** @type {?|undefined} */\n\n  Color.prototype.pointHoverRadius;\n  /** @type {?|undefined} */\n\n  Color.prototype.pointHitRadius;\n  /** @type {?|undefined} */\n\n  Color.prototype.pointHoverBackgroundColor;\n  /** @type {?|undefined} */\n\n  Color.prototype.pointHoverBorderColor;\n  /** @type {?|undefined} */\n\n  Color.prototype.pointHoverBorderWidth;\n  /** @type {?|undefined} */\n\n  Color.prototype.pointStyle;\n  /** @type {?|undefined} */\n\n  Color.prototype.hoverBackgroundColor;\n  /** @type {?|undefined} */\n\n  Color.prototype.hoverBorderColor;\n  /** @type {?|undefined} */\n\n  Color.prototype.hoverBorderWidth;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/colors.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @record\r\n */\n\n\nfunction Colors() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  Colors.prototype.data;\n  /** @type {?|undefined} */\n\n  Colors.prototype.label;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/monkey-patch-chart-js-legend.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n// tslint:disable:variable-name\n// tslint:disable:no-var-keyword\n// tslint:disable:prefer-const\n// tslint:disable:only-arrow-functions\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:object-literal-shorthand\n// tslint:disable:space-before-function-paren\n\n/**\r\n * @return {?}\r\n */\n\n\nfunction monkeyPatchChartJsLegend() {\n  if (typeof Chart === 'undefined') {\n    console.log('Chart not defined (guessing this is a universal build, and I don\\'t know why this happens -- Aviad)');\n    return;\n  }\n  /** @type {?} */\n\n\n  var plugins = Chart.plugins.getAll();\n  /** @type {?} */\n\n  var legend = plugins.filter(\n  /**\r\n  * @param {?} p\r\n  * @return {?}\r\n  */\n  function (p) {\n    return p.id === 'legend';\n  })[0];\n  legend._element.prototype.fit = fit;\n  legend._element.prototype.draw = draw;\n  /** @type {?} */\n\n  var helpers = Chart.helpers;\n  /** @type {?} */\n\n  var defaults = Chart.defaults;\n  /** @type {?} */\n\n  var valueOrDefault = helpers.valueOrDefault;\n  /**\r\n   * @param {?} labelOpts\r\n   * @param {?} fontSize\r\n   * @return {?}\r\n   */\n\n  function getBoxWidth(labelOpts, fontSize) {\n    return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  function fit() {\n    /** @type {?} */\n    var me = this;\n    /** @type {?} */\n\n    var opts = me.options;\n    /** @type {?} */\n\n    var labelOpts = opts.labels;\n    /** @type {?} */\n\n    var display = opts.display;\n    /** @type {?} */\n\n    var ctx = me.ctx;\n    /** @type {?} */\n\n    var labelFont = helpers.options._parseFont(labelOpts);\n    /** @type {?} */\n\n\n    var fontSize = labelFont.size; // Reset hit boxes\n\n    /** @type {?} */\n\n    var hitboxes = me.legendHitBoxes = [];\n    /** @type {?} */\n\n    var minSize = me.minSize;\n    /** @type {?} */\n\n    var isHorizontal = me.isHorizontal();\n\n    if (isHorizontal) {\n      minSize.width = me.maxWidth; // fill all the width\n\n      minSize.height = display ? 10 : 0;\n    } else {\n      minSize.width = display ? 10 : 0;\n      minSize.height = me.maxHeight; // fill all the height\n    }\n    /** @type {?} */\n\n\n    var getMaxLineWidth =\n    /**\r\n    * @param {?} textLines\r\n    * @return {?}\r\n    */\n    function getMaxLineWidth(textLines) {\n      return textLines.map(\n      /**\r\n      * @param {?} textLine\r\n      * @return {?}\r\n      */\n      function (textLine) {\n        return ctx.measureText(textLine).width;\n      }).reduce(\n      /**\r\n      * @param {?} acc\r\n      * @param {?} v\r\n      * @return {?}\r\n      */\n      function (acc, v) {\n        return v > acc ? v : acc;\n      }, 0);\n    }; // Increase sizes here\n\n\n    if (display) {\n      ctx.font = labelFont.string;\n\n      if (isHorizontal) {\n        // Labels\n        // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n\n        /** @type {?} */\n        var lineWidths = me.lineWidths = [0];\n        /** @type {?} */\n\n        var lineHeights = me.lineHeights = [];\n        /** @type {?} */\n\n        var currentLineHeight = 0;\n        /** @type {?} */\n\n        var lineIndex = 0;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'top';\n        helpers.each(me.legendItems,\n        /**\r\n        * @param {?} legendItem\r\n        * @param {?} i\r\n        * @return {?}\r\n        */\n        function (legendItem, i) {\n          /** @type {?} */\n          var width;\n          /** @type {?} */\n\n          var height;\n\n          if (helpers.isArray(legendItem.text)) {\n            width = getMaxLineWidth(legendItem.text);\n            height = fontSize * legendItem.text.length + labelOpts.padding;\n          } else {\n            width = ctx.measureText(legendItem.text).width;\n            height = fontSize + labelOpts.padding;\n          }\n\n          width += getBoxWidth(labelOpts, fontSize) + fontSize / 2;\n\n          if (lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {\n            lineHeights.push(currentLineHeight);\n            currentLineHeight = 0;\n            lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n            lineIndex++;\n          }\n\n          legendItem.lineOrColumnIndex = lineIndex;\n\n          if (height > currentLineHeight) {\n            currentLineHeight = height;\n          } // Store the hitbox width and height here. Final position will be updated in `draw`\n\n\n          hitboxes[i] = {\n            left: 0,\n            top: 0,\n            width: width,\n            height: height\n          };\n          lineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n        });\n        lineHeights.push(currentLineHeight);\n        minSize.height += lineHeights.reduce(\n        /**\r\n        * @param {?} acc\r\n        * @param {?} v\r\n        * @return {?}\r\n        */\n        function (acc, v) {\n          return acc + v;\n        }, 0);\n      } else {\n        /** @type {?} */\n        var vPadding = labelOpts.padding;\n        /** @type {?} */\n\n        var columnWidths = me.columnWidths = [];\n        /** @type {?} */\n\n        var columnHeights = me.columnHeights = [];\n        /** @type {?} */\n\n        var totalWidth = labelOpts.padding;\n        /** @type {?} */\n\n        var currentColWidth = 0;\n        /** @type {?} */\n\n        var currentColHeight = 0;\n        /** @type {?} */\n\n        var columnIndex = 0;\n        helpers.each(me.legendItems,\n        /**\r\n        * @param {?} legendItem\r\n        * @param {?} i\r\n        * @return {?}\r\n        */\n        function (legendItem, i) {\n          /** @type {?} */\n          var itemWidth;\n          /** @type {?} */\n\n          var height;\n\n          if (helpers.isArray(legendItem.text)) {\n            itemWidth = getMaxLineWidth(legendItem.text);\n            height = fontSize * legendItem.text.length;\n          } else {\n            itemWidth = ctx.measureText(legendItem.text).width;\n            height = fontSize;\n          }\n\n          itemWidth += getBoxWidth(labelOpts, fontSize) + fontSize / 2; // If too tall, go to new column\n\n          if (currentColHeight + fontSize + 2 * vPadding > minSize.height) {\n            totalWidth += currentColWidth + labelOpts.padding;\n            columnWidths.push(currentColWidth); // previous column width\n\n            columnHeights.push(currentColHeight);\n            currentColWidth = 0;\n            currentColHeight = 0;\n            columnIndex++;\n          }\n\n          legendItem.lineOrColumnIndex = columnIndex; // Get max width\n\n          currentColWidth = Math.max(currentColWidth, itemWidth);\n          currentColHeight += height + vPadding; // Store the hitbox width and height here. Final position will be updated in `draw`\n\n          hitboxes[i] = {\n            left: 0,\n            top: 0,\n            width: itemWidth,\n            height: height\n          };\n        });\n        totalWidth += currentColWidth;\n        columnWidths.push(currentColWidth);\n        columnHeights.push(currentColHeight);\n        minSize.width += totalWidth;\n      }\n    }\n\n    me.width = minSize.width;\n    me.height = minSize.height;\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  function draw() {\n    /** @type {?} */\n    var me = this;\n    /** @type {?} */\n\n    var opts = me.options;\n    /** @type {?} */\n\n    var labelOpts = opts.labels;\n    /** @type {?} */\n\n    var globalDefaults = defaults.global;\n    /** @type {?} */\n\n    var defaultColor = globalDefaults.defaultColor;\n    /** @type {?} */\n\n    var lineDefault = globalDefaults.elements.line;\n    /** @type {?} */\n\n    var legendHeight = me.height;\n    /** @type {?} */\n\n    var columnHeights = me.columnHeights;\n    /** @type {?} */\n\n    var columnWidths = me.columnWidths;\n    /** @type {?} */\n\n    var legendWidth = me.width;\n    /** @type {?} */\n\n    var lineWidths = me.lineWidths;\n    /** @type {?} */\n\n    var lineHeights = me.lineHeights;\n\n    if (opts.display) {\n      /** @type {?} */\n      var ctx = me.ctx;\n      /** @type {?} */\n\n      var fontColor = valueOrDefault(labelOpts.fontColor, globalDefaults.defaultFontColor);\n      /** @type {?} */\n\n      var labelFont = helpers.options._parseFont(labelOpts);\n      /** @type {?} */\n\n\n      var fontSize = labelFont.size;\n      /** @type {?} */\n\n      var cursor; // Canvas setup\n\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.lineWidth = 0.5;\n      ctx.strokeStyle = fontColor; // for strikethrough effect\n\n      ctx.fillStyle = fontColor; // render in correct colour\n\n      ctx.font = labelFont.string;\n      /** @type {?} */\n\n      var boxWidth = getBoxWidth(labelOpts, fontSize);\n      /** @type {?} */\n\n      var hitboxes = me.legendHitBoxes; // current position\n\n      /** @type {?} */\n\n      var drawLegendBox =\n      /**\r\n      * @param {?} x\r\n      * @param {?} y\r\n      * @param {?} legendItem\r\n      * @return {?}\r\n      */\n      function drawLegendBox(x, y, legendItem) {\n        if (isNaN(boxWidth) || boxWidth <= 0) {\n          return;\n        } // Set the ctx for the box\n\n\n        ctx.save();\n        /** @type {?} */\n\n        var lineWidth = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth);\n        ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n        ctx.lineCap = valueOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);\n        ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n        ctx.lineJoin = valueOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n        if (ctx.setLineDash) {\n          // IE 9 and 10 do not support line dash\n          ctx.setLineDash(valueOrDefault(legendItem.lineDash, lineDefault.borderDash));\n        }\n\n        if (opts.labels && opts.labels.usePointStyle) {\n          // Recalculate x and y for drawPoint() because its expecting\n          // x and y to be center of figure (instead of top left)\n\n          /** @type {?} */\n          var radius = boxWidth * Math.SQRT2 / 2;\n          /** @type {?} */\n\n          var centerX = x + boxWidth / 2;\n          /** @type {?} */\n\n          var centerY = y + fontSize / 2; // Draw pointStyle as legend symbol\n\n          helpers.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\n        } else {\n          // Draw box as legend symbol\n          if (lineWidth !== 0) {\n            ctx.strokeRect(x, y, boxWidth, fontSize);\n          }\n\n          ctx.fillRect(x, y, boxWidth, fontSize);\n        }\n\n        ctx.restore();\n      };\n      /** @type {?} */\n\n\n      var drawStrikeThrough =\n      /**\r\n      * @param {?} x\r\n      * @param {?} y\r\n      * @param {?} w\r\n      * @return {?}\r\n      */\n      function drawStrikeThrough(x, y, w) {\n        ctx.beginPath();\n        ctx.lineWidth = 2;\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + w, y);\n        ctx.stroke();\n      };\n      /** @type {?} */\n\n\n      var drawCrossOver =\n      /**\r\n      * @param {?} x\r\n      * @param {?} y\r\n      * @param {?} w\r\n      * @param {?} h\r\n      * @return {?}\r\n      */\n      function drawCrossOver(x, y, w, h) {\n        ctx.beginPath();\n        ctx.lineWidth = 2;\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + w, y + h);\n        ctx.moveTo(x, y + h);\n        ctx.lineTo(x + w, y);\n        ctx.stroke();\n      };\n      /** @type {?} */\n\n\n      var fillText =\n      /**\r\n      * @param {?} x\r\n      * @param {?} y\r\n      * @param {?} legendItem\r\n      * @param {?} textWidth\r\n      * @return {?}\r\n      */\n      function fillText(x, y, legendItem, textWidth) {\n        /** @type {?} */\n        var halfFontSize = fontSize / 2;\n        /** @type {?} */\n\n        var xLeft = boxWidth + halfFontSize + x;\n        /** @type {?} */\n\n        var yMiddle = y + halfFontSize;\n\n        if (helpers.isArray(legendItem.text)) {\n          helpers.each(legendItem.text,\n          /**\r\n          * @param {?} textLine\r\n          * @param {?} index\r\n          * @return {?}\r\n          */\n          function (textLine, index) {\n            /** @type {?} */\n            var lineOffset = index * fontSize;\n            ctx.fillText(textLine, xLeft, yMiddle + lineOffset);\n          });\n        } else {\n          ctx.fillText(legendItem.text, xLeft, yMiddle);\n        }\n\n        if (legendItem.hidden) {\n          if (helpers.isArray(legendItem.text)) {\n            drawCrossOver(xLeft, yMiddle, textWidth, (legendItem.text.length - 1) * (fontSize - 1));\n          } else {\n            drawStrikeThrough(xLeft, yMiddle, textWidth);\n          }\n        }\n      };\n      /** @type {?} */\n\n\n      var alignmentOffset =\n      /**\r\n      * @param {?} dimension\r\n      * @param {?} blockSize\r\n      * @return {?}\r\n      */\n      function alignmentOffset(dimension, blockSize) {\n        switch (opts.align) {\n          case 'start':\n            return labelOpts.padding;\n\n          case 'end':\n            return dimension - blockSize;\n\n          default:\n            // center\n            return (dimension - blockSize + labelOpts.padding) / 2;\n        }\n      }; // Horizontal\n\n      /** @type {?} */\n\n\n      var isHorizontal = me.isHorizontal();\n\n      if (isHorizontal) {\n        cursor = {\n          x: me.left + alignmentOffset(legendWidth, lineWidths[0]),\n          y: me.top + labelOpts.padding,\n          line: 0\n        };\n      } else {\n        cursor = {\n          x: me.left + labelOpts.padding,\n          y: me.top + alignmentOffset(legendHeight, columnHeights[0]),\n          line: 0\n        };\n      }\n\n      helpers.each(me.legendItems,\n      /**\r\n      * @param {?} legendItem\r\n      * @param {?} i\r\n      * @return {?}\r\n      */\n      function (legendItem, i) {\n        /** @type {?} */\n        var textWidth;\n        /** @type {?} */\n\n        var height;\n        /** @type {?} */\n\n        var boxTopOffset;\n\n        if (legendItem.lineOrColumnIndex > cursor.line) {\n          if (isHorizontal) {\n            cursor.y += lineHeights[cursor.line];\n            cursor.line = legendItem.lineOrColumnIndex;\n            cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);\n          } else {\n            cursor.x += columnWidths[cursor.line] + labelOpts.padding;\n            cursor.line = legendItem.lineOrColumnIndex;\n            cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);\n          }\n        }\n\n        if (helpers.isArray(legendItem.text)) {\n          textWidth = legendItem.text.map(\n          /**\r\n          * @param {?} textLine\r\n          * @return {?}\r\n          */\n          function (textLine) {\n            return ctx.measureText(textLine).width;\n          }).reduce(\n          /**\r\n          * @param {?} acc\r\n          * @param {?} v\r\n          * @return {?}\r\n          */\n          function (acc, v) {\n            return v > acc ? v : acc;\n          }, 0);\n          boxTopOffset = fontSize / 2 * (legendItem.text.length - 1);\n          height = fontSize * legendItem.text.length;\n        } else {\n          textWidth = ctx.measureText(legendItem.text).width;\n          boxTopOffset = 0;\n          height = fontSize;\n        }\n        /** @type {?} */\n\n\n        var width = boxWidth + fontSize / 2 + textWidth;\n        /** @type {?} */\n\n        var x = cursor.x;\n        /** @type {?} */\n\n        var y = cursor.y;\n        /** @type {?} */\n\n        var topOffset = isHorizontal ? Math.trunc((lineHeights[cursor.line] - hitboxes[i].height) / 2) : 0;\n        drawLegendBox(x, y + boxTopOffset + topOffset, legendItem);\n        hitboxes[i].left = x;\n        hitboxes[i].top = y; // Fill the actual label\n\n        fillText(x, y + topOffset, legendItem, textWidth);\n\n        if (isHorizontal) {\n          cursor.x += width + labelOpts.padding;\n        } else {\n          cursor.y += height + labelOpts.padding;\n        }\n      });\n    }\n  }\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/monkey-patch-chart-js-tooltip.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n// tslint:disable:variable-name\n// tslint:disable:no-var-keyword\n// tslint:disable:prefer-const\n// tslint:disable:only-arrow-functions\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:object-literal-shorthand\n// tslint:disable:space-before-function-paren\n\n/**\r\n * @return {?}\r\n */\n\n\nfunction monkeyPatchChartJsTooltip() {\n  if (typeof Chart === 'undefined') {\n    console.log('Chart not defined (guessing this is a universal build, and I don\\'t know why this happens -- Aviad)');\n    return;\n  }\n\n  Chart.Tooltip.prototype.drawBody = drawBody;\n  /** @type {?} */\n\n  var helpers = Chart.helpers;\n  /**\r\n   * @param {?} vm\r\n   * @param {?} align\r\n   * @return {?}\r\n   */\n\n  function getAlignedX(vm, align) {\n    return align === 'center' ? vm.x + vm.width / 2 : align === 'right' ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;\n  }\n  /**\r\n   * @param {?} pt\r\n   * @param {?} vm\r\n   * @param {?} ctx\r\n   * @return {?}\r\n   */\n\n\n  function drawBody(pt, vm, ctx) {\n    /** @type {?} */\n    var bodyFontSize = vm.bodyFontSize;\n    /** @type {?} */\n\n    var bodySpacing = vm.bodySpacing;\n    /** @type {?} */\n\n    var bodyAlign = vm._bodyAlign;\n    /** @type {?} */\n\n    var body = vm.body;\n    /** @type {?} */\n\n    var drawColorBoxes = vm.displayColors;\n    /** @type {?} */\n\n    var labelColors = vm.labelColors;\n    /** @type {?} */\n\n    var xLinePadding = 0;\n    /** @type {?} */\n\n    var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\n    /** @type {?} */\n\n    var textColor;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'top';\n    ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n    pt.x = getAlignedX(vm, bodyAlign); // Before Body\n\n    /** @type {?} */\n\n    var fillLineOfText =\n    /**\r\n    * @param {?} line\r\n    * @return {?}\r\n    */\n    function fillLineOfText(line) {\n      ctx.fillText(line, pt.x + xLinePadding, pt.y);\n      pt.y += bodyFontSize + bodySpacing;\n    }; // Before body lines\n\n\n    ctx.fillStyle = vm.bodyFontColor;\n    helpers.each(vm.beforeBody, fillLineOfText);\n    xLinePadding = drawColorBoxes && bodyAlign !== 'right' ? bodyAlign === 'center' ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0; // Draw body lines now\n\n    helpers.each(body,\n    /**\r\n    * @param {?} bodyItem\r\n    * @param {?} i\r\n    * @return {?}\r\n    */\n    function (bodyItem, i) {\n      textColor = vm.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      helpers.each(bodyItem.before, fillLineOfText); // Draw Legend-like boxes if needed\n\n      if (drawColorBoxes) {\n        // Fill a white rect so that colours merge nicely if the opacity is < 1\n        ctx.fillStyle = vm.legendColorBackground;\n        ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Border\n\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = labelColors[i].borderColor;\n        ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Inner square\n\n        ctx.fillStyle = labelColors[i].backgroundColor;\n        ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n        ctx.fillStyle = textColor;\n      }\n\n      helpers.each(bodyItem.lines, fillLineOfText);\n      helpers.each(bodyItem.after, fillLineOfText);\n    }); // Reset back to 0 for after body\n\n    xLinePadding = 0; // After body lines\n\n    helpers.each(vm.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public_api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: ng2-charts.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { BaseChartDirective, ChartsModule, ThemeService, defaultColors, monkeyPatchChartJsLegend, monkeyPatchChartJsTooltip };","map":{"version":3,"sources":["../../../projects/ng2-charts/src/lib/default-colors.ts","../../../projects/ng2-charts/src/lib/get-colors.ts","../../../projects/ng2-charts/src/lib/theme.service.ts","../../../projects/ng2-charts/src/lib/base-chart.directive.ts","../../../projects/ng2-charts/src/lib/charts.module.ts","../../../projects/ng2-charts/src/lib/color.ts","../../../projects/ng2-charts/src/lib/colors.ts","../../../projects/ng2-charts/src/lib/monkey-patch-chart-js-legend.ts","../../../projects/ng2-charts/src/lib/monkey-patch-chart-js-tooltip.ts"],"names":["Chart"],"mappings":"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","sourcesContent":["export const defaultColors: Array<number[]> = [\r\n  [255, 99, 132],\r\n  [54, 162, 235],\r\n  [255, 206, 86],\r\n  [231, 233, 237],\r\n  [75, 192, 192],\r\n  [151, 187, 205],\r\n  [220, 220, 220],\r\n  [247, 70, 74],\r\n  [70, 191, 189],\r\n  [253, 180, 92],\r\n  [148, 159, 177],\r\n  [77, 83, 96]\r\n];\r\n","import { Color } from './color';\r\nimport { Colors } from './colors';\r\nimport { defaultColors } from './default-colors';\r\n\r\n/**\r\n * Generate colors by chart type\r\n */\r\nexport function getColors(chartType: string, index: number, count: number): Color {\r\n  if (chartType === 'pie' || chartType === 'doughnut') {\r\n    return formatPieColors(generateColors(count));\r\n  }\r\n\r\n  if (chartType === 'polarArea') {\r\n    return formatPolarAreaColors(generateColors(count));\r\n  }\r\n\r\n  if (chartType === 'line' || chartType === 'radar') {\r\n    return formatLineColor(generateColor(index));\r\n  }\r\n\r\n  if (chartType === 'bar' || chartType === 'horizontalBar') {\r\n    return formatBarColor(generateColor(index));\r\n  }\r\n\r\n  if (chartType === 'bubble') {\r\n    return formatPieColors(generateColors(count));\r\n  }\r\n\r\n  if (chartType === 'scatter') {\r\n    return formatPieColors(generateColors(count));\r\n  }\r\n\r\n  throw new Error(`getColors - Unsupported chart type ${chartType}`);\r\n}\r\n\r\nfunction rgba(colour: Array<number>, alpha: number): string {\r\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\r\n}\r\n\r\nfunction getRandomInt(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction formatLineColor(colors: Array<number>): Color {\r\n  return {\r\n    backgroundColor: rgba(colors, 0.4),\r\n    borderColor: rgba(colors, 1),\r\n    pointBackgroundColor: rgba(colors, 1),\r\n    pointBorderColor: '#fff',\r\n    pointHoverBackgroundColor: '#fff',\r\n    pointHoverBorderColor: rgba(colors, 0.8)\r\n  };\r\n}\r\n\r\nfunction formatBarColor(colors: Array<number>): Color {\r\n  return {\r\n    backgroundColor: rgba(colors, 0.6),\r\n    borderColor: rgba(colors, 1),\r\n    hoverBackgroundColor: rgba(colors, 0.8),\r\n    hoverBorderColor: rgba(colors, 1)\r\n  };\r\n}\r\n\r\nfunction formatPieColors(colors: Array<number[]>): Colors {\r\n  return {\r\n    backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\r\n    borderColor: colors.map(() => '#fff'),\r\n    pointBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\r\n    pointBorderColor: colors.map(() => '#fff'),\r\n    pointHoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\r\n    pointHoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\r\n  };\r\n}\r\n\r\nfunction formatPolarAreaColors(colors: Array<number[]>): Color {\r\n  return {\r\n    backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\r\n    borderColor: colors.map((color: number[]) => rgba(color, 1)),\r\n    hoverBackgroundColor: colors.map((color: number[]) => rgba(color, 0.8)),\r\n    hoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\r\n  };\r\n}\r\n\r\nfunction getRandomColor(): number[] {\r\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\r\n}\r\n\r\n/**\r\n * Generate colors for line|bar charts\r\n */\r\nfunction generateColor(index: number): number[] {\r\n  return defaultColors[index] || getRandomColor();\r\n}\r\n\r\n/**\r\n * Generate colors for pie|doughnut charts\r\n */\r\nfunction generateColors(count: number): Array<number[]> {\r\n  const colorsArr: Array<number[]> = new Array(count);\r\n  for (let i = 0; i < count; i++) {\r\n    colorsArr[i] = defaultColors[i] || getRandomColor();\r\n  }\r\n  return colorsArr;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ChartOptions } from 'chart.js';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThemeService {\r\n  private pColorschemesOptions: ChartOptions = {};\r\n  public colorschemesOptions = new BehaviorSubject<ChartOptions>({});\r\n\r\n  constructor() { }\r\n\r\n  setColorschemesOptions(options: ChartOptions): void {\r\n    this.pColorschemesOptions = options;\r\n    this.colorschemesOptions.next(options);\r\n  }\r\n\r\n  getColorschemesOptions(): ChartOptions {\r\n    return this.pColorschemesOptions;\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { getColors } from './get-colors';\r\nimport { Color } from './color';\r\nimport { ThemeService } from './theme.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport {\r\n  Chart,\r\n  ChartConfiguration,\r\n  ChartDataSets,\r\n  ChartOptions,\r\n  ChartPoint, ChartType,\r\n  PluginServiceGlobalRegistration,\r\n  PluginServiceRegistrationOptions,\r\n  pluginService\r\n} from 'chart.js';\r\n\r\nexport type SingleDataSet = Array<number | null | undefined | number[]> | ChartPoint[];\r\nexport type MultiDataSet = SingleDataSet[];\r\nexport type SingleOrMultiDataSet = SingleDataSet | MultiDataSet;\r\n\r\nexport type PluginServiceGlobalRegistrationAndOptions =\r\n  PluginServiceGlobalRegistration\r\n  & PluginServiceRegistrationOptions;\r\nexport type SingleLineLabel = string;\r\nexport type MultiLineLabel = string[];\r\nexport type Label = SingleLineLabel | MultiLineLabel;\r\n\r\ninterface OldState {\r\n  dataExists: boolean;\r\n  dataLength: number;\r\n  datasetsExists: boolean;\r\n  datasetsLength: number;\r\n  datasetsDataObjects: any[];\r\n  datasetsDataLengths: number[];\r\n  colorsExists: boolean;\r\n  colors: Color[];\r\n  labelsExist: boolean;\r\n  labels: Label[];\r\n  legendExists: boolean;\r\n  legend: {\r\n    position?: string;\r\n  };\r\n}\r\n\r\nenum UpdateType {\r\n  Default,\r\n  Update,\r\n  Refresh\r\n}\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: 'canvas[baseChart]',\r\n  exportAs: 'base-chart'\r\n})\r\nexport class BaseChartDirective implements OnDestroy, OnChanges, OnInit, OnDestroy, DoCheck {\r\n  @Input() public data: SingleOrMultiDataSet;\r\n  @Input() public datasets: ChartDataSets[];\r\n  @Input() public labels: Label[];\r\n  @Input() public options: ChartOptions = {};\r\n  @Input() public chartType: ChartType;\r\n  @Input() public colors: Color[];\r\n  @Input() public legend: boolean;\r\n  @Input() public plugins: PluginServiceGlobalRegistrationAndOptions[];\r\n\r\n  @Output() public chartClick: EventEmitter<{ event?: MouseEvent, active?: {}[] }> = new EventEmitter();\r\n  @Output() public chartHover: EventEmitter<{ event: MouseEvent, active: {}[] }> = new EventEmitter();\r\n\r\n  public ctx: string;\r\n  public chart: Chart;\r\n\r\n  private old: OldState = {\r\n    dataExists: false,\r\n    dataLength: 0,\r\n    datasetsExists: false,\r\n    datasetsLength: 0,\r\n    datasetsDataObjects: [],\r\n    datasetsDataLengths: [],\r\n    colorsExists: false,\r\n    colors: [],\r\n    labelsExist: false,\r\n    labels: [],\r\n    legendExists: false,\r\n    legend: {},\r\n  };\r\n\r\n  private subs: Subscription[] = [];\r\n\r\n  /**\r\n   * Register a plugin.\r\n   */\r\n  public static registerPlugin(plugin: PluginServiceGlobalRegistrationAndOptions) {\r\n    pluginService.register(plugin);\r\n  }\r\n\r\n  public static unregisterPlugin(plugin: PluginServiceGlobalRegistrationAndOptions) {\r\n    pluginService.unregister(plugin);\r\n  }\r\n\r\n  public constructor(\r\n    private element: ElementRef,\r\n    private themeService: ThemeService,\r\n  ) { }\r\n\r\n  public ngOnInit() {\r\n    this.ctx = this.element.nativeElement.getContext('2d');\r\n    this.refresh();\r\n    this.subs.push(this.themeService.colorschemesOptions.subscribe(r => this.themeChanged(r)));\r\n  }\r\n\r\n  private themeChanged(options: {}) {\r\n    this.refresh();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (!this.chart) {\r\n      return;\r\n    }\r\n    let updateRequired = UpdateType.Default;\r\n    const wantUpdate = (x: UpdateType) => {\r\n      updateRequired = x > updateRequired ? x : updateRequired;\r\n    };\r\n\r\n    if (!!this.data !== this.old.dataExists) {\r\n      this.propagateDataToDatasets(this.data);\r\n\r\n      this.old.dataExists = !!this.data;\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (this.data && this.data.length !== this.old.dataLength) {\r\n      this.old.dataLength = this.data && this.data.length || 0;\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (!!this.datasets !== this.old.datasetsExists) {\r\n      this.old.datasetsExists = !!this.datasets;\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (this.datasets && this.datasets.length !== this.old.datasetsLength) {\r\n      this.old.datasetsLength = this.datasets && this.datasets.length || 0;\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (this.datasets && this.datasets.filter((x, i) => x.data !== this.old.datasetsDataObjects[i]).length) {\r\n      this.old.datasetsDataObjects = this.datasets.map(x => x.data);\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (this.datasets && this.datasets.filter((x, i) => x.data.length !== this.old.datasetsDataLengths[i]).length) {\r\n      this.old.datasetsDataLengths = this.datasets.map(x => x.data.length);\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (!!this.colors !== this.old.colorsExists) {\r\n      this.old.colorsExists = !!this.colors;\r\n\r\n      this.updateColors();\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    // This smells of inefficiency, might need to revisit this\r\n    if (this.colors && this.colors.filter((x, i) => !this.colorsEqual(x, this.old.colors[i])).length) {\r\n      this.old.colors = this.colors.map(x => this.copyColor(x));\r\n\r\n      this.updateColors();\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (!!this.labels !== this.old.labelsExist) {\r\n      this.old.labelsExist = !!this.labels;\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (this.labels && this.labels.filter((x, i) => !this.labelsEqual(x, this.old.labels[i])).length) {\r\n      this.old.labels = this.labels.map(x => this.copyLabel(x));\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (!!this.options.legend !== this.old.legendExists) {\r\n      this.old.legendExists = !!this.options.legend;\r\n\r\n      wantUpdate(UpdateType.Refresh);\r\n    }\r\n\r\n    if (this.options.legend && this.options.legend.position !== this.old.legend.position) {\r\n      this.old.legend.position = this.options.legend.position;\r\n\r\n      wantUpdate(UpdateType.Refresh);\r\n    }\r\n\r\n    switch (updateRequired as UpdateType) {\r\n      case UpdateType.Default:\r\n        break;\r\n      case UpdateType.Update:\r\n        this.update();\r\n        break;\r\n      case UpdateType.Refresh:\r\n        this.refresh();\r\n        break;\r\n    }\r\n  }\r\n\r\n  copyLabel(a: Label): Label {\r\n    if (Array.isArray(a)) {\r\n      return [...a];\r\n    }\r\n    return a;\r\n  }\r\n\r\n  labelsEqual(a: Label, b: Label) {\r\n    return Array.isArray(a) === Array.isArray(b)\r\n      && (Array.isArray(a) || a === b)\r\n      && (!Array.isArray(a) || a.length === b.length)\r\n      && (!Array.isArray(a) || a.filter((x, i) => x !== b[i]).length === 0)\r\n      ;\r\n  }\r\n\r\n  copyColor(a: Color): Color {\r\n    const rc: Color = {\r\n      backgroundColor: a.backgroundColor,\r\n      borderWidth: a.borderWidth,\r\n      borderColor: a.borderColor,\r\n      borderCapStyle: a.borderCapStyle,\r\n      borderDash: a.borderDash,\r\n      borderDashOffset: a.borderDashOffset,\r\n      borderJoinStyle: a.borderJoinStyle,\r\n      pointBorderColor: a.pointBorderColor,\r\n      pointBackgroundColor: a.pointBackgroundColor,\r\n      pointBorderWidth: a.pointBorderWidth,\r\n      pointRadius: a.pointRadius,\r\n      pointHoverRadius: a.pointHoverRadius,\r\n      pointHitRadius: a.pointHitRadius,\r\n      pointHoverBackgroundColor: a.pointHoverBackgroundColor,\r\n      pointHoverBorderColor: a.pointHoverBorderColor,\r\n      pointHoverBorderWidth: a.pointHoverBorderWidth,\r\n      pointStyle: a.pointStyle,\r\n      hoverBackgroundColor: a.hoverBackgroundColor,\r\n      hoverBorderColor: a.hoverBorderColor,\r\n      hoverBorderWidth: a.hoverBorderWidth,\r\n    };\r\n\r\n    return rc;\r\n  }\r\n\r\n  colorsEqual(a: Color, b: Color) {\r\n    if (!a !== !b) {\r\n      return false;\r\n    }\r\n    return !a ||\r\n      (a.backgroundColor === b.backgroundColor)\r\n      && (a.borderWidth === b.borderWidth)\r\n      && (a.borderColor === b.borderColor)\r\n      && (a.borderCapStyle === b.borderCapStyle)\r\n      && (a.borderDash === b.borderDash)\r\n      && (a.borderDashOffset === b.borderDashOffset)\r\n      && (a.borderJoinStyle === b.borderJoinStyle)\r\n      && (a.pointBorderColor === b.pointBorderColor)\r\n      && (a.pointBackgroundColor === b.pointBackgroundColor)\r\n      && (a.pointBorderWidth === b.pointBorderWidth)\r\n      && (a.pointRadius === b.pointRadius)\r\n      && (a.pointHoverRadius === b.pointHoverRadius)\r\n      && (a.pointHitRadius === b.pointHitRadius)\r\n      && (a.pointHoverBackgroundColor === b.pointHoverBackgroundColor)\r\n      && (a.pointHoverBorderColor === b.pointHoverBorderColor)\r\n      && (a.pointHoverBorderWidth === b.pointHoverBorderWidth)\r\n      && (a.pointStyle === b.pointStyle)\r\n      && (a.hoverBackgroundColor === b.hoverBackgroundColor)\r\n      && (a.hoverBorderColor === b.hoverBorderColor)\r\n      && (a.hoverBorderWidth === b.hoverBorderWidth);\r\n  }\r\n\r\n  updateColors() {\r\n    this.datasets.forEach((elm, index) => {\r\n      if (this.colors && this.colors[index]) {\r\n        Object.assign(elm, this.colors[index]);\r\n      } else {\r\n        Object.assign(elm, getColors(this.chartType, index, elm.data.length), { ...elm });\r\n      }\r\n    });\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    let updateRequired = UpdateType.Default;\r\n    const wantUpdate = (x: UpdateType) => {\r\n      updateRequired = x > updateRequired ? x : updateRequired;\r\n    };\r\n\r\n    // Check if the changes are in the data or datasets or labels or legend\r\n\r\n    if (changes.hasOwnProperty('data') && changes.data.currentValue) {\r\n      this.propagateDataToDatasets(changes.data.currentValue);\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (changes.hasOwnProperty('datasets') && changes.datasets.currentValue) {\r\n      this.propagateDatasetsToData(changes.datasets.currentValue);\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (changes.hasOwnProperty('labels')) {\r\n      if (this.chart) {\r\n        this.chart.data.labels = changes.labels.currentValue;\r\n      }\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (changes.hasOwnProperty('legend')) {\r\n      if (this.chart) {\r\n        this.chart.config.options.legend.display = changes.legend.currentValue;\r\n        this.chart.generateLegend();\r\n      }\r\n\r\n      wantUpdate(UpdateType.Update);\r\n    }\r\n\r\n    if (changes.hasOwnProperty('options')) {\r\n      wantUpdate(UpdateType.Refresh);\r\n    }\r\n\r\n    switch (updateRequired as UpdateType) {\r\n      case UpdateType.Update:\r\n        this.update();\r\n        break;\r\n      case UpdateType.Refresh:\r\n      case UpdateType.Default:\r\n        this.refresh();\r\n        break;\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n      this.chart = void 0;\r\n    }\r\n    this.subs.forEach(x => x.unsubscribe());\r\n  }\r\n\r\n  public update(duration?: any) {\r\n    if (this.chart) {\r\n      return this.chart.update(duration);\r\n    }\r\n  }\r\n\r\n  public hideDataset(index: number, hidden: boolean) {\r\n    this.chart.getDatasetMeta(index).hidden = hidden;\r\n    this.chart.update();\r\n  }\r\n\r\n  public isDatasetHidden(index: number): boolean {\r\n    return this.chart.getDatasetMeta(index).hidden;\r\n  }\r\n\r\n  public toBase64Image(): string {\r\n    return this.chart.toBase64Image();\r\n  }\r\n\r\n  public getChartConfiguration(): ChartConfiguration {\r\n    const datasets = this.getDatasets();\r\n\r\n    const options = Object.assign({}, this.options);\r\n    if (this.legend === false) {\r\n      options.legend = { display: false };\r\n    }\r\n    // hook for onHover and onClick events\r\n    options.hover = options.hover || {};\r\n    if (!options.hover.onHover) {\r\n      options.hover.onHover = (event: MouseEvent, active: {}[]) => {\r\n        if (active && !active.length) {\r\n          return;\r\n        }\r\n        this.chartHover.emit({ event, active });\r\n      };\r\n    }\r\n\r\n    if (!options.onClick) {\r\n      options.onClick = (event?: MouseEvent, active?: {}[]) => {\r\n        this.chartClick.emit({ event, active });\r\n      };\r\n    }\r\n\r\n    const mergedOptions = this.smartMerge(options, this.themeService.getColorschemesOptions());\r\n\r\n    const chartConfig: ChartConfiguration = {\r\n      type: this.chartType,\r\n      data: {\r\n        labels: this.labels || [],\r\n        datasets\r\n      },\r\n      plugins: this.plugins,\r\n      options: mergedOptions,\r\n    };\r\n\r\n    return chartConfig;\r\n  }\r\n\r\n  public getChartBuilder(ctx: string/*, data:any[], options:any*/): Chart {\r\n    const chartConfig = this.getChartConfiguration();\r\n    return new Chart(ctx, chartConfig);\r\n  }\r\n\r\n  smartMerge(options: any, overrides: any, level: number = 0): any {\r\n    if (level === 0) {\r\n      options = cloneDeep(options);\r\n    }\r\n    const keysToUpdate = Object.keys(overrides);\r\n    keysToUpdate.forEach(key => {\r\n      if (Array.isArray(overrides[key])) {\r\n        const arrayElements = options[key];\r\n        if (arrayElements) {\r\n          arrayElements.forEach(r => {\r\n            this.smartMerge(r, overrides[key][0], level + 1);\r\n          });\r\n        }\r\n      } else if (typeof (overrides[key]) === 'object') {\r\n        if (!(key in options)) {\r\n          options[key] = {};\r\n        }\r\n        this.smartMerge(options[key], overrides[key], level + 1);\r\n      } else {\r\n        options[key] = overrides[key];\r\n      }\r\n    });\r\n    if (level === 0) {\r\n      return options;\r\n    }\r\n  }\r\n\r\n  private isMultiLineLabel(label: Label): label is MultiLineLabel {\r\n    return Array.isArray(label);\r\n  }\r\n\r\n  private joinLabel(label: Label): string {\r\n    if (!label) {\r\n      return null;\r\n    }\r\n    if (this.isMultiLineLabel(label)) {\r\n      return label.join(' ');\r\n    } else {\r\n      return label;\r\n    }\r\n  }\r\n\r\n  private propagateDatasetsToData(datasets: ChartDataSets[]) {\r\n    this.data = this.datasets.map(r => r.data);\r\n    if (this.chart) {\r\n      this.chart.data.datasets = datasets;\r\n    }\r\n    this.updateColors();\r\n  }\r\n\r\n  private propagateDataToDatasets(newDataValues: SingleOrMultiDataSet): void {\r\n    if (this.isMultiDataSet(newDataValues)) {\r\n      if (this.datasets && newDataValues.length === this.datasets.length) {\r\n        this.datasets.forEach((dataset, i: number) => {\r\n          dataset.data = newDataValues[i];\r\n        });\r\n      } else {\r\n        this.datasets = newDataValues.map((data: number[], index: number) => {\r\n          return { data, label: this.joinLabel(this.labels[index]) || `Label ${index}` };\r\n        });\r\n        if (this.chart) {\r\n          this.chart.data.datasets = this.datasets;\r\n        }\r\n      }\r\n    } else {\r\n      if (!this.datasets) {\r\n        this.datasets = [{ data: newDataValues }];\r\n        if (this.chart) {\r\n          this.chart.data.datasets = this.datasets;\r\n        }\r\n      } else {\r\n        this.datasets[0].data = newDataValues;\r\n        this.datasets.splice(1); // Remove all elements but the first\r\n      }\r\n    }\r\n    this.updateColors();\r\n  }\r\n\r\n  private isMultiDataSet(data: SingleOrMultiDataSet): data is MultiDataSet {\r\n    return Array.isArray(data[0]);\r\n  }\r\n\r\n  private getDatasets() {\r\n    if (!this.datasets && !this.data) {\r\n      throw new Error(`ng-charts configuration error, data or datasets field are required to render chart ${ this.chartType }`);\r\n    }\r\n\r\n    // If `datasets` is defined, use it over the `data` property.\r\n    if (this.datasets) {\r\n      this.propagateDatasetsToData(this.datasets);\r\n      return this.datasets;\r\n    }\r\n\r\n    if (this.data) {\r\n      this.propagateDataToDatasets(this.data);\r\n      return this.datasets;\r\n    }\r\n  }\r\n\r\n  private refresh() {\r\n    // if (this.options && this.options.responsive) {\r\n    //   setTimeout(() => this.refresh(), 50);\r\n    // }\r\n\r\n    // todo: remove this line, it is producing flickering\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n      this.chart = void 0;\r\n    }\r\n    if (this.ctx) {\r\n      this.chart = this.getChartBuilder(this.ctx/*, data, this.options*/);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BaseChartDirective } from './base-chart.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BaseChartDirective\r\n  ],\r\n  imports: [\r\n  ],\r\n  exports: [\r\n    BaseChartDirective\r\n  ]\r\n})\r\nexport class ChartsModule { }\r\n","// private helper functions\r\nexport interface Color {\r\n  backgroundColor?: string | string[];\r\n  borderWidth?: number | number[];\r\n  borderColor?: string | string[];\r\n  borderCapStyle?: string;\r\n  borderDash?: number[];\r\n  borderDashOffset?: number;\r\n  borderJoinStyle?: string;\r\n\r\n  pointBorderColor?: string | string[];\r\n  pointBackgroundColor?: string | string[];\r\n  pointBorderWidth?: number | number[];\r\n\r\n  pointRadius?: number | number[];\r\n  pointHoverRadius?: number | number[];\r\n  pointHitRadius?: number | number[];\r\n\r\n  pointHoverBackgroundColor?: string | string[];\r\n  pointHoverBorderColor?: string | string[];\r\n  pointHoverBorderWidth?: number | number[];\r\n  pointStyle?: string | string[];\r\n\r\n  hoverBackgroundColor?: string | string[];\r\n  hoverBorderColor?: string | string[];\r\n  hoverBorderWidth?: number;\r\n}\r\n","import { Color } from './color';\r\n\r\n// pie | doughnut\r\nexport interface Colors extends Color {\r\n  data?: number[];\r\n  label?: string;\r\n}\r\n","// tslint:disable:variable-name\r\n// tslint:disable:no-var-keyword\r\n// tslint:disable:prefer-const\r\n// tslint:disable:only-arrow-functions\r\n// tslint:disable:one-variable-per-declaration\r\n// tslint:disable:object-literal-shorthand\r\n// tslint:disable:space-before-function-paren\r\n\r\ndeclare class Chart {\r\n  static readonly Chart: typeof Chart;\r\n  static readonly Tooltip: any;\r\n  static readonly helpers: any;\r\n  static readonly defaults: any;\r\n  static readonly plugins: any;\r\n}\r\n\r\nexport function monkeyPatchChartJsLegend() {\r\n  if (typeof Chart === 'undefined') {\r\n    console.log('Chart not defined (guessing this is a universal build, and I don\\'t know why this happens -- Aviad)');\r\n    return;\r\n  }\r\n  const plugins = Chart.plugins.getAll();\r\n  const legend = plugins.filter(p => p.id === 'legend')[0];\r\n  legend._element.prototype.fit = fit;\r\n  legend._element.prototype.draw = draw;\r\n\r\n  const helpers = Chart.helpers;\r\n  const defaults = Chart.defaults;\r\n  const valueOrDefault = helpers.valueOrDefault;\r\n\r\n  function getBoxWidth(labelOpts, fontSize) {\r\n    return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?\r\n      fontSize :\r\n      labelOpts.boxWidth;\r\n  }\r\n\r\n  function fit() {\r\n    var me = this;\r\n    var opts = me.options;\r\n    var labelOpts = opts.labels;\r\n    var display = opts.display;\r\n\r\n    var ctx = me.ctx;\r\n\r\n    var labelFont = helpers.options._parseFont(labelOpts);\r\n    var fontSize = labelFont.size;\r\n\r\n    // Reset hit boxes\r\n    var hitboxes = me.legendHitBoxes = [];\r\n\r\n    var minSize = me.minSize;\r\n    var isHorizontal = me.isHorizontal();\r\n\r\n    if (isHorizontal) {\r\n      minSize.width = me.maxWidth; // fill all the width\r\n      minSize.height = display ? 10 : 0;\r\n    } else {\r\n      minSize.width = display ? 10 : 0;\r\n      minSize.height = me.maxHeight; // fill all the height\r\n    }\r\n\r\n    var getMaxLineWidth = function (textLines) {\r\n      return textLines.map(function (textLine) {\r\n        return ctx.measureText(textLine).width;\r\n      }).reduce(function (acc, v) {\r\n        return v > acc ? v : acc;\r\n      }, 0);\r\n    };\r\n\r\n    // Increase sizes here\r\n    if (display) {\r\n      ctx.font = labelFont.string;\r\n\r\n      if (isHorizontal) {\r\n\r\n        // Labels\r\n\r\n        // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\r\n        var lineWidths = me.lineWidths = [0];\r\n        var lineHeights = me.lineHeights = [];\r\n        var currentLineHeight = 0;\r\n        var lineIndex = 0;\r\n\r\n        ctx.textAlign = 'left';\r\n        ctx.textBaseline = 'top';\r\n\r\n        helpers.each(me.legendItems, function (legendItem, i) {\r\n          var width, height;\r\n\r\n          if (helpers.isArray(legendItem.text)) {\r\n            width = getMaxLineWidth(legendItem.text);\r\n            height = fontSize * legendItem.text.length + labelOpts.padding;\r\n          } else {\r\n            width = ctx.measureText(legendItem.text).width;\r\n            height = fontSize + labelOpts.padding;\r\n          }\r\n          width += getBoxWidth(labelOpts, fontSize) + (fontSize / 2);\r\n\r\n          if (lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {\r\n            lineHeights.push(currentLineHeight);\r\n            currentLineHeight = 0;\r\n            lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\r\n            lineIndex++;\r\n          }\r\n\r\n          legendItem.lineOrColumnIndex = lineIndex;\r\n\r\n          if (height > currentLineHeight) {\r\n            currentLineHeight = height;\r\n          }\r\n\r\n          // Store the hitbox width and height here. Final position will be updated in `draw`\r\n          hitboxes[i] = {\r\n            left: 0,\r\n            top: 0,\r\n            width: width,\r\n            height: height,\r\n          };\r\n\r\n          lineWidths[lineWidths.length - 1] += width + labelOpts.padding;\r\n        });\r\n\r\n        lineHeights.push(currentLineHeight);\r\n        minSize.height += lineHeights.reduce(function (acc, v) {\r\n          return acc + v;\r\n        }, 0);\r\n\r\n      } else {\r\n        var vPadding = labelOpts.padding;\r\n        var columnWidths = me.columnWidths = [];\r\n        var columnHeights = me.columnHeights = [];\r\n        var totalWidth = labelOpts.padding;\r\n        var currentColWidth = 0;\r\n        var currentColHeight = 0;\r\n        var columnIndex = 0;\r\n\r\n        helpers.each(me.legendItems, function (legendItem, i) {\r\n          var itemWidth;\r\n          var height;\r\n\r\n          if (helpers.isArray(legendItem.text)) {\r\n            itemWidth = getMaxLineWidth(legendItem.text);\r\n            height = fontSize * legendItem.text.length;\r\n          } else {\r\n            itemWidth = ctx.measureText(legendItem.text).width;\r\n            height = fontSize;\r\n          }\r\n          itemWidth += getBoxWidth(labelOpts, fontSize) + (fontSize / 2);\r\n\r\n          // If too tall, go to new column\r\n          if (currentColHeight + fontSize + 2 * vPadding > minSize.height) {\r\n            totalWidth += currentColWidth + labelOpts.padding;\r\n            columnWidths.push(currentColWidth); // previous column width\r\n            columnHeights.push(currentColHeight);\r\n            currentColWidth = 0;\r\n            currentColHeight = 0;\r\n            columnIndex++;\r\n          }\r\n\r\n          legendItem.lineOrColumnIndex = columnIndex;\r\n\r\n          // Get max width\r\n          currentColWidth = Math.max(currentColWidth, itemWidth);\r\n          currentColHeight += height + vPadding;\r\n\r\n          // Store the hitbox width and height here. Final position will be updated in `draw`\r\n          hitboxes[i] = {\r\n            left: 0,\r\n            top: 0,\r\n            width: itemWidth,\r\n            height: height\r\n          };\r\n        });\r\n\r\n        totalWidth += currentColWidth;\r\n        columnWidths.push(currentColWidth);\r\n        columnHeights.push(currentColHeight);\r\n        minSize.width += totalWidth;\r\n      }\r\n    }\r\n\r\n    me.width = minSize.width;\r\n    me.height = minSize.height;\r\n  }\r\n\r\n  function draw() {\r\n    var me = this;\r\n    var opts = me.options;\r\n    var labelOpts = opts.labels;\r\n    var globalDefaults = defaults.global;\r\n    var defaultColor = globalDefaults.defaultColor;\r\n    var lineDefault = globalDefaults.elements.line;\r\n    var legendHeight = me.height;\r\n    var columnHeights = me.columnHeights;\r\n    var columnWidths = me.columnWidths;\r\n    var legendWidth = me.width;\r\n    var lineWidths = me.lineWidths;\r\n    var lineHeights = me.lineHeights;\r\n\r\n    if (opts.display) {\r\n      var ctx = me.ctx;\r\n      var fontColor = valueOrDefault(labelOpts.fontColor, globalDefaults.defaultFontColor);\r\n      var labelFont = helpers.options._parseFont(labelOpts);\r\n      var fontSize = labelFont.size;\r\n      var cursor;\r\n\r\n      // Canvas setup\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.lineWidth = 0.5;\r\n      ctx.strokeStyle = fontColor; // for strikethrough effect\r\n      ctx.fillStyle = fontColor; // render in correct colour\r\n      ctx.font = labelFont.string;\r\n\r\n      var boxWidth = getBoxWidth(labelOpts, fontSize);\r\n      var hitboxes = me.legendHitBoxes;\r\n\r\n      // current position\r\n      var drawLegendBox = function (x, y, legendItem) {\r\n        if (isNaN(boxWidth) || boxWidth <= 0) {\r\n          return;\r\n        }\r\n\r\n        // Set the ctx for the box\r\n        ctx.save();\r\n\r\n        var lineWidth = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth);\r\n        ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\r\n        ctx.lineCap = valueOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);\r\n        ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);\r\n        ctx.lineJoin = valueOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);\r\n        ctx.lineWidth = lineWidth;\r\n        ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\r\n\r\n        if (ctx.setLineDash) {\r\n          // IE 9 and 10 do not support line dash\r\n          ctx.setLineDash(valueOrDefault(legendItem.lineDash, lineDefault.borderDash));\r\n        }\r\n\r\n        if (opts.labels && opts.labels.usePointStyle) {\r\n          // Recalculate x and y for drawPoint() because its expecting\r\n          // x and y to be center of figure (instead of top left)\r\n          var radius = boxWidth * Math.SQRT2 / 2;\r\n          var centerX = x + boxWidth / 2;\r\n          var centerY = y + fontSize / 2;\r\n\r\n          // Draw pointStyle as legend symbol\r\n          helpers.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\r\n        } else {\r\n          // Draw box as legend symbol\r\n          if (lineWidth !== 0) {\r\n            ctx.strokeRect(x, y, boxWidth, fontSize);\r\n          }\r\n          ctx.fillRect(x, y, boxWidth, fontSize);\r\n        }\r\n\r\n        ctx.restore();\r\n      };\r\n\r\n      var drawStrikeThrough = function (x, y, w) {\r\n        ctx.beginPath();\r\n        ctx.lineWidth = 2;\r\n        ctx.moveTo(x, y);\r\n        ctx.lineTo(x + w, y);\r\n        ctx.stroke();\r\n      };\r\n\r\n      var drawCrossOver = function (x, y, w, h) {\r\n        ctx.beginPath();\r\n        ctx.lineWidth = 2;\r\n        ctx.moveTo(x, y);\r\n        ctx.lineTo(x + w, y + h);\r\n        ctx.moveTo(x, y + h);\r\n        ctx.lineTo(x + w, y);\r\n        ctx.stroke();\r\n      };\r\n\r\n      var fillText = function (x, y, legendItem, textWidth) {\r\n        var halfFontSize = fontSize / 2;\r\n        var xLeft = boxWidth + halfFontSize + x;\r\n        var yMiddle = y + halfFontSize;\r\n\r\n        if (helpers.isArray(legendItem.text)) {\r\n          helpers.each(legendItem.text, function (textLine, index) {\r\n            var lineOffset = index * fontSize;\r\n            ctx.fillText(textLine, xLeft, yMiddle + lineOffset);\r\n          });\r\n        } else {\r\n          ctx.fillText(legendItem.text, xLeft, yMiddle);\r\n        }\r\n\r\n        if (legendItem.hidden) {\r\n          if (helpers.isArray(legendItem.text)) {\r\n            drawCrossOver(xLeft, yMiddle, textWidth, (legendItem.text.length - 1) * (fontSize - 1));\r\n          } else {\r\n            drawStrikeThrough(xLeft, yMiddle, textWidth);\r\n          }\r\n        }\r\n      };\r\n\r\n      var alignmentOffset = function (dimension, blockSize) {\r\n        switch (opts.align) {\r\n          case 'start':\r\n            return labelOpts.padding;\r\n          case 'end':\r\n            return dimension - blockSize;\r\n          default: // center\r\n            return (dimension - blockSize + labelOpts.padding) / 2;\r\n        }\r\n      };\r\n\r\n      // Horizontal\r\n      var isHorizontal = me.isHorizontal();\r\n      if (isHorizontal) {\r\n        cursor = {\r\n          x: me.left + alignmentOffset(legendWidth, lineWidths[0]),\r\n          y: me.top + labelOpts.padding,\r\n          line: 0\r\n        };\r\n      } else {\r\n        cursor = {\r\n          x: me.left + labelOpts.padding,\r\n          y: me.top + alignmentOffset(legendHeight, columnHeights[0]),\r\n          line: 0\r\n        };\r\n      }\r\n\r\n      helpers.each(me.legendItems, function (legendItem, i) {\r\n        var textWidth, height, boxTopOffset;\r\n\r\n        if (legendItem.lineOrColumnIndex > cursor.line) {\r\n          if (isHorizontal) {\r\n            cursor.y += lineHeights[cursor.line];\r\n            cursor.line = legendItem.lineOrColumnIndex;\r\n            cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);\r\n          } else {\r\n            cursor.x += columnWidths[cursor.line] + labelOpts.padding;\r\n            cursor.line = legendItem.lineOrColumnIndex;\r\n            cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);\r\n          }\r\n        }\r\n\r\n        if (helpers.isArray(legendItem.text)) {\r\n          textWidth = legendItem.text.map(function (textLine) {\r\n            return ctx.measureText(textLine).width;\r\n          }).reduce(function (acc, v) {\r\n            return v > acc ? v : acc;\r\n          }, 0);\r\n          boxTopOffset = fontSize / 2 * (legendItem.text.length - 1);\r\n          height = fontSize * legendItem.text.length;\r\n        } else {\r\n          textWidth = ctx.measureText(legendItem.text).width;\r\n          boxTopOffset = 0;\r\n          height = fontSize;\r\n        }\r\n\r\n        var width = boxWidth + (fontSize / 2) + textWidth;\r\n        var x = cursor.x;\r\n        var y = cursor.y;\r\n\r\n        var topOffset = isHorizontal ? Math.trunc((lineHeights[cursor.line] - hitboxes[i].height) / 2) : 0;\r\n\r\n        drawLegendBox(x, y + boxTopOffset + topOffset, legendItem);\r\n\r\n        hitboxes[i].left = x;\r\n        hitboxes[i].top = y;\r\n\r\n        // Fill the actual label\r\n        fillText(x, y + topOffset, legendItem, textWidth);\r\n\r\n        if (isHorizontal) {\r\n          cursor.x += width + labelOpts.padding;\r\n        } else {\r\n          cursor.y += height + labelOpts.padding;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","// tslint:disable:variable-name\r\n// tslint:disable:no-var-keyword\r\n// tslint:disable:prefer-const\r\n// tslint:disable:only-arrow-functions\r\n// tslint:disable:one-variable-per-declaration\r\n// tslint:disable:object-literal-shorthand\r\n// tslint:disable:space-before-function-paren\r\n\r\ndeclare class Chart {\r\n  static readonly Chart: typeof Chart;\r\n  static readonly Tooltip: any;\r\n  static readonly helpers: any;\r\n  static readonly defaults: any;\r\n  static readonly plugins: any;\r\n}\r\n\r\nexport function monkeyPatchChartJsTooltip() {\r\n  if (typeof Chart === 'undefined') {\r\n    console.log('Chart not defined (guessing this is a universal build, and I don\\'t know why this happens -- Aviad)');\r\n    return;\r\n  }\r\n  Chart.Tooltip.prototype.drawBody = drawBody;\r\n  const helpers = Chart.helpers;\r\n\r\n  function getAlignedX(vm, align) {\r\n    return align === 'center'\r\n      ? vm.x + vm.width / 2\r\n      : align === 'right'\r\n        ? vm.x + vm.width - vm.xPadding\r\n        : vm.x + vm.xPadding;\r\n  }\r\n\r\n  function drawBody(pt, vm, ctx) {\r\n    var bodyFontSize = vm.bodyFontSize;\r\n    var bodySpacing = vm.bodySpacing;\r\n    var bodyAlign = vm._bodyAlign;\r\n    var body = vm.body;\r\n    var drawColorBoxes = vm.displayColors;\r\n    var labelColors = vm.labelColors;\r\n    var xLinePadding = 0;\r\n    var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\r\n    var textColor;\r\n\r\n    ctx.textAlign = bodyAlign;\r\n    ctx.textBaseline = 'top';\r\n    ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\r\n\r\n    pt.x = getAlignedX(vm, bodyAlign);\r\n\r\n    // Before Body\r\n    var fillLineOfText = function (line) {\r\n      ctx.fillText(line, pt.x + xLinePadding, pt.y);\r\n      pt.y += bodyFontSize + bodySpacing;\r\n    };\r\n\r\n    // Before body lines\r\n    ctx.fillStyle = vm.bodyFontColor;\r\n    helpers.each(vm.beforeBody, fillLineOfText);\r\n\r\n    xLinePadding = drawColorBoxes && bodyAlign !== 'right'\r\n      ? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)\r\n      : 0;\r\n\r\n    // Draw body lines now\r\n    helpers.each(body, function (bodyItem, i) {\r\n      textColor = vm.labelTextColors[i];\r\n      ctx.fillStyle = textColor;\r\n      helpers.each(bodyItem.before, fillLineOfText);\r\n\r\n      // Draw Legend-like boxes if needed\r\n      if (drawColorBoxes) {\r\n        // Fill a white rect so that colours merge nicely if the opacity is < 1\r\n        ctx.fillStyle = vm.legendColorBackground;\r\n        ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize);\r\n\r\n        // Border\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = labelColors[i].borderColor;\r\n        ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize);\r\n\r\n        // Inner square\r\n        ctx.fillStyle = labelColors[i].backgroundColor;\r\n        ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\r\n        ctx.fillStyle = textColor;\r\n      }\r\n\r\n      helpers.each(bodyItem.lines, fillLineOfText);\r\n\r\n      helpers.each(bodyItem.after, fillLineOfText);\r\n    });\r\n\r\n    // Reset back to 0 for after body\r\n    xLinePadding = 0;\r\n\r\n    // After body lines\r\n    helpers.each(vm.afterBody, fillLineOfText);\r\n    pt.y -= bodySpacing; // Remove last body spacing\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}