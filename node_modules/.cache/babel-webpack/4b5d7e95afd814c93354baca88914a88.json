{"ast":null,"code":"import _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, TemplateRef, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, forwardRef, Optional, ContentChild, ViewChild, Input, QueryList, EventEmitter, ChangeDetectorRef, ContentChildren, Output, HostListener, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nfunction CdkStep_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nvar _c0 = [\"*\"];\n\nvar CdkStepHeader = /*@__PURE__*/function () {\n  var CdkStepHeader = /*#__PURE__*/function () {\n    function CdkStepHeader(_elementRef) {\n      _classCallCheck(this, CdkStepHeader);\n\n      this._elementRef = _elementRef;\n    }\n    /** Focuses the step header. */\n\n\n    _createClass(CdkStepHeader, [{\n      key: \"focus\",\n      value: function focus() {\n        this._elementRef.nativeElement.focus();\n      }\n    }]);\n\n    return CdkStepHeader;\n  }();\n\n  CdkStepHeader.ɵfac = function CdkStepHeader_Factory(t) {\n    return new (t || CdkStepHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CdkStepHeader.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkStepHeader,\n    selectors: [[\"\", \"cdkStepHeader\", \"\"]],\n    hostAttrs: [\"role\", \"tab\"]\n  });\n  return CdkStepHeader;\n}();\n\nvar CdkStepLabel = /*@__PURE__*/function () {\n  var CdkStepLabel = function CdkStepLabel(\n  /** @docs-private */\n  template) {\n    _classCallCheck(this, CdkStepLabel);\n\n    this.template = template;\n  };\n\n  CdkStepLabel.ɵfac = function CdkStepLabel_Factory(t) {\n    return new (t || CdkStepLabel)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkStepLabel.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkStepLabel,\n    selectors: [[\"\", \"cdkStepLabel\", \"\"]]\n  });\n  return CdkStepLabel;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Used to generate unique ID for each stepper component. */\n\n\nvar nextId = 0;\n/** Change event emitted on selection changes. */\n\nvar StepperSelectionEvent = function StepperSelectionEvent() {\n  _classCallCheck(this, StepperSelectionEvent);\n};\n/** Enum to represent the different states of the steps. */\n\n\nvar STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error'\n};\n/** InjectionToken that can be used to specify the global stepper options. */\n\nvar STEPPER_GLOBAL_OPTIONS = /*@__PURE__*/new InjectionToken('STEPPER_GLOBAL_OPTIONS');\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\n * @breaking-change 8.0.0.\n */\n\nvar MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\n\nvar CdkStep = /*@__PURE__*/function () {\n  var CdkStep = /*#__PURE__*/function () {\n    /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n    function CdkStep(_stepper, stepperOptions) {\n      _classCallCheck(this, CdkStep);\n\n      this._stepper = _stepper;\n      /** Whether user has seen the expanded step content or not. */\n\n      this.interacted = false;\n      this._editable = true;\n      this._optional = false;\n      this._completedOverride = null;\n      this._customError = null;\n      this._stepperOptions = stepperOptions ? stepperOptions : {};\n      this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n      this._showError = !!this._stepperOptions.showError;\n    }\n    /** Whether the user can return to this step once it has been marked as completed. */\n\n\n    _createClass(CdkStep, [{\n      key: \"editable\",\n      get: function get() {\n        return this._editable;\n      },\n      set: function set(value) {\n        this._editable = coerceBooleanProperty(value);\n      }\n      /** Whether the completion of step is optional. */\n\n    }, {\n      key: \"optional\",\n      get: function get() {\n        return this._optional;\n      },\n      set: function set(value) {\n        this._optional = coerceBooleanProperty(value);\n      }\n      /** Whether step is marked as completed. */\n\n    }, {\n      key: \"completed\",\n      get: function get() {\n        return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n      },\n      set: function set(value) {\n        this._completedOverride = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"_getDefaultCompleted\",\n      value: function _getDefaultCompleted() {\n        return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n      }\n      /** Whether step has an error. */\n\n    }, {\n      key: \"hasError\",\n      get: function get() {\n        return this._customError == null ? this._getDefaultError() : this._customError;\n      },\n      set: function set(value) {\n        this._customError = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"_getDefaultError\",\n      value: function _getDefaultError() {\n        return this.stepControl && this.stepControl.invalid && this.interacted;\n      }\n      /** Selects this step component. */\n\n    }, {\n      key: \"select\",\n      value: function select() {\n        this._stepper.selected = this;\n      }\n      /** Resets the step to its initial state. Note that this includes resetting form data. */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this.interacted = false;\n\n        if (this._completedOverride != null) {\n          this._completedOverride = false;\n        }\n\n        if (this._customError != null) {\n          this._customError = false;\n        }\n\n        if (this.stepControl) {\n          this.stepControl.reset();\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        // Since basically all inputs of the MatStep get proxied through the view down to the\n        // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n        this._stepper._stateChanged();\n      }\n    }]);\n\n    return CdkStep;\n  }();\n\n  CdkStep.ɵfac = function CdkStep_Factory(t) {\n    return new (t || CdkStep)(ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n      return CdkStepper;\n    })), ɵngcc0.ɵɵdirectiveInject(STEPPER_GLOBAL_OPTIONS, 8));\n  };\n\n  CdkStep.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkStep,\n    selectors: [[\"cdk-step\"]],\n    contentQueries: function CdkStep_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStepLabel, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepLabel = _t.first);\n      }\n    },\n    viewQuery: function CdkStep_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      }\n    },\n    inputs: {\n      editable: \"editable\",\n      optional: \"optional\",\n      completed: \"completed\",\n      hasError: \"hasError\",\n      stepControl: \"stepControl\",\n      label: \"label\",\n      errorMessage: \"errorMessage\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      state: \"state\"\n    },\n    exportAs: [\"cdkStep\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function CdkStep_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, CdkStep_ng_template_0_Template, 1, 0, \"ng-template\");\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CdkStep;\n}();\n\nvar CdkStepper = /*@__PURE__*/function () {\n  var CdkStepper = /*#__PURE__*/function () {\n    function CdkStepper(_dir, _changeDetectorRef, // @breaking-change 8.0.0 `_elementRef` and `_document` parameters to become required.\n    _elementRef, _document) {\n      _classCallCheck(this, CdkStepper);\n\n      this._dir = _dir;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      /** Emits when the component is destroyed. */\n\n      this._destroyed = new Subject();\n      /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n\n      this.steps = new QueryList();\n      this._linear = false;\n      this._selectedIndex = 0;\n      /** Event emitted when the selected step has changed. */\n\n      this.selectionChange = new EventEmitter();\n      this._orientation = 'horizontal';\n      this._groupId = nextId++;\n      this._document = _document;\n    }\n    /** Whether the validity of previous steps should be checked or not. */\n\n\n    _createClass(CdkStepper, [{\n      key: \"linear\",\n      get: function get() {\n        return this._linear;\n      },\n      set: function set(value) {\n        this._linear = coerceBooleanProperty(value);\n      }\n      /** The index of the selected step. */\n\n    }, {\n      key: \"selectedIndex\",\n      get: function get() {\n        return this._selectedIndex;\n      },\n      set: function set(index) {\n        var newIndex = coerceNumberProperty(index);\n\n        if (this.steps && this._steps) {\n          // Ensure that the index can't be out of bounds.\n          if ((newIndex < 0 || newIndex > this.steps.length - 1) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n          }\n\n          if (this._selectedIndex != newIndex && !this._anyControlsInvalidOrPending(newIndex) && (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n            this._updateSelectedItemIndex(index);\n          }\n        } else {\n          this._selectedIndex = newIndex;\n        }\n      }\n      /** The step that is selected. */\n\n    }, {\n      key: \"selected\",\n      get: function get() {\n        // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n        return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;\n      },\n      set: function set(step) {\n        this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this = this;\n\n        this._steps.changes.pipe(startWith(this._steps), takeUntil(this._destroyed)).subscribe(function (steps) {\n          _this.steps.reset(steps.filter(function (step) {\n            return step._stepper === _this;\n          }));\n\n          _this.steps.notifyOnChanges();\n        });\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this2 = this;\n\n        // Note that while the step headers are content children by default, any components that\n        // extend this one might have them as view children. We initialize the keyboard handling in\n        // AfterViewInit so we're guaranteed for both view and content children to be defined.\n        this._keyManager = new FocusKeyManager(this._stepHeader).withWrap().withHomeAndEnd().withVerticalOrientation(this._orientation === 'vertical');\n        (this._dir ? this._dir.change : of()).pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed)).subscribe(function (direction) {\n          return _this2._keyManager.withHorizontalOrientation(direction);\n        });\n\n        this._keyManager.updateActiveItem(this._selectedIndex); // No need to `takeUntil` here, because we're the ones destroying `steps`.\n\n\n        this.steps.changes.subscribe(function () {\n          if (!_this2.selected) {\n            _this2._selectedIndex = Math.max(_this2._selectedIndex - 1, 0);\n          }\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.steps.destroy();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /** Selects and focuses the next step in list. */\n\n    }, {\n      key: \"next\",\n      value: function next() {\n        this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n      }\n      /** Selects and focuses the previous step in list. */\n\n    }, {\n      key: \"previous\",\n      value: function previous() {\n        this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n      }\n      /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._updateSelectedItemIndex(0);\n\n        this.steps.forEach(function (step) {\n          return step.reset();\n        });\n\n        this._stateChanged();\n      }\n      /** Returns a unique id for each step label element. */\n\n    }, {\n      key: \"_getStepLabelId\",\n      value: function _getStepLabelId(i) {\n        return \"cdk-step-label-\".concat(this._groupId, \"-\").concat(i);\n      }\n      /** Returns unique id for each step content element. */\n\n    }, {\n      key: \"_getStepContentId\",\n      value: function _getStepContentId(i) {\n        return \"cdk-step-content-\".concat(this._groupId, \"-\").concat(i);\n      }\n      /** Marks the component to be change detected. */\n\n    }, {\n      key: \"_stateChanged\",\n      value: function _stateChanged() {\n        this._changeDetectorRef.markForCheck();\n      }\n      /** Returns position state of the step with the given index. */\n\n    }, {\n      key: \"_getAnimationDirection\",\n      value: function _getAnimationDirection(index) {\n        var position = index - this._selectedIndex;\n\n        if (position < 0) {\n          return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n        } else if (position > 0) {\n          return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n        }\n\n        return 'current';\n      }\n      /** Returns the type of icon to be displayed. */\n\n    }, {\n      key: \"_getIndicatorType\",\n      value: function _getIndicatorType(index) {\n        var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : STEP_STATE.NUMBER;\n        var step = this.steps.toArray()[index];\n\n        var isCurrentStep = this._isCurrentStep(index);\n\n        return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) : this._getGuidelineLogic(step, isCurrentStep, state);\n      }\n    }, {\n      key: \"_getDefaultIndicatorLogic\",\n      value: function _getDefaultIndicatorLogic(step, isCurrentStep) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n          return STEP_STATE.ERROR;\n        } else if (!step.completed || isCurrentStep) {\n          return STEP_STATE.NUMBER;\n        } else {\n          return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n        }\n      }\n    }, {\n      key: \"_getGuidelineLogic\",\n      value: function _getGuidelineLogic(step, isCurrentStep) {\n        var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STEP_STATE.NUMBER;\n\n        if (step._showError && step.hasError && !isCurrentStep) {\n          return STEP_STATE.ERROR;\n        } else if (step.completed && !isCurrentStep) {\n          return STEP_STATE.DONE;\n        } else if (step.completed && isCurrentStep) {\n          return state;\n        } else if (step.editable && isCurrentStep) {\n          return STEP_STATE.EDIT;\n        } else {\n          return state;\n        }\n      }\n    }, {\n      key: \"_isCurrentStep\",\n      value: function _isCurrentStep(index) {\n        return this._selectedIndex === index;\n      }\n      /** Returns the index of the currently-focused step header. */\n\n    }, {\n      key: \"_getFocusIndex\",\n      value: function _getFocusIndex() {\n        return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n      }\n    }, {\n      key: \"_updateSelectedItemIndex\",\n      value: function _updateSelectedItemIndex(newIndex) {\n        var stepsArray = this.steps.toArray();\n        this.selectionChange.emit({\n          selectedIndex: newIndex,\n          previouslySelectedIndex: this._selectedIndex,\n          selectedStep: stepsArray[newIndex],\n          previouslySelectedStep: stepsArray[this._selectedIndex]\n        }); // If focus is inside the stepper, move it to the next header, otherwise it may become\n        // lost when the active step content is hidden. We can't be more granular with the check\n        // (e.g. checking whether focus is inside the active step), because we don't have a\n        // reference to the elements that are rendering out the content.\n\n        this._containsFocus() ? this._keyManager.setActiveItem(newIndex) : this._keyManager.updateActiveItem(newIndex);\n        this._selectedIndex = newIndex;\n\n        this._stateChanged();\n      }\n    }, {\n      key: \"_onKeydown\",\n      value: function _onKeydown(event) {\n        var hasModifier = hasModifierKey(event);\n        var keyCode = event.keyCode;\n        var manager = this._keyManager;\n\n        if (manager.activeItemIndex != null && !hasModifier && (keyCode === SPACE || keyCode === ENTER)) {\n          this.selectedIndex = manager.activeItemIndex;\n          event.preventDefault();\n        } else {\n          manager.onKeydown(event);\n        }\n      }\n    }, {\n      key: \"_anyControlsInvalidOrPending\",\n      value: function _anyControlsInvalidOrPending(index) {\n        var steps = this.steps.toArray();\n        steps[this._selectedIndex].interacted = true;\n\n        if (this._linear && index >= 0) {\n          return steps.slice(0, index).some(function (step) {\n            var control = step.stepControl;\n            var isIncomplete = control ? control.invalid || control.pending || !step.interacted : !step.completed;\n            return isIncomplete && !step.optional && !step._completedOverride;\n          });\n        }\n\n        return false;\n      }\n    }, {\n      key: \"_layoutDirection\",\n      value: function _layoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n      }\n      /** Checks whether the stepper contains the focused element. */\n\n    }, {\n      key: \"_containsFocus\",\n      value: function _containsFocus() {\n        if (!this._document || !this._elementRef) {\n          return false;\n        }\n\n        var stepperElement = this._elementRef.nativeElement;\n        var focusedElement = this._document.activeElement;\n        return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n      }\n    }]);\n\n    return CdkStepper;\n  }();\n\n  CdkStepper.ɵfac = function CdkStepper_Factory(t) {\n    return new (t || CdkStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  CdkStepper.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkStepper,\n    selectors: [[\"\", \"cdkStepper\", \"\"]],\n    contentQueries: function CdkStepper_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStep, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStepHeader, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._steps = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._stepHeader = _t);\n      }\n    },\n    inputs: {\n      linear: \"linear\",\n      selectedIndex: \"selectedIndex\",\n      selected: \"selected\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\"\n    },\n    exportAs: [\"cdkStepper\"]\n  });\n  return CdkStepper;\n}();\n\nvar CdkStepperNext = /*@__PURE__*/function () {\n  var CdkStepperNext = /*#__PURE__*/function () {\n    function CdkStepperNext(_stepper) {\n      _classCallCheck(this, CdkStepperNext);\n\n      this._stepper = _stepper;\n      /** Type of the next button. Defaults to \"submit\" if not specified. */\n\n      this.type = 'submit';\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n    _createClass(CdkStepperNext, [{\n      key: \"_handleClick\",\n      value: function _handleClick() {\n        this._stepper.next();\n      }\n    }]);\n\n    return CdkStepperNext;\n  }();\n\n  CdkStepperNext.ɵfac = function CdkStepperNext_Factory(t) {\n    return new (t || CdkStepperNext)(ɵngcc0.ɵɵdirectiveInject(CdkStepper));\n  };\n\n  CdkStepperNext.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkStepperNext,\n    selectors: [[\"button\", \"cdkStepperNext\", \"\"]],\n    hostVars: 1,\n    hostBindings: function CdkStepperNext_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkStepperNext_click_HostBindingHandler() {\n          return ctx._handleClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n      }\n    },\n    inputs: {\n      type: \"type\"\n    }\n  });\n  return CdkStepperNext;\n}();\n\nvar CdkStepperPrevious = /*@__PURE__*/function () {\n  var CdkStepperPrevious = /*#__PURE__*/function () {\n    function CdkStepperPrevious(_stepper) {\n      _classCallCheck(this, CdkStepperPrevious);\n\n      this._stepper = _stepper;\n      /** Type of the previous button. Defaults to \"button\" if not specified. */\n\n      this.type = 'button';\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n    _createClass(CdkStepperPrevious, [{\n      key: \"_handleClick\",\n      value: function _handleClick() {\n        this._stepper.previous();\n      }\n    }]);\n\n    return CdkStepperPrevious;\n  }();\n\n  CdkStepperPrevious.ɵfac = function CdkStepperPrevious_Factory(t) {\n    return new (t || CdkStepperPrevious)(ɵngcc0.ɵɵdirectiveInject(CdkStepper));\n  };\n\n  CdkStepperPrevious.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkStepperPrevious,\n    selectors: [[\"button\", \"cdkStepperPrevious\", \"\"]],\n    hostVars: 1,\n    hostBindings: function CdkStepperPrevious_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkStepperPrevious_click_HostBindingHandler() {\n          return ctx._handleClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n      }\n    },\n    inputs: {\n      type: \"type\"\n    }\n  });\n  return CdkStepperPrevious;\n}();\n\nvar CdkStepperModule = /*@__PURE__*/function () {\n  var CdkStepperModule = function CdkStepperModule() {\n    _classCallCheck(this, CdkStepperModule);\n  };\n\n  CdkStepperModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CdkStepperModule\n  });\n  CdkStepperModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function CdkStepperModule_Factory(t) {\n      return new (t || CdkStepperModule)();\n    },\n    imports: [[BidiModule]]\n  });\n  return CdkStepperModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkStepperModule, {\n    declarations: function declarations() {\n      return [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious];\n    },\n    imports: function imports() {\n      return [BidiModule];\n    },\n    exports: function exports() {\n      return [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkStep, CdkStepHeader, CdkStepLabel, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious, MAT_STEPPER_GLOBAL_OPTIONS, STEPPER_GLOBAL_OPTIONS, STEP_STATE, StepperSelectionEvent };","map":null,"metadata":{},"sourceType":"module"}