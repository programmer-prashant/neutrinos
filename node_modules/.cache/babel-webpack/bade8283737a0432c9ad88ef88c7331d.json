{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _inherits from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, NgZone, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Subject, BehaviorSubject, Observable, merge, asapScheduler, of, fromEvent } from 'rxjs';\nimport { filter, debounceTime, map, switchMap, takeUntil, take, tap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: core/browser-provider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n * @param {?} _document\n * @param {?} platformId\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction removeStyles(_document, platformId) {\n  return (\n    /**\n    * @return {?}\n    */\n    function () {\n      if (isPlatformBrowser(platformId)) {\n        /** @type {?} */\n        var elements = Array.from(_document.querySelectorAll(\"[class*=\".concat(CLASS_NAME, \"]\"))); // RegExp constructor should only be used if passing a variable to the constructor.\n        // When using static regular expression it is more performant to use reg exp literal.\n        // This is also needed to provide Safari 9 compatibility, please see\n        // https://stackoverflow.com/questions/37919802 for more discussion.\n\n        /** @type {?} */\n\n        var classRegex = /\\bflex-layout-.+?\\b/g;\n        elements.forEach(\n        /**\n        * @param {?} el\n        * @return {?}\n        */\n        function (el) {\n          el.classList.contains(\"\".concat(CLASS_NAME, \"ssr\")) && el.parentNode ? el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n        });\n      }\n    }\n  );\n}\n/**\n *  Provider to remove SSR styles on the browser\n * @type {?}\n */\n\n\nvar BROWSER_PROVIDER = {\n  provide:\n  /** @type {?} */\n  APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n/** @type {?} */\n\nvar CLASS_NAME = 'flex-layout-';\n/**\n * @fileoverview added by tsickle\n * Generated from: core/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\n\nvar CoreModule =\n/** @class */\nfunction () {\n  /**\n   * *****************************************************************\n   * Define module for common Angular Layout utilities\n   * *****************************************************************\n   */\n  var CoreModule = function CoreModule() {\n    _classCallCheck(this, CoreModule);\n  };\n\n  CoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: CoreModule\n  });\n  CoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function CoreModule_Factory(t) {\n      return new (t || CoreModule)();\n    },\n    providers: [BROWSER_PROVIDER]\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(CoreModule, [{\n      type: NgModule,\n      args: [{\n        providers: [BROWSER_PROVIDER]\n      }]\n    }], null, null);\n  })();\n\n  return CoreModule;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-change.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\n\n\nvar MediaChange = /*#__PURE__*/function () {\n  /**\n   * @param {?=} matches whether the mediaQuery is currently activated\n   * @param {?=} mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param {?=} mqAlias e.g. gt-sm, md, gt-lg\n   * @param {?=} suffix e.g. GtSM, Md, GtLg\n   * @param {?=} priority the priority of activation for the given breakpoint\n   */\n  function MediaChange() {\n    var matches = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var mediaQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';\n    var mqAlias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    var suffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var priority = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n    _classCallCheck(this, MediaChange);\n\n    this.matches = matches;\n    this.mediaQuery = mediaQuery;\n    this.mqAlias = mqAlias;\n    this.suffix = suffix;\n    this.priority = priority;\n    this.property = '';\n  }\n  /**\n   * Create an exact copy of the MediaChange\n   * @return {?}\n   */\n\n\n  _createClass(MediaChange, [{\n    key: \"clone\",\n    value: function clone() {\n      return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n    }\n  }]);\n\n  return MediaChange;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/stylesheet-map.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\n\n\nvar StylesheetMap =\n/** @class */\nfunction () {\n  /**\n   * Utility to emulate a CSS stylesheet\n   *\n   * This utility class stores all of the styles for a given HTML element\n   * as a readonly `stylesheet` map.\n   */\n  var StylesheetMap = /*#__PURE__*/function () {\n    function StylesheetMap() {\n      _classCallCheck(this, StylesheetMap);\n\n      this.stylesheet = new Map();\n    }\n    /**\n     * Add an individual style to an HTML element\n     * @param {?} element\n     * @param {?} style\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _createClass(StylesheetMap, [{\n      key: \"addStyleToElement\",\n      value: function addStyleToElement(element, style, value) {\n        /** @type {?} */\n        var stylesheet = this.stylesheet.get(element);\n\n        if (stylesheet) {\n          stylesheet.set(style, value);\n        } else {\n          this.stylesheet.set(element, new Map([[style, value]]));\n        }\n      }\n      /**\n       * Clear the virtual stylesheet\n       * @return {?}\n       */\n\n    }, {\n      key: \"clearStyles\",\n      value: function clearStyles() {\n        this.stylesheet.clear();\n      }\n      /**\n       * Retrieve a given style for an HTML element\n       * @param {?} el\n       * @param {?} styleName\n       * @return {?}\n       */\n\n    }, {\n      key: \"getStyleForElement\",\n      value: function getStyleForElement(el, styleName) {\n        /** @type {?} */\n        var styles = this.stylesheet.get(el);\n        /** @type {?} */\n\n        var value = '';\n\n        if (styles) {\n          /** @type {?} */\n          var style = styles.get(styleName);\n\n          if (typeof style === 'number' || typeof style === 'string') {\n            value = style + '';\n          }\n        }\n\n        return value;\n      }\n    }]);\n\n    return StylesheetMap;\n  }();\n\n  StylesheetMap.ɵfac = function StylesheetMap_Factory(t) {\n    return new (t || StylesheetMap)();\n  };\n  /** @nocollapse */\n\n\n  StylesheetMap.ɵprov = ɵɵdefineInjectable({\n    factory: function StylesheetMap_Factory() {\n      return new StylesheetMap();\n    },\n    token: StylesheetMap,\n    providedIn: \"root\"\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(StylesheetMap, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  return StylesheetMap;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/stylesheet-map/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/library-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DEFAULT_CONFIG = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: []\n};\n/** @type {?} */\n\nvar LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  function factory() {\n    return DEFAULT_CONFIG;\n  }\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/server-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n * @type {?}\n */\n\nvar SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  function factory() {\n    return false;\n  }\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/breakpoint-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  function factory() {\n    return null;\n  }\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: core/tokens/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/add-alias.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\n\nfunction mergeAlias(dest, source) {\n  dest = dest ? dest.clone() : new MediaChange();\n\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix =\n    /** @type {?} */\n    source.suffix;\n    dest.priority =\n    /** @type {?} */\n    source.priority;\n  }\n\n  return dest;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/layout-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\n\n\nvar INLINE = 'inline';\n/** @type {?} */\n\nvar LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n * @param {?} value\n * @return {?}\n */\n\nfunction buildLayoutCSS(value) {\n  var _validateValue = validateValue(value),\n      _validateValue2 = _slicedToArray(_validateValue, 3),\n      direction = _validateValue2[0],\n      wrap = _validateValue2[1],\n      isInline = _validateValue2[2];\n\n  return buildCSS(direction, wrap, isInline);\n}\n/**\n * Validate the value to be one of the acceptable value options\n * Use default fallback of 'row'\n * @param {?} value\n * @return {?}\n */\n\n\nfunction validateValue(value) {\n  value = value ? value.toLowerCase() : '';\n\n  var _value$split = value.split(' '),\n      _value$split2 = _slicedToArray(_value$split, 3),\n      direction = _value$split2[0],\n      wrap = _value$split2[1],\n      inline = _value$split2[2]; // First value must be the `flex-direction`\n\n\n  if (!LAYOUT_VALUES.find(\n  /**\n  * @param {?} x\n  * @return {?}\n  */\n  function (x) {\n    return x === direction;\n  })) {\n    direction = LAYOUT_VALUES[0];\n  }\n\n  if (wrap === INLINE) {\n    wrap = inline !== INLINE ? inline : '';\n    inline = INLINE;\n  }\n\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n * @param {?} value\n * @return {?}\n */\n\n\nfunction validateWrapValue(value) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n      // All other values fallback to 'wrap'\n\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n\n  return value;\n}\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n * @param {?} direction\n * @param {?=} wrap\n * @param {?=} inline\n * @return {?}\n */\n\n\nfunction buildCSS(direction) {\n  var wrap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var inline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/base2.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar BaseDirective2 = /*#__PURE__*/function () {\n  /**\n   * @protected\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   */\n  function BaseDirective2(elementRef, styleBuilder, styler, marshal) {\n    _classCallCheck(this, BaseDirective2);\n\n    this.elementRef = elementRef;\n    this.styleBuilder = styleBuilder;\n    this.styler = styler;\n    this.marshal = marshal;\n    this.DIRECTIVE_KEY = '';\n    this.inputs = [];\n    /**\n     * The most recently used styles for the builder\n     */\n\n    this.mru = {};\n    this.destroySubject = new Subject();\n    /**\n     * Cache map for style computation\n     */\n\n    this.styleCache = new Map();\n  }\n  /**\n   * Access to host element's parent DOM node\n   * @protected\n   * @return {?}\n   */\n\n\n  _createClass(BaseDirective2, [{\n    key: \"parentElement\",\n    get: function get() {\n      return this.elementRef.nativeElement.parentElement;\n    }\n    /**\n     * Access to the HTMLElement for the directive\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"nativeElement\",\n    get: function get() {\n      return this.elementRef.nativeElement;\n    }\n    /**\n     * Access to the activated value for the directive\n     * @return {?}\n     */\n\n  }, {\n    key: \"activatedValue\",\n    get: function get() {\n      return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n    }\n    /**\n     * For \\@Input changes\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this = this;\n\n      Object.keys(changes).forEach(\n      /**\n      * @param {?} key\n      * @return {?}\n      */\n      function (key) {\n        if (_this.inputs.indexOf(key) !== -1) {\n          /** @type {?} */\n          var bp = key.split('.').slice(1).join('.');\n          /** @type {?} */\n\n          var val = changes[key].currentValue;\n\n          _this.setValue(val, bp);\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroySubject.next();\n      this.destroySubject.complete();\n      this.marshal.releaseElement(this.nativeElement);\n    }\n    /**\n     * Register with central marshaller service\n     * @protected\n     * @param {?=} extraTriggers\n     * @return {?}\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      var extraTriggers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n    }\n    /**\n     * Add styles to the element using predefined style builder\n     * @protected\n     * @param {?} input\n     * @param {?=} parent\n     * @return {?}\n     */\n\n  }, {\n    key: \"addStyles\",\n    value: function addStyles(input, parent) {\n      /** @type {?} */\n      var builder = this.styleBuilder;\n      /** @type {?} */\n\n      var useCache = builder.shouldCache;\n      /** @type {?} */\n\n      var genStyles = this.styleCache.get(input);\n\n      if (!genStyles || !useCache) {\n        genStyles = builder.buildStyles(input, parent);\n\n        if (useCache) {\n          this.styleCache.set(input, genStyles);\n        }\n      }\n\n      this.mru = Object.assign({}, genStyles);\n      this.applyStyleToElement(genStyles);\n      builder.sideEffect(input, genStyles, parent);\n    }\n    /**\n     * Remove generated styles from an element using predefined style builder\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"clearStyles\",\n    value: function clearStyles() {\n      var _this2 = this;\n\n      Object.keys(this.mru).forEach(\n      /**\n      * @param {?} k\n      * @return {?}\n      */\n      function (k) {\n        _this2.mru[k] = '';\n      });\n      this.applyStyleToElement(this.mru);\n      this.mru = {};\n    }\n    /**\n     * Force trigger style updates on DOM element\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"triggerUpdate\",\n    value: function triggerUpdate() {\n      this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     * @protected\n     * @param {?} target\n     * @param {?=} addIfMissing\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFlexFlowDirection\",\n    value: function getFlexFlowDirection(target) {\n      var addIfMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (target) {\n        var _this$styler$getFlowD = this.styler.getFlowDirection(target),\n            _this$styler$getFlowD2 = _slicedToArray(_this$styler$getFlowD, 2),\n            value = _this$styler$getFlowD2[0],\n            hasInlineValue = _this$styler$getFlowD2[1];\n\n        if (!hasInlineValue && addIfMissing) {\n          /** @type {?} */\n          var style = buildLayoutCSS(value);\n          /** @type {?} */\n\n          var elements = [target];\n          this.styler.applyStyleToElements(style, elements);\n        }\n\n        return value.trim();\n      }\n\n      return 'row';\n    }\n    /**\n     * @protected\n     * @param {?} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasWrap\",\n    value: function hasWrap(target) {\n      return this.styler.hasWrap(target);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     * @protected\n     * @param {?} style\n     * @param {?=} value\n     * @param {?=} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"applyStyleToElement\",\n    value: function applyStyleToElement(style, value) {\n      var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nativeElement;\n      this.styler.applyStyleToElement(element, style, value);\n    }\n    /**\n     * @protected\n     * @param {?} val\n     * @param {?} bp\n     * @return {?}\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(val, bp) {\n      this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n    }\n    /**\n     * @protected\n     * @param {?} input\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateWithValue\",\n    value: function updateWithValue(input) {\n      if (this.currentValue !== input) {\n        this.addStyles(input);\n        this.currentValue = input;\n      }\n    }\n  }]);\n\n  return BaseDirective2;\n}();\n\nBaseDirective2.ɵfac = function BaseDirective2_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\n\nBaseDirective2.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: BaseDirective2,\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: core/base/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n * @type {?}\n */\n\nvar DEFAULT_BREAKPOINTS = [{\n  alias: 'xs',\n  mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.9px)',\n  priority: 1000\n}, {\n  alias: 'sm',\n  mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.9px)',\n  priority: 900\n}, {\n  alias: 'md',\n  mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.9px)',\n  priority: 800\n}, {\n  alias: 'lg',\n  mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.9px)',\n  priority: 700\n}, {\n  alias: 'xl',\n  mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.9px)',\n  priority: 600\n}, {\n  alias: 'lt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 599.9px)',\n  priority: 950\n}, {\n  alias: 'lt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 959.9px)',\n  priority: 850\n}, {\n  alias: 'lt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 1279.9px)',\n  priority: 750\n}, {\n  alias: 'lt-xl',\n  overlapping: true,\n  priority: 650,\n  mediaQuery: 'screen and (max-width: 1919.9px)'\n}, {\n  alias: 'gt-xs',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 600px)',\n  priority: -950\n}, {\n  alias: 'gt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 960px)',\n  priority: -850\n}, {\n  alias: 'gt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1280px)',\n  priority: -750\n}, {\n  alias: 'gt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1920px)',\n  priority: -650\n}];\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/data/orientation-break-points.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/* tslint:disable */\n\n/** @type {?} */\n\nvar HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.9px)';\n/** @type {?} */\n\nvar HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.9px)';\n/** @type {?} */\n\nvar TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.9px)';\n/** @type {?} */\n\nvar TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.9px)';\n/** @type {?} */\n\nvar WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\n/** @type {?} */\n\nvar WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\n/** @type {?} */\n\nvar ScreenTypes = {\n  'HANDSET': \"\".concat(HANDSET_PORTRAIT, \", \").concat(HANDSET_LANDSCAPE),\n  'TABLET': \"\".concat(TABLET_PORTRAIT, \" , \").concat(TABLET_LANDSCAPE),\n  'WEB': \"\".concat(WEB_PORTRAIT, \", \").concat(WEB_LANDSCAPE, \" \"),\n  'HANDSET_PORTRAIT': \"\".concat(HANDSET_PORTRAIT),\n  'TABLET_PORTRAIT': \"\".concat(TABLET_PORTRAIT, \" \"),\n  'WEB_PORTRAIT': \"\".concat(WEB_PORTRAIT),\n  'HANDSET_LANDSCAPE': \"\".concat(HANDSET_LANDSCAPE),\n  'TABLET_LANDSCAPE': \"\".concat(TABLET_LANDSCAPE),\n  'WEB_LANDSCAPE': \"\".concat(WEB_LANDSCAPE)\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n * @type {?}\n */\n\nvar ORIENTATION_BREAKPOINTS = [{\n  'alias': 'handset',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET\n}, {\n  'alias': 'handset.landscape',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE\n}, {\n  'alias': 'handset.portrait',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_PORTRAIT\n}, {\n  'alias': 'tablet',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET\n}, {\n  'alias': 'tablet.landscape',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_LANDSCAPE\n}, {\n  'alias': 'tablet.portrait',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_PORTRAIT\n}, {\n  'alias': 'web',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB,\n  overlapping: true\n}, {\n  'alias': 'web.landscape',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_LANDSCAPE,\n  overlapping: true\n}, {\n  'alias': 'web.portrait',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_PORTRAIT,\n  overlapping: true\n}];\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/object-extend.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\n\nfunction extendObject(dest) {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n    var source = _sources[_i];\n\n    if (source != null) {\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/breakpoint-tools.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar ALIAS_DELIMITERS = /(\\.|-|_)/g;\n/**\n * @param {?} part\n * @return {?}\n */\n\nfunction firstUpperCase(part) {\n  /** @type {?} */\n  var first = part.length > 0 ? part.charAt(0) : '';\n  /** @type {?} */\n\n  var remainder = part.length > 1 ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param {?} name Text to UpperCamelCase\n * @return {?}\n */\n\n\nfunction camelCase(name) {\n  return name.replace(ALIAS_DELIMITERS, '|').split('|').map(firstUpperCase).join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n * @param {?} list\n * @return {?}\n */\n\n\nfunction validateSuffixes(list) {\n  list.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  function (bp) {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n  return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n * @param {?} defaults\n * @param {?=} custom\n * @return {?}\n */\n\n\nfunction mergeByAlias(defaults) {\n  var custom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  /** @type {?} */\n  var dict = {};\n  defaults.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  function (bp) {\n    dict[bp.alias] = bp;\n  }); // Merge custom breakpoints\n\n  custom.forEach(\n  /**\n  * @param {?} bp\n  * @return {?}\n  */\n  function (bp) {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n  return validateSuffixes(Object.keys(dict).map(\n  /**\n  * @param {?} k\n  * @return {?}\n  */\n  function (k) {\n    return dict[k];\n  }));\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-points-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n * @type {?}\n */\n\n\nvar BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  function factory() {\n    /** @type {?} */\n    var breakpoints = inject(BREAKPOINT);\n    /** @type {?} */\n\n    var layoutConfig = inject(LAYOUT_CONFIG);\n    /** @type {?} */\n\n    var bpFlattenArray = [].concat.apply([], (breakpoints || []).map(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    function (v) {\n      return Array.isArray(v) ? v : [v];\n    }));\n    /** @type {?} */\n\n    var builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS).concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n    return mergeByAlias(builtIns, bpFlattenArray);\n  }\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/sort.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * HOF to sort the breakpoints by descending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\nfunction sortDescendingPriority(a, b) {\n  /** @type {?} */\n  var priorityA = a ? a.priority || 0 : 0;\n  /** @type {?} */\n\n  var priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n/**\n * HOF to sort the breakpoints by ascending priority\n * @template T\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\n\nfunction sortAscendingPriority(a, b) {\n  /** @type {?} */\n  var pA = a.priority || 0;\n  /** @type {?} */\n\n  var pB = b.priority || 0;\n  return pA - pB;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/break-point-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\n\n\nvar BreakPointRegistry =\n/** @class */\nfunction () {\n  /**\n   * Registry of 1..n MediaQuery breakpoint ranges\n   * This is published as a provider and may be overridden from custom, application-specific ranges\n   *\n   */\n  var BreakPointRegistry = /*#__PURE__*/function () {\n    /**\n     * @param {?} list\n     */\n    function BreakPointRegistry(list) {\n      _classCallCheck(this, BreakPointRegistry);\n\n      /**\n       * Memoized BreakPoint Lookups\n       */\n      this.findByMap = new Map();\n      this.items = _toConsumableArray(list).sort(sortAscendingPriority);\n    }\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     * @param {?} alias\n     * @return {?}\n     */\n\n\n    _createClass(BreakPointRegistry, [{\n      key: \"findByAlias\",\n      value: function findByAlias(alias) {\n        return !alias ? null : this.findWithPredicate(alias,\n        /**\n        * @param {?} bp\n        * @return {?}\n        */\n        function (bp) {\n          return bp.alias == alias;\n        });\n      }\n      /**\n       * @param {?} query\n       * @return {?}\n       */\n\n    }, {\n      key: \"findByQuery\",\n      value: function findByQuery(query) {\n        return this.findWithPredicate(query,\n        /**\n        * @param {?} bp\n        * @return {?}\n        */\n        function (bp) {\n          return bp.mediaQuery == query;\n        });\n      }\n      /**\n       * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n       * e.g. gt-sm overlaps md, lg, and xl\n       * @return {?}\n       */\n\n    }, {\n      key: \"overlappings\",\n      get: function get() {\n        return this.items.filter(\n        /**\n        * @param {?} it\n        * @return {?}\n        */\n        function (it) {\n          return it.overlapping == true;\n        });\n      }\n      /**\n       * Get list of all registered (non-empty) breakpoint aliases\n       * @return {?}\n       */\n\n    }, {\n      key: \"aliases\",\n      get: function get() {\n        return this.items.map(\n        /**\n        * @param {?} it\n        * @return {?}\n        */\n        function (it) {\n          return it.alias;\n        });\n      }\n      /**\n       * Aliases are mapped to properties using suffixes\n       * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n       * for property layoutGtSM.\n       * @return {?}\n       */\n\n    }, {\n      key: \"suffixes\",\n      get: function get() {\n        return this.items.map(\n        /**\n        * @param {?} it\n        * @return {?}\n        */\n        function (it) {\n          return !!it.suffix ? it.suffix : '';\n        });\n      }\n      /**\n       * Memoized lookup using custom predicate function\n       * @private\n       * @param {?} key\n       * @param {?} searchFn\n       * @return {?}\n       */\n\n    }, {\n      key: \"findWithPredicate\",\n      value: function findWithPredicate(key, searchFn) {\n        /** @type {?} */\n        var response = this.findByMap.get(key);\n\n        if (!response) {\n          response = this.items.find(searchFn) || null;\n          this.findByMap.set(key, response);\n        }\n\n        return response || null;\n      }\n    }]);\n\n    return BreakPointRegistry;\n  }();\n\n  BreakPointRegistry.ɵfac = function BreakPointRegistry_Factory(t) {\n    return new (t || BreakPointRegistry)(ɵngcc0.ɵɵinject(BREAKPOINTS));\n  };\n  /** @nocollapse */\n\n\n  BreakPointRegistry.ɵprov = ɵɵdefineInjectable({\n    factory: function BreakPointRegistry_Factory() {\n      return new BreakPointRegistry(ɵɵinject(BREAKPOINTS));\n    },\n    token: BreakPointRegistry,\n    providedIn: \"root\"\n  });\n  /** @nocollapse */\n\n  BreakPointRegistry.ctorParameters = function () {\n    return [{\n      type: Array,\n      decorators: [{\n        type: Inject,\n        args: [BREAKPOINTS]\n      }]\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(BreakPointRegistry, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: Array,\n        decorators: [{\n          type: Inject,\n          args: [BREAKPOINTS]\n        }]\n      }];\n    }, null);\n  })();\n\n  return BreakPointRegistry;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/breakpoints/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n\n\nvar MatchMedia =\n/** @class */\nfunction () {\n  /**\n   * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n   * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n   * performed within the ng Zone to trigger change detections and component updates.\n   *\n   * NOTE: both mediaQuery activations and de-activations are announced in notifications\n   */\n  var MatchMedia = /*#__PURE__*/function () {\n    /**\n     * @param {?} _zone\n     * @param {?} _platformId\n     * @param {?} _document\n     */\n    function MatchMedia(_zone, _platformId, _document) {\n      _classCallCheck(this, MatchMedia);\n\n      this._zone = _zone;\n      this._platformId = _platformId;\n      this._document = _document;\n      /**\n       * Initialize source with 'all' so all non-responsive APIs trigger style updates\n       */\n\n      this.source = new BehaviorSubject(new MediaChange(true));\n      this.registry = new Map();\n      this.pendingRemoveListenerFns = [];\n      this._observable$ = this.source.asObservable();\n    }\n    /**\n     * Publish list of all current activations\n     * @return {?}\n     */\n\n\n    _createClass(MatchMedia, [{\n      key: \"activations\",\n      get: function get() {\n        /** @type {?} */\n        var results = [];\n        this.registry.forEach(\n        /**\n        * @param {?} mql\n        * @param {?} key\n        * @return {?}\n        */\n        function (mql, key) {\n          if (mql.matches) {\n            results.push(key);\n          }\n        });\n        return results;\n      }\n      /**\n       * For the specified mediaQuery?\n       * @param {?} mediaQuery\n       * @return {?}\n       */\n\n    }, {\n      key: \"isActive\",\n      value: function isActive(mediaQuery) {\n        /** @type {?} */\n        var mql = this.registry.get(mediaQuery);\n        return !!mql ? mql.matches : this.registerQuery(mediaQuery).some(\n        /**\n        * @param {?} m\n        * @return {?}\n        */\n        function (m) {\n          return m.matches;\n        });\n      }\n      /**\n       * External observers can watch for all (or a specific) mql changes.\n       * Typically used by the MediaQueryAdaptor; optionally available to components\n       * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n       *\n       * Use deferred registration process to register breakpoints only on subscription\n       * This logic also enforces logic to register all mediaQueries BEFORE notify\n       * subscribers of notifications.\n       * @param {?=} mqList\n       * @param {?=} filterOthers\n       * @return {?}\n       */\n\n    }, {\n      key: \"observe\",\n      value: function observe(mqList) {\n        var _this3 = this;\n\n        var filterOthers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (mqList && mqList.length) {\n          /** @type {?} */\n          var matchMedia$ = this._observable$.pipe(filter(\n          /**\n          * @param {?} change\n          * @return {?}\n          */\n          function (change) {\n            return !filterOthers ? true : mqList.indexOf(change.mediaQuery) > -1;\n          }));\n          /** @type {?} */\n\n\n          var registration$ = new Observable(\n          /**\n          * @param {?} observer\n          * @return {?}\n          */\n          function (observer) {\n            // tslint:disable-line:max-line-length\n\n            /** @type {?} */\n            var matches = _this3.registerQuery(mqList);\n\n            if (matches.length) {\n              /** @type {?} */\n              var lastChange =\n              /** @type {?} */\n              matches.pop();\n              matches.forEach(\n              /**\n              * @param {?} e\n              * @return {?}\n              */\n              function (e) {\n                observer.next(e);\n              });\n\n              _this3.source.next(lastChange); // last match is cached\n\n            }\n\n            observer.complete();\n          });\n          return merge(registration$, matchMedia$);\n        }\n\n        return this._observable$;\n      }\n      /**\n       * Based on the BreakPointRegistry provider, register internal listeners for each unique\n       * mediaQuery. Each listener emits specific MediaChange data to observers\n       * @param {?} mediaQuery\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerQuery\",\n      value: function registerQuery(mediaQuery) {\n        var _this4 = this;\n\n        /** @type {?} */\n        var list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n        /** @type {?} */\n\n        var matches = [];\n        buildQueryCss(list, this._document);\n        list.forEach(\n        /**\n        * @param {?} query\n        * @return {?}\n        */\n        function (query) {\n          /** @type {?} */\n          var onMQLEvent =\n          /**\n          * @param {?} e\n          * @return {?}\n          */\n          function onMQLEvent(e) {\n            _this4._zone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return _this4.source.next(new MediaChange(e.matches, query));\n            });\n          };\n          /** @type {?} */\n\n\n          var mql = _this4.registry.get(query);\n\n          if (!mql) {\n            mql = _this4.buildMQL(query);\n            mql.addListener(onMQLEvent);\n\n            _this4.pendingRemoveListenerFns.push(\n            /**\n            * @return {?}\n            */\n            function () {\n              return (\n                /** @type {?} */\n                mql.removeListener(onMQLEvent)\n              );\n            });\n\n            _this4.registry.set(query, mql);\n          }\n\n          if (mql.matches) {\n            matches.push(new MediaChange(true, query));\n          }\n        });\n        return matches;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        /** @type {?} */\n        var fn;\n\n        while (fn = this.pendingRemoveListenerFns.pop()) {\n          fn();\n        }\n      }\n      /**\n       * Call window.matchMedia() to build a MediaQueryList; which\n       * supports 0..n listeners for activation/deactivation\n       * @protected\n       * @param {?} query\n       * @return {?}\n       */\n\n    }, {\n      key: \"buildMQL\",\n      value: function buildMQL(query) {\n        return constructMql(query, isPlatformBrowser(this._platformId));\n      }\n    }]);\n\n    return MatchMedia;\n  }();\n\n  MatchMedia.ɵfac = function MatchMedia_Factory(t) {\n    return new (t || MatchMedia)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n  /** @nocollapse */\n\n\n  MatchMedia.ɵprov = ɵɵdefineInjectable({\n    factory: function MatchMedia_Factory() {\n      return new MatchMedia(ɵɵinject(NgZone), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT));\n    },\n    token: MatchMedia,\n    providedIn: \"root\"\n  });\n  /** @nocollapse */\n\n  MatchMedia.ctorParameters = function () {\n    return [{\n      type: NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatchMedia, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.NgZone\n      }, {\n        type: Object,\n        decorators: [{\n          type: Inject,\n          args: [PLATFORM_ID]\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [DOCUMENT]\n        }]\n      }];\n    }, null);\n  })();\n\n  return MatchMedia;\n}();\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n * @type {?}\n */\n\n\nvar ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param {?} mediaQueries\n * @param {?} _document\n * @return {?}\n */\n\nfunction buildQueryCss(mediaQueries, _document) {\n  /** @type {?} */\n  var list = mediaQueries.filter(\n  /**\n  * @param {?} it\n  * @return {?}\n  */\n  function (it) {\n    return !ALL_STYLES[it];\n  });\n\n  if (list.length > 0) {\n    /** @type {?} */\n    var query = list.join(', ');\n\n    try {\n      /** @type {?} */\n      var styleEl = _document.createElement('style');\n\n      styleEl.setAttribute('type', 'text/css');\n\n      if (!\n      /** @type {?} */\n      styleEl.styleSheet) {\n        /** @type {?} */\n        var cssText = \"\\n/*\\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\\n  see http://bit.ly/2sd4HMP\\n*/\\n@media \".concat(query, \" {.fx-query-test{ }}\\n\");\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n\n      /** @type {?} */\n      _document.head.appendChild(styleEl); // Store in private global registry\n\n\n      list.forEach(\n      /**\n      * @param {?} mq\n      * @return {?}\n      */\n      function (mq) {\n        return ALL_STYLES[mq] = styleEl;\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n/**\n * @param {?} query\n * @param {?} isBrowser\n * @return {?}\n */\n\n\nfunction constructMql(query, isBrowser) {\n  /** @type {?} */\n  var canListen = isBrowser && !!\n  /** @type {?} */\n  window.matchMedia('all').addListener;\n  return canListen ?\n  /** @type {?} */\n  window.matchMedia(query) :\n  /** @type {?} */\n  {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener:\n    /**\n    * @return {?}\n    */\n    function addListener() {},\n    removeListener:\n    /**\n    * @return {?}\n    */\n    function removeListener() {},\n    onchange: null,\n\n    /**\n     * @return {?}\n     */\n    addEventListener: function addEventListener() {},\n\n    /**\n     * @return {?}\n     */\n    removeEventListener: function removeEventListener() {},\n\n    /**\n     * @return {?}\n     */\n    dispatchEvent: function dispatchEvent() {\n      return false;\n    }\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/mock/mock-match-media.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n\n\nvar MockMatchMedia =\n/** @class */\nfunction () {\n  /**\n   * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n   * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n   * range and to clearAll mediaQuery listeners.\n   */\n  var MockMatchMedia = /*#__PURE__*/function (_MatchMedia) {\n    _inherits(MockMatchMedia, _MatchMedia);\n\n    var _super = _createSuper(MockMatchMedia);\n\n    // Allow fallback to overlapping mediaQueries\n\n    /**\n     * @param {?} _zone\n     * @param {?} _platformId\n     * @param {?} _document\n     * @param {?} _breakpoints\n     */\n    function MockMatchMedia(_zone, _platformId, _document, _breakpoints) {\n      var _this5;\n\n      _classCallCheck(this, MockMatchMedia);\n\n      _this5 = _super.call(this, _zone, _platformId, _document);\n      _this5._breakpoints = _breakpoints;\n      _this5.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n      // Used for testing BreakPoint registrations\n\n      _this5.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n\n      return _this5;\n    }\n    /**\n     * Easy method to clear all listeners for all mediaQueries\n     * @return {?}\n     */\n\n\n    _createClass(MockMatchMedia, [{\n      key: \"clearAll\",\n      value: function clearAll() {\n        this.registry.forEach(\n        /**\n        * @param {?} mql\n        * @return {?}\n        */\n        function (mql) {\n          /** @type {?} */\n          mql.destroy();\n        });\n        this.registry.clear();\n        this.useOverlaps = false;\n      }\n      /**\n       * Feature to support manual, simulated activation of a mediaQuery.\n       * @param {?} mediaQuery\n       * @param {?=} useOverlaps\n       * @return {?}\n       */\n\n    }, {\n      key: \"activate\",\n      value: function activate(mediaQuery) {\n        var useOverlaps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        useOverlaps = useOverlaps || this.useOverlaps;\n        mediaQuery = this._validateQuery(mediaQuery);\n\n        if (useOverlaps || !this.isActive(mediaQuery)) {\n          this._deactivateAll();\n\n          this._registerMediaQuery(mediaQuery);\n\n          this._activateWithOverlaps(mediaQuery, useOverlaps);\n        }\n\n        return this.hasActivated;\n      }\n      /**\n       * Converts an optional mediaQuery alias to a specific, valid mediaQuery\n       * @param {?} queryOrAlias\n       * @return {?}\n       */\n\n    }, {\n      key: \"_validateQuery\",\n      value: function _validateQuery(queryOrAlias) {\n        /** @type {?} */\n        var bp = this._breakpoints.findByAlias(queryOrAlias);\n\n        return bp && bp.mediaQuery || queryOrAlias;\n      }\n      /**\n       * Manually onMediaChange any overlapping mediaQueries to simulate\n       * similar functionality in the window.matchMedia()\n       * @private\n       * @param {?} mediaQuery\n       * @param {?} useOverlaps\n       * @return {?}\n       */\n\n    }, {\n      key: \"_activateWithOverlaps\",\n      value: function _activateWithOverlaps(mediaQuery, useOverlaps) {\n        if (useOverlaps) {\n          /** @type {?} */\n          var bp = this._breakpoints.findByQuery(mediaQuery);\n          /** @type {?} */\n\n\n          var alias = bp ? bp.alias : 'unknown'; // Simulate activation of overlapping lt-<XXX> ranges\n\n          switch (alias) {\n            case 'lg':\n              this._activateByAlias(['lt-xl']);\n\n              break;\n\n            case 'md':\n              this._activateByAlias(['lt-xl', 'lt-lg']);\n\n              break;\n\n            case 'sm':\n              this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n\n              break;\n\n            case 'xs':\n              this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n\n              break;\n          } // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n\n\n          switch (alias) {\n            case 'xl':\n              this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n\n              break;\n\n            case 'lg':\n              this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n\n              break;\n\n            case 'md':\n              this._activateByAlias(['gt-sm', 'gt-xs']);\n\n              break;\n\n            case 'sm':\n              this._activateByAlias(['gt-xs']);\n\n              break;\n          }\n        } // Activate last since the responsiveActivation is watching *this* mediaQuery\n\n\n        return this._activateByQuery(mediaQuery);\n      }\n      /**\n       *\n       * @private\n       * @param {?} aliases\n       * @return {?}\n       */\n\n    }, {\n      key: \"_activateByAlias\",\n      value: function _activateByAlias(aliases) {\n        var _this6 = this;\n\n        /** @type {?} */\n        var activate =\n        /**\n        * @param {?} alias\n        * @return {?}\n        */\n        function activate(alias) {\n          /** @type {?} */\n          var bp = _this6._breakpoints.findByAlias(alias);\n\n          _this6._activateByQuery(bp ? bp.mediaQuery : alias);\n        };\n\n        aliases.forEach(activate);\n      }\n      /**\n       *\n       * @private\n       * @param {?} mediaQuery\n       * @return {?}\n       */\n\n    }, {\n      key: \"_activateByQuery\",\n      value: function _activateByQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n          this._registerMediaQuery(mediaQuery);\n        }\n        /** @type {?} */\n\n\n        var mql =\n        /** @type {?} */\n        this.registry.get(mediaQuery);\n\n        if (mql && !this.isActive(mediaQuery)) {\n          this.registry.set(mediaQuery, mql.activate());\n        }\n\n        return this.hasActivated;\n      }\n      /**\n       * Deactivate all current MQLs and reset the buffer\n       * @private\n       * @template THIS\n       * @this {THIS}\n       * @return {THIS}\n       */\n\n    }, {\n      key: \"_deactivateAll\",\n      value: function _deactivateAll() {\n        /** @type {?} */\n        this.registry.forEach(\n        /**\n        * @param {?} it\n        * @return {?}\n        */\n        function (it) {\n          /** @type {?} */\n          it.deactivate();\n        });\n        return (\n          /** @type {?} */\n          this\n        );\n      }\n      /**\n       * Insure the mediaQuery is registered with MatchMedia\n       * @private\n       * @param {?} mediaQuery\n       * @return {?}\n       */\n\n    }, {\n      key: \"_registerMediaQuery\",\n      value: function _registerMediaQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n          this.registerQuery(mediaQuery);\n        }\n      }\n      /**\n       * Call window.matchMedia() to build a MediaQueryList; which\n       * supports 0..n listeners for activation/deactivation\n       * @protected\n       * @param {?} query\n       * @return {?}\n       */\n\n    }, {\n      key: \"buildMQL\",\n      value: function buildMQL(query) {\n        return new MockMediaQueryList(query);\n      }\n      /**\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"hasActivated\",\n      get: function get() {\n        return this.activations.length > 0;\n      }\n    }]);\n\n    return MockMatchMedia;\n  }(MatchMedia);\n\n  MockMatchMedia.ɵfac = function MockMatchMedia_Factory(t) {\n    return new (t || MockMatchMedia)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(BreakPointRegistry));\n  };\n\n  MockMatchMedia.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: MockMatchMedia,\n    factory: function factory(t) {\n      return MockMatchMedia.ɵfac(t);\n    }\n  });\n  /** @nocollapse */\n\n  MockMatchMedia.ctorParameters = function () {\n    return [{\n      type: NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: BreakPointRegistry\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MockMatchMedia, [{\n      type: Injectable\n    }], function () {\n      return [{\n        type: ɵngcc0.NgZone\n      }, {\n        type: Object,\n        decorators: [{\n          type: Inject,\n          args: [PLATFORM_ID]\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [DOCUMENT]\n        }]\n      }, {\n        type: BreakPointRegistry\n      }];\n    }, null);\n  })();\n\n  return MockMatchMedia;\n}();\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\n\n\nvar MockMediaQueryList = /*#__PURE__*/function () {\n  /**\n   * @param {?} _mediaQuery\n   */\n  function MockMediaQueryList(_mediaQuery) {\n    _classCallCheck(this, MockMediaQueryList);\n\n    this._mediaQuery = _mediaQuery;\n    this._isActive = false;\n    this._listeners = [];\n    this.onchange = null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MockMediaQueryList, [{\n    key: \"matches\",\n    get: function get() {\n      return this._isActive;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"media\",\n    get: function get() {\n      return this._mediaQuery;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.deactivate();\n      this._listeners = [];\n    }\n    /**\n     * Notify all listeners that 'matches === TRUE'\n     * @return {?}\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      var _this7 = this;\n\n      if (!this._isActive) {\n        this._isActive = true;\n\n        this._listeners.forEach(\n        /**\n        * @param {?} callback\n        * @return {?}\n        */\n        function (callback) {\n          /** @type {?} */\n          var cb =\n          /** @type {?} */\n          callback;\n          cb.call(_this7,\n          /** @type {?} */\n          {\n            matches: _this7.matches,\n            media: _this7.media\n          });\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Notify all listeners that 'matches === false'\n     * @return {?}\n     */\n\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      var _this8 = this;\n\n      if (this._isActive) {\n        this._isActive = false;\n\n        this._listeners.forEach(\n        /**\n        * @param {?} callback\n        * @return {?}\n        */\n        function (callback) {\n          /** @type {?} */\n          var cb =\n          /** @type {?} */\n          callback;\n          cb.call(_this8,\n          /** @type {?} */\n          {\n            matches: _this8.matches,\n            media: _this8.media\n          });\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Add a listener to our internal list to activate later\n     * @param {?} listener\n     * @return {?}\n     */\n\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      if (this._listeners.indexOf(listener) === -1) {\n        this._listeners.push(listener);\n      }\n\n      if (this._isActive) {\n        /** @type {?} */\n        var cb =\n        /** @type {?} */\n        listener;\n        cb.call(this,\n        /** @type {?} */\n        {\n          matches: this.matches,\n          media: this.media\n        });\n      }\n    }\n    /**\n     * Don't need to remove listeners in the testing environment\n     * @param {?} _\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(_) {}\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(_, __, ___) {}\n    /**\n     * @param {?} _\n     * @param {?} __\n     * @param {?=} ___\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(_, __, ___) {}\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(_) {\n      return false;\n    }\n  }]);\n\n  return MockMediaQueryList;\n}();\n/**\n * Pre-configured provider for MockMatchMedia\n * @type {?}\n */\n\n\nvar MockMatchMediaProvider = {\n  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: core/match-media/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/print-hook.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar PRINT = 'print';\n/** @type {?} */\n\nvar BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\n\nvar PrintHook =\n/** @class */\nfunction () {\n  /**\n   * PrintHook - Use to intercept print MediaQuery activations and force\n   *             layouts to render with the specified print alias/breakpoint\n   *\n   * Used in MediaMarshaller and MediaObserver\n   */\n  var PrintHook = /*#__PURE__*/function () {\n    /**\n     * @param {?} breakpoints\n     * @param {?} layoutConfig\n     * @param {?} _document\n     */\n    function PrintHook(breakpoints, layoutConfig, _document) {\n      _classCallCheck(this, PrintHook);\n\n      this.breakpoints = breakpoints;\n      this.layoutConfig = layoutConfig;\n      this._document = _document; // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n      //  and `afterprint` event listeners.\n\n      this.registeredBeforeAfterPrintHooks = false; // isPrintingBeforeAfterEvent is used to track if we are printing from within\n      // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n      // form `interceptEvents` so that printing is not stopped while the dialog\n      // is still open. This is an extension of the `isPrinting` property on\n      // browsers which support `beforeprint` and `afterprint` events.\n\n      this.isPrintingBeforeAfterEvent = false;\n      this.beforePrintEventListeners = [];\n      this.afterPrintEventListeners = [];\n      /**\n       * Is this service currently in Print-mode ?\n       */\n\n      this.isPrinting = false;\n      this.queue = new PrintQueue();\n      this.deactivations = [];\n    }\n    /**\n     * Add 'print' mediaQuery: to listen for matchMedia activations\n     * @param {?} queries\n     * @return {?}\n     */\n\n\n    _createClass(PrintHook, [{\n      key: \"withPrintQuery\",\n      value: function withPrintQuery(queries) {\n        return [].concat(_toConsumableArray(queries), [PRINT]);\n      }\n      /**\n       * Is the MediaChange event for any 'print' \\@media\n       * @param {?} e\n       * @return {?}\n       */\n\n    }, {\n      key: \"isPrintEvent\",\n      value: function isPrintEvent(e) {\n        return e.mediaQuery.startsWith(PRINT);\n      }\n      /**\n       * What is the desired mqAlias to use while printing?\n       * @return {?}\n       */\n\n    }, {\n      key: \"printAlias\",\n      get: function get() {\n        return this.layoutConfig.printWithBreakpoints || [];\n      }\n      /**\n       * Lookup breakpoints associated with print aliases.\n       * @return {?}\n       */\n\n    }, {\n      key: \"printBreakPoints\",\n      get: function get() {\n        var _this9 = this;\n\n        return (\n          /** @type {?} */\n          this.printAlias.map(\n          /**\n          * @param {?} alias\n          * @return {?}\n          */\n          function (alias) {\n            return _this9.breakpoints.findByAlias(alias);\n          }).filter(\n          /**\n          * @param {?} bp\n          * @return {?}\n          */\n          function (bp) {\n            return bp !== null;\n          })\n        );\n      }\n      /**\n       * Lookup breakpoint associated with mediaQuery\n       * @param {?} __0\n       * @return {?}\n       */\n\n    }, {\n      key: \"getEventBreakpoints\",\n      value: function getEventBreakpoints(_ref) {\n        var mediaQuery = _ref.mediaQuery;\n\n        /** @type {?} */\n        var bp = this.breakpoints.findByQuery(mediaQuery);\n        /** @type {?} */\n\n        var list = bp ? [].concat(_toConsumableArray(this.printBreakPoints), [bp]) : this.printBreakPoints;\n        return list.sort(sortDescendingPriority);\n      }\n      /**\n       * Update event with printAlias mediaQuery information\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateEvent\",\n      value: function updateEvent(event) {\n        /** @type {?} */\n        var bp = this.breakpoints.findByQuery(event.mediaQuery);\n\n        if (this.isPrintEvent(event)) {\n          // Reset from 'print' to first (highest priority) print breakpoint\n          bp = this.getEventBreakpoints(event)[0];\n          event.mediaQuery = bp ? bp.mediaQuery : '';\n        }\n\n        return mergeAlias(event, bp);\n      } // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n      // trigger print styles synchronously and apply proper layout styles.\n      // It is a noop if the hooks have already been registered or if the document's\n      // `defaultView` is not available.\n\n      /**\n       * @private\n       * @param {?} target\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerBeforeAfterPrintHooks\",\n      value: function registerBeforeAfterPrintHooks(target) {\n        var _this10 = this;\n\n        // `defaultView` may be null when rendering on the server or in other contexts.\n        if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n          return;\n        }\n\n        this.registeredBeforeAfterPrintHooks = true;\n        /** @type {?} */\n\n        var beforePrintListener =\n        /**\n        * @return {?}\n        */\n        function beforePrintListener() {\n          // If we aren't already printing, start printing and update the styles as\n          // if there was a regular print `MediaChange`(from matchMedia).\n          if (!_this10.isPrinting) {\n            _this10.isPrintingBeforeAfterEvent = true;\n\n            _this10.startPrinting(target, _this10.getEventBreakpoints(new MediaChange(true, PRINT)));\n\n            target.updateStyles();\n          }\n        };\n        /** @type {?} */\n\n\n        var afterPrintListener =\n        /**\n        * @return {?}\n        */\n        function afterPrintListener() {\n          // If we aren't already printing, start printing and update the styles as\n          // if there was a regular print `MediaChange`(from matchMedia).\n          _this10.isPrintingBeforeAfterEvent = false;\n\n          if (_this10.isPrinting) {\n            _this10.stopPrinting(target);\n\n            target.updateStyles();\n          }\n        }; // Could we have teardown logic to remove if there are no print listeners being used?\n\n\n        this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n\n        this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n\n        this.beforePrintEventListeners.push(beforePrintListener);\n        this.afterPrintEventListeners.push(afterPrintListener);\n      }\n      /**\n       * Prepare RxJS filter operator with partial application\n       * @param {?} target\n       * @return {?} pipeable filter predicate\n       */\n\n    }, {\n      key: \"interceptEvents\",\n      value: function interceptEvents(target) {\n        var _this11 = this;\n\n        this.registerBeforeAfterPrintHooks(target);\n        return (\n          /**\n          * @param {?} event\n          * @return {?}\n          */\n          function (event) {\n            if (_this11.isPrintEvent(event)) {\n              if (event.matches && !_this11.isPrinting) {\n                _this11.startPrinting(target, _this11.getEventBreakpoints(event));\n\n                target.updateStyles();\n              } else if (!event.matches && _this11.isPrinting && !_this11.isPrintingBeforeAfterEvent) {\n                _this11.stopPrinting(target);\n\n                target.updateStyles();\n              }\n            } else {\n              _this11.collectActivations(event);\n            }\n          }\n        );\n      }\n      /**\n       * Stop mediaChange event propagation in event streams\n       * @return {?}\n       */\n\n    }, {\n      key: \"blockPropagation\",\n      value: function blockPropagation() {\n        var _this12 = this;\n\n        return (\n          /**\n          * @param {?} event\n          * @return {?}\n          */\n          function (event) {\n            return !(_this12.isPrinting || _this12.isPrintEvent(event));\n          }\n        );\n      }\n      /**\n       * Save current activateBreakpoints (for later restore)\n       * and substitute only the printAlias breakpoint\n       * @protected\n       * @param {?} target\n       * @param {?} bpList\n       * @return {?}\n       */\n\n    }, {\n      key: \"startPrinting\",\n      value: function startPrinting(target, bpList) {\n        this.isPrinting = true;\n        target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n      }\n      /**\n       * For any print de-activations, reset the entire print queue\n       * @protected\n       * @param {?} target\n       * @return {?}\n       */\n\n    }, {\n      key: \"stopPrinting\",\n      value: function stopPrinting(target) {\n        target.activatedBreakpoints = this.deactivations;\n        this.deactivations = [];\n        this.queue.clear();\n        this.isPrinting = false;\n      }\n      /**\n       * To restore pre-Print Activations, we must capture the proper\n       * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n       * is supported; so 'print' mediaQuery activations are used as a fallback\n       * in browsers without `beforeprint` support.\n       *\n       * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n       *\n       * Let's capture all de-activations using the following logic:\n       *\n       *  When not printing:\n       *    - clear cache when activating non-print breakpoint\n       *    - update cache (and sort) when deactivating\n       *\n       *  When printing:\n       *    - sort and save when starting print\n       *    - restore as activatedTargets and clear when stop printing\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"collectActivations\",\n      value: function collectActivations(event) {\n        if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n          if (!event.matches) {\n            /** @type {?} */\n            var bp = this.breakpoints.findByQuery(event.mediaQuery);\n\n            if (bp) {\n              // Deactivating a breakpoint\n              this.deactivations.push(bp);\n              this.deactivations.sort(sortDescendingPriority);\n            }\n          } else if (!this.isPrintingBeforeAfterEvent) {\n            // Only clear deactivations if we aren't printing from a `beforeprint` event.\n            // Otherwise this will clear before `stopPrinting()` is called to restore\n            // the pre-Print Activations.\n            this.deactivations = [];\n          }\n        }\n      }\n      /**\n       * Teardown logic for the service.\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this13 = this;\n\n        this.beforePrintEventListeners.forEach(\n        /**\n        * @param {?} l\n        * @return {?}\n        */\n        function (l) {\n          return _this13._document.defaultView.removeEventListener('beforeprint', l);\n        });\n        this.afterPrintEventListeners.forEach(\n        /**\n        * @param {?} l\n        * @return {?}\n        */\n        function (l) {\n          return _this13._document.defaultView.removeEventListener('afterprint', l);\n        });\n      }\n    }]);\n\n    return PrintHook;\n  }();\n\n  PrintHook.ɵfac = function PrintHook_Factory(t) {\n    return new (t || PrintHook)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(LAYOUT_CONFIG), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n  /** @nocollapse */\n\n\n  PrintHook.ɵprov = ɵɵdefineInjectable({\n    factory: function PrintHook_Factory() {\n      return new PrintHook(ɵɵinject(BreakPointRegistry), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(DOCUMENT));\n    },\n    token: PrintHook,\n    providedIn: \"root\"\n  });\n  /** @nocollapse */\n\n  PrintHook.ctorParameters = function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(PrintHook, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: BreakPointRegistry\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [LAYOUT_CONFIG]\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [DOCUMENT]\n        }]\n      }];\n    }, null);\n  })();\n\n  return PrintHook;\n}(); // ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\n\n\nvar PrintQueue = /*#__PURE__*/function () {\n  function PrintQueue() {\n    _classCallCheck(this, PrintQueue);\n\n    /**\n     * Sorted queue with prioritized print breakpoints\n     */\n    this.printBreakpoints = [];\n  }\n  /**\n   * @param {?} bpList\n   * @return {?}\n   */\n\n\n  _createClass(PrintQueue, [{\n    key: \"addPrintBreakpoints\",\n    value: function addPrintBreakpoints(bpList) {\n      var _this14 = this;\n\n      bpList.push(BREAKPOINT_PRINT);\n      bpList.sort(sortDescendingPriority);\n      bpList.forEach(\n      /**\n      * @param {?} bp\n      * @return {?}\n      */\n      function (bp) {\n        return _this14.addBreakpoint(bp);\n      });\n      return this.printBreakpoints;\n    }\n    /**\n     * Add Print breakpoint to queue\n     * @param {?} bp\n     * @return {?}\n     */\n\n  }, {\n    key: \"addBreakpoint\",\n    value: function addBreakpoint(bp) {\n      if (!!bp) {\n        /** @type {?} */\n        var bpInList = this.printBreakpoints.find(\n        /**\n        * @param {?} it\n        * @return {?}\n        */\n        function (it) {\n          return it.mediaQuery === bp.mediaQuery;\n        });\n\n        if (bpInList === undefined) {\n          // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n          // register as highest priority in the queue\n          this.printBreakpoints = isPrintBreakPoint(bp) ? [bp].concat(_toConsumableArray(this.printBreakpoints)) : [].concat(_toConsumableArray(this.printBreakpoints), [bp]);\n        }\n      }\n    }\n    /**\n     * Restore original activated breakpoints and clear internal caches\n     * @return {?}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.printBreakpoints = [];\n    }\n  }]);\n\n  return PrintQueue;\n}(); // ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n\n/**\n * Only support intercept queueing if the Breakpoint is a print \\@media query\n * @param {?} bp\n * @return {?}\n */\n\n\nfunction isPrintBreakPoint(bp) {\n  return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/array.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wraps the provided value in an array, unless the provided value is an array.\n * @template T\n * @param {?} value\n * @return {?}\n */\n\n\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/media-observer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n * \\@usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '\\@angular/flex-layout';\n *\n * \\@Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\n\n\nvar MediaObserver =\n/** @class */\nfunction () {\n  /**\n   * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n   * if a mediaQuery is currently activated.\n   *\n   * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n   * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n   * in 1 event notification. The reported activations will be sorted in descending priority order.\n   *\n   * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n   * notification. For custom mediaQuery notifications, alias information will not be injected and\n   * those fields will be ''.\n   *\n   * Note: Developers should note that only mediaChange activations (not de-activations)\n   *       are announced by the MediaObserver.\n   *\n   * \\@usage\n   *\n   *  // RxJS\n   *  import { filter } from 'rxjs/operators';\n   *  import { MediaObserver } from '\\@angular/flex-layout';\n   *\n   * \\@Component({ ... })\n   *  export class AppComponent {\n   *    status: string = '';\n   *\n   *    constructor(mediaObserver: MediaObserver) {\n   *      const media$ = mediaObserver.asObservable().pipe(\n   *        filter((changes: MediaChange[]) => true)   // silly noop filter\n   *      );\n   *\n   *      media$.subscribe((changes: MediaChange[]) => {\n   *        let status = '';\n   *        changes.forEach( change => {\n   *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n   *        });\n   *        this.status = status;\n   *     });\n   *\n   *    }\n   *  }\n   */\n  var MediaObserver = /*#__PURE__*/function () {\n    /**\n     * @param {?} breakpoints\n     * @param {?} matchMedia\n     * @param {?} hook\n     */\n    function MediaObserver(breakpoints, matchMedia, hook) {\n      _classCallCheck(this, MediaObserver);\n\n      this.breakpoints = breakpoints;\n      this.matchMedia = matchMedia;\n      this.hook = hook;\n      /**\n       * Filter MediaChange notifications for overlapping breakpoints\n       */\n\n      this.filterOverlaps = false;\n      this.destroyed$ = new Subject();\n      this._media$ = this.watchActivations();\n      this.media$ = this._media$.pipe(filter(\n      /**\n      * @param {?} changes\n      * @return {?}\n      */\n      function (changes) {\n        return changes.length > 0;\n      }), map(\n      /**\n      * @param {?} changes\n      * @return {?}\n      */\n      function (changes) {\n        return changes[0];\n      }));\n    }\n    /**\n     * Completes the active subject, signalling to all complete for all\n     * MediaObserver subscribers\n     * @return {?}\n     */\n\n\n    _createClass(MediaObserver, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n      } // ************************************************\n      // Public Methods\n      // ************************************************\n\n      /**\n       * Observe changes to current activation 'list'\n       * @return {?}\n       */\n\n    }, {\n      key: \"asObservable\",\n      value: function asObservable() {\n        return this._media$;\n      }\n      /**\n       * Allow programmatic query to determine if one or more media query/alias match\n       * the current viewport size.\n       * @param {?} value One or more media queries (or aliases) to check.\n       * @return {?} Whether any of the media queries match.\n       */\n\n    }, {\n      key: \"isActive\",\n      value: function isActive(value) {\n        var _this15 = this;\n\n        /** @type {?} */\n        var aliases = splitQueries(coerceArray(value));\n        return aliases.some(\n        /**\n        * @param {?} alias\n        * @return {?}\n        */\n        function (alias) {\n          /** @type {?} */\n          var query = toMediaQuery(alias, _this15.breakpoints);\n          return query !== null && _this15.matchMedia.isActive(query);\n        });\n      } // ************************************************\n      // Internal Methods\n      // ************************************************\n\n      /**\n       * Register all the mediaQueries registered in the BreakPointRegistry\n       * This is needed so subscribers can be auto-notified of all standard, registered\n       * mediaQuery activations\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"watchActivations\",\n      value: function watchActivations() {\n        /** @type {?} */\n        var queries = this.breakpoints.items.map(\n        /**\n        * @param {?} bp\n        * @return {?}\n        */\n        function (bp) {\n          return bp.mediaQuery;\n        });\n        return this.buildObservable(queries);\n      }\n      /**\n       * Only pass/announce activations (not de-activations)\n       *\n       * Since multiple-mediaQueries can be activation in a cycle,\n       * gather all current activations into a single list of changes to observers\n       *\n       * Inject associated (if any) alias information into the MediaChange event\n       * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n       * - Exclude print activations that do not have an associated mediaQuery\n       *\n       * NOTE: the raw MediaChange events [from MatchMedia] do not\n       *       contain important alias information; as such this info\n       *       must be injected into the MediaChange\n       * @private\n       * @param {?} mqList\n       * @return {?}\n       */\n\n    }, {\n      key: \"buildObservable\",\n      value: function buildObservable(mqList) {\n        var _this16 = this;\n\n        /** @type {?} */\n        var hasChanges =\n        /**\n        * @param {?} changes\n        * @return {?}\n        */\n        function hasChanges(changes) {\n          /** @type {?} */\n          var isValidQuery =\n          /**\n          * @param {?} change\n          * @return {?}\n          */\n          function isValidQuery(change) {\n            return change.mediaQuery.length > 0;\n          };\n\n          return changes.filter(isValidQuery).length > 0;\n        };\n        /** @type {?} */\n\n\n        var excludeOverlaps =\n        /**\n        * @param {?} changes\n        * @return {?}\n        */\n        function excludeOverlaps(changes) {\n          return !_this16.filterOverlaps ? changes : changes.filter(\n          /**\n          * @param {?} change\n          * @return {?}\n          */\n          function (change) {\n            /** @type {?} */\n            var bp = _this16.breakpoints.findByQuery(change.mediaQuery);\n\n            return !bp ? true : !bp.overlapping;\n          });\n        };\n        /**\n         */\n\n\n        return this.matchMedia.observe(this.hook.withPrintQuery(mqList)).pipe(filter(\n        /**\n        * @param {?} change\n        * @return {?}\n        */\n        function (change) {\n          return change.matches;\n        }), debounceTime(0, asapScheduler), switchMap(\n        /**\n        * @param {?} _\n        * @return {?}\n        */\n        function (_) {\n          return of(_this16.findAllActivations());\n        }), map(excludeOverlaps), filter(hasChanges), takeUntil(this.destroyed$));\n      }\n      /**\n       * Find all current activations and prepare single list of activations\n       * sorted by descending priority.\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"findAllActivations\",\n      value: function findAllActivations() {\n        var _this17 = this;\n\n        /** @type {?} */\n        var mergeMQAlias =\n        /**\n        * @param {?} change\n        * @return {?}\n        */\n        function mergeMQAlias(change) {\n          /** @type {?} */\n          var bp = _this17.breakpoints.findByQuery(change.mediaQuery);\n\n          return mergeAlias(change, bp);\n        };\n        /** @type {?} */\n\n\n        var replaceWithPrintAlias =\n        /**\n        * @param {?} change\n        * @return {?}\n        */\n        function replaceWithPrintAlias(change) {\n          return _this17.hook.isPrintEvent(change) ? _this17.hook.updateEvent(change) : change;\n        };\n\n        return this.matchMedia.activations.map(\n        /**\n        * @param {?} query\n        * @return {?}\n        */\n        function (query) {\n          return new MediaChange(true, query);\n        }).map(replaceWithPrintAlias).map(mergeMQAlias).sort(sortDescendingPriority);\n      }\n    }]);\n\n    return MediaObserver;\n  }();\n\n  MediaObserver.ɵfac = function MediaObserver_Factory(t) {\n    return new (t || MediaObserver)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(PrintHook));\n  };\n  /** @nocollapse */\n\n\n  MediaObserver.ɵprov = ɵɵdefineInjectable({\n    factory: function MediaObserver_Factory() {\n      return new MediaObserver(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(PrintHook));\n    },\n    token: MediaObserver,\n    providedIn: \"root\"\n  });\n  /** @nocollapse */\n\n  MediaObserver.ctorParameters = function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: PrintHook\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MediaObserver, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: BreakPointRegistry\n      }, {\n        type: MatchMedia\n      }, {\n        type: PrintHook\n      }];\n    }, null);\n  })();\n\n  return MediaObserver;\n}();\n/**\n * Find associated breakpoint (if any)\n * @param {?} query\n * @param {?} locator\n * @return {?}\n */\n\n\nfunction toMediaQuery(query, locator) {\n  /** @type {?} */\n  var bp = locator.findByAlias(query) || locator.findByQuery(query);\n  return bp ? bp.mediaQuery : null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\n\n\nfunction splitQueries(queries) {\n  return queries.map(\n  /**\n  * @param {?} query\n  * @return {?}\n  */\n  function (query) {\n    return query.split(',');\n  }).reduce(\n  /**\n  * @param {?} a1\n  * @param {?} a2\n  * @return {?}\n  */\n  function (a1, a2) {\n    return a1.concat(a2);\n  }).map(\n  /**\n  * @param {?} query\n  * @return {?}\n  */\n  function (query) {\n    return query.trim();\n  });\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-observer/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/media-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class\n */\n\n\nvar MediaTrigger =\n/** @class */\nfunction () {\n  /**\n   * Class\n   */\n  var MediaTrigger = /*#__PURE__*/function () {\n    /**\n     * @param {?} breakpoints\n     * @param {?} matchMedia\n     * @param {?} layoutConfig\n     * @param {?} _platformId\n     * @param {?} _document\n     */\n    function MediaTrigger(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n      _classCallCheck(this, MediaTrigger);\n\n      this.breakpoints = breakpoints;\n      this.matchMedia = matchMedia;\n      this.layoutConfig = layoutConfig;\n      this._platformId = _platformId;\n      this._document = _document;\n      this.hasCachedRegistryMatches = false;\n      this.originalActivations = [];\n      this.originalRegistry = new Map();\n    }\n    /**\n     * Manually activate range of breakpoints\n     * @param {?} list array of mediaQuery or alias strings\n     * @return {?}\n     */\n\n\n    _createClass(MediaTrigger, [{\n      key: \"activate\",\n      value: function activate(list) {\n        list = list.map(\n        /**\n        * @param {?} it\n        * @return {?}\n        */\n        function (it) {\n          return it.trim();\n        }); // trim queries\n\n        this.saveActivations();\n        this.deactivateAll();\n        this.setActivations(list);\n        this.prepareAutoRestore();\n      }\n      /**\n       * Restore original, 'real' breakpoints and emit events\n       * to trigger stream notification\n       * @return {?}\n       */\n\n    }, {\n      key: \"restore\",\n      value: function restore() {\n        if (this.hasCachedRegistryMatches) {\n          /** @type {?} */\n          var extractQuery =\n          /**\n          * @param {?} change\n          * @return {?}\n          */\n          function extractQuery(change) {\n            return change.mediaQuery;\n          };\n          /** @type {?} */\n\n\n          var list = this.originalActivations.map(extractQuery);\n\n          try {\n            this.deactivateAll();\n            this.restoreRegistryMatches();\n            this.setActivations(list);\n          } finally {\n            this.originalActivations = [];\n\n            if (this.resizeSubscription) {\n              this.resizeSubscription.unsubscribe();\n            }\n          }\n        }\n      } // ************************************************\n      // Internal Methods\n      // ************************************************\n\n      /**\n       * Whenever window resizes, immediately auto-restore original\n       * activations (if we are simulating activations)\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"prepareAutoRestore\",\n      value: function prepareAutoRestore() {\n        /** @type {?} */\n        var isBrowser = isPlatformBrowser(this._platformId) && this._document;\n        /** @type {?} */\n\n\n        var enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n\n        if (enableAutoRestore) {\n          /** @type {?} */\n          var resize$ = fromEvent(window, 'resize').pipe(take(1));\n          this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n        }\n      }\n      /**\n       * Notify all matchMedia subscribers of de-activations\n       *\n       * Note: we must force 'matches' updates for\n       *       future matchMedia::activation lookups\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"deactivateAll\",\n      value: function deactivateAll() {\n        /** @type {?} */\n        var list = this.currentActivations;\n        this.forceRegistryMatches(list, false);\n        this.simulateMediaChanges(list, false);\n      }\n      /**\n       * Cache current activations as sorted, prioritized list of MediaChanges\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"saveActivations\",\n      value: function saveActivations() {\n        var _this18 = this;\n\n        if (!this.hasCachedRegistryMatches) {\n          /** @type {?} */\n          var toMediaChange =\n          /**\n          * @param {?} query\n          * @return {?}\n          */\n          function toMediaChange(query) {\n            return new MediaChange(true, query);\n          };\n          /** @type {?} */\n\n\n          var mergeMQAlias =\n          /**\n          * @param {?} change\n          * @return {?}\n          */\n          function mergeMQAlias(change) {\n            /** @type {?} */\n            var bp = _this18.breakpoints.findByQuery(change.mediaQuery);\n\n            return mergeAlias(change, bp);\n          };\n\n          this.originalActivations = this.currentActivations.map(toMediaChange).map(mergeMQAlias).sort(sortDescendingPriority);\n          this.cacheRegistryMatches();\n        }\n      }\n      /**\n       * Force set manual activations for specified mediaQuery list\n       * @private\n       * @param {?} list\n       * @return {?}\n       */\n\n    }, {\n      key: \"setActivations\",\n      value: function setActivations(list) {\n        if (!!this.originalRegistry) {\n          this.forceRegistryMatches(list, true);\n        }\n\n        this.simulateMediaChanges(list);\n      }\n      /**\n       * For specified mediaQuery list manually simulate activations or deactivations\n       * @private\n       * @param {?} queries\n       * @param {?=} matches\n       * @return {?}\n       */\n\n    }, {\n      key: \"simulateMediaChanges\",\n      value: function simulateMediaChanges(queries) {\n        var _this19 = this;\n\n        var matches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        /** @type {?} */\n        var toMediaQuery =\n        /**\n        * @param {?} query\n        * @return {?}\n        */\n        function toMediaQuery(query) {\n          /** @type {?} */\n          var locator = _this19.breakpoints;\n          /** @type {?} */\n\n          var bp = locator.findByAlias(query) || locator.findByQuery(query);\n          return bp ? bp.mediaQuery : query;\n        };\n        /** @type {?} */\n\n\n        var emitChangeEvent =\n        /**\n        * @param {?} query\n        * @return {?}\n        */\n        function emitChangeEvent(query) {\n          return _this19.emitChangeEvent(matches, query);\n        };\n\n        queries.map(toMediaQuery).forEach(emitChangeEvent);\n      }\n      /**\n       * Replace current registry with simulated registry...\n       * Note: this is required since MediaQueryList::matches is 'readOnly'\n       * @private\n       * @param {?} queries\n       * @param {?} matches\n       * @return {?}\n       */\n\n    }, {\n      key: \"forceRegistryMatches\",\n      value: function forceRegistryMatches(queries, matches) {\n        /** @type {?} */\n        var registry = new Map();\n        queries.forEach(\n        /**\n        * @param {?} query\n        * @return {?}\n        */\n        function (query) {\n          registry.set(query,\n          /** @type {?} */\n          {\n            matches: matches\n          });\n        });\n        this.matchMedia.registry = registry;\n      }\n      /**\n       * Save current MatchMedia::registry items.\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"cacheRegistryMatches\",\n      value: function cacheRegistryMatches() {\n        /** @type {?} */\n        var target = this.originalRegistry;\n        target.clear();\n        this.matchMedia.registry.forEach(\n        /**\n        * @param {?} value\n        * @param {?} key\n        * @return {?}\n        */\n        function (value, key) {\n          target.set(key, value);\n        });\n        this.hasCachedRegistryMatches = true;\n      }\n      /**\n       * Restore original, 'true' registry\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"restoreRegistryMatches\",\n      value: function restoreRegistryMatches() {\n        /** @type {?} */\n        var target = this.matchMedia.registry;\n        target.clear();\n        this.originalRegistry.forEach(\n        /**\n        * @param {?} value\n        * @param {?} key\n        * @return {?}\n        */\n        function (value, key) {\n          target.set(key, value);\n        });\n        this.originalRegistry.clear();\n        this.hasCachedRegistryMatches = false;\n      }\n      /**\n       * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n       * @private\n       * @param {?} matches\n       * @param {?} query\n       * @return {?}\n       */\n\n    }, {\n      key: \"emitChangeEvent\",\n      value: function emitChangeEvent(matches, query) {\n        this.matchMedia.source.next(new MediaChange(matches, query));\n      }\n      /**\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"currentActivations\",\n      get: function get() {\n        return this.matchMedia.activations;\n      }\n    }]);\n\n    return MediaTrigger;\n  }();\n\n  MediaTrigger.ɵfac = function MediaTrigger_Factory(t) {\n    return new (t || MediaTrigger)(ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(LAYOUT_CONFIG), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n  /** @nocollapse */\n\n\n  MediaTrigger.ɵprov = ɵɵdefineInjectable({\n    factory: function MediaTrigger_Factory() {\n      return new MediaTrigger(ɵɵinject(BreakPointRegistry), ɵɵinject(MatchMedia), ɵɵinject(LAYOUT_CONFIG), ɵɵinject(PLATFORM_ID), ɵɵinject(DOCUMENT));\n    },\n    token: MediaTrigger,\n    providedIn: \"root\"\n  });\n  /** @nocollapse */\n\n  MediaTrigger.ctorParameters = function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MediaTrigger, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: BreakPointRegistry\n      }, {\n        type: MatchMedia\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [LAYOUT_CONFIG]\n        }]\n      }, {\n        type: Object,\n        decorators: [{\n          type: Inject,\n          args: [PLATFORM_ID]\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [DOCUMENT]\n        }]\n      }];\n    }, null);\n  })();\n\n  return MediaTrigger;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-trigger/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/utils/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: utils/auto-prefixer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n * @param {?} target\n * @return {?}\n */\n\n\nfunction applyCssPrefixes(target) {\n  for (var key in target) {\n    /** @type {?} */\n    var value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = ['-webkit-flex', 'flex'];\n        } else if (value === 'inline-flex') {\n          target['display'] = ['-webkit-inline-flex', 'inline-flex'];\n        } else {\n          target['display'] = value;\n        }\n\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n        break;\n    }\n  }\n\n  return target;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-utils/style-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StyleUtils =\n/** @class */\nfunction () {\n  var StyleUtils = /*#__PURE__*/function () {\n    /**\n     * @param {?} _serverStylesheet\n     * @param {?} _serverModuleLoaded\n     * @param {?} _platformId\n     * @param {?} layoutConfig\n     */\n    function StyleUtils(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n      _classCallCheck(this, StyleUtils);\n\n      this._serverStylesheet = _serverStylesheet;\n      this._serverModuleLoaded = _serverModuleLoaded;\n      this._platformId = _platformId;\n      this.layoutConfig = layoutConfig;\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     * @param {?} element\n     * @param {?} style\n     * @param {?=} value\n     * @return {?}\n     */\n\n\n    _createClass(StyleUtils, [{\n      key: \"applyStyleToElement\",\n      value: function applyStyleToElement(element, style) {\n        var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        /** @type {?} */\n        var styles = {};\n\n        if (typeof style === 'string') {\n          styles[style] = value;\n          style = styles;\n        }\n\n        styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n\n        this._applyMultiValueStyleToElement(styles, element);\n      }\n      /**\n       * Applies styles given via string pair or object map to the directive's element\n       * @param {?} style\n       * @param {?=} elements\n       * @return {?}\n       */\n\n    }, {\n      key: \"applyStyleToElements\",\n      value: function applyStyleToElements(style) {\n        var _this20 = this;\n\n        var elements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n        /** @type {?} */\n        var styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        elements.forEach(\n        /**\n        * @param {?} el\n        * @return {?}\n        */\n        function (el) {\n          _this20._applyMultiValueStyleToElement(styles, el);\n        });\n      }\n      /**\n       * Determine the DOM element's Flexbox flow (flex-direction)\n       *\n       * Check inline style first then check computed (stylesheet) style\n       * @param {?} target\n       * @return {?}\n       */\n\n    }, {\n      key: \"getFlowDirection\",\n      value: function getFlowDirection(target) {\n        /** @type {?} */\n        var query = 'flex-direction';\n        /** @type {?} */\n\n        var value = this.lookupStyle(target, query);\n        /** @type {?} */\n\n        var hasInlineValue = this.lookupInlineStyle(target, query) || isPlatformServer(this._platformId) && this._serverModuleLoaded ? value : '';\n        return [value || 'row', hasInlineValue];\n      }\n      /**\n       * @param {?} target\n       * @return {?}\n       */\n\n    }, {\n      key: \"hasWrap\",\n      value: function hasWrap(target) {\n        /** @type {?} */\n        var query = 'flex-wrap';\n        return this.lookupStyle(target, query) === 'wrap';\n      }\n      /**\n       * Find the DOM element's raw attribute value (if any)\n       * @param {?} element\n       * @param {?} attribute\n       * @return {?}\n       */\n\n    }, {\n      key: \"lookupAttributeValue\",\n      value: function lookupAttributeValue(element, attribute) {\n        return element.getAttribute(attribute) || '';\n      }\n      /**\n       * Find the DOM element's inline style value (if any)\n       * @param {?} element\n       * @param {?} styleName\n       * @return {?}\n       */\n\n    }, {\n      key: \"lookupInlineStyle\",\n      value: function lookupInlineStyle(element, styleName) {\n        return isPlatformBrowser(this._platformId) ? element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n      }\n      /**\n       * Determine the inline or inherited CSS style\n       * NOTE: platform-server has no implementation for getComputedStyle\n       * @param {?} element\n       * @param {?} styleName\n       * @param {?=} inlineOnly\n       * @return {?}\n       */\n\n    }, {\n      key: \"lookupStyle\",\n      value: function lookupStyle(element, styleName) {\n        var inlineOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        /** @type {?} */\n        var value = '';\n\n        if (element) {\n          /** @type {?} */\n          var immediateValue = value = this.lookupInlineStyle(element, styleName);\n\n          if (!immediateValue) {\n            if (isPlatformBrowser(this._platformId)) {\n              if (!inlineOnly) {\n                value = getComputedStyle(element).getPropertyValue(styleName);\n              }\n            } else {\n              if (this._serverModuleLoaded) {\n                value = this._serverStylesheet.getStyleForElement(element, styleName);\n              }\n            }\n          }\n        } // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n        //       in which case getComputedStyle() should determine a valid value.\n\n\n        return value ? value.trim() : '';\n      }\n      /**\n       * Applies the styles to the element. The styles object map may contain an array of values\n       * Each value will be added as element style\n       * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n       * @private\n       * @param {?} styles\n       * @param {?} element\n       * @return {?}\n       */\n\n    }, {\n      key: \"_applyMultiValueStyleToElement\",\n      value: function _applyMultiValueStyleToElement(styles, element) {\n        var _this21 = this;\n\n        Object.keys(styles).sort().forEach(\n        /**\n        * @param {?} key\n        * @return {?}\n        */\n        function (key) {\n          /** @type {?} */\n          var el = styles[key];\n          /** @type {?} */\n\n          var values = Array.isArray(el) ? el : [el];\n          values.sort();\n\n          var _iterator = _createForOfIteratorHelper(values),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var value = _step.value;\n              value = value ? value + '' : '';\n\n              if (isPlatformBrowser(_this21._platformId) || !_this21._serverModuleLoaded) {\n                isPlatformBrowser(_this21._platformId) ? element.style.setProperty(key, value) : _this21._setServerStyle(element, key, value);\n              } else {\n                _this21._serverStylesheet.addStyleToElement(element, key, value);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      }\n      /**\n       * @private\n       * @param {?} element\n       * @param {?} styleName\n       * @param {?=} styleValue\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setServerStyle\",\n      value: function _setServerStyle(element, styleName, styleValue) {\n        styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n        /** @type {?} */\n\n        var styleMap = this._readStyleAttribute(element);\n\n        styleMap[styleName] = styleValue || '';\n\n        this._writeStyleAttribute(element, styleMap);\n      }\n      /**\n       * @private\n       * @param {?} element\n       * @param {?} styleName\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getServerStyle\",\n      value: function _getServerStyle(element, styleName) {\n        /** @type {?} */\n        var styleMap = this._readStyleAttribute(element);\n\n        return styleMap[styleName] || '';\n      }\n      /**\n       * @private\n       * @param {?} element\n       * @return {?}\n       */\n\n    }, {\n      key: \"_readStyleAttribute\",\n      value: function _readStyleAttribute(element) {\n        /** @type {?} */\n        var styleMap = {};\n        /** @type {?} */\n\n        var styleAttribute = element.getAttribute('style');\n\n        if (styleAttribute) {\n          /** @type {?} */\n          var styleList = styleAttribute.split(/;+/g);\n\n          for (var i = 0; i < styleList.length; i++) {\n            /** @type {?} */\n            var style = styleList[i].trim();\n\n            if (style.length > 0) {\n              /** @type {?} */\n              var colonIndex = style.indexOf(':');\n\n              if (colonIndex === -1) {\n                throw new Error(\"Invalid CSS style: \".concat(style));\n              }\n              /** @type {?} */\n\n\n              var name = style.substr(0, colonIndex).trim();\n              styleMap[name] = style.substr(colonIndex + 1).trim();\n            }\n          }\n        }\n\n        return styleMap;\n      }\n      /**\n       * @private\n       * @param {?} element\n       * @param {?} styleMap\n       * @return {?}\n       */\n\n    }, {\n      key: \"_writeStyleAttribute\",\n      value: function _writeStyleAttribute(element, styleMap) {\n        /** @type {?} */\n        var styleAttrValue = '';\n\n        for (var key in styleMap) {\n          /** @type {?} */\n          var newValue = styleMap[key];\n\n          if (newValue) {\n            styleAttrValue += key + ':' + styleMap[key] + ';';\n          }\n        }\n\n        element.setAttribute('style', styleAttrValue);\n      }\n    }]);\n\n    return StyleUtils;\n  }();\n\n  StyleUtils.ɵfac = function StyleUtils_Factory(t) {\n    return new (t || StyleUtils)(ɵngcc0.ɵɵinject(StylesheetMap), ɵngcc0.ɵɵinject(SERVER_TOKEN), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(LAYOUT_CONFIG));\n  };\n  /** @nocollapse */\n\n\n  StyleUtils.ɵprov = ɵɵdefineInjectable({\n    factory: function StyleUtils_Factory() {\n      return new StyleUtils(ɵɵinject(StylesheetMap), ɵɵinject(SERVER_TOKEN), ɵɵinject(PLATFORM_ID), ɵɵinject(LAYOUT_CONFIG));\n    },\n    token: StyleUtils,\n    providedIn: \"root\"\n  });\n  /** @nocollapse */\n\n  StyleUtils.ctorParameters = function () {\n    return [{\n      type: StylesheetMap\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [SERVER_TOKEN]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(StyleUtils, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: StylesheetMap\n      }, {\n        type: Boolean,\n        decorators: [{\n          type: Inject,\n          args: [SERVER_TOKEN]\n        }]\n      }, {\n        type: Object,\n        decorators: [{\n          type: Inject,\n          args: [PLATFORM_ID]\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [LAYOUT_CONFIG]\n        }]\n      }];\n    }, null);\n  })();\n\n  return StyleUtils;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/style-builder/style-builder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A class that encapsulates CSS style generation for common directives\n * @abstract\n */\n\n\nvar StyleBuilder = /*#__PURE__*/function () {\n  function StyleBuilder() {\n    _classCallCheck(this, StyleBuilder);\n\n    /**\n     * Whether to cache the generated output styles\n     */\n    this.shouldCache = true;\n  }\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   * @param {?} _input\n   * @param {?} _styles\n   * @param {?=} _parent\n   * @return {?}\n   */\n\n\n  _createClass(StyleBuilder, [{\n    key: \"sideEffect\",\n    value: function sideEffect(_input, _styles, _parent) {}\n  }]);\n\n  return StyleBuilder;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: core/basis-validator/basis-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n * @param {?} basis\n * @param {?=} grow\n * @param {?=} shrink\n * @return {?}\n */\n\n\nfunction validateBasis(basis) {\n  var grow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1';\n  var shrink = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1';\n\n  /** @type {?} */\n  var parts = [grow, shrink, basis];\n  /** @type {?} */\n\n  var j = basis.indexOf('calc');\n\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    /** @type {?} */\n\n    var matches = basis.substr(0, j).trim().split(' ');\n\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    /** @type {?} */\n    var _matches = basis.split(' ');\n\n    parts = _matches.length === 3 ? _matches : [grow, shrink, basis];\n  }\n\n  return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n * @param {?} calc\n * @return {?}\n */\n\n\nfunction _validateCalcValue(calc) {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/media-marshaller/media-marshaller.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\n\n\nvar MediaMarshaller =\n/** @class */\nfunction () {\n  /**\n   * MediaMarshaller - register responsive values from directives and\n   *                   trigger them based on media query events\n   */\n  var MediaMarshaller = /*#__PURE__*/function () {\n    /**\n     * @param {?} matchMedia\n     * @param {?} breakpoints\n     * @param {?} hook\n     */\n    function MediaMarshaller(matchMedia, breakpoints, hook) {\n      _classCallCheck(this, MediaMarshaller);\n\n      this.matchMedia = matchMedia;\n      this.breakpoints = breakpoints;\n      this.hook = hook;\n      this.activatedBreakpoints = [];\n      this.elementMap = new Map();\n      this.elementKeyMap = new WeakMap();\n      this.watcherMap = new WeakMap(); // special triggers to update elements\n      // special triggers to update elements\n\n      this.updateMap = new WeakMap(); // callback functions to update styles\n      // callback functions to update styles\n\n      this.clearMap = new WeakMap(); // callback functions to clear styles\n      // callback functions to clear styles\n\n      this.subject = new Subject();\n      this.observeActivations();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(MediaMarshaller, [{\n      key: \"activatedAlias\",\n      get: function get() {\n        return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n      }\n      /**\n       * Update styles on breakpoint activates or deactivates\n       * @param {?} mc\n       * @return {?}\n       */\n\n    }, {\n      key: \"onMediaChange\",\n      value: function onMediaChange(mc) {\n        /** @type {?} */\n        var bp = this.findByQuery(mc.mediaQuery);\n\n        if (bp) {\n          mc = mergeAlias(mc, bp);\n\n          if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n            this.activatedBreakpoints.push(bp);\n            this.activatedBreakpoints.sort(sortDescendingPriority);\n            this.updateStyles();\n          } else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n            // Remove the breakpoint when it's deactivated\n            this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n            this.activatedBreakpoints.sort(sortDescendingPriority);\n            this.updateStyles();\n          }\n        }\n      }\n      /**\n       * initialize the marshaller with necessary elements for delegation on an element\n       * @param {?} element\n       * @param {?} key\n       * @param {?=} updateFn optional callback so that custom bp directives don't have to re-provide this\n       * @param {?=} clearFn optional callback so that custom bp directives don't have to re-provide this\n       * @param {?=} extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n       * @return {?}\n       */\n\n    }, {\n      key: \"init\",\n      value: function init(element, key, updateFn, clearFn) {\n        var extraTriggers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        initBuilderMap(this.updateMap, element, key, updateFn);\n        initBuilderMap(this.clearMap, element, key, clearFn);\n        this.buildElementKeyMap(element, key);\n        this.watchExtraTriggers(element, key, extraTriggers);\n      }\n      /**\n       * get the value for an element and key and optionally a given breakpoint\n       * @param {?} element\n       * @param {?} key\n       * @param {?=} bp\n       * @return {?}\n       */\n\n    }, {\n      key: \"getValue\",\n      value: function getValue(element, key, bp) {\n        /** @type {?} */\n        var bpMap = this.elementMap.get(element);\n\n        if (bpMap) {\n          /** @type {?} */\n          var values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n\n          if (values) {\n            return values.get(key);\n          }\n        }\n\n        return undefined;\n      }\n      /**\n       * whether the element has values for a given key\n       * @param {?} element\n       * @param {?} key\n       * @return {?}\n       */\n\n    }, {\n      key: \"hasValue\",\n      value: function hasValue(element, key) {\n        /** @type {?} */\n        var bpMap = this.elementMap.get(element);\n\n        if (bpMap) {\n          /** @type {?} */\n          var values = this.getActivatedValues(bpMap, key);\n\n          if (values) {\n            return values.get(key) !== undefined || false;\n          }\n        }\n\n        return false;\n      }\n      /**\n       * Set the value for an input on a directive\n       * @param {?} element the element in question\n       * @param {?} key the type of the directive (e.g. flex, layout-gap, etc)\n       * @param {?} val the value for the breakpoint\n       * @param {?} bp the breakpoint suffix (empty string = default)\n       * @return {?}\n       */\n\n    }, {\n      key: \"setValue\",\n      value: function setValue(element, key, val, bp) {\n        /** @type {?} */\n        var bpMap = this.elementMap.get(element);\n\n        if (!bpMap) {\n          bpMap = new Map().set(bp, new Map().set(key, val));\n          this.elementMap.set(element, bpMap);\n        } else {\n          /** @type {?} */\n          var values = (bpMap.get(bp) || new Map()).set(key, val);\n          bpMap.set(bp, values);\n          this.elementMap.set(element, bpMap);\n        }\n        /** @type {?} */\n\n\n        var value = this.getValue(element, key);\n\n        if (value !== undefined) {\n          this.updateElement(element, key, value);\n        }\n      }\n      /**\n       * Track element value changes for a specific key\n       * @param {?} element\n       * @param {?} key\n       * @return {?}\n       */\n\n    }, {\n      key: \"trackValue\",\n      value: function trackValue(element, key) {\n        return this.subject.asObservable().pipe(filter(\n        /**\n        * @param {?} v\n        * @return {?}\n        */\n        function (v) {\n          return v.element === element && v.key === key;\n        }));\n      }\n      /**\n       * update all styles for all elements on the current breakpoint\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateStyles\",\n      value: function updateStyles() {\n        var _this22 = this;\n\n        this.elementMap.forEach(\n        /**\n        * @param {?} bpMap\n        * @param {?} el\n        * @return {?}\n        */\n        function (bpMap, el) {\n          /** @type {?} */\n          var keyMap = new Set(\n          /** @type {?} */\n          _this22.elementKeyMap.get(el));\n          /** @type {?} */\n\n          var valueMap = _this22.getActivatedValues(bpMap);\n\n          if (valueMap) {\n            valueMap.forEach(\n            /**\n            * @param {?} v\n            * @param {?} k\n            * @return {?}\n            */\n            function (v, k) {\n              _this22.updateElement(el, k, v);\n\n              keyMap.delete(k);\n            });\n          }\n\n          keyMap.forEach(\n          /**\n          * @param {?} k\n          * @return {?}\n          */\n          function (k) {\n            valueMap = _this22.getActivatedValues(bpMap, k);\n\n            if (valueMap) {\n              /** @type {?} */\n              var value = valueMap.get(k);\n\n              _this22.updateElement(el, k, value);\n            } else {\n              _this22.clearElement(el, k);\n            }\n          });\n        });\n      }\n      /**\n       * clear the styles for a given element\n       * @param {?} element\n       * @param {?} key\n       * @return {?}\n       */\n\n    }, {\n      key: \"clearElement\",\n      value: function clearElement(element, key) {\n        /** @type {?} */\n        var builders = this.clearMap.get(element);\n\n        if (builders) {\n          /** @type {?} */\n          var clearFn =\n          /** @type {?} */\n          builders.get(key);\n\n          if (!!clearFn) {\n            clearFn();\n            this.subject.next({\n              element: element,\n              key: key,\n              value: ''\n            });\n          }\n        }\n      }\n      /**\n       * update a given element with the activated values for a given key\n       * @param {?} element\n       * @param {?} key\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"updateElement\",\n      value: function updateElement(element, key, value) {\n        /** @type {?} */\n        var builders = this.updateMap.get(element);\n\n        if (builders) {\n          /** @type {?} */\n          var updateFn =\n          /** @type {?} */\n          builders.get(key);\n\n          if (!!updateFn) {\n            updateFn(value);\n            this.subject.next({\n              element: element,\n              key: key,\n              value: value\n            });\n          }\n        }\n      }\n      /**\n       * release all references to a given element\n       * @param {?} element\n       * @return {?}\n       */\n\n    }, {\n      key: \"releaseElement\",\n      value: function releaseElement(element) {\n        /** @type {?} */\n        var watcherMap = this.watcherMap.get(element);\n\n        if (watcherMap) {\n          watcherMap.forEach(\n          /**\n          * @param {?} s\n          * @return {?}\n          */\n          function (s) {\n            return s.unsubscribe();\n          });\n          this.watcherMap.delete(element);\n        }\n        /** @type {?} */\n\n\n        var elementMap = this.elementMap.get(element);\n\n        if (elementMap) {\n          elementMap.forEach(\n          /**\n          * @param {?} _\n          * @param {?} s\n          * @return {?}\n          */\n          function (_, s) {\n            return elementMap.delete(s);\n          });\n          this.elementMap.delete(element);\n        }\n      }\n      /**\n       * trigger an update for a given element and key (e.g. layout)\n       * @param {?} element\n       * @param {?=} key\n       * @return {?}\n       */\n\n    }, {\n      key: \"triggerUpdate\",\n      value: function triggerUpdate(element, key) {\n        var _this23 = this;\n\n        /** @type {?} */\n        var bpMap = this.elementMap.get(element);\n\n        if (bpMap) {\n          /** @type {?} */\n          var valueMap = this.getActivatedValues(bpMap, key);\n\n          if (valueMap) {\n            if (key) {\n              this.updateElement(element, key, valueMap.get(key));\n            } else {\n              valueMap.forEach(\n              /**\n              * @param {?} v\n              * @param {?} k\n              * @return {?}\n              */\n              function (v, k) {\n                return _this23.updateElement(element, k, v);\n              });\n            }\n          }\n        }\n      }\n      /**\n       * Cross-reference for HTMLElement with directive key\n       * @private\n       * @param {?} element\n       * @param {?} key\n       * @return {?}\n       */\n\n    }, {\n      key: \"buildElementKeyMap\",\n      value: function buildElementKeyMap(element, key) {\n        /** @type {?} */\n        var keyMap = this.elementKeyMap.get(element);\n\n        if (!keyMap) {\n          keyMap = new Set();\n          this.elementKeyMap.set(element, keyMap);\n        }\n\n        keyMap.add(key);\n      }\n      /**\n       * Other triggers that should force style updates:\n       * - directionality\n       * - layout changes\n       * - mutationobserver updates\n       * @private\n       * @param {?} element\n       * @param {?} key\n       * @param {?} triggers\n       * @return {?}\n       */\n\n    }, {\n      key: \"watchExtraTriggers\",\n      value: function watchExtraTriggers(element, key, triggers) {\n        var _this24 = this;\n\n        if (triggers && triggers.length) {\n          /** @type {?} */\n          var watchers = this.watcherMap.get(element);\n\n          if (!watchers) {\n            watchers = new Map();\n            this.watcherMap.set(element, watchers);\n          }\n          /** @type {?} */\n\n\n          var subscription = watchers.get(key);\n\n          if (!subscription) {\n            /** @type {?} */\n            var newSubscription = merge.apply(void 0, _toConsumableArray(triggers)).subscribe(\n            /**\n            * @return {?}\n            */\n            function () {\n              /** @type {?} */\n              var currentValue = _this24.getValue(element, key);\n\n              _this24.updateElement(element, key, currentValue);\n            });\n            watchers.set(key, newSubscription);\n          }\n        }\n      }\n      /**\n       * Breakpoint locator by mediaQuery\n       * @private\n       * @param {?} query\n       * @return {?}\n       */\n\n    }, {\n      key: \"findByQuery\",\n      value: function findByQuery(query) {\n        return this.breakpoints.findByQuery(query);\n      }\n      /**\n       * get the fallback breakpoint for a given element, starting with the current breakpoint\n       * @private\n       * @param {?} bpMap\n       * @param {?=} key\n       * @return {?}\n       */\n\n    }, {\n      key: \"getActivatedValues\",\n      value: function getActivatedValues(bpMap, key) {\n        for (var i = 0; i < this.activatedBreakpoints.length; i++) {\n          /** @type {?} */\n          var activatedBp = this.activatedBreakpoints[i];\n          /** @type {?} */\n\n          var valueMap = bpMap.get(activatedBp.alias);\n\n          if (valueMap) {\n            if (key === undefined || valueMap.has(key) && valueMap.get(key) != null) {\n              return valueMap;\n            }\n          }\n        }\n        /** @type {?} */\n\n\n        var lastHope = bpMap.get('');\n        return key === undefined || lastHope && lastHope.has(key) ? lastHope : undefined;\n      }\n      /**\n       * Watch for mediaQuery breakpoint activations\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"observeActivations\",\n      value: function observeActivations() {\n        /** @type {?} */\n        var target =\n        /** @type {?} */\n\n        /** @type {?} */\n        this;\n        /** @type {?} */\n\n        var queries = this.breakpoints.items.map(\n        /**\n        * @param {?} bp\n        * @return {?}\n        */\n        function (bp) {\n          return bp.mediaQuery;\n        });\n        this.matchMedia.observe(this.hook.withPrintQuery(queries)).pipe(tap(this.hook.interceptEvents(target)), filter(this.hook.blockPropagation())).subscribe(this.onMediaChange.bind(this));\n      }\n    }]);\n\n    return MediaMarshaller;\n  }();\n\n  MediaMarshaller.ɵfac = function MediaMarshaller_Factory(t) {\n    return new (t || MediaMarshaller)(ɵngcc0.ɵɵinject(MatchMedia), ɵngcc0.ɵɵinject(BreakPointRegistry), ɵngcc0.ɵɵinject(PrintHook));\n  };\n  /** @nocollapse */\n\n\n  MediaMarshaller.ɵprov = ɵɵdefineInjectable({\n    factory: function MediaMarshaller_Factory() {\n      return new MediaMarshaller(ɵɵinject(MatchMedia), ɵɵinject(BreakPointRegistry), ɵɵinject(PrintHook));\n    },\n    token: MediaMarshaller,\n    providedIn: \"root\"\n  });\n  /** @nocollapse */\n\n  MediaMarshaller.ctorParameters = function () {\n    return [{\n      type: MatchMedia\n    }, {\n      type: BreakPointRegistry\n    }, {\n      type: PrintHook\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MediaMarshaller, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: MatchMedia\n      }, {\n        type: BreakPointRegistry\n      }, {\n        type: PrintHook\n      }];\n    }, null);\n  })();\n\n  return MediaMarshaller;\n}();\n/**\n * @param {?} map\n * @param {?} element\n * @param {?} key\n * @param {?=} input\n * @return {?}\n */\n\n\nfunction initBuilderMap(map$$1, element, key, input) {\n  if (input !== undefined) {\n    /** @type {?} */\n    var oldMap = map$$1.get(element);\n\n    if (!oldMap) {\n      oldMap = new Map();\n      map$$1.set(element, oldMap);\n    }\n\n    oldMap.set(key, input);\n  }\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: core/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: core/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, CoreModule, removeStyles, BROWSER_PROVIDER, CLASS_NAME, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, mergeAlias, BaseDirective2, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MediaObserver, MediaTrigger, sortDescendingPriority, sortAscendingPriority, coerceArray, StyleUtils, StyleBuilder, validateBasis, MediaMarshaller, BREAKPOINT_PRINT, PrintHook };","map":{"version":3,"sources":["../../../src/lib/core/browser-provider.ts","../../../src/lib/core/module.ts","../../../src/lib/core/media-change.ts","../../../src/lib/core/stylesheet-map/stylesheet-map.ts","../../../src/lib/core/tokens/library-config.ts","../../../src/lib/core/tokens/server-token.ts","../../../src/lib/core/tokens/breakpoint-token.ts","../../../src/lib/core/add-alias.ts","../../../src/lib/utils/layout-validator.ts","../../../src/lib/core/base/base2.ts","../../../src/lib/core/breakpoints/data/break-points.ts","../../../src/lib/core/breakpoints/data/orientation-break-points.ts","../../../src/lib/utils/object-extend.ts","../../../src/lib/core/breakpoints/breakpoint-tools.ts","../../../src/lib/core/breakpoints/break-points-token.ts","../../../src/lib/core/utils/sort.ts","../../../src/lib/core/breakpoints/break-point-registry.ts","../../../src/lib/core/match-media/match-media.ts","../../../src/lib/core/match-media/mock/mock-match-media.ts","../../../src/lib/core/media-marshaller/print-hook.ts","../../../src/lib/core/utils/array.ts","../../../src/lib/core/media-observer/media-observer.ts","../../../src/lib/core/media-trigger/media-trigger.ts","../../../src/lib/utils/auto-prefixer.ts","../../../src/lib/core/style-utils/style-utils.ts","../../../src/lib/core/style-builder/style-builder.ts","../../../src/lib/core/basis-validator/basis-validator.ts","../../../src/lib/core/media-marshaller/media-marshaller.ts"],"names":["map"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_ID, InjectionToken} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\n\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nexport function removeStyles(_document: Document, platformId: Object) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n\n      // RegExp constructor should only be used if passing a variable to the constructor.\n      // When using static regular expression it is more performant to use reg exp literal.\n      // This is also needed to provide Safari 9 compatibility, please see\n      // https://stackoverflow.com/questions/37919802 for more discussion.\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n          el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n\n/**\n *  Provider to remove SSR styles on the browser\n */\nexport const BROWSER_PROVIDER = {\n  provide: <InjectionToken<(() => void)[]>>APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n\nexport const CLASS_NAME = 'flex-layout-';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {BROWSER_PROVIDER} from './browser-provider';\n\n\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\n@NgModule({\n  providers: [BROWSER_PROVIDER]\n})\nexport class CoreModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport type MediaQuerySubscriber = (changes: MediaChange) => void;\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nexport class MediaChange {\n  property: string = '';\n  value: any;\n\n  /**\n   * @param matches whether the mediaQuery is currently activated\n   * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param mqAlias e.g. gt-sm, md, gt-lg\n   * @param suffix e.g. GtSM, Md, GtLg\n   * @param priority the priority of activation for the given breakpoint\n   */\n  constructor(public matches = false,\n              public mediaQuery = 'all',\n              public mqAlias = '',\n              public suffix = '',\n              public priority = 0) {\n  }\n\n  /** Create an exact copy of the MediaChange */\n  clone(): MediaChange {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\n@Injectable({providedIn: 'root'})\nexport class StylesheetMap {\n\n  readonly stylesheet = new Map<HTMLElement, Map<string, string|number>>();\n\n  /**\n   * Add an individual style to an HTML element\n   */\n  addStyleToElement(element: HTMLElement, style: string, value: string|number) {\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n\n  /**\n   * Clear the virtual stylesheet\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n\n  /**\n   * Retrieve a given style for an HTML element\n   */\n  getStyleForElement(el: HTMLElement, styleName: string): string {\n    const styles = this.stylesheet.get(el);\n    let value = '';\n    if (styles) {\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** a set of configuration options for FlexLayoutModule */\nexport interface LayoutConfigOptions {\n  addFlexToParent?: boolean;\n  addOrientationBps?: boolean;\n  disableDefaultBps?: boolean;\n  disableVendorPrefixes?: boolean;\n  serverLoaded?: boolean;\n  useColumnBasisZero?: boolean;\n  printWithBreakpoints?: string[];\n  mediaTriggerAutoRestore?: boolean;\n  ssrObserveBreakpoints?: string[];\n}\n\nexport const DEFAULT_CONFIG: LayoutConfigOptions = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: [],\n};\n\nexport const LAYOUT_CONFIG = new InjectionToken<LayoutConfigOptions>(\n    'Flex Layout token, config options for the library', {\n      providedIn: 'root',\n      factory: () => DEFAULT_CONFIG\n    });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nexport const SERVER_TOKEN = new InjectionToken<boolean>(\n  'FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {BreakPoint} from '../breakpoints/break-point';\n\nexport const BREAKPOINT = new InjectionToken<BreakPoint|BreakPoint[]|null>(\n  'Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {MediaChange} from './media-change';\nimport {BreakPoint} from './breakpoints/break-point';\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nexport function mergeAlias(dest: MediaChange, source: BreakPoint | null): MediaChange {\n  dest = dest ? dest.clone() : new MediaChange();\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix = source.suffix as string;\n    dest.priority = source.priority as number;\n  }\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const INLINE = 'inline';\nexport const LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n */\nexport function buildLayoutCSS(value: string) {\n  let [direction, wrap, isInline] = validateValue(value);\n  return buildCSS(direction, wrap, isInline);\n }\n\n/**\n  * Validate the value to be one of the acceptable value options\n  * Use default fallback of 'row'\n  */\nexport function validateValue(value: string): [string, string, boolean] {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap, inline] = value.split(' ');\n\n  // First value must be the `flex-direction`\n  if (!LAYOUT_VALUES.find(x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n\n  if (wrap === INLINE) {\n    wrap = (inline !== INLINE) ? inline : '';\n    inline = INLINE;\n  }\n\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n\n/**\n * Determine if the validated, flex-direction value specifies\n * a horizontal/row flow.\n */\nexport function isFlowHorizontal(value: string): boolean {\n  let [flow, ] = validateValue(value);\n  return flow.indexOf('row') > -1;\n}\n\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n */\nexport function validateWrapValue(value: string) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n */\nfunction buildCSS(direction: string, wrap: string | null = null, inline = false) {\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {StyleDefinition, StyleUtils} from '../style-utils/style-utils';\nimport {StyleBuilder} from '../style-builder/style-builder';\nimport {MediaMarshaller} from '../media-marshaller/media-marshaller';\nimport {buildLayoutCSS} from '../../utils/layout-validator';\n\nexport abstract class BaseDirective2 implements OnChanges, OnDestroy {\n\n  protected DIRECTIVE_KEY = '';\n  protected inputs: string[] = [];\n  /** The most recently used styles for the builder */\n  protected mru: StyleDefinition = {};\n  protected destroySubject: Subject<void> = new Subject();\n  protected currentValue: any;\n\n  /** Access to host element's parent DOM node */\n  protected get parentElement(): HTMLElement | null {\n    return this.elementRef.nativeElement.parentElement;\n  }\n\n  /** Access to the HTMLElement for the directive */\n  protected get nativeElement(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /** Access to the activated value for the directive */\n  get activatedValue(): string {\n    return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  set activatedValue(value: string) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value,\n      this.marshal.activatedAlias);\n  }\n\n  /** Cache map for style computation */\n  protected styleCache: Map<string, StyleDefinition> = new Map();\n\n  protected constructor(protected elementRef: ElementRef,\n                        protected styleBuilder: StyleBuilder,\n                        protected styler: StyleUtils,\n                        protected marshal: MediaMarshaller) {\n  }\n\n  /** For @Input changes */\n  ngOnChanges(changes: SimpleChanges) {\n    Object.keys(changes).forEach(key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        const bp = key.split('.').slice(1).join('.');\n        const val = changes[key].currentValue;\n        this.setValue(val, bp);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroySubject.next();\n    this.destroySubject.complete();\n    this.marshal.releaseElement(this.nativeElement);\n  }\n\n  /** Register with central marshaller service */\n  protected init(extraTriggers: Observable<any>[] = []): void {\n    this.marshal.init(\n      this.elementRef.nativeElement,\n      this.DIRECTIVE_KEY,\n      this.updateWithValue.bind(this),\n      this.clearStyles.bind(this),\n      extraTriggers\n    );\n  }\n\n  /** Add styles to the element using predefined style builder */\n  protected addStyles(input: string, parent?: Object) {\n    const builder = this.styleBuilder;\n    const useCache = builder.shouldCache;\n\n    let genStyles: StyleDefinition | undefined = this.styleCache.get(input);\n\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n      if (useCache) {\n        this.styleCache.set(input, genStyles);\n      }\n    }\n\n    this.mru = {...genStyles};\n    this.applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n\n  /** Remove generated styles from an element using predefined style builder */\n  protected clearStyles() {\n    Object.keys(this.mru).forEach(k => {\n      this.mru[k] = '';\n    });\n    this.applyStyleToElement(this.mru);\n    this.mru = {};\n  }\n\n  /** Force trigger style updates on DOM element */\n  protected triggerUpdate() {\n    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  protected getFlexFlowDirection(target: HTMLElement, addIfMissing = false): string {\n    if (target) {\n      const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n\n      if (!hasInlineValue && addIfMissing) {\n        const style = buildLayoutCSS(value);\n        const elements = [target];\n        this.styler.applyStyleToElements(style, elements);\n      }\n\n      return value.trim();\n    }\n\n    return 'row';\n  }\n\n  protected hasWrap(target: HTMLElement): boolean {\n    return this.styler.hasWrap(target);\n  }\n\n  /** Applies styles given via string pair or object map to the directive element */\n  protected applyStyleToElement(style: StyleDefinition,\n                                value?: string | number,\n                                element: HTMLElement = this.nativeElement) {\n    this.styler.applyStyleToElement(element, style, value);\n  }\n\n  protected setValue(val: any, bp: string): void {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n  }\n\n  protected updateWithValue(input: string) {\n    if (this.currentValue !== input) {\n      this.addStyles(input);\n      this.currentValue = input;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from '../break-point';\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nexport const DEFAULT_BREAKPOINTS: BreakPoint[] = [\n  {\n    alias: 'xs',\n    mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.9px)',\n    priority: 1000,\n  },\n  {\n    alias: 'sm',\n    mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.9px)',\n    priority: 900,\n  },\n  {\n    alias: 'md',\n    mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.9px)',\n    priority: 800,\n  },\n  {\n    alias: 'lg',\n    mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.9px)',\n    priority: 700,\n  },\n  {\n    alias: 'xl',\n    mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.9px)',\n    priority: 600,\n  },\n  {\n    alias: 'lt-sm',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 599.9px)',\n    priority: 950,\n  },\n  {\n    alias: 'lt-md',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 959.9px)',\n    priority: 850,\n  },\n  {\n    alias: 'lt-lg',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 1279.9px)',\n    priority: 750,\n  },\n  {\n    alias: 'lt-xl',\n    overlapping: true,\n    priority: 650,\n    mediaQuery: 'screen and (max-width: 1919.9px)',\n  },\n  {\n    alias: 'gt-xs',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 600px)',\n    priority: -950,\n  },\n  {\n    alias: 'gt-sm',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 960px)',\n    priority: -850,\n  }, {\n    alias: 'gt-md',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 1280px)',\n    priority: -750,\n  },\n  {\n    alias: 'gt-lg',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 1920px)',\n    priority: -650,\n  }\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from '../break-point';\n\n/* tslint:disable */\nconst HANDSET_PORTRAIT  = '(orientation: portrait) and (max-width: 599.9px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.9px)';\n\nconst TABLET_PORTRAIT   = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.9px)';\nconst TABLET_LANDSCAPE  = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.9px)';\n\nconst WEB_PORTRAIT      = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE     = '(orientation: landscape) and (min-width: 1280px)';\n\nexport const ScreenTypes = {\n  'HANDSET'           : `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET'            : `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB'               : `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n\n  'HANDSET_PORTRAIT'  : `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT'   : `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT'      : `${WEB_PORTRAIT}`,\n\n  'HANDSET_LANDSCAPE' : `${HANDSET_LANDSCAPE}`,\n  'TABLET_LANDSCAPE'  : `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE'     : `${WEB_LANDSCAPE}`\n};\n\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nexport const ORIENTATION_BREAKPOINTS : BreakPoint[] = [\n  {'alias': 'handset',            priority: 2000, 'mediaQuery': ScreenTypes.HANDSET},\n  {'alias': 'handset.landscape',  priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE},\n  {'alias': 'handset.portrait',   priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT},\n\n  {'alias': 'tablet',             priority: 2100, 'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.landscape',   priority: 2100, 'mediaQuery': ScreenTypes.TABLET_LANDSCAPE},\n  {'alias': 'tablet.portrait',    priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT},\n\n  {'alias': 'web',                priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping : true },\n  {'alias': 'web.landscape',      priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping : true },\n  {'alias': 'web.portrait',       priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping : true }\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param dest The object which will have properties copied to it.\n * @param sources The source objects from which properties will be copied.\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from './break-point';\nimport {extendObject} from '../../utils/object-extend';\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part: string) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = (part.length > 1) ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name: string): string {\n  return name\n      .replace(ALIAS_DELIMITERS, '|')\n      .split('|')\n      .map(firstUpperCase)\n      .join('');\n}\n\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nexport function validateSuffixes(list: BreakPoint[]): BreakPoint[] {\n  list.forEach((bp: BreakPoint) => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias);   // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n  return list;\n}\n\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nexport function mergeByAlias(defaults: BreakPoint[], custom: BreakPoint[] = []): BreakPoint[] {\n  const dict: {[key: string]: BreakPoint} = {};\n  defaults.forEach(bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach((bp: BreakPoint) => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n\n  return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken} from '@angular/core';\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINT} from '../tokens/breakpoint-token';\nimport {DEFAULT_BREAKPOINTS} from '../breakpoints/data/break-points';\nimport {ORIENTATION_BREAKPOINTS} from '../breakpoints/data/orientation-break-points';\nimport {mergeByAlias} from '../breakpoints/breakpoint-tools';\nimport {LAYOUT_CONFIG} from '../tokens/library-config';\n\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nexport const BREAKPOINTS =\n  new InjectionToken<BreakPoint[]>('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n      const breakpoints: any = inject(BREAKPOINT);\n      const layoutConfig = inject(LAYOUT_CONFIG);\n      const bpFlattenArray: BreakPoint[] = [].concat.apply([], (breakpoints || [])\n        .map((v: BreakPoint | BreakPoint[]) => Array.isArray(v) ? v : [v]));\n      const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n        .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n\n      return mergeByAlias(builtIns, bpFlattenArray);\n    }\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface WithPriority {\n  priority?: number;\n}\n\n/** HOF to sort the breakpoints by descending priority */\nexport function sortDescendingPriority<T extends WithPriority>(a: T | null, b: T | null): number {\n  const priorityA = a ? a.priority || 0 : 0;\n  const priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n\n/** HOF to sort the breakpoints by ascending priority */\nexport function sortAscendingPriority<T extends WithPriority>(a: T, b: T): number {\n  const pA = a.priority || 0;\n  const pB = b.priority || 0;\n  return pA - pB;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, Inject} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\nimport {sortAscendingPriority} from '../utils/sort';\n\nexport type OptionalBreakPoint = BreakPoint | null;\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\n@Injectable({providedIn: 'root'})\nexport class BreakPointRegistry {\n  readonly items: BreakPoint[];\n\n  constructor(@Inject(BREAKPOINTS) list: BreakPoint[]) {\n    this.items = [...list].sort(sortAscendingPriority);\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): OptionalBreakPoint {\n    return !alias ? null : this.findWithPredicate(alias, (bp) => bp.alias == alias);\n  }\n\n  findByQuery(query: string): OptionalBreakPoint {\n    return this.findWithPredicate(query, (bp) => bp.mediaQuery == query);\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this.items.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this.items.map(it => it.alias);\n  }\n\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes(): string[] {\n    return this.items.map(it => !!it.suffix ? it.suffix : '');\n  }\n\n  /**\n   * Memoized lookup using custom predicate function\n   */\n  private findWithPredicate(key: string,\n      searchFn: (bp: BreakPoint) => boolean): OptionalBreakPoint {\n    let response = this.findByMap.get(key);\n    if (!response) {\n      response = this.items.find(searchFn) || null;\n      this.findByMap.set(key, response);\n    }\n    return response || null;\n\n  }\n\n  /**\n   * Memoized BreakPoint Lookups\n   */\n  private readonly findByMap = new Map<String, OptionalBreakPoint>();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, OnDestroy, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\nimport {BehaviorSubject, Observable, merge, Observer} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\nimport {MediaChange} from '../media-change';\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n@Injectable({providedIn: 'root'})\nexport class MatchMedia implements OnDestroy {\n  /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n  readonly source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n  registry = new Map<string, MediaQueryList>();\n  private readonly pendingRemoveListenerFns: Array<() => void> = [];\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /**\n   * Publish list of all current activations\n   */\n  get activations(): string[] {\n    const results: string[] = [];\n    this.registry.forEach((mql: MediaQueryList, key: string) => {\n      if (mql.matches) {\n        results.push(key);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery: string): boolean {\n    const mql = this.registry.get(mediaQuery);\n    return !!mql ? mql.matches : this.registerQuery(mediaQuery).some(m => m.matches);\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   *\n   * If a mediaQuery is not specified, then ALL mediaQuery activations will\n   * be announced.\n   */\n  observe(): Observable<MediaChange>;\n  observe(mediaQueries: string[]): Observable<MediaChange>;\n  observe(mediaQueries: string[], filterOthers: boolean): Observable<MediaChange>;\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * Use deferred registration process to register breakpoints only on subscription\n   * This logic also enforces logic to register all mediaQueries BEFORE notify\n   * subscribers of notifications.\n   */\n  observe(mqList?: string[], filterOthers = false): Observable<MediaChange> {\n    if (mqList && mqList.length) {\n      const matchMedia$: Observable<MediaChange> = this._observable$.pipe(\n          filter((change: MediaChange) =>\n            !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1))\n      );\n      const registration$: Observable<MediaChange> = new Observable((observer: Observer<MediaChange>) => {  // tslint:disable-line:max-line-length\n        const matches: Array<MediaChange> = this.registerQuery(mqList);\n        if (matches.length) {\n          const lastChange = matches.pop()!;\n          matches.forEach((e: MediaChange) => {\n            observer.next(e);\n          });\n          this.source.next(lastChange); // last match is cached\n        }\n        observer.complete();\n      });\n      return merge(registration$, matchMedia$);\n    }\n\n    return this._observable$;\n  }\n\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery: string | string[]) {\n    const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n    const matches: MediaChange[] = [];\n\n    buildQueryCss(list, this._document);\n\n    list.forEach((query: string) => {\n      const onMQLEvent = (e: MediaQueryListEvent) => {\n        this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n      };\n\n      let mql = this.registry.get(query);\n      if (!mql) {\n        mql = this.buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this.pendingRemoveListenerFns.push(() => mql!.removeListener(onMQLEvent));\n        this.registry.set(query, mql);\n      }\n\n      if (mql.matches) {\n        matches.push(new MediaChange(true, query));\n      }\n    });\n\n    return matches;\n  }\n\n  ngOnDestroy(): void {\n    let fn;\n    while (fn = this.pendingRemoveListenerFns.pop()) {\n      fn();\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): MediaQueryList {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n\n  protected _observable$ = this.source.asObservable();\n}\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES: { [key: string]: any } = {};\n\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries: string[], _document: Document) {\n  const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    const query = list.join(', ');\n\n    try {\n      const styleEl = _document.createElement('style');\n\n      styleEl.setAttribute('type', 'text/css');\n      if (!(styleEl as any).styleSheet) {\n        const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n\n      _document.head!.appendChild(styleEl);\n\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction constructMql(query: string, isBrowser: boolean): MediaQueryList {\n  const canListen = isBrowser && !!(<Window>window).matchMedia('all').addListener;\n\n  return canListen ? (<Window>window).matchMedia(query) : {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {\n    },\n    removeListener: () => {\n    },\n    onchange: null,\n    addEventListener() {\n    },\n    removeEventListener() {\n    },\n    dispatchEvent() {\n      return false;\n    }\n  } as MediaQueryList;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\nimport {MatchMedia} from '../match-media';\nimport {BreakPointRegistry} from '../../breakpoints/break-point-registry';\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n@Injectable()\nexport class MockMatchMedia extends MatchMedia {\n\n\n  autoRegisterQueries = true;   // Used for testing BreakPoint registrations\n  useOverlaps = false;          // Allow fallback to overlapping mediaQueries\n\n  constructor(_zone: NgZone,\n              @Inject(PLATFORM_ID) _platformId: Object,\n              @Inject(DOCUMENT) _document: any,\n              private _breakpoints: BreakPointRegistry) {\n    super(_zone, _platformId, _document);\n  }\n\n  /** Easy method to clear all listeners for all mediaQueries */\n  clearAll() {\n    this.registry.forEach((mql: MediaQueryList) => {\n      (mql as MockMediaQueryList).destroy();\n    });\n    this.registry.clear();\n    this.useOverlaps = false;\n  }\n\n  /** Feature to support manual, simulated activation of a mediaQuery. */\n  activate(mediaQuery: string, useOverlaps = false): boolean {\n    useOverlaps = useOverlaps || this.useOverlaps;\n    mediaQuery = this._validateQuery(mediaQuery);\n\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n\n    return this.hasActivated;\n  }\n\n  /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n  _validateQuery(queryOrAlias: string) {\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n    return (bp && bp.mediaQuery) || queryOrAlias;\n  }\n\n  /**\n   * Manually onMediaChange any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   */\n  private _activateWithOverlaps(mediaQuery: string, useOverlaps: boolean): boolean {\n    if (useOverlaps) {\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n      const alias = bp ? bp.alias : 'unknown';\n\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg'   :\n          this._activateByAlias(['lt-xl']);\n          break;\n        case 'md'   :\n          this._activateByAlias(['lt-xl', 'lt-lg']);\n          break;\n        case 'sm'   :\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n          break;\n        case 'xs'   :\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n          break;\n      }\n\n      // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl'   :\n          this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'lg'   :\n          this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'md'   :\n          this._activateByAlias(['gt-sm', 'gt-xs']);\n          break;\n        case 'sm'   :\n          this._activateByAlias(['gt-xs']);\n          break;\n      }\n    }\n\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n\n  /**\n   *\n   */\n  private _activateByAlias(aliases: string[]) {\n    const activate = (alias: string) => {\n      const bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp ? bp.mediaQuery : alias);\n    };\n    aliases.forEach(activate);\n  }\n\n  /**\n   *\n   */\n  private _activateByQuery(mediaQuery: string) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this._registerMediaQuery(mediaQuery);\n    }\n    const mql: MockMediaQueryList = this.registry.get(mediaQuery) as MockMediaQueryList;\n\n    if (mql && !this.isActive(mediaQuery)) {\n      this.registry.set(mediaQuery, mql.activate());\n    }\n    return this.hasActivated;\n  }\n\n  /** Deactivate all current MQLs and reset the buffer */\n  private _deactivateAll() {\n    this.registry.forEach((it: MediaQueryList) => {\n      (it as MockMediaQueryList).deactivate();\n    });\n    return this;\n  }\n\n  /** Insure the mediaQuery is registered with MatchMedia */\n  private _registerMediaQuery(mediaQuery: string) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): MediaQueryList {\n    return new MockMediaQueryList(query);\n  }\n\n  protected get hasActivated() {\n    return this.activations.length > 0;\n  }\n\n}\n\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class MockMediaQueryList implements MediaQueryList {\n  private _isActive = false;\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string) {\n  }\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): MockMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): MockMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = listener!;\n      cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n    }\n  }\n\n  /** Don't need to remove listeners in the testing environment */\n  removeListener(_: MediaQueryListListener | null) {\n  }\n\n  addEventListener<K extends keyof MediaQueryListEventMap>(\n      _: K,\n      __: (this: MediaQueryList,\n      ev: MediaQueryListEventMap[K]) => any,\n      ___?: boolean | AddEventListenerOptions): void;\n\n  addEventListener(\n      _: string,\n      __: EventListenerOrEventListenerObject,\n      ___?: boolean | AddEventListenerOptions) {\n  }\n\n  removeEventListener<K extends keyof MediaQueryListEventMap>(\n      _: K,\n      __: (this: MediaQueryList,\n      ev: MediaQueryListEventMap[K]) => any,\n      ___?: boolean | EventListenerOptions): void;\n\n  removeEventListener(\n      _: string,\n      __: EventListenerOrEventListenerObject,\n      ___?: boolean | EventListenerOptions) {\n  }\n\n  dispatchEvent(_: Event): boolean {\n    return false;\n  }\n\n  onchange: MediaQueryListListener = null;\n}\n\n/**\n * Pre-configured provider for MockMatchMedia\n */\nexport const MockMatchMediaProvider = {  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\ntype MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\nimport {sortDescendingPriority} from '../utils/sort';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Interface to apply PrintHook to call anonymous `target.updateStyles()`\n */\nexport interface HookTarget {\n  activatedBreakpoints: BreakPoint[];\n  updateStyles(): void;\n}\n\nconst PRINT = 'print';\nexport const BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\n@Injectable({providedIn: 'root'})\nexport class PrintHook implements OnDestroy {\n  constructor(\n      protected breakpoints: BreakPointRegistry,\n      @Inject(LAYOUT_CONFIG) protected layoutConfig: LayoutConfigOptions,\n      @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /** Add 'print' mediaQuery: to listen for matchMedia activations */\n  withPrintQuery(queries: string[]): string[] {\n    return [...queries, PRINT];\n  }\n\n  /** Is the MediaChange event for any 'print' @media */\n  isPrintEvent(e: MediaChange): Boolean {\n    return e.mediaQuery.startsWith(PRINT);\n  }\n\n  /** What is the desired mqAlias to use while printing? */\n  get printAlias(): string[] {\n    return this.layoutConfig.printWithBreakpoints || [];\n  }\n\n  /** Lookup breakpoints associated with print aliases. */\n  get printBreakPoints(): BreakPoint[] {\n    return this.printAlias\n        .map(alias => this.breakpoints.findByAlias(alias))\n        .filter(bp => bp !== null) as BreakPoint[];\n  }\n\n  /** Lookup breakpoint associated with mediaQuery */\n  getEventBreakpoints({mediaQuery}: MediaChange): BreakPoint[] {\n    const bp = this.breakpoints.findByQuery(mediaQuery);\n    const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n\n    return list.sort(sortDescendingPriority);\n  }\n\n  /** Update event with printAlias mediaQuery information */\n  updateEvent(event: MediaChange): MediaChange {\n    let bp: OptionalBreakPoint = this.breakpoints.findByQuery(event.mediaQuery);\n    if (this.isPrintEvent(event)) {\n      // Reset from 'print' to first (highest priority) print breakpoint\n      bp = this.getEventBreakpoints(event)[0];\n      event.mediaQuery = bp ? bp.mediaQuery : '';\n    }\n    return mergeAlias(event, bp);\n  }\n\n\n  // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n  //  and `afterprint` event listeners.\n  private registeredBeforeAfterPrintHooks: boolean = false;\n\n  // isPrintingBeforeAfterEvent is used to track if we are printing from within\n  // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n  // form `interceptEvents` so that printing is not stopped while the dialog\n  // is still open. This is an extension of the `isPrinting` property on\n  // browsers which support `beforeprint` and `afterprint` events.\n  private isPrintingBeforeAfterEvent: boolean = false;\n\n  private beforePrintEventListeners: Function[] = [];\n  private afterPrintEventListeners: Function[] = [];\n\n  // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n  // trigger print styles synchronously and apply proper layout styles.\n  // It is a noop if the hooks have already been registered or if the document's\n  // `defaultView` is not available.\n  private registerBeforeAfterPrintHooks(target: HookTarget) {\n    // `defaultView` may be null when rendering on the server or in other contexts.\n    if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n      return;\n    }\n\n    this.registeredBeforeAfterPrintHooks = true;\n\n    const beforePrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      if (!this.isPrinting) {\n        this.isPrintingBeforeAfterEvent = true;\n        this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n        target.updateStyles();\n      }\n    };\n\n    const afterPrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      this.isPrintingBeforeAfterEvent = false;\n      if (this.isPrinting) {\n        this.stopPrinting(target);\n        target.updateStyles();\n      }\n    };\n\n    // Could we have teardown logic to remove if there are no print listeners being used?\n    this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n    this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n\n    this.beforePrintEventListeners.push(beforePrintListener);\n    this.afterPrintEventListeners.push(afterPrintListener);\n  }\n\n  /**\n   * Prepare RxJS filter operator with partial application\n   * @return pipeable filter predicate\n   */\n  interceptEvents(target: HookTarget) {\n    this.registerBeforeAfterPrintHooks(target);\n\n    return (event: MediaChange) => {\n      if (this.isPrintEvent(event)) {\n        if (event.matches && !this.isPrinting) {\n          this.startPrinting(target, this.getEventBreakpoints(event));\n          target.updateStyles();\n\n        } else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n          this.stopPrinting(target);\n          target.updateStyles();\n        }\n      } else {\n        this.collectActivations(event);\n      }\n    };\n  }\n\n  /** Stop mediaChange event propagation in event streams */\n  blockPropagation() {\n    return (event: MediaChange): boolean => {\n      return !(this.isPrinting || this.isPrintEvent(event));\n    };\n  }\n\n  /**\n   * Save current activateBreakpoints (for later restore)\n   * and substitute only the printAlias breakpoint\n   */\n  protected startPrinting(target: HookTarget, bpList: OptionalBreakPoint[]) {\n    this.isPrinting = true;\n    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n  }\n\n  /** For any print de-activations, reset the entire print queue */\n  protected stopPrinting(target: HookTarget) {\n    target.activatedBreakpoints = this.deactivations;\n    this.deactivations = [];\n    this.queue.clear();\n    this.isPrinting = false;\n  }\n\n  /**\n   * To restore pre-Print Activations, we must capture the proper\n   * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n   * is supported; so 'print' mediaQuery activations are used as a fallback\n   * in browsers without `beforeprint` support.\n   *\n   * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n   *\n   * Let's capture all de-activations using the following logic:\n   *\n   *  When not printing:\n   *    - clear cache when activating non-print breakpoint\n   *    - update cache (and sort) when deactivating\n   *\n   *  When printing:\n   *    - sort and save when starting print\n   *    - restore as activatedTargets and clear when stop printing\n   */\n  collectActivations(event: MediaChange) {\n    if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n      if (!event.matches) {\n        const bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (bp) {   // Deactivating a breakpoint\n          this.deactivations.push(bp);\n          this.deactivations.sort(sortDescendingPriority);\n        }\n      } else if (!this.isPrintingBeforeAfterEvent) {\n        // Only clear deactivations if we aren't printing from a `beforeprint` event.\n        // Otherwise this will clear before `stopPrinting()` is called to restore\n        // the pre-Print Activations.\n        this.deactivations = [];\n      }\n    }\n  }\n\n  /** Teardown logic for the service. */\n  ngOnDestroy() {\n    this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n    this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n  }\n\n  /** Is this service currently in Print-mode ? */\n  private isPrinting = false;\n  private queue: PrintQueue = new PrintQueue();\n  private deactivations: BreakPoint[] = [];\n\n}\n\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n  /** Sorted queue with prioritized print breakpoints */\n  printBreakpoints: BreakPoint[] = [];\n\n  addPrintBreakpoints(bpList: OptionalBreakPoint[]): BreakPoint[] {\n    bpList.push(BREAKPOINT_PRINT);\n    bpList.sort(sortDescendingPriority);\n    bpList.forEach(bp => this.addBreakpoint(bp));\n\n    return this.printBreakpoints;\n  }\n\n  /** Add Print breakpoint to queue */\n  addBreakpoint(bp: OptionalBreakPoint) {\n    if (!!bp) {\n      const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n      if (bpInList === undefined) {\n        // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n        // register as highest priority in the queue\n        this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n            : [...this.printBreakpoints, bp];\n      }\n    }\n  }\n\n  /** Restore original activated breakpoints and clear internal caches */\n  clear() {\n    this.printBreakpoints = [];\n  }\n}\n\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp: OptionalBreakPoint) {\n  return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, OnDestroy} from '@angular/core';\nimport {Subject, asapScheduler, Observable, of} from 'rxjs';\nimport {debounceTime, filter, map, switchMap, takeUntil} from 'rxjs/operators';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {PrintHook} from '../media-marshaller/print-hook';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\n\nimport {sortDescendingPriority} from '../utils/sort';\nimport {coerceArray} from '../utils/array';\n\n\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\n@Injectable({providedIn: 'root'})\nexport class MediaObserver implements OnDestroy {\n\n  /**\n   * @deprecated Use `asObservable()` instead.\n   * @breaking-change 8.0.0-beta.25\n   * @deletion-target 10.0.0\n   */\n  readonly media$: Observable<MediaChange>;\n\n  /** Filter MediaChange notifications for overlapping breakpoints */\n  filterOverlaps = false;\n\n  constructor(protected breakpoints: BreakPointRegistry,\n              protected matchMedia: MatchMedia,\n              protected hook: PrintHook) {\n    this._media$ = this.watchActivations();\n    this.media$ = this._media$.pipe(\n      filter((changes: MediaChange[]) => changes.length > 0),\n      map((changes: MediaChange[]) => changes[0])\n    );\n  }\n\n  /**\n   * Completes the active subject, signalling to all complete for all\n   * MediaObserver subscribers\n   */\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  // ************************************************\n  // Public Methods\n  // ************************************************\n\n  /**\n   * Observe changes to current activation 'list'\n   */\n  asObservable(): Observable<MediaChange[]> {\n    return this._media$;\n  }\n\n  /**\n   * Allow programmatic query to determine if one or more media query/alias match\n   * the current viewport size.\n   * @param value One or more media queries (or aliases) to check.\n   * @returns Whether any of the media queries match.\n   */\n  isActive(value: string | string[]): boolean {\n    const aliases = splitQueries(coerceArray(value));\n    return aliases.some(alias => {\n      const query = toMediaQuery(alias, this.breakpoints);\n      return query !== null && this.matchMedia.isActive(query);\n    });\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  private watchActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    return this.buildObservable(queries);\n  }\n\n  /**\n   * Only pass/announce activations (not de-activations)\n   *\n   * Since multiple-mediaQueries can be activation in a cycle,\n   * gather all current activations into a single list of changes to observers\n   *\n   * Inject associated (if any) alias information into the MediaChange event\n   * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n   * - Exclude print activations that do not have an associated mediaQuery\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  private buildObservable(mqList: string[]): Observable<MediaChange[]> {\n    const hasChanges = (changes: MediaChange[]) => {\n      const isValidQuery = (change: MediaChange) => (change.mediaQuery.length > 0);\n      return (changes.filter(isValidQuery).length > 0);\n    };\n    const excludeOverlaps = (changes: MediaChange[]) => {\n      return !this.filterOverlaps ? changes : changes.filter(change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return !bp ? true : !bp.overlapping;\n      });\n    };\n\n    /**\n     */\n    return this.matchMedia\n        .observe(this.hook.withPrintQuery(mqList))\n        .pipe(\n            filter((change: MediaChange) => change.matches),\n            debounceTime(0, asapScheduler),\n            switchMap(_ => of(this.findAllActivations())),\n            map(excludeOverlaps),\n            filter(hasChanges),\n            takeUntil(this.destroyed$)\n        );\n  }\n\n  /**\n   * Find all current activations and prepare single list of activations\n   * sorted by descending priority.\n   */\n  private findAllActivations(): MediaChange[] {\n    const mergeMQAlias = (change: MediaChange) => {\n      let bp: OptionalBreakPoint = this.breakpoints.findByQuery(change.mediaQuery);\n      return mergeAlias(change, bp);\n    };\n    const replaceWithPrintAlias = (change: MediaChange) => {\n      return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n    };\n\n    return this.matchMedia\n        .activations\n        .map(query => new MediaChange(true, query))\n        .map(replaceWithPrintAlias)\n        .map(mergeMQAlias)\n        .sort(sortDescendingPriority);\n  }\n\n  private readonly _media$: Observable<MediaChange[]>;\n  private readonly destroyed$ = new Subject<void>();\n}\n\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query: string, locator: BreakPointRegistry) {\n  const bp = locator.findByAlias(query) || locator.findByQuery(query);\n  return bp ? bp.mediaQuery : null;\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: string[]): string[] {\n  return queries.map((query: string) => query.split(','))\n                .reduce((a1: string[], a2: string[]) => a1.concat(a2))\n                .map(query => query.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\n\nimport {fromEvent, Subscription} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\nimport {sortDescendingPriority} from '../utils/sort';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\n\n/**\n * Class\n */\n@Injectable({providedIn: 'root'})\nexport class MediaTrigger {\n\n  constructor(\n      protected breakpoints: BreakPointRegistry,\n      protected matchMedia: MatchMedia,\n      @Inject(LAYOUT_CONFIG) protected layoutConfig: LayoutConfigOptions,\n      @Inject(PLATFORM_ID) protected _platformId: Object,\n      @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /**\n   * Manually activate range of breakpoints\n   * @param list array of mediaQuery or alias strings\n   */\n  activate(list: string[]) {\n    list = list.map(it => it.trim()); // trim queries\n\n    this.saveActivations();\n    this.deactivateAll();\n    this.setActivations(list);\n\n    this.prepareAutoRestore();\n  }\n\n  /**\n   * Restore original, 'real' breakpoints and emit events\n   * to trigger stream notification\n   */\n  restore() {\n    if (this.hasCachedRegistryMatches) {\n      const extractQuery = (change: MediaChange) => change.mediaQuery;\n      const list = this.originalActivations.map(extractQuery);\n      try {\n        this.deactivateAll();\n        this.restoreRegistryMatches();\n        this.setActivations(list);\n      } finally {\n        this.originalActivations = [];\n        if (this.resizeSubscription) {\n          this.resizeSubscription.unsubscribe();\n        }\n      }\n    }\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Whenever window resizes, immediately auto-restore original\n   * activations (if we are simulating activations)\n   */\n  private prepareAutoRestore() {\n    const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n    const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n\n    if (enableAutoRestore) {\n      const resize$ = fromEvent(window, 'resize').pipe(take(1));\n      this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n    }\n  }\n\n  /**\n   * Notify all matchMedia subscribers of de-activations\n   *\n   * Note: we must force 'matches' updates for\n   *       future matchMedia::activation lookups\n   */\n  private deactivateAll() {\n    const list = this.currentActivations;\n\n    this.forceRegistryMatches(list, false);\n    this.simulateMediaChanges(list, false);\n  }\n\n  /**\n   * Cache current activations as sorted, prioritized list of MediaChanges\n   */\n  private saveActivations() {\n    if (!this.hasCachedRegistryMatches) {\n      const toMediaChange = (query: string) => new MediaChange(true, query);\n      const mergeMQAlias = (change: MediaChange) => {\n        const bp: OptionalBreakPoint = this.breakpoints.findByQuery(change.mediaQuery);\n        return mergeAlias(change, bp);\n      };\n\n      this.originalActivations = this.currentActivations\n          .map(toMediaChange)\n          .map(mergeMQAlias)\n          .sort(sortDescendingPriority);\n\n      this.cacheRegistryMatches();\n    }\n  }\n\n  /**\n   * Force set manual activations for specified mediaQuery list\n   */\n  private setActivations(list: string[]) {\n    if (!!this.originalRegistry) {\n      this.forceRegistryMatches(list, true);\n    }\n    this.simulateMediaChanges(list);\n  }\n\n  /**\n   * For specified mediaQuery list manually simulate activations or deactivations\n   */\n  private simulateMediaChanges(queries: string[], matches = true) {\n    const toMediaQuery = (query: string) => {\n      const locator = this.breakpoints;\n      const bp = locator.findByAlias(query) || locator.findByQuery(query);\n      return bp ? bp.mediaQuery : query;\n    };\n    const emitChangeEvent = (query: string) => this.emitChangeEvent(matches, query);\n\n    queries.map(toMediaQuery).forEach(emitChangeEvent);\n  }\n\n  /**\n   * Replace current registry with simulated registry...\n   * Note: this is required since MediaQueryList::matches is 'readOnly'\n   */\n  private forceRegistryMatches(queries: string[], matches: boolean) {\n    const registry = new Map<string, MediaQueryList>();\n    queries.forEach(query => {\n      registry.set(query, {matches} as MediaQueryList);\n    });\n\n    this.matchMedia.registry = registry;\n  }\n\n  /**\n   * Save current MatchMedia::registry items.\n   */\n  private cacheRegistryMatches() {\n    const target = this.originalRegistry;\n\n    target.clear();\n    this.matchMedia.registry.forEach((value: MediaQueryList, key: string) => {\n      target.set(key, value);\n    });\n    this.hasCachedRegistryMatches = true;\n  }\n\n  /**\n   * Restore original, 'true' registry\n   */\n  private restoreRegistryMatches() {\n    const target = this.matchMedia.registry;\n\n    target.clear();\n    this.originalRegistry.forEach((value: MediaQueryList, key: string) => {\n      target.set(key, value);\n    });\n\n    this.originalRegistry.clear();\n    this.hasCachedRegistryMatches = false;\n  }\n\n  /**\n   * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n   */\n  private emitChangeEvent(matches: boolean, query: string) {\n    this.matchMedia.source.next(new MediaChange(matches, query));\n  }\n\n  private get currentActivations(): string[] {\n    return this.matchMedia.activations;\n  }\n\n  private hasCachedRegistryMatches = false;\n  private originalActivations: MediaChange[] = [];\n  private originalRegistry: Map<string, MediaQueryList> = new Map<string, MediaQueryList>();\n\n  private resizeSubscription!: Subscription;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n */\nexport function applyCssPrefixes(target: {[key: string]: any | null}) {\n  for (let key in target) {\n    let value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = [\n            '-webkit-flex',\n            'flex'\n          ];\n        } else if (value === 'inline-flex') {\n          target['display'] = [\n            '-webkit-inline-flex',\n            'inline-flex'\n          ];\n        } else {\n          target['display'] = value;\n        }\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser, isPlatformServer} from '@angular/common';\n\nimport {applyCssPrefixes} from '../../utils/auto-prefixer';\nimport {StylesheetMap} from '../stylesheet-map/stylesheet-map';\nimport {SERVER_TOKEN} from '../tokens/server-token';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\n\n@Injectable({providedIn: 'root'})\nexport class StyleUtils {\n\n  constructor(private _serverStylesheet: StylesheetMap,\n              @Inject(SERVER_TOKEN) private _serverModuleLoaded: boolean,\n              @Inject(PLATFORM_ID) private _platformId: Object,\n              @Inject(LAYOUT_CONFIG) private layoutConfig: LayoutConfigOptions) {}\n\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   */\n  applyStyleToElement(element: HTMLElement,\n                      style: StyleDefinition | string,\n                      value: string | number | null = null) {\n    let styles: StyleDefinition = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   */\n  applyStyleToElements(style: StyleDefinition, elements: HTMLElement[] = []) {\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   */\n  getFlowDirection(target: HTMLElement): [string, string] {\n    const query = 'flex-direction';\n    let value = this.lookupStyle(target, query);\n    const hasInlineValue = this.lookupInlineStyle(target, query) ||\n    (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n\n    return [value || 'row', hasInlineValue];\n  }\n\n  hasWrap(target: HTMLElement): boolean {\n    const query = 'flex-wrap';\n    return this.lookupStyle(target, query) === 'wrap';\n  }\n\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   */\n  lookupAttributeValue(element: HTMLElement, attribute: string): string {\n    return element.getAttribute(attribute) || '';\n  }\n\n  /**\n   * Find the DOM element's inline style value (if any)\n   */\n  lookupInlineStyle(element: HTMLElement, styleName: string): string {\n    return isPlatformBrowser(this._platformId) ?\n      element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n  }\n\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   */\n  lookupStyle(element: HTMLElement, styleName: string, inlineOnly = false): string {\n    let value = '';\n    if (element) {\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value ? value.trim() : '';\n  }\n\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   */\n  private _applyMultiValueStyleToElement(styles: StyleDefinition,\n                                         element: HTMLElement) {\n    Object.keys(styles).sort().forEach(key => {\n      const el = styles[key];\n      const values: (string | number | null)[] = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ?\n            element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n\n  private _setServerStyle(element: any, styleName: string, styleValue?: string|null) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const styleMap = this._readStyleAttribute(element);\n    styleMap[styleName] = styleValue || '';\n    this._writeStyleAttribute(element, styleMap);\n  }\n\n  private _getServerStyle(element: any, styleName: string): string {\n    const styleMap = this._readStyleAttribute(element);\n    return styleMap[styleName] || '';\n  }\n\n  private _readStyleAttribute(element: any): {[name: string]: string} {\n    const styleMap: {[name: string]: string} = {};\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n      const styleList = styleAttribute.split(/;+/g);\n      for (let i = 0; i < styleList.length; i++) {\n        const style = styleList[i].trim();\n        if (style.length > 0) {\n          const colonIndex = style.indexOf(':');\n          if (colonIndex === -1) {\n            throw new Error(`Invalid CSS style: ${style}`);\n          }\n          const name = style.substr(0, colonIndex).trim();\n          styleMap[name] = style.substr(colonIndex + 1).trim();\n        }\n      }\n    }\n    return styleMap;\n  }\n\n  private _writeStyleAttribute(element: any, styleMap: {[name: string]: string}) {\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n      const newValue = styleMap[key];\n      if (newValue) {\n        styleAttrValue += key + ':' + styleMap[key] + ';';\n      }\n    }\n    element.setAttribute('style', styleAttrValue);\n  }\n}\n\n/**\n * Definition of a css style. Either a property name (e.g. \"flex-basis\") or an object\n * map of property name and value (e.g. {display: 'none', flex-order: 5})\n */\nexport type StyleDefinition = { [property: string]: string | number | null };\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {StyleDefinition} from '../style-utils/style-utils';\n\n/** A class that encapsulates CSS style generation for common directives */\nexport abstract class StyleBuilder {\n\n  /** Whether to cache the generated output styles */\n  shouldCache = true;\n\n  /** Build the styles given an input string and configuration object from a host */\n  abstract buildStyles(input: string, parent?: Object): StyleDefinition;\n\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   */\n  sideEffect(_input: string, _styles: StyleDefinition, _parent?: Object) {\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n /**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n */\nexport function validateBasis(basis: string, grow = '1', shrink = '1'): string[] {\n  let parts = [grow, shrink, basis];\n\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = (matches.length === 3) ? matches : [\n          grow, shrink, basis\n        ];\n  }\n\n  return parts;\n}\n\n\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc: string): string {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {filter, tap} from 'rxjs/operators';\n\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {sortDescendingPriority} from '../utils/sort';\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\nimport {MatchMedia} from '../match-media/match-media';\nimport {MediaChange} from '../media-change';\n\nimport {PrintHook, HookTarget} from './print-hook';\nimport {mergeAlias} from '../add-alias';\n\ntype ClearCallback = () => void;\ntype UpdateCallback = (val: any) => void;\ntype Builder = UpdateCallback | ClearCallback;\n\ntype ValueMap = Map<string, string>;\ntype BreakpointMap = Map<string, ValueMap>;\ntype ElementMap = Map<HTMLElement, BreakpointMap>;\ntype ElementKeyMap = WeakMap<HTMLElement, Set<string>>;\ntype SubscriptionMap = Map<string, Subscription>;\ntype WatcherMap = WeakMap<HTMLElement, SubscriptionMap>;\ntype BuilderMap = WeakMap<HTMLElement, Map<string, Builder>>;\n\nexport interface ElementMatcher {\n  element: HTMLElement;\n  key: string;\n  value: any;\n}\n\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\n@Injectable({providedIn: 'root'})\nexport class MediaMarshaller {\n  private activatedBreakpoints: BreakPoint[] = [];\n  private elementMap: ElementMap = new Map();\n  private elementKeyMap: ElementKeyMap = new WeakMap();\n  private watcherMap: WatcherMap = new WeakMap();     // special triggers to update elements\n  private updateMap: BuilderMap = new WeakMap();      // callback functions to update styles\n  private clearMap: BuilderMap = new WeakMap();       // callback functions to clear styles\n\n  private subject: Subject<ElementMatcher> = new Subject();\n\n  get activatedAlias(): string {\n    return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n  }\n\n  constructor(protected matchMedia: MatchMedia,\n              protected breakpoints: BreakPointRegistry,\n              protected hook: PrintHook) {\n    this.observeActivations();\n  }\n\n  /**\n   * Update styles on breakpoint activates or deactivates\n   * @param mc\n   */\n  onMediaChange(mc: MediaChange) {\n    const bp: BreakPoint | null = this.findByQuery(mc.mediaQuery);\n    if (bp) {\n      mc = mergeAlias(mc, bp);\n\n      if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n        this.activatedBreakpoints.push(bp);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n\n        this.updateStyles();\n\n      } else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n        // Remove the breakpoint when it's deactivated\n        this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n\n        this.updateStyles();\n      }\n    }\n  }\n\n  /**\n   * initialize the marshaller with necessary elements for delegation on an element\n   * @param element\n   * @param key\n   * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n   * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n   * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n   */\n  init(element: HTMLElement,\n       key: string,\n       updateFn?: UpdateCallback,\n       clearFn?: ClearCallback,\n       extraTriggers: Observable<any>[] = []): void {\n\n    initBuilderMap(this.updateMap, element, key, updateFn);\n    initBuilderMap(this.clearMap, element, key, clearFn);\n\n    this.buildElementKeyMap(element, key);\n    this.watchExtraTriggers(element, key, extraTriggers);\n  }\n\n  /**\n   * get the value for an element and key and optionally a given breakpoint\n   * @param element\n   * @param key\n   * @param bp\n   */\n  getValue(element: HTMLElement, key: string, bp?: string): any {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * whether the element has values for a given key\n   * @param element\n   * @param key\n   */\n  hasValue(element: HTMLElement, key: string): boolean {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key) !== undefined || false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the value for an input on a directive\n   * @param element the element in question\n   * @param key the type of the directive (e.g. flex, layout-gap, etc)\n   * @param bp the breakpoint suffix (empty string = default)\n   * @param val the value for the breakpoint\n   */\n  setValue(element: HTMLElement, key: string, val: any, bp: string): void {\n    let bpMap: BreakpointMap | undefined = this.elementMap.get(element);\n    if (!bpMap) {\n      bpMap = new Map().set(bp, new Map().set(key, val));\n      this.elementMap.set(element, bpMap);\n    } else {\n      const values = (bpMap.get(bp) || new Map()).set(key, val);\n      bpMap.set(bp, values);\n      this.elementMap.set(element, bpMap);\n    }\n    const value = this.getValue(element, key);\n    if (value !== undefined) {\n      this.updateElement(element, key, value);\n    }\n  }\n\n  /** Track element value changes for a specific key */\n  trackValue(element: HTMLElement, key: string): Observable<ElementMatcher> {\n    return this.subject\n        .asObservable()\n        .pipe(filter(v => v.element === element && v.key === key));\n  }\n\n  /** update all styles for all elements on the current breakpoint */\n  updateStyles(): void {\n    this.elementMap.forEach((bpMap, el) => {\n      const keyMap = new Set(this.elementKeyMap.get(el)!);\n      let valueMap = this.getActivatedValues(bpMap);\n\n      if (valueMap) {\n        valueMap.forEach((v, k) => {\n          this.updateElement(el, k, v);\n          keyMap.delete(k);\n        });\n      }\n\n      keyMap.forEach(k => {\n        valueMap = this.getActivatedValues(bpMap, k);\n        if (valueMap) {\n          const value = valueMap.get(k);\n          this.updateElement(el, k, value);\n        } else {\n          this.clearElement(el, k);\n        }\n      });\n\n    });\n  }\n\n  /**\n   * clear the styles for a given element\n   * @param element\n   * @param key\n   */\n  clearElement(element: HTMLElement, key: string): void {\n    const builders = this.clearMap.get(element);\n    if (builders) {\n      const clearFn: ClearCallback = builders.get(key) as ClearCallback;\n      if (!!clearFn) {\n        clearFn();\n        this.subject.next({element, key, value: ''});\n      }\n    }\n  }\n\n  /**\n   * update a given element with the activated values for a given key\n   * @param element\n   * @param key\n   * @param value\n   */\n  updateElement(element: HTMLElement, key: string, value: any): void {\n    const builders = this.updateMap.get(element);\n    if (builders) {\n      const updateFn: UpdateCallback = builders.get(key) as UpdateCallback;\n      if (!!updateFn) {\n        updateFn(value);\n        this.subject.next({element, key, value});\n      }\n    }\n  }\n\n  /**\n   * release all references to a given element\n   * @param element\n   */\n  releaseElement(element: HTMLElement): void {\n    const watcherMap = this.watcherMap.get(element);\n    if (watcherMap) {\n      watcherMap.forEach(s => s.unsubscribe());\n      this.watcherMap.delete(element);\n    }\n    const elementMap = this.elementMap.get(element);\n    if (elementMap) {\n      elementMap.forEach((_, s) => elementMap.delete(s));\n      this.elementMap.delete(element);\n    }\n  }\n\n  /**\n   * trigger an update for a given element and key (e.g. layout)\n   * @param element\n   * @param key\n   */\n  triggerUpdate(element: HTMLElement, key?: string): void {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const valueMap = this.getActivatedValues(bpMap, key);\n      if (valueMap) {\n        if (key) {\n          this.updateElement(element, key, valueMap.get(key));\n        } else {\n          valueMap.forEach((v, k) => this.updateElement(element, k, v));\n        }\n      }\n    }\n  }\n\n  /** Cross-reference for HTMLElement with directive key */\n  private buildElementKeyMap(element: HTMLElement, key: string) {\n    let keyMap = this.elementKeyMap.get(element);\n    if (!keyMap) {\n      keyMap = new Set();\n      this.elementKeyMap.set(element, keyMap);\n    }\n    keyMap.add(key);\n  }\n\n  /**\n   * Other triggers that should force style updates:\n   * - directionality\n   * - layout changes\n   * - mutationobserver updates\n   */\n  private watchExtraTriggers(element: HTMLElement,\n                             key: string,\n                             triggers: Observable<any>[]) {\n    if (triggers && triggers.length) {\n      let watchers = this.watcherMap.get(element);\n      if (!watchers) {\n        watchers = new Map();\n        this.watcherMap.set(element, watchers);\n      }\n      const subscription = watchers.get(key);\n      if (!subscription) {\n        const newSubscription = merge(...triggers).subscribe(() => {\n          const currentValue = this.getValue(element, key);\n          this.updateElement(element, key, currentValue);\n        });\n        watchers.set(key, newSubscription);\n      }\n    }\n  }\n\n  /** Breakpoint locator by mediaQuery */\n  private findByQuery(query: string) {\n    return this.breakpoints.findByQuery(query);\n  }\n\n  /**\n   * get the fallback breakpoint for a given element, starting with the current breakpoint\n   * @param bpMap\n   * @param key\n   */\n  private getActivatedValues(bpMap: BreakpointMap, key?: string): ValueMap | undefined {\n    for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n      const activatedBp = this.activatedBreakpoints[i];\n      const valueMap = bpMap.get(activatedBp.alias);\n      if (valueMap) {\n        if (key === undefined || (valueMap.has(key) && valueMap.get(key) != null)) {\n          return valueMap;\n        }\n      }\n    }\n    const lastHope = bpMap.get('');\n    return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n  }\n\n  /**\n   * Watch for mediaQuery breakpoint activations\n   */\n  private observeActivations() {\n    const target = this as unknown as HookTarget;\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n\n    this.matchMedia\n        .observe(this.hook.withPrintQuery(queries))\n        .pipe(\n            tap(this.hook.interceptEvents(target)),\n            filter(this.hook.blockPropagation())\n        )\n        .subscribe(this.onMediaChange.bind(this));\n  }\n\n}\n\nfunction initBuilderMap(map: BuilderMap,\n                        element: HTMLElement,\n                        key: string,\n                        input?: UpdateCallback | ClearCallback): void {\n  if (input !== undefined) {\n    let oldMap = map.get(element);\n    if (!oldMap) {\n      oldMap = new Map();\n      map.set(element, oldMap);\n    }\n    oldMap.set(key, input);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}