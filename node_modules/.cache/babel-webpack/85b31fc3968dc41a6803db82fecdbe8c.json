{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter } from 'tslib';\nimport { isDevMode, Injectable, ɵɵdefineInjectable, ɵɵinject, Component, NgModule, APP_INITIALIZER } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Subject, throwError } from 'rxjs';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { map, catchError } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/util.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/router';\n\nvar UtilService = /*@__PURE__*/function () {\n  var UtilService = /*#__PURE__*/function () {\n    function UtilService() {\n      _classCallCheck(this, UtilService);\n\n      this.platformType = this.checkPlatformType();\n      this.getEnvironment();\n    }\n    /**\n     * Returns 'mobile' or 'browser' based on the platform\n     * @return {?}\n     */\n\n\n    _createClass(UtilService, [{\n      key: \"getPlatformType\",\n      value: function getPlatformType() {\n        return this.platformType;\n      }\n      /**\n       * Returns env from neutrinos seed app\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"getEnvironment\",\n      value: function getEnvironment() {\n        if (window['neutrinos'] && window['neutrinos']['environments'] && window['neutrinos']['environments']['properties']) {\n          // Break the refernce\n          this.environment = JSON.parse(JSON.stringify(window['neutrinos']['environments']['properties'])); // Append the url with / if ssdUrl does not end with /\n\n          if (this.environment['ssdURL']) {\n            this.environment['ssdURL'] = this.environment['ssdURL'].endsWith('/') ? this.environment['ssdURL'] : this.environment['ssdURL'] + '/';\n          }\n\n          return;\n        }\n        /*For dev env only */\n\n\n        this.environment = {\n          ssdURL: 'http://localhost:8081/api/',\n          useDefaultExceptionUI: true,\n          isIDSEnabled: 'true',\n          webAppMountpoint: '',\n          production: true\n        };\n      }\n      /**\n       * Returns 'mobile' or 'browser' based on the platform\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"checkPlatformType\",\n      value: function checkPlatformType() {\n        // tslint:disable-next-line: no-string-literal\n        if (window['device'] && (window['device']['platform'] !== 'browser' || window['device']['platform'] !== 'Browser')) {\n          return 'mobile'; // tslint:disable-next-line: no-string-literal\n        } else if (window['device'] && (window['device']['platform'] === 'browser' || window['device']['platform'] === 'Browser')) {\n          return 'cordova_browser';\n        } else {\n          return 'browser';\n        }\n      }\n      /*URL helper methods */\n\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getBaseLoginPath\",\n      value: function getBaseLoginPath() {\n        return \"\".concat(this.environment.ssdURL, \"login\");\n      }\n      /**\n       * @param {?} redirectTo\n       * @return {?}\n       */\n\n    }, {\n      key: \"getWebLoginUrl\",\n      value: function getWebLoginUrl(redirectTo) {\n        redirectTo = this.calcRedirectUrl(redirectTo);\n        return \"\".concat(this.getBaseLoginPath(), \"?redirectTo=\").concat(redirectTo);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getMobileLoginUrl\",\n      value: function getMobileLoginUrl() {\n        return \"\".concat(this.getBaseLoginPath(), \"?isMobile=true\");\n      }\n      /**\n       * @param {?} redirectTo\n       * @return {?}\n       */\n\n    }, {\n      key: \"getWebLogoutUrl\",\n      value: function getWebLogoutUrl(redirectTo) {\n        redirectTo = this.calcRedirectUrl(redirectTo);\n        return \"\".concat(this.environment.ssdURL, \"logout?redirectTo=\").concat(redirectTo);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getMobileLogoutUrl\",\n      value: function getMobileLogoutUrl() {\n        return \"\".concat(this.environment.ssdURL, \"logout?isMobile=true\");\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getUserInfoUrl\",\n      value: function getUserInfoUrl() {\n        return \"\".concat(this.environment.ssdURL, \"user/info\");\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getSSDBasePath\",\n      value: function getSSDBasePath() {\n        return \"\".concat(this.environment.ssdURL);\n      }\n      /**\n       *  Returns a absoulte url for the urlPath\n       * @private\n       * @param {?} urlPath - path relative to the current host\n       * @return {?}\n       */\n\n    }, {\n      key: \"calcRedirectUrl\",\n      value: function calcRedirectUrl(urlPath) {\n        if (urlPath) {\n          /** @type {?} */\n          var host = new URL(window.location.href).origin;\n\n          if (!isDevMode()) {\n            // Append `webAppMountpoint` to host\n            host = this.environment.webAppMountpoint !== '' && this.environment.webAppMountpoint !== '/' ? new URL(this.environment.webAppMountpoint, host).href : host; // Get user redirect path with `webAppMountpoint`\n\n            /** @type {?} */\n\n            var mountPointWithRedirect = new URL(urlPath, host).pathname;\n            return host + mountPointWithRedirect;\n          } else {\n            return new URL(urlPath, host);\n          }\n        } else {\n          return window.location.href;\n        }\n      }\n      /**\n       *\n       * @param {?} property - environment property key\n       * @return {?}\n       */\n\n    }, {\n      key: \"getEnvValue\",\n      value: function getEnvValue(property) {\n        return this.environment[property];\n      }\n    }]);\n\n    return UtilService;\n  }();\n\n  UtilService.ɵfac = function UtilService_Factory(t) {\n    return new (t || UtilService)();\n  };\n  /** @nocollapse */\n\n\n  UtilService.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function UtilService_Factory() {\n      return new UtilService();\n    },\n    token: UtilService,\n    providedIn: \"root\"\n  });\n  return UtilService;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  UtilService.prototype.platformType;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  UtilService.prototype.environment;\n}\n\nvar NeutrinosOAuthClientService = /*@__PURE__*/function () {\n  var NeutrinosOAuthClientService = /*#__PURE__*/function () {\n    /**\n     * @param {?} util\n     * @param {?} http\n     */\n    function NeutrinosOAuthClientService(util, http) {\n      _classCallCheck(this, NeutrinosOAuthClientService);\n\n      this.util = util;\n      this.http = http;\n      this.cookieName = 'connect.sid';\n      this.authStateSubject = new Subject();\n    }\n    /**\n     * Get user info and tokens of the current logged in user\n     * @return {?}\n     */\n\n\n    _createClass(NeutrinosOAuthClientService, [{\n      key: \"userInfo\",\n      get: function get() {\n        return this.currentUserInfo;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"isLoggedIn\",\n      get: function get() {\n        return this.currentUserInfo ? true : false;\n      }\n      /**\n       * @private\n       * @param {?} userInfo\n       * @return {?}\n       */\n\n    }, {\n      key: \"setUserInfo\",\n      value: function setUserInfo(userInfo) {\n        this.currentUserInfo = userInfo;\n      }\n      /**\n       * Performs authentication based on configuration and returns user info for mobile env and\n       * for web app user info is stored in memory. Call userInfo getter method to retrieve userinfo\n       * @param {?=} redirectBackUrl - url to redirect back to when authentication is done. Valid only for Web.\n       * For mobile use the Promise returned to perform post authentication actions\n       * @return {?}\n       */\n\n    }, {\n      key: \"login\",\n      value: function login(redirectBackUrl) {\n        var _this = this;\n\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @param {?} reject\n        * @return {?}\n        */\n        function (resolve, reject) {\n          if (_this.util.getEnvValue('isIDSEnabled') === 'false') {\n            return reject({\n              message: 'IDS is not enabled in environments'\n            });\n          }\n\n          if (_this.util.getPlatformType() === 'browser') {\n            _this.loginWithRedirect(redirectBackUrl);\n\n            return;\n          }\n\n          _this.loginWithInAppBrowser().then(\n          /**\n          * @param {?} tokenset\n          * @return {?}\n          */\n\n          /**\n          * @param {?} tokenset\n          * @return {?}\n          */\n          function (tokenset) {\n            return resolve(tokenset);\n          }).catch(\n          /**\n          * @param {?} authError\n          * @return {?}\n          */\n\n          /**\n          * @param {?} authError\n          * @return {?}\n          */\n          function (authError) {\n            return reject(authError);\n          });\n        });\n      }\n      /**\n       *\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"loginWithInAppBrowser\",\n      value: function loginWithInAppBrowser() {\n        var _this2 = this;\n\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @param {?} reject\n        * @return {?}\n        */\n        function (resolve, reject) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var _this3 = this;\n\n            var scriptURLS, script, inAppBrowserRef, executeScriptCB, exitCB;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    /** @type {?} */\n                    scriptURLS = ['/interaction/', '/auth-provider/return']; // execute JS only for this urls\n\n                    /** @type {?} */\n\n                    _context.next = 3;\n                    return this.getScript();\n\n                  case 3:\n                    script = _context.sent;\n                    // Get JS which stores guid and device details in local storage of webview\n\n                    /** @type {?} */\n                    inAppBrowserRef = cordova.InAppBrowser.open(this.util.getMobileLoginUrl(), '_blank');\n                    /** @type {?} */\n\n                    executeScriptCB =\n                    /**\n                    * @param {?} event\n                    * @return {?}\n                    */\n                    function executeScriptCB(event) {\n                      if (event && event.hasOwnProperty('type') && event.hasOwnProperty('url') && event.type === 'loadstop' && _this3.isURLMatch(event.url, scriptURLS)) {\n                        inAppBrowserRef.executeScript({\n                          code: script\n                        },\n                        /**\n                        * @return {?}\n                        */\n                        function () {});\n                      }\n                    };\n\n                    inAppBrowserRef.addEventListener('loadstop', executeScriptCB);\n                    /** @type {?} */\n\n                    exitCB =\n                    /**\n                    * @return {?}\n                    */\n                    function exitCB() {\n                      return reject({\n                        code: 'auth-cancel',\n                        message: 'Authentication cancelled by user'\n                      });\n                    };\n\n                    inAppBrowserRef.addEventListener('message',\n                    /**\n                    * @param {?} message\n                    * @return {?}\n                    */\n                    function (message) {\n                      if (message && message.data && message.data.auth && message.data.auth === 'success') {\n                        inAppBrowserRef.removeEventListener('exit', exitCB);\n                        inAppBrowserRef.close();\n\n                        _this3.getUserInfo().then(\n                        /**\n                        * @param {?} tokenset\n                        * @return {?}\n                        */\n\n                        /**\n                        * @param {?} tokenset\n                        * @return {?}\n                        */\n                        function (tokenset) {\n                          return resolve(tokenset);\n                        }).catch(\n                        /**\n                        * @param {?} authErr\n                        * @return {?}\n                        */\n\n                        /**\n                        * @param {?} authErr\n                        * @return {?}\n                        */\n                        function (authErr) {\n                          return reject(authErr);\n                        });\n                      }\n                    }); // settle the promise if user closed the in app browser manually\n\n                    inAppBrowserRef.addEventListener('exit', exitCB);\n\n                  case 10:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this);\n          }));\n        });\n      }\n      /**\n       * @private\n       * @param {?} url\n       * @param {?} compareWith\n       * @return {?}\n       */\n\n    }, {\n      key: \"isURLMatch\",\n      value: function isURLMatch(url, compareWith) {\n        return compareWith.some(\n        /**\n        * @param {?} u\n        * @return {?}\n        */\n\n        /**\n        * @param {?} u\n        * @return {?}\n        */\n        function (u) {\n          return url.includes(u);\n        });\n      }\n      /**\n       * Returns JS as a string to be executed in inAppBrowser which sets guid and device details in localStorage\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"getScript\",\n      value: function getScript() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var deviceDetails, guid, guidScript, script;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  /** @type {?} */\n                  deviceDetails = JSON.stringify(window['device']) || {};\n                  /** @type {?} */\n\n                  _context2.next = 3;\n                  return this.getuniqueDeviceID();\n\n                case 3:\n                  guid = _context2.sent;\n\n                  /** @type {?} */\n                  guidScript = guid ? \"localStorage.setItem('guid', '\".concat(guid, \"')\") : '';\n                  /** @type {?} */\n\n                  script = \"\".concat(guidScript, \"\\n          localStorage.setItem('additionalInfo', '\").concat(deviceDetails, \"')\\n          window.isScriptExecuted = true;\");\n                  return _context2.abrupt(\"return\", script);\n\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }\n      /**\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"getuniqueDeviceID\",\n      value: function getuniqueDeviceID() {\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @param {?} reject\n        * @return {?}\n        */\n        function (resolve, reject) {\n          window['plugins'].uniqueDeviceID.get(\n          /**\n          * @param {?} guid\n          * @return {?}\n          */\n          function (guid) {\n            return resolve(guid);\n          },\n          /**\n          * @param {?} error\n          * @return {?}\n          */\n\n          /**\n          * @param {?} error\n          * @return {?}\n          */\n          function (error) {\n            return resolve(null);\n          });\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getUserInfo\",\n      value: function getUserInfo() {\n        var _this4 = this;\n\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @param {?} reject\n        * @return {?}\n        */\n        function (resolve, reject) {\n          /** @type {?} */\n          var headers = new HttpHeaders();\n          /*Edge case: Userinfo is retreived from cache when login page is opened and user cancels the login attempt  */\n\n          headers = headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n          headers = headers.set('Pragma', 'no-cache');\n          headers = headers.set('Expires', '0');\n\n          _this4.http.get(_this4.util.getUserInfoUrl(), {\n            headers: headers\n          }).subscribe(\n          /**\n          * @param {?} tokenset\n          * @return {?}\n          */\n\n          /**\n          * @param {?} tokenset\n          * @return {?}\n          */\n          function (tokenset) {\n            _this4.setUserInfo(tokenset);\n\n            return resolve(tokenset);\n          },\n          /**\n          * @param {?} error\n          * @return {?}\n          */\n\n          /**\n          * @param {?} error\n          * @return {?}\n          */\n          function (error) {\n            _this4.destroyClientSession();\n\n            return reject(error);\n          });\n        });\n      }\n      /*If SSD throws 401 during any http request due to refresh token expiry, cookie expiry or access revoke nullify the userinfo in memory\n        and emit authState event  */\n\n      /**\n       * @param {?} errorResponse\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeUserInfo\",\n      value: function removeUserInfo(errorResponse) {\n        this.destroyClientSession();\n        this.authStateSubject.next(errorResponse);\n      }\n      /**\n       * Returns event when Auth state has changed due to session expiry, access revoke or cookie expiry.\n       * @return {?}\n       */\n\n    }, {\n      key: \"authState\",\n      value: function authState() {\n        return this.authStateSubject.asObservable();\n      }\n      /**\n       * @private\n       * @param {?} redirectBackUrl\n       * @return {?}\n       */\n\n    }, {\n      key: \"loginWithRedirect\",\n      value: function loginWithRedirect(redirectBackUrl) {\n        window.location.href = this.util.getWebLoginUrl(redirectBackUrl);\n      }\n      /**\n       * Restores the connect.sid cookie from session storage during app bootstrap if device is mobile\n       * @return {?}\n       */\n\n    }, {\n      key: \"restoreCookies\",\n      value: function restoreCookies() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          var _this5 = this;\n\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return this.getCookie(this.cookieName, this.util.getSSDBasePath()).then(\n                  /**\n                  * @param {?} connectSid\n                  * @return {?}\n                  */\n                  function (connectSid) {\n                    return __awaiter(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.next = 2;\n                              return this.setCookie(this.util.getSSDBasePath(), this.cookieName, connectSid);\n\n                            case 2:\n                              return _context3.abrupt(\"return\", _context3.sent);\n\n                            case 3:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3, this);\n                    }));\n                  }).catch(\n                  /**\n                  * @param {?} error\n                  * @return {?}\n                  */\n                  function (error) {\n                    return false;\n                  });\n\n                case 2:\n                  return _context4.abrupt(\"return\", _context4.sent);\n\n                case 3:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n      }\n      /**\n       *\n       * @private\n       * @param {?} url - site where the cookie is stored\n       * @param {?} cookieName - name of the cookie to restore\n       * @param {?} cookieValue - value of the cookie to restore\n       * @return {?}\n       */\n\n    }, {\n      key: \"setCookie\",\n      value: function setCookie(url, cookieName, cookieValue) {\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @param {?} reject\n        * @return {?}\n        */\n        function (resolve, reject) {\n          cookieMaster.setCookieValue(url, cookieName, cookieValue,\n          /**\n          * @return {?}\n          */\n          function () {\n            return resolve(true);\n          },\n          /**\n          * @param {?} error\n          * @return {?}\n          */\n          function (error) {\n            return reject(false);\n          });\n        });\n      }\n      /**\n       *\n       * @private\n       * @param {?} cookieName          name of the cookie to retrieve\n       * @param {?} fullCookieString    String containing all the cookies from an url\n       * @return {?}\n       */\n\n    }, {\n      key: \"readCookieValueFromCookieString\",\n      value: function readCookieValueFromCookieString(cookieName, fullCookieString) {\n        /** @type {?} */\n        var cookieNameWithEqualsSign = cookieName + \"=\";\n        /** @type {?} */\n\n        var cookieArray = fullCookieString.split(';');\n\n        for (var i = 0; i < cookieArray.length; i++) {\n          /** @type {?} */\n          var cookie = cookieArray[i]; // Remove unnecessary leading spaces from cookie\n\n          while (cookie.charAt(0) == ' ') {\n            cookie = cookie.substring(1, cookie.length);\n          } // Retrieve and return cookie value\n\n\n          if (cookie.indexOf(cookieNameWithEqualsSign) == 0) {\n            return cookie.substring(cookieNameWithEqualsSign.length, cookie.length);\n          }\n        }\n\n        return null;\n      }\n      /**\n       *\n       * @private\n       * @param {?} cookieName - name of the cookie to retrieve\n       * @param {?} url - site where the cookie is stored\n       * @return {?}\n       */\n\n    }, {\n      key: \"getCookie\",\n      value: function getCookie(cookieName, url) {\n        var _this6 = this;\n\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @param {?} reject\n        * @return {?}\n        */\n        function (resolve, reject) {\n          window['cordova'].plugins.CookiesPlugin.getCookie(url,\n          /**\n          * @param {?} cookies\n          * @return {?}\n          */\n          function (cookies) {\n            /** @type {?} */\n            var cookieValue = _this6.readCookieValueFromCookieString(cookieName, cookies);\n\n            if (cookieValue) {\n              return resolve(cookieValue);\n            } else {\n              return reject(\"cookie value null\");\n            }\n          },\n          /**\n          * @param {?} error\n          * @return {?}\n          */\n          function (error) {\n            return reject(error);\n          });\n        });\n      }\n      /**\n       * Logout the current user, destroys session between client and server.\n       * @param {?=} redirectBackUrl - URL where the user is navigated post logout. Valid only for Web.\n       * For mobile use the Promise returned to perform post authentication actions\n       * @return {?}\n       */\n\n    }, {\n      key: \"logout\",\n      value: function logout(redirectBackUrl) {\n        var _this7 = this;\n\n        /** @type {?} */\n        var logoutUrl = this.util.getPlatformType() === 'browser' ? this.util.getWebLogoutUrl(redirectBackUrl) : this.util.getMobileLogoutUrl();\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @param {?} reject\n        * @return {?}\n        */\n        function (resolve, reject) {\n          _this7.http.get(logoutUrl).subscribe(\n          /**\n          * @param {?} idsLogoutInfo\n          * @return {?}\n          */\n\n          /**\n          * @param {?} idsLogoutInfo\n          * @return {?}\n          */\n          function (idsLogoutInfo) {\n            _this7.destroyIDSSession(idsLogoutInfo).then(\n            /**\n            * @return {?}\n            */\n            function () {\n              return resolve();\n            }).catch(\n            /**\n            * @param {?} logoutErr\n            * @return {?}\n            */\n\n            /**\n            * @param {?} logoutErr\n            * @return {?}\n            */\n            function (logoutErr) {\n              return reject(logoutErr);\n            });\n          },\n          /**\n          * @param {?} logoutError\n          * @return {?}\n          */\n\n          /**\n          * @param {?} logoutError\n          * @return {?}\n          */\n          function (logoutError) {\n            return reject(logoutError);\n          });\n        });\n      }\n      /**\n       * @private\n       * @param {?} idsInfo\n       * @return {?}\n       */\n\n    }, {\n      key: \"destroyIDSSession\",\n      value: function destroyIDSSession(idsInfo) {\n        var _this8 = this;\n\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @param {?} reject\n        * @return {?}\n        */\n        function (resolve, reject) {\n          if (idsInfo['sessionExists'] === false) {\n            // No session present with SSD due to cookie expiry\n            _this8.destroyClientSession();\n\n            _this8.authStateSubject.next({\n              code: 'NO_SESSION',\n              message: 'User session has already expired'\n            });\n\n            return resolve();\n          }\n\n          if (_this8.util.getPlatformType() === 'browser') {\n            window.location.href = idsInfo['idsURL'];\n          } else {\n            _this8.logoutWithInappBrowser(idsInfo['idsURL']).then(\n            /**\n            * @return {?}\n            */\n            function () {\n              return resolve();\n            }).catch(\n            /**\n            * @param {?} sessionError\n            * @return {?}\n            */\n\n            /**\n            * @param {?} sessionError\n            * @return {?}\n            */\n            function (sessionError) {\n              return reject(sessionError);\n            });\n          }\n        });\n      }\n      /**\n       *\n       * @private\n       * @param {?} idsLogoutUrl - IDS logout url\n       * Opens InApp browser and destroys the session\n       * @return {?}\n       */\n\n    }, {\n      key: \"logoutWithInappBrowser\",\n      value: function logoutWithInappBrowser(idsLogoutUrl) {\n        var _this9 = this;\n\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @param {?} reject\n        * @return {?}\n        */\n        function (resolve, reject) {\n          /** @type {?} */\n          var exitCB =\n          /**\n          * @return {?}\n          */\n          function exitCB() {\n            return reject({\n              code: 'auth-cancel',\n              message: 'Authentication cancelled by user'\n            });\n          };\n          /** @type {?} */\n\n\n          var inAppBrowserRef = cordova.InAppBrowser.open(idsLogoutUrl, '_blank');\n          inAppBrowserRef.addEventListener('message',\n          /**\n          * @param {?} message\n          * @return {?}\n          */\n          function (message) {\n            // Remove exit listener if script closed the in app browser\n            if (message && message.data && message.data.auth && message.data.auth === 'success') {\n              inAppBrowserRef.removeEventListener('exit', exitCB);\n              inAppBrowserRef.close();\n\n              _this9.destroyClientSession();\n\n              return resolve();\n            }\n          }); // settle the promise if user closed the in app browser manually\n\n          inAppBrowserRef.addEventListener('exit', exitCB);\n        });\n      }\n      /*Remove persisted cookies in local storage and nullify user info */\n\n      /**\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"destroyClientSession\",\n      value: function destroyClientSession() {\n        this.setUserInfo(null);\n      }\n    }]);\n\n    return NeutrinosOAuthClientService;\n  }();\n\n  NeutrinosOAuthClientService.ɵfac = function NeutrinosOAuthClientService_Factory(t) {\n    return new (t || NeutrinosOAuthClientService)(ɵngcc0.ɵɵinject(UtilService), ɵngcc0.ɵɵinject(ɵngcc1.HttpClient));\n  };\n  /** @nocollapse */\n\n\n  NeutrinosOAuthClientService.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function NeutrinosOAuthClientService_Factory() {\n      return new NeutrinosOAuthClientService(ɵɵinject(UtilService), ɵɵinject(HttpClient));\n    },\n    token: NeutrinosOAuthClientService,\n    providedIn: \"root\"\n  });\n  return NeutrinosOAuthClientService;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  NeutrinosOAuthClientService.prototype.cookieName;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosOAuthClientService.prototype.currentUserInfo;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosOAuthClientService.prototype.authStateSubject;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosOAuthClientService.prototype.util;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosOAuthClientService.prototype.http;\n}\n\nvar NeutrinosAuthGuardService = /*@__PURE__*/function () {\n  var NeutrinosAuthGuardService = /*#__PURE__*/function () {\n    /**\n     * @param {?} _neutrinosOAuthClientService\n     * @param {?} _router\n     * @param {?} _arouter\n     */\n    function NeutrinosAuthGuardService(_neutrinosOAuthClientService, _router, _arouter) {\n      _classCallCheck(this, NeutrinosAuthGuardService);\n\n      this._neutrinosOAuthClientService = _neutrinosOAuthClientService;\n      this._router = _router;\n      this._arouter = _arouter;\n    }\n    /**\n     * @param {?} route\n     * @param {?} state\n     * @return {?}\n     */\n\n\n    _createClass(NeutrinosAuthGuardService, [{\n      key: \"canActivate\",\n      value: function canActivate(route, state) {\n        var _this10 = this;\n\n        return new Promise(\n        /**\n        * @param {?} resolve\n        * @param {?} reject\n        * @return {?}\n        */\n        function (resolve, reject) {\n          _this10.currUrl = state.url;\n\n          if (_this10._neutrinosOAuthClientService.isLoggedIn) {\n            return resolve(true);\n          } else {\n            _this10._neutrinosOAuthClientService.login().then(\n            /**\n            * @param {?} tokenSet\n            * @return {?}\n            */\n\n            /**\n            * @param {?} tokenSet\n            * @return {?}\n            */\n            function (tokenSet) {\n              _this10._router.navigate([_this10.currUrl]);\n\n              return resolve(true);\n            }).catch(\n            /**\n            * @param {?} err\n            * @return {?}\n            */\n\n            /**\n            * @param {?} err\n            * @return {?}\n            */\n            function (err) {\n              console.error(err);\n\n              if (err && err.code == 'auth-cancel') {\n                // Added setTimeout for reloading the current route\n                setTimeout(\n                /**\n                * @return {?}\n                */\n                function () {\n                  _this10._router.navigateByUrl(_this10.currUrl, {\n                    skipLocationChange: true\n                  }).then(\n                  /**\n                  * @return {?}\n                  */\n                  function () {\n                    return resolve(false);\n                  });\n                }, 500);\n              } else {\n                return resolve(false);\n              }\n            });\n          }\n        });\n      }\n    }]);\n\n    return NeutrinosAuthGuardService;\n  }();\n\n  NeutrinosAuthGuardService.ɵfac = function NeutrinosAuthGuardService_Factory(t) {\n    return new (t || NeutrinosAuthGuardService)(ɵngcc0.ɵɵinject(NeutrinosOAuthClientService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc2.ActivatedRoute));\n  };\n  /** @nocollapse */\n\n\n  NeutrinosAuthGuardService.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function NeutrinosAuthGuardService_Factory() {\n      return new NeutrinosAuthGuardService(ɵɵinject(NeutrinosOAuthClientService), ɵɵinject(Router), ɵɵinject(ActivatedRoute));\n    },\n    token: NeutrinosAuthGuardService,\n    providedIn: \"root\"\n  });\n  return NeutrinosAuthGuardService;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  NeutrinosAuthGuardService.prototype.currUrl;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosAuthGuardService.prototype._neutrinosOAuthClientService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosAuthGuardService.prototype._router;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosAuthGuardService.prototype._arouter;\n}\n\nvar NeutrinosOauthComponent = /*@__PURE__*/function () {\n  var NeutrinosOauthComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?} neutrinosOauthService\n     * @param {?} http\n     */\n    function NeutrinosOauthComponent(neutrinosOauthService, http) {\n      _classCallCheck(this, NeutrinosOauthComponent);\n\n      this.neutrinosOauthService = neutrinosOauthService;\n      this.http = http;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(NeutrinosOauthComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.neutrinosOauthService.authState().subscribe(\n        /**\n        * @param {?} state\n        * @return {?}\n        */\n\n        /**\n        * @param {?} state\n        * @return {?}\n        */\n        function (state) {\n          console.log(state);\n        });\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"login\",\n      value: function login() {\n        /** @type {?} */\n        var a = this.neutrinosOauthService.login('/i-am-loggedin').then(\n        /**\n        * @param {?} tokens\n        * @return {?}\n        */\n\n        /**\n        * @param {?} tokens\n        * @return {?}\n        */\n        function (tokens) {\n          console.log('got tokens in component', tokens);\n        }).catch(\n        /**\n        * @param {?} e\n        * @return {?}\n        */\n\n        /**\n        * @param {?} e\n        * @return {?}\n        */\n        function (e) {\n          console.error(e);\n        }); // console.log(a);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"token\",\n      value: function token() {\n        this.neutrinosOauthService.getUserInfo().then(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        function (t) {\n          console.log('t', t);\n        }).catch(console.log);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"logout\",\n      value: function logout() {\n        this.neutrinosOauthService.logout();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"userinfo\",\n      value: function userinfo() {\n        alert(JSON.stringify(this.neutrinosOauthService.userInfo));\n        console.log(this.neutrinosOauthService.userInfo);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"httpTest\",\n      value: function httpTest() {\n        this.http.get('http://localhost:8081/api/ping').subscribe(\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        function (res) {\n          console.log(res);\n        },\n        /**\n        * @param {?} e\n        * @return {?}\n        */\n\n        /**\n        * @param {?} e\n        * @return {?}\n        */\n        function (e) {\n          console.error(e);\n        });\n      }\n    }]);\n\n    return NeutrinosOauthComponent;\n  }();\n\n  NeutrinosOauthComponent.ɵfac = function NeutrinosOauthComponent_Factory(t) {\n    return new (t || NeutrinosOauthComponent)(ɵngcc0.ɵɵdirectiveInject(NeutrinosOAuthClientService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HttpClient));\n  };\n\n  NeutrinosOauthComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NeutrinosOauthComponent,\n    selectors: [[\"lib-neutrinos-oauth\"]],\n    decls: 11,\n    vars: 0,\n    consts: [[3, \"click\"]],\n    template: function NeutrinosOauthComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \" NOTE: use this component only for testing. Not intended for production \");\n        ɵngcc0.ɵɵelementStart(1, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function NeutrinosOauthComponent_Template_button_click_1_listener() {\n          return ctx.login();\n        });\n        ɵngcc0.ɵɵtext(2, \" Login \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function NeutrinosOauthComponent_Template_button_click_3_listener() {\n          return ctx.token();\n        });\n        ɵngcc0.ɵɵtext(4, \" Get tokenset\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function NeutrinosOauthComponent_Template_button_click_5_listener() {\n          return ctx.logout();\n        });\n        ɵngcc0.ɵɵtext(6, \" Logout \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function NeutrinosOauthComponent_Template_button_click_7_listener() {\n          return ctx.userinfo();\n        });\n        ɵngcc0.ɵɵtext(8, \" In memory user info \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function NeutrinosOauthComponent_Template_button_click_9_listener() {\n          return ctx.httpTest();\n        });\n        ɵngcc0.ɵɵtext(10, \" Http Interceptor test \");\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return NeutrinosOauthComponent;\n}();\n\nif (false) {\n  /** @type {?} */\n  NeutrinosOauthComponent.prototype.neutrinosOauthService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosOauthComponent.prototype.http;\n}\n\nvar CookieInterceptorService = /*@__PURE__*/function () {\n  var CookieInterceptorService = /*#__PURE__*/function () {\n    /**\n     * @param {?} utilService\n     * @param {?} neutrinosOAuthClientService\n     */\n    function CookieInterceptorService(utilService, neutrinosOAuthClientService) {\n      _classCallCheck(this, CookieInterceptorService);\n\n      this.utilService = utilService;\n      this.neutrinosOAuthClientService = neutrinosOAuthClientService;\n    }\n    /**\n     * @param {?} request\n     * @param {?} next\n     * @return {?}\n     */\n\n\n    _createClass(CookieInterceptorService, [{\n      key: \"intercept\",\n      value: function intercept(request, next) {\n        var _this11 = this;\n\n        /* withCredentials adds cookies to the request for cross site (Only ssd urls).*/\n\n        /** @type {?} */\n        var baseUrl = this.utilService.getSSDBasePath();\n        /** @type {?} */\n\n        var isSSD = baseUrl !== '' && request.url.includes(baseUrl);\n\n        if (isSSD && this.isCrossDomain(baseUrl)) {\n          request = request.clone({\n            withCredentials: true\n          });\n        }\n\n        return next.handle(request).pipe(map(\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        function (event) {\n          return event;\n        }), catchError(\n        /**\n        * @param {?} errorResponse\n        * @return {?}\n        */\n        function (errorResponse) {\n          /*Intercept all requests and remove userinfo and cookies when status is 401 with code SESSION_EXPIRED, which means\n          * cookies have expired or access has been revoked by the OAuth providers hence IDS rejected.  */\n          if (errorResponse && errorResponse.hasOwnProperty('status') && errorResponse.status === 401 && errorResponse.error.hasOwnProperty('code')) {\n            _this11.neutrinosOAuthClientService.removeUserInfo(errorResponse.error);\n          }\n\n          return throwError(errorResponse);\n        }));\n      }\n      /**\n       * Returns true is the ssd url is running on a different domain than where UI is hosted.\n       * For mobile Returns false always since UI is already bundled with cordova\n       * If the user is not using IDS and is cross domain isIDSEnabled can be set to false to skip adding withCredentials\n       * @private\n       * @param {?} ssdUrl - string\n       * @return {?}\n       */\n\n    }, {\n      key: \"isCrossDomain\",\n      value: function isCrossDomain(ssdUrl) {\n        try {\n          ssdUrl = new URL(ssdUrl);\n          return this.utilService.getPlatformType() === 'browser' && ssdUrl.host !== location.host && this.utilService.getEnvValue('isIDSEnabled') === 'true';\n        } catch (e) {\n          return false; // ssdUrl is not a valid URL hence return false;\n        }\n      }\n    }]);\n\n    return CookieInterceptorService;\n  }();\n\n  CookieInterceptorService.ɵfac = function CookieInterceptorService_Factory(t) {\n    return new (t || CookieInterceptorService)(ɵngcc0.ɵɵinject(UtilService), ɵngcc0.ɵɵinject(NeutrinosOAuthClientService));\n  };\n  /** @nocollapse */\n\n\n  CookieInterceptorService.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function CookieInterceptorService_Factory() {\n      return new CookieInterceptorService(ɵɵinject(UtilService), ɵɵinject(NeutrinosOAuthClientService));\n    },\n    token: CookieInterceptorService,\n    providedIn: \"root\"\n  });\n  return CookieInterceptorService;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  CookieInterceptorService.prototype.utilService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CookieInterceptorService.prototype.neutrinosOAuthClientService;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/neutrinos-oauth-client.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} neutrinosOAuthService\n * @param {?} utilService\n * @return {?}\n */\n\n\nfunction getTokens(neutrinosOAuthService, utilService) {\n  return (\n    /**\n    * @return {?}\n    */\n    function () {\n      /**\n       * For ios restore the cookies and get userInfo since iOS webview does not\n       * persisit the cookie between app launches\n       */\n      if (utilService.getEnvValue('isIDSEnabled') === 'true') {\n        if (window['device'] && window['device'].platform === 'iOS') {\n          return neutrinosOAuthService.restoreCookies().then(\n          /**\n          * @param {?} cookieExist\n          * @return {?}\n          */\n          function (cookieExist) {\n            console.log('cookieExist' + cookieExist);\n            cookieExist ? neutrinosOAuthService.getUserInfo().catch(\n            /**\n            * @param {?} userInfoErr\n            * @return {?}\n            */\n\n            /**\n            * @param {?} userInfoErr\n            * @return {?}\n            */\n            function (userInfoErr) {\n              console.log(userInfoErr);\n            }) : null;\n          });\n        } else {\n          // Cannot get cookie for cross domain using JS. hence calling userinfo always\n          return neutrinosOAuthService.getUserInfo().catch(\n          /**\n          * @param {?} userInfoErr\n          * @return {?}\n          */\n\n          /**\n          * @param {?} userInfoErr\n          * @return {?}\n          */\n          function (userInfoErr) {\n            console.log(userInfoErr);\n          });\n        }\n      }\n    }\n  );\n}\n\nvar NeutrinosOAuthClientModule = /*@__PURE__*/function () {\n  var NeutrinosOAuthClientModule = function NeutrinosOAuthClientModule() {\n    _classCallCheck(this, NeutrinosOAuthClientModule);\n  };\n\n  NeutrinosOAuthClientModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NeutrinosOAuthClientModule\n  });\n  NeutrinosOAuthClientModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function NeutrinosOAuthClientModule_Factory(t) {\n      return new (t || NeutrinosOAuthClientModule)();\n    },\n    providers: [{\n      provide: HTTP_INTERCEPTORS,\n      useClass: CookieInterceptorService,\n      multi: true\n    }, {\n      provide: APP_INITIALIZER,\n      useFactory: getTokens,\n      deps: [NeutrinosOAuthClientService, UtilService],\n      multi: true\n    }],\n    imports: [[HttpClientModule]]\n  });\n  return NeutrinosOAuthClientModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NeutrinosOAuthClientModule, {\n    declarations: function declarations() {\n      return [NeutrinosOauthComponent];\n    },\n    imports: function imports() {\n      return [HttpClientModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: neutrinos-oauth-client.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NeutrinosAuthGuardService, NeutrinosOAuthClientModule, NeutrinosOAuthClientService, getTokens, UtilService as ɵa, NeutrinosOauthComponent as ɵb, CookieInterceptorService as ɵc };","map":null,"metadata":{},"sourceType":"module"}