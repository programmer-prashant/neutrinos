{"ast":null,"code":"import _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { InjectionToken, inject, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgZone, Optional, Inject, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatProgressBar.\n\n/** @docs-private */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"primaryValueBar\"];\n\nvar MatProgressBarBase = function MatProgressBarBase(_elementRef) {\n  _classCallCheck(this, MatProgressBarBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatProgressBarMixinBase = /*@__PURE__*/mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\n\n\nvar MAT_PROGRESS_BAR_LOCATION = /*@__PURE__*/new InjectionToken('mat-progress-bar-location', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_BAR_LOCATION_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n  var _document = inject(DOCUMENT);\n\n  var _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: function getPathname() {\n      return _location ? _location.pathname + _location.search : '';\n    }\n  };\n}\n/** Counter used to generate unique IDs for progress bars. */\n\n\nvar progressbarId = 0;\n\nvar MatProgressBar = /*@__PURE__*/function () {\n  var MatProgressBar = /*#__PURE__*/function (_MatProgressBarMixinB) {\n    _inherits(MatProgressBar, _MatProgressBarMixinB);\n\n    var _super = _createSuper(MatProgressBar);\n\n    function MatProgressBar(_elementRef, _ngZone, _animationMode,\n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location) {\n      var _this;\n\n      _classCallCheck(this, MatProgressBar);\n\n      _this = _super.call(this, _elementRef);\n      _this._elementRef = _elementRef;\n      _this._ngZone = _ngZone;\n      _this._animationMode = _animationMode;\n      /** Flag that indicates whether NoopAnimations mode is set to true. */\n\n      _this._isNoopAnimation = false;\n      _this._value = 0;\n      _this._bufferValue = 0;\n      /**\n       * Event emitted when animation of the primary progress bar completes. This event will not\n       * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n       * animations (indeterminate and query).\n       */\n\n      _this.animationEnd = new EventEmitter();\n      /** Reference to animation end subscription to be unsubscribed on destroy. */\n\n      _this._animationEndSubscription = Subscription.EMPTY;\n      /**\n       * Mode of the progress bar.\n       *\n       * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n       * 'determinate'.\n       * Mirrored to mode attribute.\n       */\n\n      _this.mode = 'determinate';\n      /** ID of the progress bar. */\n\n      _this.progressbarId = \"mat-progress-bar-\".concat(progressbarId++); // We need to prefix the SVG reference with the current path, otherwise they won't work\n      // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n      // because named route URLs can contain parentheses (see #12338). Also we don't use since\n      // we can't tell the difference between whether\n      // the consumer is using the hash location strategy or not, because `Location` normalizes\n      // both `/#/foo/bar` and `/foo/bar` to the same thing.\n\n      var path = location ? location.getPathname().split('#')[0] : '';\n      _this._rectangleFillValue = \"url('\".concat(path, \"#\").concat(_this.progressbarId, \"')\");\n      _this._isNoopAnimation = _animationMode === 'NoopAnimations';\n      return _this;\n    }\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n\n\n    _createClass(MatProgressBar, [{\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(v) {\n        this._value = clamp(coerceNumberProperty(v) || 0);\n      }\n      /** Buffer value of the progress bar. Defaults to zero. */\n\n    }, {\n      key: \"bufferValue\",\n      get: function get() {\n        return this._bufferValue;\n      },\n      set: function set(v) {\n        this._bufferValue = clamp(v || 0);\n      }\n      /** Gets the current transform value for the progress bar's primary indicator. */\n\n    }, {\n      key: \"_primaryTransform\",\n      value: function _primaryTransform() {\n        var scale = this.value / 100;\n        return {\n          transform: \"scaleX(\".concat(scale, \")\")\n        };\n      }\n      /**\n       * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n       * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n       */\n\n    }, {\n      key: \"_bufferTransform\",\n      value: function _bufferTransform() {\n        if (this.mode === 'buffer') {\n          var scale = this.bufferValue / 100;\n          return {\n            transform: \"scaleX(\".concat(scale, \")\")\n          };\n        }\n\n        return null;\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this2 = this;\n\n        // Run outside angular so change detection didn't get triggered on every transition end\n        // instead only on the animation that we care about (primary value bar's transitionend)\n        this._ngZone.runOutsideAngular(function () {\n          var element = _this2._primaryValueBar.nativeElement;\n          _this2._animationEndSubscription = fromEvent(element, 'transitionend').pipe(filter(function (e) {\n            return e.target === element;\n          })).subscribe(function () {\n            if (_this2.mode === 'determinate' || _this2.mode === 'buffer') {\n              _this2._ngZone.run(function () {\n                return _this2.animationEnd.next({\n                  value: _this2.value\n                });\n              });\n            }\n          });\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._animationEndSubscription.unsubscribe();\n      }\n    }]);\n\n    return MatProgressBar;\n  }(_MatProgressBarMixinBase);\n\n  MatProgressBar.ɵfac = function MatProgressBar_Factory(t) {\n    return new (t || MatProgressBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_BAR_LOCATION, 8));\n  };\n\n  MatProgressBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatProgressBar,\n    selectors: [[\"mat-progress-bar\"]],\n    viewQuery: function MatProgressBar_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._primaryValueBar = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"mat-progress-bar\"],\n    hostVars: 4,\n    hostBindings: function MatProgressBar_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.mode === \"indeterminate\" || ctx.mode === \"query\" ? null : ctx.value)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._isNoopAnimation);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      mode: \"mode\",\n      value: \"value\",\n      bufferValue: \"bufferValue\"\n    },\n    outputs: {\n      animationEnd: \"animationEnd\"\n    },\n    exportAs: [\"matProgressBar\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 9,\n    vars: 4,\n    consts: [[\"width\", \"100%\", \"height\", \"4\", \"focusable\", \"false\", 1, \"mat-progress-bar-background\", \"mat-progress-bar-element\"], [\"x\", \"4\", \"y\", \"0\", \"width\", \"8\", \"height\", \"4\", \"patternUnits\", \"userSpaceOnUse\", 3, \"id\"], [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\"], [\"width\", \"100%\", \"height\", \"100%\"], [1, \"mat-progress-bar-buffer\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [1, \"mat-progress-bar-primary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [\"primaryValueBar\", \"\"], [1, \"mat-progress-bar-secondary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\"]],\n    template: function MatProgressBar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"defs\");\n        ɵngcc0.ɵɵelementStart(2, \"pattern\", 1);\n        ɵngcc0.ɵɵelement(3, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"rect\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n        ɵngcc0.ɵɵelement(6, \"div\", 5, 6);\n        ɵngcc0.ɵɵelement(8, \"div\", 7);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.progressbarId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"fill\", ctx._rectangleFillValue);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._bufferTransform());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._primaryTransform());\n      }\n    },\n    directives: [ɵngcc1.NgStyle],\n    styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatProgressBar;\n}();\n/** Clamps a value to be between two numbers, by default 0 and 100. */\n\n\nfunction clamp(v) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  return Math.max(min, Math.min(max, v));\n}\n\nvar MatProgressBarModule = /*@__PURE__*/function () {\n  var MatProgressBarModule = function MatProgressBarModule() {\n    _classCallCheck(this, MatProgressBarModule);\n  };\n\n  MatProgressBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatProgressBarModule\n  });\n  MatProgressBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function MatProgressBarModule_Factory(t) {\n      return new (t || MatProgressBarModule)();\n    },\n    imports: [[CommonModule, MatCommonModule], MatCommonModule]\n  });\n  return MatProgressBarModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressBarModule, {\n    declarations: function declarations() {\n      return [MatProgressBar];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatProgressBar, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule };","map":null,"metadata":{},"sourceType":"module"}