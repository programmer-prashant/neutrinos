{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter } from 'tslib';\nimport { isDevMode, Injectable, ɵɵdefineInjectable, ɵɵinject, Component, NgModule, APP_INITIALIZER } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Subject, throwError } from 'rxjs';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { map, catchError } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/services/util.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/router';\n\nvar UtilService = /*#__PURE__*/function () {\n  function UtilService() {\n    _classCallCheck(this, UtilService);\n\n    this.platformType = this.checkPlatformType();\n    this.getEnvironment();\n  }\n  /**\n   * Returns 'mobile' or 'browser' based on the platform\n   * @return {?}\n   */\n\n\n  _createClass(UtilService, [{\n    key: \"getPlatformType\",\n    value: function getPlatformType() {\n      return this.platformType;\n    }\n    /**\n     * Returns env from neutrinos seed app\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getEnvironment\",\n    value: function getEnvironment() {\n      if (window['neutrinos'] && window['neutrinos']['environments'] && window['neutrinos']['environments']['properties']) {\n        // Break the refernce\n        this.environment = JSON.parse(JSON.stringify(window['neutrinos']['environments']['properties'])); // Append the url with / if ssdUrl does not end with /\n\n        if (this.environment['ssdURL']) {\n          this.environment['ssdURL'] = this.environment['ssdURL'].endsWith('/') ? this.environment['ssdURL'] : this.environment['ssdURL'] + '/';\n        }\n\n        return;\n      }\n      /*For dev env only */\n\n\n      this.environment = {\n        ssdURL: 'http://localhost:8081/api/',\n        useDefaultExceptionUI: true,\n        isIDSEnabled: 'true',\n        webAppMountpoint: '',\n        production: true\n      };\n    }\n    /**\n     * Returns 'mobile' or 'browser' based on the platform\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"checkPlatformType\",\n    value: function checkPlatformType() {\n      // tslint:disable-next-line: no-string-literal\n      if (window['device'] && (window['device']['platform'] !== 'browser' || window['device']['platform'] !== 'Browser')) {\n        return 'mobile'; // tslint:disable-next-line: no-string-literal\n      } else if (window['device'] && (window['device']['platform'] === 'browser' || window['device']['platform'] === 'Browser')) {\n        return 'cordova_browser';\n      } else {\n        return 'browser';\n      }\n    }\n    /*URL helper methods */\n\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBaseLoginPath\",\n    value: function getBaseLoginPath() {\n      return \"\".concat(this.environment.ssdURL, \"login\");\n    }\n    /**\n     * @param {?} redirectTo\n     * @return {?}\n     */\n\n  }, {\n    key: \"getWebLoginUrl\",\n    value: function getWebLoginUrl(redirectTo) {\n      redirectTo = this.calcRedirectUrl(redirectTo);\n      return \"\".concat(this.getBaseLoginPath(), \"?redirectTo=\").concat(redirectTo);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMobileLoginUrl\",\n    value: function getMobileLoginUrl() {\n      return \"\".concat(this.getBaseLoginPath(), \"?isMobile=true\");\n    }\n    /**\n     * @param {?} redirectTo\n     * @return {?}\n     */\n\n  }, {\n    key: \"getWebLogoutUrl\",\n    value: function getWebLogoutUrl(redirectTo) {\n      redirectTo = this.calcRedirectUrl(redirectTo);\n      return \"\".concat(this.environment.ssdURL, \"logout?redirectTo=\").concat(redirectTo);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMobileLogoutUrl\",\n    value: function getMobileLogoutUrl() {\n      return \"\".concat(this.environment.ssdURL, \"logout?isMobile=true\");\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getUserInfoUrl\",\n    value: function getUserInfoUrl() {\n      return \"\".concat(this.environment.ssdURL, \"user/info\");\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getSSDBasePath\",\n    value: function getSSDBasePath() {\n      return \"\".concat(this.environment.ssdURL);\n    }\n    /**\n     *  Returns a absoulte url for the urlPath\n     * @private\n     * @param {?} urlPath - path relative to the current host\n     * @return {?}\n     */\n\n  }, {\n    key: \"calcRedirectUrl\",\n    value: function calcRedirectUrl(urlPath) {\n      if (urlPath) {\n        /** @type {?} */\n        var host = new URL(window.location.href).origin;\n\n        if (!isDevMode()) {\n          // Append `webAppMountpoint` to host\n          host = this.environment.webAppMountpoint !== '' && this.environment.webAppMountpoint !== '/' ? new URL(this.environment.webAppMountpoint, host).href : host; // Get user redirect path with `webAppMountpoint`\n\n          /** @type {?} */\n\n          var mountPointWithRedirect = new URL(urlPath, host).pathname;\n          return host + mountPointWithRedirect;\n        } else {\n          return new URL(urlPath, host);\n        }\n      } else {\n        return window.location.href;\n      }\n    }\n    /**\n     *\n     * @param {?} property - environment property key\n     * @return {?}\n     */\n\n  }, {\n    key: \"getEnvValue\",\n    value: function getEnvValue(property) {\n      return this.environment[property];\n    }\n  }]);\n\n  return UtilService;\n}();\n\nUtilService.ɵfac = function UtilService_Factory(t) {\n  return new (t || UtilService)();\n};\n/** @nocollapse */\n\n\nUtilService.ctorParameters = function () {\n  return [];\n};\n/** @nocollapse */\n\n\nUtilService.ɵprov = ɵɵdefineInjectable({\n  factory: function UtilService_Factory() {\n    return new UtilService();\n  },\n  token: UtilService,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(UtilService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  UtilService.prototype.platformType;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  UtilService.prototype.environment;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/neutrinos-oauth-client.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NeutrinosOAuthClientService = /*#__PURE__*/function () {\n  /**\n   * @param {?} util\n   * @param {?} http\n   */\n  function NeutrinosOAuthClientService(util, http) {\n    _classCallCheck(this, NeutrinosOAuthClientService);\n\n    this.util = util;\n    this.http = http;\n    this.cookieName = 'connect.sid';\n    this.authStateSubject = new Subject();\n  }\n  /**\n   * Get user info and tokens of the current logged in user\n   * @return {?}\n   */\n\n\n  _createClass(NeutrinosOAuthClientService, [{\n    key: \"userInfo\",\n    get: function get() {\n      return this.currentUserInfo;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"isLoggedIn\",\n    get: function get() {\n      return this.currentUserInfo ? true : false;\n    }\n    /**\n     * @private\n     * @param {?} userInfo\n     * @return {?}\n     */\n\n  }, {\n    key: \"setUserInfo\",\n    value: function setUserInfo(userInfo) {\n      this.currentUserInfo = userInfo;\n    }\n    /**\n     * Performs authentication based on configuration and returns user info for mobile env and\n     * for web app user info is stored in memory. Call userInfo getter method to retrieve userinfo\n     * @param {?=} redirectBackUrl - url to redirect back to when authentication is done. Valid only for Web.\n     * For mobile use the Promise returned to perform post authentication actions\n     * @return {?}\n     */\n\n  }, {\n    key: \"login\",\n    value: function login(redirectBackUrl) {\n      var _this = this;\n\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @param {?} reject\n      * @return {?}\n      */\n      function (resolve, reject) {\n        if (_this.util.getEnvValue('isIDSEnabled') === 'false') {\n          return reject({\n            message: 'IDS is not enabled in environments'\n          });\n        }\n\n        if (_this.util.getPlatformType() === 'browser') {\n          _this.loginWithRedirect(redirectBackUrl);\n\n          return;\n        }\n\n        _this.loginWithInAppBrowser().then(\n        /**\n        * @param {?} tokenset\n        * @return {?}\n        */\n        function (tokenset) {\n          return resolve(tokenset);\n        }).catch(\n        /**\n        * @param {?} authError\n        * @return {?}\n        */\n        function (authError) {\n          return reject(authError);\n        });\n      });\n    }\n    /**\n     *\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"loginWithInAppBrowser\",\n    value: function loginWithInAppBrowser() {\n      var _this2 = this;\n\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @param {?} reject\n      * @return {?}\n      */\n      function (resolve, reject) {\n        return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _this3 = this;\n\n          var scriptURLS, script, inAppBrowserRef, executeScriptCB, exitCB;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  /** @type {?} */\n                  scriptURLS = ['/interaction/', '/auth-provider/return']; // execute JS only for this urls\n\n                  /** @type {?} */\n\n                  _context.next = 3;\n                  return this.getScript();\n\n                case 3:\n                  script = _context.sent;\n                  // Get JS which stores guid and device details in local storage of webview\n\n                  /** @type {?} */\n                  inAppBrowserRef = cordova.InAppBrowser.open(this.util.getMobileLoginUrl(), '_blank');\n                  /** @type {?} */\n\n                  executeScriptCB =\n                  /**\n                  * @param {?} event\n                  * @return {?}\n                  */\n                  function executeScriptCB(event) {\n                    if (event && event.hasOwnProperty('type') && event.hasOwnProperty('url') && event.type === 'loadstop' && _this3.isURLMatch(event.url, scriptURLS)) {\n                      inAppBrowserRef.executeScript({\n                        code: script\n                      },\n                      /**\n                      * @return {?}\n                      */\n                      function () {});\n                    }\n                  };\n\n                  inAppBrowserRef.addEventListener('loadstop', executeScriptCB);\n                  /** @type {?} */\n\n                  exitCB =\n                  /**\n                  * @return {?}\n                  */\n                  function exitCB() {\n                    return reject({\n                      code: 'auth-cancel',\n                      message: 'Authentication cancelled by user'\n                    });\n                  };\n\n                  inAppBrowserRef.addEventListener('message',\n                  /**\n                  * @param {?} message\n                  * @return {?}\n                  */\n                  function (message) {\n                    if (message && message.data && message.data.auth && message.data.auth === 'success') {\n                      inAppBrowserRef.removeEventListener('exit', exitCB);\n                      inAppBrowserRef.close();\n\n                      _this3.getUserInfo().then(\n                      /**\n                      * @param {?} tokenset\n                      * @return {?}\n                      */\n                      function (tokenset) {\n                        return resolve(tokenset);\n                      }).catch(\n                      /**\n                      * @param {?} authErr\n                      * @return {?}\n                      */\n                      function (authErr) {\n                        return reject(authErr);\n                      });\n                    }\n                  }); // settle the promise if user closed the in app browser manually\n\n                  inAppBrowserRef.addEventListener('exit', exitCB);\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      });\n    }\n    /**\n     * @private\n     * @param {?} url\n     * @param {?} compareWith\n     * @return {?}\n     */\n\n  }, {\n    key: \"isURLMatch\",\n    value: function isURLMatch(url, compareWith) {\n      return compareWith.some(\n      /**\n      * @param {?} u\n      * @return {?}\n      */\n      function (u) {\n        return url.includes(u);\n      });\n    }\n    /**\n     * Returns JS as a string to be executed in inAppBrowser which sets guid and device details in localStorage\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getScript\",\n    value: function getScript() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var deviceDetails, guid, guidScript, script;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                /** @type {?} */\n                deviceDetails = JSON.stringify(window['device']) || {};\n                /** @type {?} */\n\n                _context2.next = 3;\n                return this.getuniqueDeviceID();\n\n              case 3:\n                guid = _context2.sent;\n\n                /** @type {?} */\n                guidScript = guid ? \"localStorage.setItem('guid', '\".concat(guid, \"')\") : '';\n                /** @type {?} */\n\n                script = \"\".concat(guidScript, \"\\n          localStorage.setItem('additionalInfo', '\").concat(deviceDetails, \"')\\n          window.isScriptExecuted = true;\");\n                return _context2.abrupt(\"return\", script);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getuniqueDeviceID\",\n    value: function getuniqueDeviceID() {\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @param {?} reject\n      * @return {?}\n      */\n      function (resolve, reject) {\n        window['plugins'].uniqueDeviceID.get(\n        /**\n        * @param {?} guid\n        * @return {?}\n        */\n        function (guid) {\n          return resolve(guid);\n        },\n        /**\n        * @param {?} error\n        * @return {?}\n        */\n        function (error) {\n          return resolve(null);\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getUserInfo\",\n    value: function getUserInfo() {\n      var _this4 = this;\n\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @param {?} reject\n      * @return {?}\n      */\n      function (resolve, reject) {\n        /** @type {?} */\n        var headers = new HttpHeaders();\n        /*Edge case: Userinfo is retreived from cache when login page is opened and user cancels the login attempt  */\n\n        headers = headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n        headers = headers.set('Pragma', 'no-cache');\n        headers = headers.set('Expires', '0');\n\n        _this4.http.get(_this4.util.getUserInfoUrl(), {\n          headers: headers\n        }).subscribe(\n        /**\n        * @param {?} tokenset\n        * @return {?}\n        */\n        function (tokenset) {\n          _this4.setUserInfo(tokenset);\n\n          return resolve(tokenset);\n        },\n        /**\n        * @param {?} error\n        * @return {?}\n        */\n        function (error) {\n          _this4.destroyClientSession();\n\n          return reject(error);\n        });\n      });\n    }\n    /*If SSD throws 401 during any http request due to refresh token expiry, cookie expiry or access revoke nullify the userinfo in memory\n      and emit authState event  */\n\n    /**\n     * @param {?} errorResponse\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeUserInfo\",\n    value: function removeUserInfo(errorResponse) {\n      this.destroyClientSession();\n      this.authStateSubject.next(errorResponse);\n    }\n    /**\n     * Returns event when Auth state has changed due to session expiry, access revoke or cookie expiry.\n     * @return {?}\n     */\n\n  }, {\n    key: \"authState\",\n    value: function authState() {\n      return this.authStateSubject.asObservable();\n    }\n    /**\n     * @private\n     * @param {?} redirectBackUrl\n     * @return {?}\n     */\n\n  }, {\n    key: \"loginWithRedirect\",\n    value: function loginWithRedirect(redirectBackUrl) {\n      window.location.href = this.util.getWebLoginUrl(redirectBackUrl);\n    }\n    /**\n     * Restores the connect.sid cookie from session storage during app bootstrap if device is mobile\n     * @return {?}\n     */\n\n  }, {\n    key: \"restoreCookies\",\n    value: function restoreCookies() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this5 = this;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getCookie(this.cookieName, this.util.getSSDBasePath()).then(\n                /**\n                * @param {?} connectSid\n                * @return {?}\n                */\n                function (connectSid) {\n                  return __awaiter(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return this.setCookie(this.util.getSSDBasePath(), this.cookieName, connectSid);\n\n                          case 2:\n                            return _context3.abrupt(\"return\", _context3.sent);\n\n                          case 3:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n                }).catch(\n                /**\n                * @param {?} error\n                * @return {?}\n                */\n                function (error) {\n                  return false;\n                });\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     *\n     * @private\n     * @param {?} url - site where the cookie is stored\n     * @param {?} cookieName - name of the cookie to restore\n     * @param {?} cookieValue - value of the cookie to restore\n     * @return {?}\n     */\n\n  }, {\n    key: \"setCookie\",\n    value: function setCookie(url, cookieName, cookieValue) {\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @param {?} reject\n      * @return {?}\n      */\n      function (resolve, reject) {\n        cookieMaster.setCookieValue(url, cookieName, cookieValue,\n        /**\n        * @return {?}\n        */\n        function () {\n          return resolve(true);\n        },\n        /**\n        * @param {?} error\n        * @return {?}\n        */\n        function (error) {\n          return reject(false);\n        });\n      });\n    }\n    /**\n     *\n     * @private\n     * @param {?} cookieName          name of the cookie to retrieve\n     * @param {?} fullCookieString    String containing all the cookies from an url\n     * @return {?}\n     */\n\n  }, {\n    key: \"readCookieValueFromCookieString\",\n    value: function readCookieValueFromCookieString(cookieName, fullCookieString) {\n      /** @type {?} */\n      var cookieNameWithEqualsSign = cookieName + \"=\";\n      /** @type {?} */\n\n      var cookieArray = fullCookieString.split(';');\n\n      for (var i = 0; i < cookieArray.length; i++) {\n        /** @type {?} */\n        var cookie = cookieArray[i]; // Remove unnecessary leading spaces from cookie\n\n        while (cookie.charAt(0) == ' ') {\n          cookie = cookie.substring(1, cookie.length);\n        } // Retrieve and return cookie value\n\n\n        if (cookie.indexOf(cookieNameWithEqualsSign) == 0) {\n          return cookie.substring(cookieNameWithEqualsSign.length, cookie.length);\n        }\n      }\n\n      return null;\n    }\n    /**\n     *\n     * @private\n     * @param {?} cookieName - name of the cookie to retrieve\n     * @param {?} url - site where the cookie is stored\n     * @return {?}\n     */\n\n  }, {\n    key: \"getCookie\",\n    value: function getCookie(cookieName, url) {\n      var _this6 = this;\n\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @param {?} reject\n      * @return {?}\n      */\n      function (resolve, reject) {\n        window['cordova'].plugins.CookiesPlugin.getCookie(url,\n        /**\n        * @param {?} cookies\n        * @return {?}\n        */\n        function (cookies) {\n          /** @type {?} */\n          var cookieValue = _this6.readCookieValueFromCookieString(cookieName, cookies);\n\n          if (cookieValue) {\n            return resolve(cookieValue);\n          } else {\n            return reject(\"cookie value null\");\n          }\n        },\n        /**\n        * @param {?} error\n        * @return {?}\n        */\n        function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\n     * Logout the current user, destroys session between client and server.\n     * @param {?=} redirectBackUrl - URL where the user is navigated post logout. Valid only for Web.\n     * For mobile use the Promise returned to perform post authentication actions\n     * @return {?}\n     */\n\n  }, {\n    key: \"logout\",\n    value: function logout(redirectBackUrl) {\n      var _this7 = this;\n\n      /** @type {?} */\n      var logoutUrl = this.util.getPlatformType() === 'browser' ? this.util.getWebLogoutUrl(redirectBackUrl) : this.util.getMobileLogoutUrl();\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @param {?} reject\n      * @return {?}\n      */\n      function (resolve, reject) {\n        _this7.http.get(logoutUrl).subscribe(\n        /**\n        * @param {?} idsLogoutInfo\n        * @return {?}\n        */\n        function (idsLogoutInfo) {\n          _this7.destroyIDSSession(idsLogoutInfo).then(\n          /**\n          * @return {?}\n          */\n          function () {\n            return resolve();\n          }).catch(\n          /**\n          * @param {?} logoutErr\n          * @return {?}\n          */\n          function (logoutErr) {\n            return reject(logoutErr);\n          });\n        },\n        /**\n        * @param {?} logoutError\n        * @return {?}\n        */\n        function (logoutError) {\n          return reject(logoutError);\n        });\n      });\n    }\n    /**\n     * @private\n     * @param {?} idsInfo\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroyIDSSession\",\n    value: function destroyIDSSession(idsInfo) {\n      var _this8 = this;\n\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @param {?} reject\n      * @return {?}\n      */\n      function (resolve, reject) {\n        if (idsInfo['sessionExists'] === false) {\n          // No session present with SSD due to cookie expiry\n          _this8.destroyClientSession();\n\n          _this8.authStateSubject.next({\n            code: 'NO_SESSION',\n            message: 'User session has already expired'\n          });\n\n          return resolve();\n        }\n\n        if (_this8.util.getPlatformType() === 'browser') {\n          window.location.href = idsInfo['idsURL'];\n        } else {\n          _this8.logoutWithInappBrowser(idsInfo['idsURL']).then(\n          /**\n          * @return {?}\n          */\n          function () {\n            return resolve();\n          }).catch(\n          /**\n          * @param {?} sessionError\n          * @return {?}\n          */\n          function (sessionError) {\n            return reject(sessionError);\n          });\n        }\n      });\n    }\n    /**\n     *\n     * @private\n     * @param {?} idsLogoutUrl - IDS logout url\n     * Opens InApp browser and destroys the session\n     * @return {?}\n     */\n\n  }, {\n    key: \"logoutWithInappBrowser\",\n    value: function logoutWithInappBrowser(idsLogoutUrl) {\n      var _this9 = this;\n\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @param {?} reject\n      * @return {?}\n      */\n      function (resolve, reject) {\n        /** @type {?} */\n        var exitCB =\n        /**\n        * @return {?}\n        */\n        function exitCB() {\n          return reject({\n            code: 'auth-cancel',\n            message: 'Authentication cancelled by user'\n          });\n        };\n        /** @type {?} */\n\n\n        var inAppBrowserRef = cordova.InAppBrowser.open(idsLogoutUrl, '_blank');\n        inAppBrowserRef.addEventListener('message',\n        /**\n        * @param {?} message\n        * @return {?}\n        */\n        function (message) {\n          // Remove exit listener if script closed the in app browser\n          if (message && message.data && message.data.auth && message.data.auth === 'success') {\n            inAppBrowserRef.removeEventListener('exit', exitCB);\n            inAppBrowserRef.close();\n\n            _this9.destroyClientSession();\n\n            return resolve();\n          }\n        }); // settle the promise if user closed the in app browser manually\n\n        inAppBrowserRef.addEventListener('exit', exitCB);\n      });\n    }\n    /*Remove persisted cookies in local storage and nullify user info */\n\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroyClientSession\",\n    value: function destroyClientSession() {\n      this.setUserInfo(null);\n    }\n  }]);\n\n  return NeutrinosOAuthClientService;\n}();\n\nNeutrinosOAuthClientService.ɵfac = function NeutrinosOAuthClientService_Factory(t) {\n  return new (t || NeutrinosOAuthClientService)(ɵngcc0.ɵɵinject(UtilService), ɵngcc0.ɵɵinject(ɵngcc1.HttpClient));\n};\n/** @nocollapse */\n\n\nNeutrinosOAuthClientService.ctorParameters = function () {\n  return [{\n    type: UtilService\n  }, {\n    type: HttpClient\n  }];\n};\n/** @nocollapse */\n\n\nNeutrinosOAuthClientService.ɵprov = ɵɵdefineInjectable({\n  factory: function NeutrinosOAuthClientService_Factory() {\n    return new NeutrinosOAuthClientService(ɵɵinject(UtilService), ɵɵinject(HttpClient));\n  },\n  token: NeutrinosOAuthClientService,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NeutrinosOAuthClientService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: UtilService\n    }, {\n      type: ɵngcc1.HttpClient\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  NeutrinosOAuthClientService.prototype.cookieName;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosOAuthClientService.prototype.currentUserInfo;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosOAuthClientService.prototype.authStateSubject;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosOAuthClientService.prototype.util;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosOAuthClientService.prototype.http;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/auth-guard.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NeutrinosAuthGuardService = /*#__PURE__*/function () {\n  /**\n   * @param {?} _neutrinosOAuthClientService\n   * @param {?} _router\n   * @param {?} _arouter\n   */\n  function NeutrinosAuthGuardService(_neutrinosOAuthClientService, _router, _arouter) {\n    _classCallCheck(this, NeutrinosAuthGuardService);\n\n    this._neutrinosOAuthClientService = _neutrinosOAuthClientService;\n    this._router = _router;\n    this._arouter = _arouter;\n  }\n  /**\n   * @param {?} route\n   * @param {?} state\n   * @return {?}\n   */\n\n\n  _createClass(NeutrinosAuthGuardService, [{\n    key: \"canActivate\",\n    value: function canActivate(route, state) {\n      var _this10 = this;\n\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @param {?} reject\n      * @return {?}\n      */\n      function (resolve, reject) {\n        _this10.currUrl = state.url;\n\n        if (_this10._neutrinosOAuthClientService.isLoggedIn) {\n          return resolve(true);\n        } else {\n          _this10._neutrinosOAuthClientService.login().then(\n          /**\n          * @param {?} tokenSet\n          * @return {?}\n          */\n          function (tokenSet) {\n            _this10._router.navigate([_this10.currUrl]);\n\n            return resolve(true);\n          }).catch(\n          /**\n          * @param {?} err\n          * @return {?}\n          */\n          function (err) {\n            console.error(err);\n\n            if (err && err.code == 'auth-cancel') {\n              // Added setTimeout for reloading the current route\n              setTimeout(\n              /**\n              * @return {?}\n              */\n              function () {\n                _this10._router.navigateByUrl(_this10.currUrl, {\n                  skipLocationChange: true\n                }).then(\n                /**\n                * @return {?}\n                */\n                function () {\n                  return resolve(false);\n                });\n              }, 500);\n            } else {\n              return resolve(false);\n            }\n          });\n        }\n      });\n    }\n  }]);\n\n  return NeutrinosAuthGuardService;\n}();\n\nNeutrinosAuthGuardService.ɵfac = function NeutrinosAuthGuardService_Factory(t) {\n  return new (t || NeutrinosAuthGuardService)(ɵngcc0.ɵɵinject(NeutrinosOAuthClientService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc2.ActivatedRoute));\n};\n/** @nocollapse */\n\n\nNeutrinosAuthGuardService.ctorParameters = function () {\n  return [{\n    type: NeutrinosOAuthClientService\n  }, {\n    type: Router\n  }, {\n    type: ActivatedRoute\n  }];\n};\n/** @nocollapse */\n\n\nNeutrinosAuthGuardService.ɵprov = ɵɵdefineInjectable({\n  factory: function NeutrinosAuthGuardService_Factory() {\n    return new NeutrinosAuthGuardService(ɵɵinject(NeutrinosOAuthClientService), ɵɵinject(Router), ɵɵinject(ActivatedRoute));\n  },\n  token: NeutrinosAuthGuardService,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NeutrinosAuthGuardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NeutrinosOAuthClientService\n    }, {\n      type: ɵngcc2.Router\n    }, {\n      type: ɵngcc2.ActivatedRoute\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  NeutrinosAuthGuardService.prototype.currUrl;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosAuthGuardService.prototype._neutrinosOAuthClientService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosAuthGuardService.prototype._router;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosAuthGuardService.prototype._arouter;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/neutrinos-oauth.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NeutrinosOauthComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} neutrinosOauthService\n   * @param {?} http\n   */\n  function NeutrinosOauthComponent(neutrinosOauthService, http) {\n    _classCallCheck(this, NeutrinosOauthComponent);\n\n    this.neutrinosOauthService = neutrinosOauthService;\n    this.http = http;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NeutrinosOauthComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.neutrinosOauthService.authState().subscribe(\n      /**\n      * @param {?} state\n      * @return {?}\n      */\n      function (state) {\n        console.log(state);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"login\",\n    value: function login() {\n      /** @type {?} */\n      var a = this.neutrinosOauthService.login('/i-am-loggedin').then(\n      /**\n      * @param {?} tokens\n      * @return {?}\n      */\n      function (tokens) {\n        console.log('got tokens in component', tokens);\n      }).catch(\n      /**\n      * @param {?} e\n      * @return {?}\n      */\n      function (e) {\n        console.error(e);\n      }); // console.log(a);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"token\",\n    value: function token() {\n      this.neutrinosOauthService.getUserInfo().then(\n      /**\n      * @param {?} t\n      * @return {?}\n      */\n      function (t) {\n        console.log('t', t);\n      }).catch(console.log);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      this.neutrinosOauthService.logout();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"userinfo\",\n    value: function userinfo() {\n      alert(JSON.stringify(this.neutrinosOauthService.userInfo));\n      console.log(this.neutrinosOauthService.userInfo);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"httpTest\",\n    value: function httpTest() {\n      this.http.get('http://localhost:8081/api/ping').subscribe(\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      function (res) {\n        console.log(res);\n      },\n      /**\n      * @param {?} e\n      * @return {?}\n      */\n      function (e) {\n        console.error(e);\n      });\n    }\n  }]);\n\n  return NeutrinosOauthComponent;\n}();\n\nNeutrinosOauthComponent.ɵfac = function NeutrinosOauthComponent_Factory(t) {\n  return new (t || NeutrinosOauthComponent)(ɵngcc0.ɵɵdirectiveInject(NeutrinosOAuthClientService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HttpClient));\n};\n\nNeutrinosOauthComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NeutrinosOauthComponent,\n  selectors: [[\"lib-neutrinos-oauth\"]],\n  decls: 11,\n  vars: 0,\n  consts: [[3, \"click\"]],\n  template: function NeutrinosOauthComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtext(0, \" NOTE: use this component only for testing. Not intended for production \");\n      ɵngcc0.ɵɵelementStart(1, \"button\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function NeutrinosOauthComponent_Template_button_click_1_listener() {\n        return ctx.login();\n      });\n      ɵngcc0.ɵɵtext(2, \" Login \");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"button\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function NeutrinosOauthComponent_Template_button_click_3_listener() {\n        return ctx.token();\n      });\n      ɵngcc0.ɵɵtext(4, \" Get tokenset\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"button\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function NeutrinosOauthComponent_Template_button_click_5_listener() {\n        return ctx.logout();\n      });\n      ɵngcc0.ɵɵtext(6, \" Logout \");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(7, \"button\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function NeutrinosOauthComponent_Template_button_click_7_listener() {\n        return ctx.userinfo();\n      });\n      ɵngcc0.ɵɵtext(8, \" In memory user info \");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(9, \"button\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function NeutrinosOauthComponent_Template_button_click_9_listener() {\n        return ctx.httpTest();\n      });\n      ɵngcc0.ɵɵtext(10, \" Http Interceptor test \");\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nNeutrinosOauthComponent.ctorParameters = function () {\n  return [{\n    type: NeutrinosOAuthClientService\n  }, {\n    type: HttpClient\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NeutrinosOauthComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-neutrinos-oauth',\n      template: \"\\n   NOTE: use this component only for testing. Not intended for production\\n\\n      <button (click)=\\\"login()\\\" >  Login </button>\\n      <button (click)=\\\"token()\\\" > Get tokenset</button>\\n      <button (click)=\\\"logout()\\\" > Logout </button>\\n      <button (click)=\\\"userinfo()\\\" > In memory user info </button>\\n      <button (click)=\\\"httpTest()\\\" > Http Interceptor test </button>\\n      \"\n    }]\n  }], function () {\n    return [{\n      type: NeutrinosOAuthClientService\n    }, {\n      type: ɵngcc1.HttpClient\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  NeutrinosOauthComponent.prototype.neutrinosOauthService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NeutrinosOauthComponent.prototype.http;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/cookie-interceptor.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar CookieInterceptorService = /*#__PURE__*/function () {\n  /**\n   * @param {?} utilService\n   * @param {?} neutrinosOAuthClientService\n   */\n  function CookieInterceptorService(utilService, neutrinosOAuthClientService) {\n    _classCallCheck(this, CookieInterceptorService);\n\n    this.utilService = utilService;\n    this.neutrinosOAuthClientService = neutrinosOAuthClientService;\n  }\n  /**\n   * @param {?} request\n   * @param {?} next\n   * @return {?}\n   */\n\n\n  _createClass(CookieInterceptorService, [{\n    key: \"intercept\",\n    value: function intercept(request, next) {\n      var _this11 = this;\n\n      /* withCredentials adds cookies to the request for cross site (Only ssd urls).*/\n\n      /** @type {?} */\n      var baseUrl = this.utilService.getSSDBasePath();\n      /** @type {?} */\n\n      var isSSD = baseUrl !== '' && request.url.includes(baseUrl);\n\n      if (isSSD && this.isCrossDomain(baseUrl)) {\n        request = request.clone({\n          withCredentials: true\n        });\n      }\n\n      return next.handle(request).pipe(map(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        return event;\n      }), catchError(\n      /**\n      * @param {?} errorResponse\n      * @return {?}\n      */\n      function (errorResponse) {\n        /*Intercept all requests and remove userinfo and cookies when status is 401 with code SESSION_EXPIRED, which means\n        * cookies have expired or access has been revoked by the OAuth providers hence IDS rejected.  */\n        if (errorResponse && errorResponse.hasOwnProperty('status') && errorResponse.status === 401 && errorResponse.error.hasOwnProperty('code')) {\n          _this11.neutrinosOAuthClientService.removeUserInfo(errorResponse.error);\n        }\n\n        return throwError(errorResponse);\n      }));\n    }\n    /**\n     * Returns true is the ssd url is running on a different domain than where UI is hosted.\n     * For mobile Returns false always since UI is already bundled with cordova\n     * If the user is not using IDS and is cross domain isIDSEnabled can be set to false to skip adding withCredentials\n     * @private\n     * @param {?} ssdUrl - string\n     * @return {?}\n     */\n\n  }, {\n    key: \"isCrossDomain\",\n    value: function isCrossDomain(ssdUrl) {\n      try {\n        ssdUrl = new URL(ssdUrl);\n        return this.utilService.getPlatformType() === 'browser' && ssdUrl.host !== location.host && this.utilService.getEnvValue('isIDSEnabled') === 'true';\n      } catch (e) {\n        return false; // ssdUrl is not a valid URL hence return false;\n      }\n    }\n  }]);\n\n  return CookieInterceptorService;\n}();\n\nCookieInterceptorService.ɵfac = function CookieInterceptorService_Factory(t) {\n  return new (t || CookieInterceptorService)(ɵngcc0.ɵɵinject(UtilService), ɵngcc0.ɵɵinject(NeutrinosOAuthClientService));\n};\n/** @nocollapse */\n\n\nCookieInterceptorService.ctorParameters = function () {\n  return [{\n    type: UtilService\n  }, {\n    type: NeutrinosOAuthClientService\n  }];\n};\n/** @nocollapse */\n\n\nCookieInterceptorService.ɵprov = ɵɵdefineInjectable({\n  factory: function CookieInterceptorService_Factory() {\n    return new CookieInterceptorService(ɵɵinject(UtilService), ɵɵinject(NeutrinosOAuthClientService));\n  },\n  token: CookieInterceptorService,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CookieInterceptorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: UtilService\n    }, {\n      type: NeutrinosOAuthClientService\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  CookieInterceptorService.prototype.utilService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CookieInterceptorService.prototype.neutrinosOAuthClientService;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/neutrinos-oauth-client.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} neutrinosOAuthService\n * @param {?} utilService\n * @return {?}\n */\n\n\nfunction getTokens(neutrinosOAuthService, utilService) {\n  return (\n    /**\n    * @return {?}\n    */\n    function () {\n      /**\n       * For ios restore the cookies and get userInfo since iOS webview does not\n       * persisit the cookie between app launches\n       */\n      if (utilService.getEnvValue('isIDSEnabled') === 'true') {\n        if (window['device'] && window['device'].platform === 'iOS') {\n          return neutrinosOAuthService.restoreCookies().then(\n          /**\n          * @param {?} cookieExist\n          * @return {?}\n          */\n          function (cookieExist) {\n            console.log('cookieExist' + cookieExist);\n            cookieExist ? neutrinosOAuthService.getUserInfo().catch(\n            /**\n            * @param {?} userInfoErr\n            * @return {?}\n            */\n            function (userInfoErr) {\n              console.log(userInfoErr);\n            }) : null;\n          });\n        } else {\n          // Cannot get cookie for cross domain using JS. hence calling userinfo always\n          return neutrinosOAuthService.getUserInfo().catch(\n          /**\n          * @param {?} userInfoErr\n          * @return {?}\n          */\n          function (userInfoErr) {\n            console.log(userInfoErr);\n          });\n        }\n      }\n    }\n  );\n} // @dynamic (https://github.com/ng-packagr/ng-packagr/issues/641)\n\n\nvar NeutrinosOAuthClientModule = function NeutrinosOAuthClientModule() {\n  _classCallCheck(this, NeutrinosOAuthClientModule);\n};\n\nNeutrinosOAuthClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NeutrinosOAuthClientModule\n});\nNeutrinosOAuthClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NeutrinosOAuthClientModule_Factory(t) {\n    return new (t || NeutrinosOAuthClientModule)();\n  },\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: CookieInterceptorService,\n    multi: true\n  }, {\n    provide: APP_INITIALIZER,\n    useFactory: getTokens,\n    deps: [NeutrinosOAuthClientService, UtilService],\n    multi: true\n  }],\n  imports: [[HttpClientModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NeutrinosOAuthClientModule, {\n    declarations: function declarations() {\n      return [NeutrinosOauthComponent];\n    },\n    imports: function imports() {\n      return [HttpClientModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NeutrinosOAuthClientModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NeutrinosOauthComponent],\n      imports: [HttpClientModule],\n      providers: [{\n        provide: HTTP_INTERCEPTORS,\n        useClass: CookieInterceptorService,\n        multi: true\n      }, {\n        provide: APP_INITIALIZER,\n        useFactory: getTokens,\n        deps: [NeutrinosOAuthClientService, UtilService],\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: neutrinos-oauth-client.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NeutrinosAuthGuardService, NeutrinosOAuthClientModule, NeutrinosOAuthClientService, getTokens, UtilService as ɵa, NeutrinosOauthComponent as ɵb, CookieInterceptorService as ɵc };","map":{"version":3,"sources":["../../../projects/neutrinos-oauth-client/src/lib/services/util.service.ts","../../../projects/neutrinos-oauth-client/src/lib/neutrinos-oauth-client.service.ts","../../../projects/neutrinos-oauth-client/src/lib/auth-guard.service.ts","../../../projects/neutrinos-oauth-client/src/lib/neutrinos-oauth.component.ts","../../../projects/neutrinos-oauth-client/src/lib/cookie-interceptor.service.ts","../../../projects/neutrinos-oauth-client/src/lib/neutrinos-oauth-client.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilService {\n  private platformType: string;\n  private environment;\n\n  constructor() {\n    this.platformType = this.checkPlatformType();\n    this.getEnvironment();\n  }\n\n  /**\n   * Returns 'mobile' or 'browser' based on the platform\n   */\n  public getPlatformType(): string {\n    return this.platformType;\n  }\n\n\n  /**\n   * Returns env from neutrinos seed app\n   */\n  private getEnvironment() {\n    if (window['neutrinos'] && window['neutrinos']['environments'] && window['neutrinos']['environments']['properties']) {\n      // Break the refernce\n      this.environment = JSON.parse(JSON.stringify(window['neutrinos']['environments']['properties']));\n      // Append the url with / if ssdUrl does not end with /\n      if (this.environment['ssdURL']) {\n        this.environment['ssdURL'] = this.environment['ssdURL'].endsWith('/') ? this.environment['ssdURL'] :\n          (this.environment['ssdURL'] + '/');\n      }\n      return;\n    }\n    /*For dev env only */\n    this.environment = {\n      ssdURL: 'http://localhost:8081/api/',\n      useDefaultExceptionUI: true,\n      isIDSEnabled: 'true',\n      webAppMountpoint: '',\n      production: true\n    };\n\n  }\n\n  /**\n   * Returns 'mobile' or 'browser' based on the platform\n   */\n  private checkPlatformType(): string {\n    // tslint:disable-next-line: no-string-literal\n    if (window['device'] && (window['device']['platform'] !== 'browser' || window['device']['platform'] !== 'Browser')) {\n      return 'mobile';\n      // tslint:disable-next-line: no-string-literal\n    } else if (window['device'] && (window['device']['platform'] === 'browser' || window['device']['platform'] === 'Browser')) {\n      return 'cordova_browser';\n    } else {\n      return 'browser';\n    }\n  }\n\n  /*URL helper methods */\n  public getBaseLoginPath() {\n    return `${this.environment.ssdURL}login`;\n  }\n\n  public getWebLoginUrl(redirectTo) {\n    redirectTo = this.calcRedirectUrl(redirectTo);\n    return `${this.getBaseLoginPath()}?redirectTo=${redirectTo}`;\n  }\n\n  public getMobileLoginUrl() {\n    return `${this.getBaseLoginPath()}?isMobile=true`;\n  }\n\n  public getWebLogoutUrl(redirectTo) {\n    redirectTo = this.calcRedirectUrl(redirectTo);\n    return `${this.environment.ssdURL}logout?redirectTo=${redirectTo}`;\n  }\n\n  public getMobileLogoutUrl() {\n    return `${this.environment.ssdURL}logout?isMobile=true`;\n  }\n\n  public getUserInfoUrl() {\n    return `${this.environment.ssdURL}user/info`;\n  }\n\n  getSSDBasePath() {\n    return `${this.environment.ssdURL}`;\n  }\n\n  /**\n   *  Returns a absoulte url for the urlPath\n   * @param urlPath - path relative to the current host\n   */\n  private calcRedirectUrl(urlPath) {\n    if (urlPath) {\n      let host: any = new URL(window.location.href).origin; // http://xyz.com\n      if (!isDevMode()) {\n        // Append `webAppMountpoint` to host\n        host = (this.environment.webAppMountpoint !== '' && this.environment.webAppMountpoint !== '/')\n          ? new URL(this.environment.webAppMountpoint, host).href : host;\n        // Get user redirect path with `webAppMountpoint`\n        const mountPointWithRedirect = new URL(urlPath, host).pathname;\n        return host + mountPointWithRedirect;\n      } else {\n        return new URL(urlPath, host);\n      }\n    } else {\n      return window.location.href;\n    }\n\n  }\n\n  /**\n   *\n   * @param property - environment property key\n   */\n  getEnvValue(property): any {\n    return this.environment[property];\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { UtilService } from './services/util.service';\n\ndeclare const cordova;\ndeclare const cookieMaster;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NeutrinosOAuthClientService {\n\n  private cookieName = 'connect.sid';\n  private currentUserInfo;\n\n  private authStateSubject = new Subject();\n\n  constructor(private util: UtilService, private http: HttpClient) {\n  }\n\n  /**\n   * Get user info and tokens of the current logged in user\n   */\n  get userInfo() {\n    return this.currentUserInfo;\n  }\n\n  get isLoggedIn(): boolean {\n    return this.currentUserInfo ? true : false;\n  }\n\n  private setUserInfo(userInfo) {\n    this.currentUserInfo = userInfo;\n  }\n\n  /**\n   * Performs authentication based on configuration and returns user info for mobile env and\n   * for web app user info is stored in memory. Call userInfo getter method to retrieve userinfo\n   * @param redirectBackUrl - url to redirect back to when authentication is done. Valid only for Web.\n   * For mobile use the Promise returned to perform post authentication actions\n   */\n  public login(redirectBackUrl?: string) {\n    return new Promise((resolve, reject) => {\n      if (this.util.getEnvValue('isIDSEnabled') === 'false') {\n        return reject({ message: 'IDS is not enabled in environments' });\n      }\n      if (this.util.getPlatformType() === 'browser') {\n        this.loginWithRedirect(redirectBackUrl);\n        return;\n      }\n      this.loginWithInAppBrowser()\n        .then(tokenset => {\n          return resolve(tokenset);\n        })\n        .catch(authError => {\n          return reject(authError);\n        });\n    });\n  }\n\n  /**\n   *\n   * @param loginUrl - Login url where SSD is hosted\n   */\n  private loginWithInAppBrowser() {\n    return new Promise(async (resolve, reject) => {\n      const scriptURLS = ['/interaction/', '/auth-provider/return']; // execute JS only for this urls\n      const script = await this.getScript(); // Get JS which stores guid and device details in local storage of webview\n      const inAppBrowserRef = cordova.InAppBrowser.open(this.util.getMobileLoginUrl(), '_blank');\n      const executeScriptCB = (event) => {\n        if (event && event.hasOwnProperty('type') && event.hasOwnProperty('url') && event.type === 'loadstop'\n          && this.isURLMatch(event.url, scriptURLS)) {\n          inAppBrowserRef.executeScript({ code: script }, () => { });\n        }\n      };\n      inAppBrowserRef.addEventListener('loadstop', executeScriptCB);\n      const exitCB = () => {\n        return reject({ code: 'auth-cancel', message: 'Authentication cancelled by user' });\n      };\n      inAppBrowserRef.addEventListener('message', (message) => {\n        if (message && message.data && message.data.auth && message.data.auth === 'success') {\n          inAppBrowserRef.removeEventListener('exit', exitCB);\n          inAppBrowserRef.close();\n          this.getUserInfo().then(tokenset => {\n            return resolve(tokenset);\n          }).catch(authErr => {\n            return reject(authErr);\n          });\n        }\n      });\n      // settle the promise if user closed the in app browser manually\n      inAppBrowserRef.addEventListener('exit', exitCB);\n    });\n  }\n\n  private isURLMatch(url, compareWith: Array<string>) {\n    return compareWith.some(u => url.includes(u));\n  }\n\n\n  /**\n   * Returns JS as a string to be executed in inAppBrowser which sets guid and device details in localStorage\n   */\n  private async getScript() {\n    const deviceDetails = JSON.stringify(window['device']) || {};\n    const guid = await this.getuniqueDeviceID();\n    const guidScript = guid ? `localStorage.setItem('guid', '${guid}')` : '';\n    const script = `${guidScript}\n          localStorage.setItem('additionalInfo', '${deviceDetails}')\n          window.isScriptExecuted = true;`;\n    return script;\n  }\n\n  private getuniqueDeviceID() {\n    return new Promise((resolve, reject) => {\n      window['plugins'].uniqueDeviceID.get((guid) => {\n        return resolve(guid);\n      }, error => {\n        return resolve(null);\n      });\n    });\n  }\n\n\n  public getUserInfo(): Promise<{}> {\n    return new Promise((resolve, reject) => {\n      let headers = new HttpHeaders();\n      /*Edge case: Userinfo is retreived from cache when login page is opened and user cancels the login attempt  */\n      headers = headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      headers = headers.set('Pragma', 'no-cache');\n      headers = headers.set('Expires', '0');\n      this.http.get(this.util.getUserInfoUrl(), { headers }).subscribe(tokenset => {\n        this.setUserInfo(tokenset);\n        return resolve(tokenset);\n      }, error => {\n        this.destroyClientSession();\n        return reject(error);\n      });\n    });\n  }\n\n  /*If SSD throws 401 during any http request due to refresh token expiry, cookie expiry or access revoke nullify the userinfo in memory\n  and emit authState event  */\n  public removeUserInfo(errorResponse) {\n    this.destroyClientSession();\n    this.authStateSubject.next(errorResponse);\n  }\n\n  /**\n   * Returns event when Auth state has changed due to session expiry, access revoke or cookie expiry.\n   */\n  public authState(): Observable<any> {\n    return this.authStateSubject.asObservable();\n  }\n\n  private loginWithRedirect(redirectBackUrl): void {\n    window.location.href = this.util.getWebLoginUrl(redirectBackUrl);\n  }\n\n  /**\n   * Restores the connect.sid cookie from session storage during app bootstrap if device is mobile\n   */\n  public async restoreCookies() {\n    return await this.getCookie(this.cookieName, this.util.getSSDBasePath())\n    .then(async (connectSid) => {\n      return await this.setCookie(this.util.getSSDBasePath(), this.cookieName, connectSid);\n    }).catch((error) => {\n      return false;\n    });\n  }\n\n  /**\n   *\n   * @param url - site where the cookie is stored\n   * @param cookieName - name of the cookie to restore\n   * @param cookieValue - value of the cookie to restore\n   */\n  private setCookie(url: string, cookieName: string, cookieValue: string) {\n    return new Promise((resolve, reject) => {\n      cookieMaster.setCookieValue(url, cookieName, cookieValue, () => {\n        return resolve(true);\n      }, (error) => {\n        return reject(false);\n      });\n    });\n  }\n\n  /**\n   *\n   * @param cookieName          name of the cookie to retrieve\n   * @param fullCookieString    String containing all the cookies from an url\n   */\n  private readCookieValueFromCookieString(cookieName, fullCookieString) {\n    let cookieNameWithEqualsSign = cookieName + \"=\";\n    let cookieArray = fullCookieString.split(';');\n    for(let i=0;i < cookieArray.length;i++) {\n        let cookie = cookieArray[i];\n        // Remove unnecessary leading spaces from cookie\n        while (cookie.charAt(0)==' ') {\n          cookie = cookie.substring(1,cookie.length);\n        }\n        // Retrieve and return cookie value\n        if (cookie.indexOf(cookieNameWithEqualsSign) == 0) {\n          return cookie.substring(cookieNameWithEqualsSign.length,cookie.length);\n        }\n    }\n    return null;\n  }\n\n  /**\n   *\n   * @param  cookieName - name of the cookie to retrieve\n   * @param   url - site where the cookie is stored\n   */\n  private getCookie(cookieName: string, url: string): any {\n    return new Promise((resolve, reject) => {\n      window['cordova'].plugins.CookiesPlugin.getCookie(url, (cookies) => {\n        let cookieValue = this.readCookieValueFromCookieString(cookieName,cookies);\n        if(cookieValue) {\n          return resolve(cookieValue);\n        } else {\n          return reject(\"cookie value null\");\n        }\n      }, (error) => {\n        return reject(error);\n      });\n    });\n  }\n\n  /**\n   * Logout the current user, destroys session between client and server.\n   * @param redirectBackUrl - URL where the user is navigated post logout. Valid only for Web.\n   * For mobile use the Promise returned to perform post authentication actions\n   */\n  public logout(redirectBackUrl?: string): Promise<{}> {\n    const logoutUrl = (this.util.getPlatformType() === 'browser') ? this.util.getWebLogoutUrl(redirectBackUrl)\n      : this.util.getMobileLogoutUrl();\n    return new Promise((resolve, reject) => {\n      this.http.get(logoutUrl).subscribe(idsLogoutInfo => {\n        this.destroyIDSSession(idsLogoutInfo)\n          .then(() => {\n            return resolve();\n          })\n          .catch(logoutErr => {\n            return reject(logoutErr);\n          });\n      }, logoutError => {\n        return reject(logoutError);\n      });\n    });\n  }\n\n  private destroyIDSSession(idsInfo) {\n    return new Promise((resolve, reject) => {\n      if (idsInfo['sessionExists'] === false) {\n        // No session present with SSD due to cookie expiry\n        this.destroyClientSession();\n        this.authStateSubject.next({ code: 'NO_SESSION', message: 'User session has already expired' });\n        return resolve();\n      }\n      if (this.util.getPlatformType() === 'browser') {\n        window.location.href = idsInfo['idsURL'];\n      } else {\n        this.logoutWithInappBrowser(idsInfo['idsURL'])\n          .then(() => {\n            return resolve();\n          })\n          .catch(sessionError => {\n            return reject(sessionError);\n          });\n      }\n    });\n  }\n\n  /**\n   *\n   * @param idsLogoutUrl - IDS logout url\n   * Opens InApp browser and destroys the session\n   */\n  private logoutWithInappBrowser(idsLogoutUrl: string) {\n    return new Promise((resolve, reject) => {\n      const exitCB = () => {\n        return reject({ code: 'auth-cancel', message: 'Authentication cancelled by user' });\n      };\n      const inAppBrowserRef = cordova.InAppBrowser.open(idsLogoutUrl, '_blank');\n      inAppBrowserRef.addEventListener('message', (message) => {\n        // Remove exit listener if script closed the in app browser\n        if (message && message.data && message.data.auth && message.data.auth === 'success') {\n          inAppBrowserRef.removeEventListener('exit', exitCB);\n          inAppBrowserRef.close();\n          this.destroyClientSession();\n          return resolve();\n        }\n      });\n      // settle the promise if user closed the in app browser manually\n      inAppBrowserRef.addEventListener('exit', exitCB);\n    });\n  }\n\n  /*Remove persisted cookies in local storage and nullify user info */\n  private destroyClientSession() {\n    this.setUserInfo(null);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, RouterStateSnapshot, Router, Route, ActivatedRouteSnapshot } from '@angular/router';\nimport { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NeutrinosAuthGuardService {\n\n  private currUrl;\n  \n  constructor(private _neutrinosOAuthClientService: NeutrinosOAuthClientService, private _router: Router, private _arouter: ActivatedRoute) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean>   {\n    \n    return new Promise ((resolve, reject) => {\n      this.currUrl = state.url;\n      if(this._neutrinosOAuthClientService.isLoggedIn) {\n        return resolve(true);\n      } else {\n        this._neutrinosOAuthClientService.login().then(tokenSet => {\n          this._router.navigate([this.currUrl]);\n          return resolve(true);\n        })\n        .catch(err => {\n          console.error(err);\n          if(err && err.code == 'auth-cancel') {\n            // Added setTimeout for reloading the current route\n            setTimeout(() => {\n              this._router.navigateByUrl(this.currUrl,{skipLocationChange: true}).then(() => {\n                return resolve(false);\n              });\n            }, 500);\n          } else {\n            return resolve(false);\n          }\n        })\n      }\n    })\n  } \n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'lib-neutrinos-oauth',\n  template: `\n   NOTE: use this component only for testing. Not intended for production\n\n      <button (click)=\"login()\" >  Login </button>\n      <button (click)=\"token()\" > Get tokenset</button>\n      <button (click)=\"logout()\" > Logout </button>\n      <button (click)=\"userinfo()\" > In memory user info </button>\n      <button (click)=\"httpTest()\" > Http Interceptor test </button>\n      `,\n  styles: []\n})\nexport class NeutrinosOauthComponent implements OnInit {\n\n  constructor(public neutrinosOauthService: NeutrinosOAuthClientService, private http: HttpClient) { }\n\n  ngOnInit() {\n    this.neutrinosOauthService.authState().subscribe(state => {\n      console.log(state);\n    });\n  }\n\n  login() {\n    const a = this.neutrinosOauthService.login('/i-am-loggedin').then(tokens => {\n      console.log('got tokens in component', tokens);\n    }).catch(e => {\n      console.error(e);\n    });\n    // console.log(a);\n  }\n\n  token() {\n    this.neutrinosOauthService.getUserInfo().then(t => {\n      console.log('t', t);\n    }).catch(console.log);\n  }\n\n  logout() {\n    this.neutrinosOauthService.logout()\n  }\n\n  userinfo() {\n    alert(JSON.stringify(this.neutrinosOauthService.userInfo))\n    console.log(this.neutrinosOauthService.userInfo);\n  }\n\n  httpTest() {\n    this.http.get('http://localhost:8081/api/ping').subscribe(res => {\n      console.log(res);\n    }, e => {\n      console.error(e);\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { UtilService } from './services/util.service';\nimport { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CookieInterceptorService {\n\n  constructor(private utilService: UtilService, private neutrinosOAuthClientService: NeutrinosOAuthClientService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    /* withCredentials adds cookies to the request for cross site (Only ssd urls).*/\n    const baseUrl = this.utilService.getSSDBasePath();\n    const isSSD = (baseUrl !== '' && request.url.includes(baseUrl));\n    if (isSSD && this.isCrossDomain(baseUrl)) {\n      request = request.clone({\n        withCredentials: true\n      });\n    }\n    return next.handle(request).pipe(map(event => {\n      return event;\n    }), catchError((errorResponse: HttpErrorResponse) => {\n      /*Intercept all requests and remove userinfo and cookies when status is 401 with code SESSION_EXPIRED, which means\n      * cookies have expired or access has been revoked by the OAuth providers hence IDS rejected.  */\n      if (errorResponse && errorResponse.hasOwnProperty('status') && errorResponse.status === 401 &&\n        errorResponse.error.hasOwnProperty('code')) {\n        this.neutrinosOAuthClientService.removeUserInfo(errorResponse.error);\n      }\n      return throwError(errorResponse);\n    }));\n  }\n\n  /**\n   * Returns true is the ssd url is running on a different domain than where UI is hosted.\n   * For mobile Returns false always since UI is already bundled with cordova\n   * If the user is not using IDS and is cross domain isIDSEnabled can be set to false to skip adding withCredentials\n   * @param ssdUrl - string\n   */\n  private isCrossDomain(ssdUrl): boolean {\n    try {\n      ssdUrl = new URL(ssdUrl);\n      return (this.utilService.getPlatformType() === 'browser' && (ssdUrl.host !== location.host)\n        && this.utilService.getEnvValue('isIDSEnabled') === 'true');\n    } catch (e) {\n      return false; // ssdUrl is not a valid URL hence return false;\n    }\n\n  }\n\n}\n","import { NgModule, APP_INITIALIZER } from '@angular/core';\nimport { NeutrinosOauthComponent } from './neutrinos-oauth.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { CookieInterceptorService } from './cookie-interceptor.service';\nimport { NeutrinosOAuthClientService } from './neutrinos-oauth-client.service';\nimport { UtilService } from './services/util.service';\n\nexport function getTokens(neutrinosOAuthService: NeutrinosOAuthClientService, utilService: UtilService) {\n  return () => {\n    /**\n     * For ios restore the cookies and get userInfo since iOS webview does not\n     * persisit the cookie between app launches\n     */\n    if (utilService.getEnvValue('isIDSEnabled') === 'true') {\n      if (window['device'] && window['device'].platform === 'iOS' ) {\n        return neutrinosOAuthService.restoreCookies().then((cookieExist) => {\n          console.log('cookieExist' + cookieExist);\n          cookieExist ? neutrinosOAuthService.getUserInfo()\n          .catch(userInfoErr => {\n            console.log(userInfoErr);\n          }) : null;\n        });\n      } else {\n        // Cannot get cookie for cross domain using JS. hence calling userinfo always\n        return neutrinosOAuthService.getUserInfo()\n        .catch(userInfoErr => {\n          console.log(userInfoErr);\n        });\n      }\n    }\n  };\n}\n\n// @dynamic (https://github.com/ng-packagr/ng-packagr/issues/641)\n@NgModule({\n  declarations: [NeutrinosOauthComponent],\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: CookieInterceptorService,\n      multi: true\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getTokens,\n      deps: [NeutrinosOAuthClientService, UtilService],\n      multi: true\n    },\n  ]\n})\nexport class NeutrinosOAuthClientModule { }\n"]},"metadata":{},"sourceType":"module"}