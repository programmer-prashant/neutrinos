{"ast":null,"code":"import _get from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/10016/neutrinos-studio/assignment-1/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, Injectable, Optional, Inject, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport * as lf from 'localforage';\nimport lf__default from 'localforage';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/cache/cached-item.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Cached data\n * @record\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction CachedItem() {}\n\nif (false) {\n  /**\n   * The data\n   * @type {?}\n   */\n  CachedItem.prototype.data;\n  /**\n   * Whether the data has expired\n   * @type {?}\n   */\n\n  CachedItem.prototype.expired;\n  /**\n   * When the cached item expired or will expire\n   * @type {?}\n   */\n\n  CachedItem.prototype.expires;\n  /**\n   * Number of milliseconds until the data expires\n   * @type {?}\n   */\n\n  CachedItem.prototype.expiresIn;\n  /**\n   * Whether data was found\n   * @type {?}\n   */\n\n  CachedItem.prototype.hasData;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/cache/cached-item-impl.class.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @template T\n */\n\n\nvar CachedItemImpl = /*#__PURE__*/function () {\n  /**\n   * @param {?} data\n   * @param {?} expiryTime\n   */\n  function CachedItemImpl(data, expiryTime) {\n    _classCallCheck(this, CachedItemImpl);\n\n    this.data = data;\n    this.expires = new Date(typeof\n    /** @type {?} */\n    expiryTime === 'number' ? expiryTime : 0);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CachedItemImpl, [{\n    key: \"expired\",\n    get: function get() {\n      /** @type {?} */\n      var value = this.expiresIn === 0;\n\n      if (value) {\n        Object.defineProperty(this, 'expired', {\n          value: value\n        });\n      }\n\n      return value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"expiresIn\",\n    get: function get() {\n      /** @type {?} */\n      var value = Math.max(0, this.expires.getTime() - Date.now());\n\n      if (!value) {\n        Object.defineProperty(this, 'expiresIn', {\n          value: value\n        });\n      }\n\n      return value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasData\",\n    get: function get() {\n      /** @type {?} */\n      var value = this.data != null;\n      Object.defineProperty(this, 'hasData', {\n        value: value\n      });\n      return value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        data: this.data,\n        expired: this.expired,\n        expires: this.expires,\n        expiresIn: this.expiresIn,\n        hasData: this.hasData\n      };\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this.toJSON());\n    }\n  }]);\n\n  return CachedItemImpl;\n}();\n\nif (false) {\n  /** @type {?} */\n  CachedItemImpl.prototype.expires;\n  /** @type {?} */\n\n  CachedItemImpl.prototype.data;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/imports/localforage.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @type {?}\n */\n\n\nvar localForage = 'defineDriver' in lf ? lf : lf__default;\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/misc/driver.enum.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {string} */\n\nvar Driver = {\n  /** The IndexedDB driver */\n  INDEXED_DB:\n  /** @type {?} */\n  localForage.INDEXEDDB,\n\n  /** The localStorage driver */\n  LOCAL_STORAGE:\n  /** @type {?} */\n  localForage.LOCALSTORAGE,\n\n  /** The WebSQL driver */\n  WEB_SQL:\n  /** @type {?} */\n  localForage.WEBSQL\n}; // Clean up after Typescript's two-way enum transpilig\n\nfor (var _i = 0, _arr = [localForage.INDEXEDDB, localForage.LOCALSTORAGE, localForage.WEBSQL]; _i < _arr.length; _i++) {\n  var d = _arr[_i];\n  delete Driver[d];\n}\n/*@__PURE__*/\n\n\nObject.freeze(Driver);\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/misc/injection-tokens.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default ngforage configuration\n * @type {?}\n */\n\nvar DEFAULT_CONFIG = /*@__PURE__*/new InjectionToken('Default NgForage config');\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/ng-forage-config.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @type {?}\n */\n\nvar $defaultConfig = /*@__PURE__*/Symbol('Default Config');\n\nvar NgForageConfig = /*@__PURE__*/function () {\n  var NgForageConfig = /*#__PURE__*/function () {\n    /**\n     * @param {?} conf\n     */\n    function NgForageConfig(conf) {\n      _classCallCheck(this, NgForageConfig);\n\n      this[$defaultConfig] = {\n        cacheTime: 300000,\n        description: '',\n        driver: [Driver.INDEXED_DB, Driver.WEB_SQL, Driver.LOCAL_STORAGE],\n        name: 'ngForage',\n        size: 4980736,\n        storeName: 'ng_forage',\n        version: 1\n      };\n\n      if (conf) {\n        this.configure(conf);\n      }\n    }\n    /**\n     * Cache time in milliseconds\n     * \\@default 300000\n     * @return {?}\n     */\n\n\n    _createClass(NgForageConfig, [{\n      key: \"cacheTime\",\n      get: function get() {\n        return (\n          /** @type {?} */\n          this[$defaultConfig].cacheTime\n        );\n      }\n      /**\n       * @param {?} t\n       * @return {?}\n       */\n      ,\n      set: function set(t) {\n        this[$defaultConfig].cacheTime = t;\n      }\n      /**\n       * Get the compiled configuration\n       * @return {?}\n       */\n\n    }, {\n      key: \"config\",\n      get: function get() {\n        return {\n          cacheTime: this.cacheTime,\n          description: this.description,\n          driver: this.driver,\n          name: this.name,\n          size: this.size,\n          storeName: this.storeName,\n          version: this.version\n        };\n      }\n      /**\n       * A description of the database, essentially for developer usage.\n       * \\@default\n       * @return {?}\n       */\n\n    }, {\n      key: \"description\",\n      get: function get() {\n        return (\n          /** @type {?} */\n          this[$defaultConfig].description\n        );\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this[$defaultConfig].description = v;\n      }\n      /**\n       * The preferred driver(s) to use.\n       * @return {?}\n       */\n\n    }, {\n      key: \"driver\",\n      get: function get() {\n        if (typeof this[$defaultConfig].driver === 'string') {\n          return (\n            /** @type {?} */\n            this[$defaultConfig].driver\n          );\n        }\n\n        return (\n          /** @type {?} */\n          this[$defaultConfig].driver.slice()\n        );\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this[$defaultConfig].driver = v;\n      }\n      /**\n       * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n       * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n       * \\@default ngForage\n       * @return {?}\n       */\n\n    }, {\n      key: \"name\",\n      get: function get() {\n        return (\n          /** @type {?} */\n          this[$defaultConfig].name\n        );\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this[$defaultConfig].name = v;\n      }\n      /**\n       * The size of the database in bytes. Used only in WebSQL for now.\n       * \\@default 4980736\n       * @return {?}\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        return (\n          /** @type {?} */\n          this[$defaultConfig].size\n        );\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this[$defaultConfig].size = v;\n      }\n      /**\n       * The name of the datastore.\n       * In IndexedDB this is the dataStore,\n       * in WebSQL this is the name of the key/value table in the database.\n       * Must be alphanumeric, with underscores.\n       * Any non-alphanumeric characters will be converted to underscores.\n       * \\@default ng_forage\n       * @return {?}\n       */\n\n    }, {\n      key: \"storeName\",\n      get: function get() {\n        return (\n          /** @type {?} */\n          this[$defaultConfig].storeName\n        );\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this[$defaultConfig].storeName = v;\n      }\n      /**\n       * The version of your database. May be used for upgrades in the future; currently unused.\n       * \\@default 1.0\n       * @return {?}\n       */\n\n    }, {\n      key: \"version\",\n      get: function get() {\n        return (\n          /** @type {?} */\n          this[$defaultConfig].version\n        );\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this[$defaultConfig].version = v;\n      }\n      /**\n       * Bulk-set configuration options\n       * @template THIS\n       * @this {THIS}\n       * @param {?} opts The configuration\n       * @return {THIS}\n       */\n\n    }, {\n      key: \"configure\",\n      value: function configure(opts) {\n        opts = opts || {};\n\n        if (opts.driver &&\n        /** @type {?} */\n        opts.driver.slice) {\n          opts.driver =\n          /** @type {?} */\n          opts.driver.slice();\n        }\n\n        Object.assign(\n        /** @type {?} */\n        this[$defaultConfig], opts);\n        return (\n          /** @type {?} */\n          this\n        );\n      }\n      /**\n       * Define a driver\n       *\n       * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the\n       * default drivers do. You’ll also want to resolve or reject promises.\n       * Check any of the {\\@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}\n       * for an idea of how to implement your own, custom driver.\n       * @param {?} spec Driver spec\n       * @return {?}\n       */\n\n    }, {\n      key: \"defineDriver\",\n      value: function defineDriver(spec) {\n        return localForage.defineDriver(spec);\n      }\n      /**\n       * \\@internal\n       * @return {?}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return this.config;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return JSON.stringify(this.toJSON());\n      }\n    }]);\n\n    return NgForageConfig;\n  }();\n\n  NgForageConfig.ɵfac = function NgForageConfig_Factory(t) {\n    return new (t || NgForageConfig)(ɵngcc0.ɵɵinject(DEFAULT_CONFIG, 8));\n  };\n  /** @nocollapse */\n\n\n  NgForageConfig.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function NgForageConfig_Factory() {\n      return new NgForageConfig(ɵɵinject(DEFAULT_CONFIG, 8));\n    },\n    token: NgForageConfig,\n    providedIn: \"root\"\n  });\n  return NgForageConfig;\n}();\n\nif (false) {\n  /* Skipping unnamed member:\n  private readonly [$defaultConfig]: NgForageOptions;*/\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/instance-factory/instance-factory.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @record\n */\n\n\nfunction InstanceMap() {}\n/**\n * \\@internal\n * @type {?}\n */\n\n\nvar stores = {};\n/**\n * \\@internal\n * @param {?=} driver\n * @return {?}\n */\n\nfunction getDriverString(driver) {\n  if (!driver) {\n    return '';\n  } else if (Array.isArray(driver)) {\n    return driver.slice().sort().join(',');\n  } else {\n    return (\n      /** @type {?} */\n      driver\n    );\n  }\n}\n/**\n * \\@internal\n * @param {?} cfg\n * @return {?}\n */\n\n\nfunction getHash(cfg) {\n  return [getDriverString(cfg.driver), cfg.name, cfg.size, cfg.storeName, cfg.version, cfg.description, cfg.cacheTime].join('|');\n}\n/**\n * \\@internal\n * @type {?}\n */\n\n\nvar conf$ = /*@__PURE__*/Symbol('Config');\n\nvar InstanceFactory = /*@__PURE__*/function () {\n  var InstanceFactory = /*#__PURE__*/function () {\n    /**\n     * \\@internal\n     * @param {?} conf\n     */\n    function InstanceFactory(conf) {\n      _classCallCheck(this, InstanceFactory);\n\n      this[conf$] = conf;\n    }\n    /**\n     * @param {?} cfg\n     * @return {?}\n     */\n\n\n    _createClass(InstanceFactory, [{\n      key: \"getInstance\",\n      value: function getInstance(cfg) {\n        cfg = Object.assign({}, this[conf$].config, cfg || {});\n        /** @type {?} */\n\n        var hash = getHash(cfg);\n\n        if (!stores[hash]) {\n          stores[hash] = localForage.createInstance(cfg);\n        }\n\n        return stores[hash];\n      }\n    }]);\n\n    return InstanceFactory;\n  }();\n\n  InstanceFactory.ɵfac = function InstanceFactory_Factory(t) {\n    return new (t || InstanceFactory)(ɵngcc0.ɵɵinject(NgForageConfig));\n  };\n  /** @nocollapse */\n\n\n  InstanceFactory.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function InstanceFactory_Factory() {\n      return new InstanceFactory(ɵɵinject(NgForageConfig));\n    },\n    token: InstanceFactory,\n    providedIn: \"root\"\n  });\n  return InstanceFactory;\n}();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/base-configurable-impl.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @type {?}\n */\n\n\nvar store$ = /*@__PURE__*/Symbol('Store');\n\nvar BaseConfigurableImpl = /*@__PURE__*/function () {\n  var BaseConfigurableImpl = /*#__PURE__*/function () {\n    /**\n     * \\@internal\n     * @param {?} config\n     * @param {?} instanceFactory\n     */\n    function BaseConfigurableImpl(config, instanceFactory) {\n      _classCallCheck(this, BaseConfigurableImpl);\n\n      /**\n       * \\@internal\n       */\n      this.config = {};\n      /**\n       * \\@internal\n       */\n\n      this.storeNeedsRecalc = true;\n      this.baseConfig = config;\n      this.fact = instanceFactory;\n    }\n    /**\n     * A description of the database, essentially for developer usage.\n     * \\@default \"\"\n     * @return {?}\n     */\n\n\n    _createClass(BaseConfigurableImpl, [{\n      key: \"description\",\n      get: function get() {\n        return this.config.description || this.baseConfig.description;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this.config.description = v;\n        this.storeNeedsRecalc = true;\n      }\n      /**\n       * The preferred driver(s) to use.\n       * \\@default IndexedDB, WebSQL and localStorage\n       * @return {?}\n       */\n\n    }, {\n      key: \"driver\",\n      get: function get() {\n        return this.config.driver || this.baseConfig.driver;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this.config.driver = v;\n        this.storeNeedsRecalc = true;\n      }\n      /**\n       * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n       * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n       * \\@default ngForage\n       * @return {?}\n       */\n\n    }, {\n      key: \"name\",\n      get: function get() {\n        return this.config.name || this.baseConfig.name;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this.config.name = v;\n        this.storeNeedsRecalc = true;\n      }\n      /**\n       * The size of the database in bytes. Used only in WebSQL for now.\n       * \\@default 4980736\n       * @return {?}\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this.config.size || this.baseConfig.size;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this.config.size = v;\n        this.storeNeedsRecalc = true;\n      }\n      /**\n       * The name of the datastore.\n       * In IndexedDB this is the dataStore,\n       * in WebSQL this is the name of the key/value table in the database.\n       * Must be alphanumeric, with underscores.\n       * Any non-alphanumeric characters will be converted to underscores.\n       * \\@default ng_forage\n       * @return {?}\n       */\n\n    }, {\n      key: \"storeName\",\n      get: function get() {\n        return this.config.storeName || this.baseConfig.storeName;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this.config.storeName = v;\n        this.storeNeedsRecalc = true;\n      }\n      /**\n       * The version of your database. May be used for upgrades in the future; currently unused.\n       * \\@default 1.0\n       * @return {?}\n       */\n\n    }, {\n      key: \"version\",\n      get: function get() {\n        return 'version' in this.config ?\n        /** @type {?} */\n        this.config.version : this.baseConfig.version;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this.config.version = v;\n        this.storeNeedsRecalc = true;\n      }\n      /**\n       * \\@internal\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"finalConfig\",\n      get: function get() {\n        return Object.assign({}, this.baseConfig.config, this.config);\n      }\n      /**\n       * \\@internal\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"store\",\n      get: function get() {\n        if (this.storeNeedsRecalc || !this[store$]) {\n          this[store$] = this.fact.getInstance(this.finalConfig);\n          this.storeNeedsRecalc = false;\n        }\n\n        return this[store$];\n      }\n      /**\n       * Bulk-set configuration options\n       * @template THIS\n       * @this {THIS}\n       * @param {?} opts The configuration\n       * @return {THIS}\n       */\n\n    }, {\n      key: \"configure\",\n      value: function configure(opts) {\n        opts = opts || {};\n\n        if (Array.isArray(opts.driver)) {\n          opts.driver = opts.driver.slice();\n        }\n\n        Object.assign(\n        /** @type {?} */\n        this.config, opts);\n\n        /** @type {?} */\n        this.storeNeedsRecalc = true;\n        return (\n          /** @type {?} */\n          this\n        );\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          description: this.description,\n          driver: this.driver,\n          name: this.name,\n          size: this.size,\n          storeName: this.storeName,\n          version: this.version\n        };\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return JSON.stringify(this.toJSON());\n      }\n    }]);\n\n    return BaseConfigurableImpl;\n  }();\n\n  BaseConfigurableImpl.ɵfac = function BaseConfigurableImpl_Factory(t) {\n    return new (t || BaseConfigurableImpl)(ɵngcc0.ɵɵinject(NgForageConfig), ɵngcc0.ɵɵinject(InstanceFactory));\n  };\n\n  BaseConfigurableImpl.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BaseConfigurableImpl,\n    factory: BaseConfigurableImpl.ɵfac\n  });\n  return BaseConfigurableImpl;\n}();\n\nif (false) {\n  /**\n   * \\@internal\n   * @type {?}\n   * @protected\n   */\n  BaseConfigurableImpl.prototype.baseConfig;\n  /**\n   * \\@internal\n   * @type {?}\n   * @protected\n   */\n\n  BaseConfigurableImpl.prototype.config;\n  /**\n   * \\@internal\n   * @type {?}\n   * @protected\n   */\n\n  BaseConfigurableImpl.prototype.fact;\n  /**\n   * \\@internal\n   * @type {?}\n   * @protected\n   */\n\n  BaseConfigurableImpl.prototype.storeNeedsRecalc;\n}\n\nvar NgForage = /*@__PURE__*/function () {\n  var NgForage = /*#__PURE__*/function (_BaseConfigurableImpl) {\n    _inherits(NgForage, _BaseConfigurableImpl);\n\n    var _super = _createSuper(NgForage);\n\n    function NgForage() {\n      _classCallCheck(this, NgForage);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(NgForage, [{\n      key: \"activeDriver\",\n      get:\n      /**\n       * Returns the name of the driver being used, or null if none can be used.\n       * @return {?}\n       */\n      function get() {\n        return this.store.driver();\n      }\n      /**\n       * Removes every key from the database, returning it to a blank slate.\n       *\n       * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n       * @return {?}\n       */\n\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        return this.store.clear();\n      }\n      /**\n       * Make a clone of the instance\n       * @param {?=} config Optional configuration\n       * @return {?}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone(config) {\n        /** @type {?} */\n        var inst = new NgForage(this.baseConfig, this.fact);\n        inst.configure(Object.assign(this.finalConfig, config || {}));\n        return inst;\n      }\n      /**\n       * Gets an item from the storage library.\n       * If the key does not exist, getItem() will return null.\n       * @template T\n       * @param {?} key Data key\n       * @return {?}\n       */\n\n    }, {\n      key: \"getItem\",\n      value: function getItem(key) {\n        return this.store.getItem(key);\n      }\n      /**\n       * Iterate over all value/key pairs in datastore.\n       * <i>iteratee</i> is called once for each pair, with the following arguments:\n       * <ol>\n       *   <li>Value</li>\n       *   <li>Key</li>\n       *   <li>iterationNumber - one-based number</li>\n       * </ol>\n       * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n       * @template T, U\n       * @param {?} iteratee\n       * @return {?}\n       */\n\n    }, {\n      key: \"iterate\",\n      value: function iterate(iteratee) {\n        return this.store.iterate(iteratee);\n      }\n      /**\n       * Get the name of a key based on its ID.\n       * @param {?} index\n       * @return {?}\n       */\n\n    }, {\n      key: \"key\",\n      value: function key(index) {\n        return this.store.key(index);\n      }\n      /**\n       * Get the list of all keys in the datastore.\n       * @return {?}\n       */\n\n    }, {\n      key: \"keys\",\n      value: function keys() {\n        return this.store.keys();\n      }\n      /**\n       * Gets the number of keys in the offline store (i.e. its “length”).\n       * @return {?}\n       */\n\n    }, {\n      key: \"length\",\n      value: function length() {\n        return this.store.length();\n      }\n      /**\n       * Even though localForage queues up all of its data API method calls,\n       * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n       * That’s useful in cases like when we want to know which driver localForage has settled down using.\n       * @return {?}\n       */\n\n    }, {\n      key: \"ready\",\n      value: function ready() {\n        return this.store.ready();\n      }\n      /**\n       * Removes the value of a key from the offline store.\n       * @param {?} key Data key\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeItem\",\n      value: function removeItem(key) {\n        return this.store.removeItem(key);\n      }\n      /**\n       * Saves data to an offline store. You can store the following types of JavaScript objects:\n       * <ul>\n       *  <li>Array</li>\n       *  <li>ArrayBuffer</li>\n       *  <li>Blob</li>\n       *  <li>Float32Array</li>\n       *  <li>Float64Array</li>\n       *  <li>Int8Array</li>\n       *  <li>Int16Array</li>\n       *  <li>Int32Array</li>\n       *  <li>Number</li>\n       *  <li>Object</li>\n       *  <li>Uint8Array</li>\n       *  <li>Uint8ClampedArray</li>\n       *  <li>Uint16Array</li>\n       *  <li>Uint32Array</li>\n       *  <li>String</li>\n       * </ul>\n       * @template T\n       * @param {?} key Data key\n       * @param {?} data Data\n       * @return {?}\n       */\n\n    }, {\n      key: \"setItem\",\n      value: function setItem(key, data) {\n        return this.store.setItem(key, data);\n      }\n      /**\n       * Check whether the given driver is supported/registered.\n       * @param {?} driver Driver name\n       * @return {?}\n       */\n\n    }, {\n      key: \"supports\",\n      value: function supports(driver) {\n        return this.store.supports(\n        /** @type {?} */\n        driver);\n      }\n    }]);\n\n    return NgForage;\n  }(BaseConfigurableImpl);\n\n  NgForage.ɵfac = function NgForage_Factory(t) {\n    return ɵNgForage_BaseFactory(t || NgForage);\n  };\n  /** @nocollapse */\n\n\n  NgForage.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function NgForage_Factory() {\n      return new NgForage(ɵɵinject(NgForageConfig), ɵɵinject(InstanceFactory));\n    },\n    token: NgForage,\n    providedIn: \"root\"\n  });\n  return NgForage;\n}();\n\nvar ɵNgForage_BaseFactory =\n/*@__PURE__*/\n\n/*@__PURE__*/\nɵngcc0.ɵɵgetInheritedFactory(NgForage);\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/cache/ng-forage-cache.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @record\n */\n\nfunction CacheKeys() {}\n\nif (false) {\n  /** @type {?} */\n  CacheKeys.prototype.data;\n  /** @type {?} */\n\n  CacheKeys.prototype.expiry;\n}\n/**\n * \\@internal\n * @param {?} mainKey\n * @return {?}\n */\n\n\nfunction calculateCacheKeys(mainKey) {\n  return {\n    data: \"\".concat(mainKey, \"_data\"),\n    expiry: \"\".concat(mainKey, \"_expiry\")\n  };\n}\n/**\n * \\@internal\n * @template T\n * @param {?} r\n * @return {?}\n */\n\n\nfunction toCachedItem(r) {\n  return new CachedItemImpl(r[0], r[1]);\n}\n/**\n * \\@internal\n * @template T\n * @param {?} r\n * @return {?}\n */\n\n\nfunction head(r) {\n  return r[0];\n}\n/**\n * \\@internal\n * @return {?}\n */\n// tslint:disable-next-line:no-empty\n\n\nfunction toVoid() {}\n\nvar NgForageCache = /*@__PURE__*/function () {\n  var NgForageCache = /*#__PURE__*/function (_NgForage) {\n    _inherits(NgForageCache, _NgForage);\n\n    var _super2 = _createSuper(NgForageCache);\n\n    function NgForageCache() {\n      _classCallCheck(this, NgForageCache);\n\n      return _super2.apply(this, arguments);\n    }\n\n    _createClass(NgForageCache, [{\n      key: \"cacheTime\",\n      get:\n      /**\n       * Cache time in milliseconds\n       * \\@default 300000\n       * @return {?}\n       */\n      function get() {\n        return this.config.cacheTime || this.baseConfig.cacheTime;\n      }\n      /**\n       * @param {?} t\n       * @return {?}\n       */\n      ,\n      set: function set(t) {\n        this.config.cacheTime = t;\n        this.storeNeedsRecalc = true;\n      }\n      /**\n       * @inheritDoc\n       * @param {?=} config\n       * @return {?}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone(config) {\n        /** @type {?} */\n        var inst = new NgForageCache(this.baseConfig, this.fact);\n        inst.configure(Object.assign(this.finalConfig, config || {}));\n        return inst;\n      }\n      /**\n       * Retrieve data\n       * @template T\n       * @param {?} key Data key\n       * @return {?}\n       */\n\n    }, {\n      key: \"getCached\",\n      value: function getCached(key) {\n        /** @type {?} */\n        var keys = calculateCacheKeys(key);\n        /** @type {?} */\n\n        var dataPromise = this.getItem(keys.data);\n        /** @type {?} */\n\n        var expiryPromise = this.getItem(keys.expiry);\n        return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);\n      }\n      /**\n       * Remove data\n       * @param {?} key Data key\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeCached\",\n      value: function removeCached(key) {\n        /** @type {?} */\n        var keys = calculateCacheKeys(key);\n        /** @type {?} */\n\n        var dataPromise = this.removeItem(keys.data);\n        /** @type {?} */\n\n        var expiryPromise = this.removeItem(keys.expiry);\n        return Promise.all([dataPromise, expiryPromise]).then(toVoid);\n      }\n      /**\n       * Set data\n       * @template T\n       * @param {?} key Data key\n       * @param {?} data Data to set\n       * @param {?=} cacheTime\n       * @return {?}\n       */\n\n    }, {\n      key: \"setCached\",\n      value: function setCached(key, data, cacheTime) {\n        /** @type {?} */\n        var keys = calculateCacheKeys(key);\n        /** @type {?} */\n\n        var expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;\n        /** @type {?} */\n\n        var dataPromise = this.setItem(keys.data, data);\n        /** @type {?} */\n\n        var expiryPromise = this.setItem(keys.expiry, Date.now() + expiry);\n        return Promise.all([dataPromise, expiryPromise]).then(head);\n      }\n      /**\n       * \\@internal\n       * @return {?}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return Object.assign(\n        /** @type {?} */\n        _get(_getPrototypeOf(NgForageCache.prototype), \"toJSON\", this).call(this), {\n          cacheTime: this.cacheTime\n        });\n      }\n    }]);\n\n    return NgForageCache;\n  }(NgForage);\n\n  NgForageCache.ɵfac = function NgForageCache_Factory(t) {\n    return ɵNgForageCache_BaseFactory(t || NgForageCache);\n  };\n  /** @nocollapse */\n\n\n  NgForageCache.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function NgForageCache_Factory() {\n      return new NgForageCache(ɵɵinject(NgForageConfig), ɵɵinject(InstanceFactory));\n    },\n    token: NgForageCache,\n    providedIn: \"root\"\n  });\n  return NgForageCache;\n}();\n\nvar ɵNgForageCache_BaseFactory =\n/*@__PURE__*/\n\n/*@__PURE__*/\nɵngcc0.ɵɵgetInheritedFactory(NgForageCache);\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/cache/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/base-configurable.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A configurable object\n * @record\n */\n\nfunction BaseConfigurable() {}\n\nif (false) {\n  /**\n   * A description of the database, essentially for developer usage.\n   * \\@default \"\"\n   * @type {?}\n   */\n  BaseConfigurable.prototype.description;\n  /**\n   * The preferred driver(s) to use.\n   * \\@default IndexedDB, WebSQL & localStorage\n   * @type {?}\n   */\n\n  BaseConfigurable.prototype.driver;\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * \\@default ngForage\n   * @type {?}\n   */\n\n  BaseConfigurable.prototype.name;\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * \\@default 4980736\n   * @type {?}\n   */\n\n  BaseConfigurable.prototype.size;\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * \\@default ng_forage\n   * @type {?}\n   */\n\n  BaseConfigurable.prototype.storeName;\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * \\@default 1.0\n   * @type {?}\n   */\n\n  BaseConfigurable.prototype.version;\n  /**\n   * Bulk-set configuration options\n   * @template THIS\n   * @this {THIS}\n   * @param {?} opts The configuration\n   * @return {THIS}\n   */\n\n  BaseConfigurable.prototype.configure = function (opts) {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/cache-configurable.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A cacheable configurable object\n * @record\n */\n\n\nfunction CacheConfigurable() {}\n\nif (false) {\n  /**\n   * Cache time in milliseconds\n   * \\@default 300000\n   * @type {?}\n   */\n  CacheConfigurable.prototype.cacheTime;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/ng-forage-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/config/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/dedicated/ng-forage-cache-dedicated.class.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n */\n\n\nvar NgForageCacheDedicated = /*#__PURE__*/function (_NgForageCache) {\n  _inherits(NgForageCacheDedicated, _NgForageCache);\n\n  var _super3 = _createSuper(NgForageCacheDedicated);\n\n  function NgForageCacheDedicated() {\n    _classCallCheck(this, NgForageCacheDedicated);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(NgForageCacheDedicated, [{\n    key: \"clone\",\n    value:\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function clone(config) {\n      /** @type {?} */\n      var inst = new NgForageCacheDedicated(this.baseConfig, this.fact);\n      inst.configure(Object.assign(this.finalConfig, config || {}));\n      return inst;\n    }\n  }]);\n\n  return NgForageCacheDedicated;\n}(NgForageCache);\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/dedicated/ng-forage-dedicated.class.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n */\n\n\nvar NgForageDedicated = /*#__PURE__*/function (_NgForage2) {\n  _inherits(NgForageDedicated, _NgForage2);\n\n  var _super4 = _createSuper(NgForageDedicated);\n\n  function NgForageDedicated() {\n    _classCallCheck(this, NgForageDedicated);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(NgForageDedicated, [{\n    key: \"clone\",\n    value:\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function clone(config) {\n      /** @type {?} */\n      var inst = new NgForageDedicated(this.baseConfig, this.fact);\n      inst.configure(Object.assign(this.finalConfig, config || {}));\n      return inst;\n    }\n  }]);\n\n  return NgForageDedicated;\n}(NgForage);\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/dedicated/dedicated-instance-factory.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@internal\n * @type {?}\n */\n\n\nvar conf$$1 = /*@__PURE__*/Symbol('NgForageConfig');\n/**\n * \\@internal\n * @type {?}\n */\n\nvar if$ = /*@__PURE__*/Symbol('InstanceFactory');\n\nvar DedicatedInstanceFactory = /*@__PURE__*/function () {\n  var DedicatedInstanceFactory = /*#__PURE__*/function () {\n    /**\n     * @param {?} conf\n     * @param {?} instFact\n     */\n    function DedicatedInstanceFactory(conf, instFact) {\n      _classCallCheck(this, DedicatedInstanceFactory);\n\n      this[conf$$1] = conf;\n      this[if$] = instFact;\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n\n\n    _createClass(DedicatedInstanceFactory, [{\n      key: \"createCache\",\n      value: function createCache(config) {\n        /** @type {?} */\n        var inst = new NgForageCacheDedicated(this[conf$$1], this[if$]);\n\n        if (config) {\n          inst.configure(config);\n        }\n\n        return inst;\n      }\n      /**\n       * @param {?=} config\n       * @return {?}\n       */\n\n    }, {\n      key: \"createNgForage\",\n      value: function createNgForage(config) {\n        /** @type {?} */\n        var inst = new NgForageDedicated(this[conf$$1], this[if$]);\n\n        if (config) {\n          inst.configure(config);\n        }\n\n        return inst;\n      }\n    }]);\n\n    return DedicatedInstanceFactory;\n  }();\n\n  DedicatedInstanceFactory.ɵfac = function DedicatedInstanceFactory_Factory(t) {\n    return new (t || DedicatedInstanceFactory)(ɵngcc0.ɵɵinject(NgForageConfig), ɵngcc0.ɵɵinject(InstanceFactory));\n  };\n  /** @nocollapse */\n\n\n  DedicatedInstanceFactory.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function DedicatedInstanceFactory_Factory() {\n      return new DedicatedInstanceFactory(ɵɵinject(NgForageConfig), ɵɵinject(InstanceFactory));\n    },\n    token: DedicatedInstanceFactory,\n    providedIn: \"root\"\n  });\n  return DedicatedInstanceFactory;\n}();\n\nif (false) {\n  /* Skipping unnamed member:\n  private readonly [conf$]: NgForageConfig;*/\n\n  /* Skipping unnamed member:\n  private readonly [if$]: InstanceFactory;*/\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/dedicated/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/instance-factory/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/main/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/misc/driver-type.type.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngforage.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { BaseConfigurableImpl, CachedItemImpl, DEFAULT_CONFIG, DedicatedInstanceFactory, Driver, InstanceFactory, NgForage, NgForageCache, NgForageCacheDedicated, NgForageConfig, NgForageDedicated };","map":null,"metadata":{},"sourceType":"module"}